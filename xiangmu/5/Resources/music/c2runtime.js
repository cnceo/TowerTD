// Generated by Construct 2, the HTML5 game and app creator :: http://www.scirra.com
//////////////////////////////////////
// COCOONJS.JS                      //
//////////////////////////////////////

(function()
{
	// There should not be a CocoonJS object when this code is executed.
	// if (typeof window.CocoonJS !== 'undefined') throw("This is strange, a CocoonJS object already exists when trying to create it.");

    /**
    * The basic object for all the CocoonJS related specific APIs === extensions.
    * @namespace
    */
    CocoonJS = window.CocoonJS ? window.CocoonJS : {};

	CocoonJS.nativeExtensionObjectAvailable = typeof window.ext !== 'undefined';

	/**
	* This type represents a 2D size structure with horizontal and vertical values.
	* @namespace
	*/
	CocoonJS.Size = {
		/**
		* The horizontal size value.
		*/
		width : 0,

		/**
		* The vertical size value.
		*/
		height : 0
	};

	/**
	* This utility function allows to create an object oriented like hierarchy between two functions using their prototypes.
	* This function adds a "superclass" and a "__super" attributes to the subclass and it's functions to reference the super class.
	* @param {function} subc The subclass function.
	* @param {function} superc The superclass function.
	*/
	CocoonJS.extend = function(subc, superc) {
	    var subcp = subc.prototype;

	    // Class pattern.
	    var CocoonJSExtendHierarchyChainClass = function() {};
	    CocoonJSExtendHierarchyChainClass.prototype = superc.prototype;

	    subc.prototype = new CocoonJSExtendHierarchyChainClass();       // chain prototypes.
	    subc.superclass = superc.prototype;
	    subc.prototype.constructor = subc;

	    // Reset constructor. See Object Oriented Javascript for an in-depth explanation of this.
	    if (superc.prototype.constructor === Object.prototype.constructor) {
	        superc.prototype.constructor = superc;
	    }

	    // Check all the elements in the subclass prototype and add them to the chain object's prototype.
	    for (var method in subcp) {
	        if (subcp.hasOwnProperty(method)) {
	            subc.prototype[method] = subcp[method];

	            // // tenemos en super un metodo con igual nombre.
	            // if ( superc.prototype[method]) 
	            // {
	            //     subc.prototype[method]= (function(fn, fnsuper) 
	            //     {
	            //         return function() 
	            //         {
	            //             var prevMethod= this.__super;

	            //             this.__super= fnsuper;

	            //             var retValue= fn.apply(
	            //                     this,
	            //                     Array.prototype.slice.call(arguments) );

	            //             this.__super= prevMethod;

	            //             return retValue;
	            //         };
	            //     })(subc.prototype[method], superc.prototype[method]);
	            // }
	        }
	    }
	}

	/**
	* IMPORTANT: This function should only be used by Ludei.
	* This function allows a call to the native extension object function reusing the same arguments object.
	* Why is interesting to use this function instead of calling the native object's function directly?
	* As the CocoonJS object functions expicitly receive parameters, if they are not present and the native call is direcly mapped,
	* undefined arguments are passed to the native side. Some native functions do not check the parameters validation
	* correctly (just check the number of parameters passed).
	* Another solution instead of using this function call is to correctly check if the parameters are valid (not undefined) to make the
	* call, but it takes more work than using this approach.
	* @static
	* @param {string} nativeExtensionObjectName The name of the native extension object name. The object that is a member of the 'ext' object.
	* @param {string} nativeFunctionName The name of the function to be called inside the native extension object.
	* @param {object} arguments The arguments object of the CocoonJS extension object function. It contains all the arguments passed to the CocoonJS extension object function and these are the ones that will be passed to the native call too.
	* @param {boolean} [async] A flag to indicate if the makeCall (false or undefined) or the makeCallAsync function should be used to perform the native call.
	* @returns Whatever the native function call returns.
	*/
	CocoonJS.makeNativeExtensionObjectFunctionCall = function(nativeExtensionObjectName, nativeFunctionName, args, async) {
		if (CocoonJS.nativeExtensionObjectAvailable) {
			var argumentsArray = Array.prototype.slice.call(args);
			argumentsArray.unshift(nativeFunctionName);
			var nativeExtensionObject = ext[nativeExtensionObjectName];
			var makeCallFunction = async ? nativeExtensionObject.makeCallAsync : nativeExtensionObject.makeCall;
			var ret = makeCallFunction.apply(nativeExtensionObject, argumentsArray);
			var finalRet = ret;
			if (typeof ret === "string") {
				try	{
					finalRet = JSON.parse(ret);
				}
				catch(error) {
				}
			}
			return finalRet;
		}
	};

	/**
	* Returns an object retrieved from a path specified by a dot specified text path starting from a given base object.
	* It could be useful to find the reference of an object from a defined base object. For example the base object could be window and the
	* path could be "CocoonJS.App" or "document.body".
	* @param {Object} baseObject The object to start from to find the object using the given text path.
	* @param {string} objectPath The path in the form of a text using the dot notation. i.e. "document.body"
	* For example:
	* var body = getObjectFromPath(window, "document.body");
	*/
	CocoonJS.getObjectFromPath = function(baseObject, objectPath) {
    	var parts = objectPath.split('.');
    	var obj = baseObject;
        for (var i = 0, len = parts.length; i < len; ++i) 
        {
            obj[parts[i]] = obj[parts[i]] || undefined;
    		obj = obj[parts[i]];
    	}
    	return obj;
 	};

 	/**
 	* Returns the key for a value in a dictionary. It looks for an specific value inside a dictionary and returns the corresponding key.
 	* @param {Object} dictionary The dictionary to look for the value in and get the corresponding key.
 	* @param {Object} value The value to look for inside the dictionary and return it's corresponding key.
 	* @return The key that corresponds to the given value it is has been found or null.
 	*/
 	CocoonJS.getKeyForValueInDictionary = function(dictionary, value) {
        var finalKey = null;
        for (var key in dictionary) {
            if (dictionary[key] === value)            {
                finalKey = key;
                break;
            }
        }
        return finalKey;
 	}

 	/**
 	* Finds a string inside a given array of strings by looking for a given substring. It can also
 	* specify if the search must be performed taking care or not of the case sensitivity.
 	* @param {Array} stringArray The array of strings in which to to look for the string.
 	* @param {string} subString The substring to look for inside all the strings of the array.
 	* @param {boolean} caseSensitive A flag to indicate if the search must be performed taking case of the 
 	* case sensitiveness (true) or not (false).
 	* @return {string} The string that has been found or null if the substring is not inside any of the string of the array.
 	*/
 	CocoonJS.findStringInStringArrayThatIsIndexOf = function(stringArray, subString, caseSensitive) {
 		var foundString = null;
 		subString = caseSensitive ? subString : subString.toUpperCase();
 		for (var i = 0; foundString == null && i < stringArray.length; i++)	{
 			foundString = caseSensitive ? stringArray[i] : stringArray[i].toUpperCase();
 			foundString = foundString.indexOf(subString) >= 0 ? stringArray[i] : null; 
 		}
 		return foundString;
 	};

	/**
	* A class that represents objects to handle events. Event handlers have always the same structure:
	* Mainly they provide the addEventListener and removeEventListener functions.
	* Both functions receive a callback function that will be added or removed. All the added callback
	* functions will be called when the event takes place.
	* Additionally they also allow the addEventListenerOnce and notifyEventListeners functions.
	* @constructor
	* @param {string} nativeExtensionObjectName The name of the native extension object (inside the ext object) to be used.
	* @param {string} cocoonJSExtensionObjectName The name of the sugarized extension object.
	* @param {string} nativeEventName The name of the native event inside the ext object.
	* @param {number} [chainFunction] An optional function used to preprocess the listener callbacks. This function, if provided,
	* will be called before any of the other listeners.
	*/
	CocoonJS.EventHandler = function(nativeExtensionObjectName, cocoonJSExtensionObjectName, nativeEventName, chainFunction) {
		this.listeners = [];
		this.listenersOnce = [];
		this.chainFunction = chainFunction;

		/**
		* Adds a callback function so it can be called when the event takes place.
		* @param {function} listener The callback function to be added to the event handler object. See the referenced Listener function documentation for more detail in each event handler object's documentation.
		*/
		this.addEventListener = function(listener) {
			if (chainFunction) {
				var f = function() {
					chainFunction.call(this, arguments.callee.sourceListener, Array.prototype.slice.call(arguments)); 
				};
				listener.CocoonJSEventHandlerChainFunction = f;
				f.sourceListener = listener;
				listener = f;
			}

			var cocoonJSExtensionObject = CocoonJS.getObjectFromPath(CocoonJS, cocoonJSExtensionObjectName);
            if (cocoonJSExtensionObject && cocoonJSExtensionObject.nativeExtensionObjectAvailable) {
                ext[nativeExtensionObjectName].addEventListener(nativeEventName, listener);
            }
            else {
                var indexOfListener = this.listeners.indexOf(listener);
                if (indexOfListener < 0) {
                	this.listeners.push(listener);
                }
            }
		};

        this.addEventListenerOnce = function(listener)
		{
			if (chainFunction) {
				var f = function() { chainFunction(arguments.callee.sourceListener,Array.prototype.slice.call(arguments)); };
				f.sourceListener = listener;
				listener = f;
			}

			var cocoonJSExtensionObject = CocoonJS.getObjectFromPath(CocoonJS, cocoonJSExtensionObjectName);
            if (cocoonJSExtensionObject.nativeExtensionObjectAvailable) {
                ext[nativeExtensionObjectName].addEventListenerOnce(nativeEventName, listener);
            }
            else
            {
                var indexOfListener = this.listeners.indexOf(listener);
                if (indexOfListener < 0)
                {
                	this.listenersOnce.push(listener);
                }
            }
		};

        /**
         * Removes a callback function that was added to the event handler so it won't be called when the event takes place.
         * @param {function} listener The callback function to be removed from the event handler object. See the referenced Listener function documentation for more detail in each event handler object's documentation.
         */
        this.removeEventListener = function (listener) {

        	if (chainFunction) {
        		listener = listener.CocoonJSEventHandlerChainFunction;
        		delete listener.CocoonJSEventHandlerChainFunction;
        	}

			var cocoonJSExtensionObject = CocoonJS.getObjectFromPath(CocoonJS, cocoonJSExtensionObjectName);
            if (cocoonJSExtensionObject.nativeExtensionObjectAvailable) {
                ext[nativeExtensionObjectName].removeEventListener(nativeEventName, listener);
            }
            else {
                var indexOfListener = this.listeners.indexOf(listener);
                if (indexOfListener >= 0) {
                    this.listeners.splice(indexOfListener, 1);
                }
            }
        };

		this.notifyEventListeners = function() {
			var cocoonJSExtensionObject = CocoonJS.getObjectFromPath(CocoonJS, cocoonJSExtensionObjectName);
            if (cocoonJSExtensionObject && cocoonJSExtensionObject.nativeExtensionObjectAvailable) {
                ext[nativeExtensionObjectName].notifyEventListeners(nativeEventName);
            } else {

                var argumentsArray= Array.prototype.slice.call(arguments);
                var listeners =     Array.prototype.slice.call(this.listeners);
                var listenersOnce = Array.prototype.slice.call(this.listenersOnce);
                var _this = this;
                // Notify listeners after a while ;) === do not block this thread.
                setTimeout(function() {
                    for (var i = 0; i < listeners.length; i++) {
                        listeners[i].apply(_this, argumentsArray);
                    }
                    for (var i = 0; i < listenersOnce.length; i++) {
                        listenersOnce[i].apply(_this, argumentsArray);
                    }
                }, 0);

                _this.listenersOnce= [];
            }
		};
		return this;
	};

	/**
	* A simple timer class. Update it every loop iteration and get values from accumulated time to elapsed time in seconds or milliseconds.
	*/
	CocoonJS.Timer = function() {
		this.reset();
		return this;
	};

	CocoonJS.Timer.prototype = {
		currentTimeInMillis : 0,
		lastTimeInMillis : 0,
		elapsedTimeInMillis : 0,
		elapsedTimeInSeconds : 0,
		accumTimeInMillis : 0,

		/**
		Resets the timer to 0.
		*/
		reset : function() {
			this.currentTimeInMillis = this.lastTimeInMillis = new Date().getTime();
			this.accumTimeInMillis = this.elapsedTimeInMillis = this.elapsedTimeInSeconds = 0;
		},

		/**
		Updates the timer calculating the elapsed time between update calls.
		*/
		update : function() {
			this.currentTimeInMillis = new Date().getTime();
			this.elapsedTimeInMillis = this.currentTimeInMillis - this.lastTimeInMillis;
			this.elapsedTimeInSeconds = this.elapsedTimeInMillis / 1000.0;
			this.lastTimeInMillis = this.currentTimeInMillis;
			this.accumTimeInMillis += this.elapsedTimeInMillis;
		}
	};

	// CocoonJS.FindAllNativeBindingsInCocoonJSExtensionObject = function(cocoonJSExtensionObject, nativeFunctionBindingCallback, nativeEventBindingCallback)
	// {
	// 	for (var cocoonJSExtensionObjectAttributeName in cocoonJSExtensionObject)
	// 	{
	// 		var cocoonJSExtensionObjectAttribute = cocoonJSExtensionObject[cocoonJSExtensionObjectAttributeName];

	// 		// Function
	// 		if (typeof cocoonJSExtensionObjectAttribute === 'function' && typeof cocoonJSExtensionObjectAttribute.nativeFunctionName !== 'undefined')
	// 		{
	// 			var nativeFunctionName = cocoonJSExtensionObjectAttribute.nativeFunctionName;
	// 			nativeFunctionBindingCallback(cocoonJSExtensionObjectAttributeName, nativeFunctionName);
	// 		}
	// 		// Event object
	// 		else if (typeof cocoonJSExtensionObjectAttribute === 'object' && cocoonJSExtensionObjectAttribute !== null && typeof cocoonJSExtensionObjectAttribute.nativeEventName !== 'undefined')
	// 		{
	// 			var nativeEventName = cocoonJSExtensionObjectAttribute.nativeEventName;
	// 			nativeEventBindingCallback(cocoonJSExtensionObjectAttributeName, nativeEventName);
	// 		}
	// 	}
	// }

	/**
	This function looks for a CocoonJS extension object that is bound to the given native ext object name.
	@returns The CocoonJS extension object that corresponds to the give native extension object name or null if it cannot be found.
	*/
	// CocoonJS.GetCocoonJSExtensionObjectForNativeExtensionObjectName = function(nativeExtensionObjectName)
	// {
	// 	var cocoonJSExtensionObject = null;
	// 	// Look in the CocoonJS object and for every object that is a CocoonJS.Extension check if it's nativeExtensionObjectName matches to the one passed as argument. If so, create an object that will represent it's documentation for the native ext object.
	// 	for (var cocoonJSAttributeName in CocoonJS)
	// 	{
	// 		var cocoonJSAttribute = CocoonJS[cocoonJSAttributeName];
	// 		if (typeof cocoonJSAttribute === 'object' && cocoonJSAttribute instanceof CocoonJS.Extension && cocoonJSAttribute.nativeExtensionObjectName === nativeExtensionObjectName)
	// 		{
	// 			// We have found the CocoonJS object that represents the native ext extension object name. 
	// 			cocoonJSExtensionObject = cocoonJSAttribute;
	// 			break;
	// 		}
	// 	}
	// 	return cocoonJSExtensionObject;
	// };

	/**
	This function adds functions to a CocoonJS extension object in order to bind them to the native makeCall function calls of the ext object.

	@param extensionObject The reference to the CocoonJS extension object where to add the new functions bound to the ext object makeCall functions calls.

	@param nativeFunctionsConfiguration An array of objects with the following structure:

		{ nativeFunctionName : "" [, functionName : "", isAsync : true/false] }

		- nativeFunctionName: Specifies the name of the function inside the ext object makeCall function call that will be bound.
		- functionName: An optional attribute that allows to specify the name of the function to be added to the CocoonJS extension object. If is not present, the name of the function will be the same
		as the nativeFunctionName.
		- isAsync: An optional attribute that allows to specify if the call should be performed using makeCall (false or missing) or makeCallAsync (true).
		- alternativeFunction: An optional attribute that allows to specify an alternative function that will be called internally when this function is called. This attribute
		allows for adding new functionalities like for example adding methods 

	@returns The CocoonJS extension object.
	*/
	// CocoonJS.AddNativeFunctionBindingsToExtensionObject = function(extensionObject, nativeFunctionsConfiguration)
	// {
	// 	if (typeof extensionObject === 'undefined' || extensionObject === null) throw("The passed extension object be a valid object.");
	// 	if (typeof nativeFunctionsConfiguration === 'undefined' || nativeFunctionsConfiguration === null) throw("The passed native functions configuration array must be a valid object.");

	// 	for (var i = 0; i < nativeFunctionsConfiguration.length; i++)
	// 	{
	// 		if (typeof nativeFunctionsConfiguration[i].nativeFunctionName === 'undefined') throw("The 'nativeFunctionName' attribute in the native function configuration object at index '" + i + "' in the native function configuration array cannot be undefined.");
	// 		var nativeFunctionName = nativeFunctionsConfiguration[i].nativeFunctionName;
	// 		var functionName = typeof nativeFunctionsConfiguration[i].functionName !== 'undefined' ? nativeFunctionsConfiguration[i].functionName : nativeFunctionName;
	// 		var makeCallFunction = null;
	// 		makeCallFunction = typeof nativeFunctionsConfiguration[i].isAsync !== 'undefined' && nativeFunctionsConfiguration[i].isAsync ? extensionObject.nativeExtensionObject.makeCallAsync : extensionObject.nativeExtensionObject.makeCall;
	// 		// Add the new function to the CocoonJS extension object
	// 		extensionObject[functionName] = function()
	// 		{
	// 			// Convert the arguments object to an array
	// 			var arguments = Array.prototype.slice.call(arguments);
	// 			// Add the native function name as the first parameter
	// 			arguments.unshift(nativeFunctionName);
	// 			// Make the native ext object call
	// 			var result = makeCallFunction.apply(extensionObject.nativeExtensionObject, arguments);
	// 			return result;
	// 		}
	// 		// Add a property to the newly added function to store the name of the original function.
	// 		extensionObject[functionName].nativeFunctionName = nativeFunctionName;
	// 	}
	// 	return extensionObject;
	// };

	/**
	This function adds objects to a CocoonJS extension object to allow event listener handling (add and remove) bound to the native ext object event listener handling.

	@param extensionObject The reference to the CocoonJS extension object where to add the new objects bound to the ext object event listener handling.

	@param nativeEventsConfiguration An array of objects with the following structure:

		{ nativeEventName : "" [, eventObjectName : ""] }

		- nativeEventName: Specifies the event in the native ext object to be bound.
		- eventObjectName: An optional attribute that allows to specify the name of the object to be added to the CocoonJS extension object. If is not present, the name of the function will be the same
		as the nativeEventName.
		- alternativeAddEventListenerFunction:
		- alternativeRemoveEventListenerFunction:

	@returns The CocoonJS extension object.
	*/
	// CocoonJS.AddNativeEventBindingsToExtensionObject = function(extensionObject, nativeEventsConfiguration)
	// {
	// 	if (typeof extensionObject === 'undefined' || extensionObject === null) throw("The passed extension object be a valid object.");
	// 	if (typeof nativeEventsConfiguration === 'undefined' || nativeEventsConfiguration === null) throw("The passed native events configuration array must be a valid object.");

	// 	for (var i = 0; i < nativeEventsConfiguration.length; i++)
	// 	{
	// 		if (typeof nativeEventsConfiguration[i].nativeEventName === 'undefined') throw("The 'nativeEventName' attribute in the native event configuration object at index '" + i + "' in the native event configuration array cannot be undefined.");
	// 		var nativeEventName = nativeEventsConfiguration[i].nativeEventName;
	// 		var eventObjectName = typeof nativeEventsConfiguration[i].eventObjectName !== 'undefined' ? nativeEventsConfiguration[i].eventObjectName : nativeEventName;
	// 		// Anonymous function call so each variable in the loop is used in the event listener handling function bindings.
	// 		(function(nativeEventName, eventObjectName)
	// 		{
	//     		extensionObject[eventObjectName] =
	//     		{
	//     			// Store the native event name
	//     			nativeEventName : nativeEventName,
	//     			// Create the event listener management functions bound to the native counterparts
	//     			addEventListener : function(callback)
	// 	    		{
	// 	    			extensionObject.nativeExtensionObject.addEventListener(nativeEventName, callback);
	//     			},
	//     			removeEventListener : function(callback)
	//     			{
	// 	    			extensionObject.nativeExtensionObject.removeEventListener(nativeEventName, callback);
	//     			}
	//     			// ,
	//     			// removeAllEventListeners : function()
	//     			// {

	//     			// }
	//     		};
	// 		})(nativeEventName, eventObjectName);
	// 	}
	// 	return extensionObject;
	// };

	/**
	The function object constructor function all the CocoonJS extensions can use to instantiate the CocoonJS extension object and add all the functionality needed bound to the native ext object.

	@param nativeExtensionObject The reference to the ext object extension object.

	@param nativeFunctionsConfiguration See CocoonJS.AddNativeFunctionBindingsToExtensionObject function's documentation for more details.

	@param nativeEventsConfiguration See CocoonJS.AddNativeEventBindingsToExtensionObject function's documentation for more details.

	@returns The new CocoonJS extension object.
	*/
	// CocoonJS.Extension = function(nativeExtensionObjectName, nativeFunctionsConfiguration, nativeEventsConfiguration)
	// {
	// 	if (typeof nativeExtensionObjectName === 'undefined' || nativeExtensionObjectName === null) throw("The native extension object name cannot be null");

	// 	if (window.ext[nativeExtensionObjectName] === 'undefined') throw("The given native extension object name '" + nativeExtensionObjectName + "' is incorrect or the native extension object is undefined.");

	// 	var nativeExtensionObject = window.ext[nativeExtensionObjectName];

	// 	// Store a reference to the native extension object and to it's name
	// 	this.nativeExtensionObject = nativeExtensionObject;
	// 	this.nativeExtensionObjectName = nativeExtensionObjectName;

	// 	// If native function configuration is passed, use it to add some functions to the new extension object.
	// 	if (typeof nativeFunctionsConfiguration !== 'undefined')
	// 	{
	// 		CocoonJS.AddNativeFunctionBindingsToExtensionObject(this, nativeFunctionsConfiguration);
	// 	}

	// 	// If native event configuration is passed, use it to add some event objects to the new extension object.
	// 	if (typeof nativeEventsConfiguration !== 'undefined')
	// 	{
	// 		CocoonJS.AddNativeEventBindingsToExtensionObject(this, nativeEventsConfiguration);
	// 	}

	// 	return this;
	// };   

})();

//////////////////////////////////////
// COCOONJS_APP.JS                  //
//////////////////////////////////////

(function () {
    // The CocoonJS must exist before creating the extension.
    if (typeof window.CocoonJS === 'undefined' || window.CocoonJS === null) throw("The CocoonJS object must exist and be valid before creating any extension object.");

    /**
     * This namespace represents all the basic functionalities available in the CocoonJS extension API.
     * @namespace
     */
    CocoonJS.App = CocoonJS.App ? CocoonJS.App : {};

    CocoonJS.App.nativeExtensionObjectAvailable = CocoonJS.nativeExtensionObjectAvailable && typeof window.ext.IDTK_APP !== 'undefined';

    /**
     * The predefined possible layouts for the FPS overlay.
     * @namespace
     */
    CocoonJS.App.FPSLayout = {
        TOP_LEFT:'top-left',
        TOP_RIGHT:'top-right',
        BOTTOM_LEFT:'bottom-left',
        BOTTOM_RIGHT:'bottom-right'
    };

    /**
     * Contains all the possible values to specify the input keyboard type to be used when introducing text.
     * @namespace
     */
    CocoonJS.App.KeyboardType = {
        /**
         * Represents a generic text input keyboard.
         */
        TEXT:"text",

        /**
         * Represents a number like input keyboard.
         */
        NUMBER:"num",

        /**
         * Represents a phone like input keyboard.
         */
        PHONE:"phone",

        /**
         * Represents an email like input keyboard.
         */
        EMAIL:"email",

        /**
         * Represents an URL like input keyboard.
         */
        URL:"url"
    };

    /**
     * The storage types to be used with file system related operations.
     * @namespace
     */
    CocoonJS.App.StorageType = {
        /**
         * Represents the application storage. The application storage is the place where all the resources that come with the application are stored.
         */
        APP_STORAGE:"APP_STORAGE",

        /**
         * Represents the internal storage. The internal storage is a different storage space that the application storage and only the data that the application has stored
         * in it will be in this storage. It is internal to the platform/device.
         */
        INTERNAL_STORAGE:"INTERNAL_STORAGE",

        /**
         * Represents an external storage. The external storage is similar to the internal storage in the sense that it only contains information that the application has written
         * in it but it represents an external storage device like a SD-CARD. If there is no exrernal storage, it will represent the same as the internal storage.
         */
        EXTERNAL_STORAGE:"EXTERNAL_STORAGE",

        /**
         * Represents the temporal storage. Same as the internal and external storage spaces in the sense that it only contains information that the application has written
         * in it but the main difference is that the information in this storage may dissapear without notice.
         */
        TEMPORARY_STORAGE:"TEMPORARY_STORAGE"
    };

    /**
     * The capture types to capture screenshots using CocoonJS native capabilities.
     * @namespace
     */
    CocoonJS.App.CaptureType = {
        /**
         Captures everything, both the CocoonJS GL hardware accelerated surface and the system views (like the WebView).
         */
        EVERYTHING:0,

        /**
         * Captures just the CocoonJS GL hardware accelerated surface.
         */
        JUST_COCOONJS_GL_SURFACE:1,

        /**
         * Captures just the sustem views (like the webview)
         */
        JUST_SYSTEM_VIEWS:2
    };

    /**
     * Makes a forward call of some javascript code to be executed in a different environment (i.e. from CocoonJS to the WebView and viceversa).
     * It waits until the code is executed and the result of it is returned === synchronous.
     * @function
     * @param {string} javaScriptCode Some JavaScript code in a string to be forwarded and executed in a different JavaScript environment (i.e. from CocoonJS to the WebView and viceversa).
     * @return {string} The result of the execution of the passed JavaScript code in the different JavaScript environment.
     */
    CocoonJS.App.forward = function (javaScriptCode) {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_APP", "forward", arguments);
        }
        else if (!navigator.isCocoonJS) {
            if (window.name == 'CocoonJS_App_ForCocoonJS_WebViewIFrame') {
                return window.parent.eval(javaScriptCode);
            }
            else {
                //return window.parent.frames['CocoonJS_App_ForCocoonJS_WebViewIFrame'].window.eval(javaScriptCode);
                return window.frames['CocoonJS_App_ForCocoonJS_WebViewIFrame'].window.eval(javaScriptCode);
            }
        }
    };

    /**
     * Makes a forward call of some javascript code to be executed in a different environment (i.e. from CocoonJS to the WebView and viceversa).
     * It is asyncrhonous so it does not wait until the code is executed and the result of it is returned. Instead, it calls a callback function when the execution has finished to pass the result.
     * @function
     * @param {string} javaScriptCode Some JavaScript code in a string to be forwarded and executed in a different JavaScript environment (i.e. from CocoonJS to the WebView and viceversa).
     * @param {function} [returnCallback] A function callback that will be called when the passed JavaScript code is executed in a different thread to pass the result of the execution in the different JavaScript environment.
     */
    CocoonJS.App.forwardAsync = function (javaScriptCode, returnCallback) {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            if (typeof returnCallback !== 'undefined') {
                return ext.IDTK_APP.makeCallAsync("forward", javaScriptCode, returnCallback);
            }
            else {
                return ext.IDTK_APP.makeCallAsync("forward", javaScriptCode);
            }
        }
        else if (!navigator.isCocoonJS) {
            if (window.name == 'CocoonJS_App_ForCocoonJS_WebViewIFrame') {
                return window.parent.eval(javaScriptCode);
            }
            else {
                return window.parent.frames['CocoonJS_App_ForCocoonJS_WebViewIFrame'].window.eval(javaScriptCode);
                // window.frames['CocoonJS_App_ForCocoonJS_WebViewIFrame'].window.eval(javaScriptCode);
            }
        }
    };

    /**
     * Pops up a text dialog so the user can introduce some text and the application can get it back. It is the first approach CocoonJS has taken to be able to introduce
     * text input in a easy way. The dialog execution events are passed to the application through the {@link CocoonJS.App.onTextDialogFinished} and the {@link CocoonJS.App.onTextDialogCancelled} event objects.
     * @function
     * @param {string} [title] Default value is "". The title to be displayed in the dialog.
     * @param {string} [message] Default value is "". The message to be displayed in the dialog, next to the text input field.
     * @param {string} [text] Default value is "". The initial text to be introduced in the text input field.
     * @param {CocoonJS.App.KeyboardType} [keyboardType] Default value is {@link CocoonJS.App.KeyboardType.TEXT}. The keyboard type to be used when the text has to be introduced.
     * @param {string} [cancelButtonText] Default value is "". The text to be displayed in the cancel button of the dialog.
     * @param {string} [okButtonText] Default value is "". The text to be displayed in the ok button of the dialog.
     * @see CocoonJS.App.onTextDialogFinished
     * @see CocoonJS.App.onTextDialogCancelled
     */
    CocoonJS.App.showTextDialog = function (title, message, text, keyboardType, cancelButtonText, okButtonText) {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_APP", "showTextDialog", arguments, true);
        }
        else if (!navigator.isCocoonJS) {
            if (!message) {
                message = "";
            }
            if (!text) {
                text = "";
            }
            var result = prompt(message, text);
            var eventObject = result ? CocoonJS.App.onTextDialogFinished : CocoonJS.App.onTextDialogCancelled;
            eventObject.notifyEventListeners(result);
        }
    };

    /**
     * Pops up a message dialog so the user can decide between a yes or no like confirmation. The message box execution events are passed to the application through the {@link CocoonJS.App.onMessageBoxConfirmed} and the {@link CocoonJS.App.onMessageBoxDenied} event objects.
     * @function
     * @param {string} [title] Default value is "". The title to be displayed in the dialog.
     * @param {string} [message] Default value is "". The message to be displayed in the dialog, next to the text input field.
     * @param {string} [confirmButtonText] Default value is "Yes". The text to be displayed for the confirm button.
     * @param {string} [denyButtonText] Default value is "No". The text to be displayed for the deny button.
     * @see CocoonJS.App.onMessageBoxConfirmed
     * @see CocoonJS.App.onMessageBoxDenied
     */
    CocoonJS.App.showMessageBox = function (title, message, confirmButtonText, denyButtonText) {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_APP", "showMessageBox", arguments, true);
        }
        else if (!navigator.isCocoonJS) {
            if (!message) {
                message = "";
            }
            var result = confirm(message);
            var eventObject = result ? CocoonJS.App.onMessageBoxConfirmed : CocoonJS.App.onMessageBoxDenied;
            eventObject.notifyEventListeners();
        }
    };

    /**
     * It allows to load a new JavaScript/HTML5 resource that can be loaded either locally (inside the platform/device storage) or using a remote URL.
     * @function
     * @param {string} path A path to a resource stored in the platform or in a URL to a remote resource.
     * @param {CocoonJS.App.StorageType} [storageType] If the path argument represents a locally stored resource, the developer can specify the storage where it is stored. If no value is passes, the {@link CocoonJS.App.StorageType.APP_STORAGE} value is used by default.
     */
    CocoonJS.App.load = function (path, storageType) {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_APP", "loadPath", arguments);
        }
        else if (!navigator.isCocoonJS) {
            var xhr = new XMLHttpRequest();

            xhr.onreadystatechange = function (event) {
                if (xhr.readyState === 4) {
                    if (xhr.status === 200) {
                        // TODO: As window load event is not being called (WHY???), I have decided to call the listeners directly
                        // var callback= function(event){
                        //     window.removeEventListener("load", callback);
                        var jsCode;
                        // If there is no webview, it means we are in the webview, so notify the CocoonJS environment
                        if (!CocoonJS.App.EmulatedWebViewIFrame) {
                            jsCode = "window.CocoonJS && window.CocoonJS.App.onLoadInTheWebViewSucceed.notifyEventListeners('" + path + "');";
                        }
                        // If there is a webview, it means we are in CocoonJS, so notify the webview environment
                        else {
                            jsCode = "window.CocoonJS && window.CocoonJS.App.onLoadInCocoonJSSucceed.notifyEventListeners('" + path + "');";
                        }
                        CocoonJS.App.forwardAsync(jsCode);
                        // };
                        // window.addEventListener("load", callback);
                        window.location.href = path;
                    }
                    else if (xhr.status === 404) {
                        this.onreadystatechange = null;
                        var jsCode;
                        // If there is no webview, it means we are in the webview, so notify the CocoonJS environment
                        if (!CocoonJS.App.EmulatedWebViewIFrame) {
                            jsCode = "CocoonJS && CocoonJS.App.onLoadInTheWebViewFailed.notifyEventListeners('" + path + "');";
                        }
                        // If there is a webview, it means we are in CocoonJS, so notify the webview environment
                        else {
                            jsCode = "CocoonJS && CocoonJS.App.onLoadInCocoonJSFailed.notifyEventListeners('" + path + "');";
                        }
                        CocoonJS.App.forwardAsync(jsCode);
                    }
                }
            };
            xhr.open("GET", path, true);
            xhr.send();
        }
    };

    /**
     * Reloads the last loaded path in the current context.
     * @function
     */
    CocoonJS.App.reload = function () {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_APP", "reload", arguments);
        }
        else if (!navigator.isCocoonJS) {
            if (window.name == 'CocoonJS_App_ForCocoonJS_WebViewIFrame') {
                return window.parent.location.reload();
            }
            else {
                return window.parent.frames['CocoonJS_App_ForCocoonJS_WebViewIFrame'].window.location.reload();
            }
        }
    };

    /**
     * Opens a given URL using a system service that is able to open it. For example, open a HTTP URL using the system WebBrowser.+
     * @function
     * @param {string} url The URL to be opened by a system service.
     */
    CocoonJS.App.openURL = function (url) {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_APP", "openURL", arguments, true);
        }
        else if (!navigator.isCocoonJS) {
            window.open(url, '_blank');
        }
    }

    /**
     * Forces the app to be finished.
     * @function
     */
    CocoonJS.App.forceToFinish = function () {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_APP", "forceToFinish", arguments);
        }
        else if (!navigator.isCocoonJS) {
            window.close();
        }
    }

    /**
     * Enables or disables the auto lock to control if the screen keeps on after an inactivity period.
     * When the auto lock is enabled and the application has no user input for a short period, the system puts the device into a "sleepâ€ state where the screen dims or turns off.
     * When the auto lock is disabled the screen keeps on even when there is no user input for long times.
     * @param enabled A boolean value that controls whether to enable or disable the auto lock.
     */
    CocoonJS.App.setAutoLockEnabled = function (enabled) {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_APP", "setAutoLockEnabled", arguments);
        }
    }

    /**
     * Creates a canvas element that is automatically resized to the screen size. When the app is being executed
     * inside CocoonJS. This canvas is optimized for rendering so it is higly recommended to use it if it fits
     * your app needs. If your app uses one canvas as the main canvas where all other canvases and images are displayed, Ludei recommends to
     * call this function in order to create this main canvas. A usual 2x performance gain is achieved by doing so
     * depending on the device and the graphics card driver.
     * @function
     * @return {object} The canvas object that should be used as the main canvas and that is resized to the screen resolution.
     */
    CocoonJS.App.createScreenCanvas = function () {
        var screenCanvas;
        if (navigator.isCocoonJS) {
            screenCanvas = document.createElement("screencanvas");
        }
        else if (!navigator.isCocoonJS) {
            screenCanvas = document.createElement("canvas");
            screenCanvas.width = window.innerWidth;
            screenCanvas.height = window.innerHeight;
        }
        return screenCanvas;
    };

    /**
     * Disables the touch events in the CocoonJS environment.
     * @function
     */
    CocoonJS.App.disableTouchInCocoonJS = function () {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            window.ext.IDTK_APP.makeCall("disableTouchLayer", "CocoonJSView");
        }
    };

    /**
     * Enables the touch events in the CocoonJS environment.
     * @function
     */
    CocoonJS.App.enableTouchInCocoonJS = function () {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            window.ext.IDTK_APP.makeCall("enableTouchLayer", "CocoonJSView");
        }
    };

    /**
     * Disables the touch events in the WebView environment.
     * @function
     */
    CocoonJS.App.disableTouchInTheWebView = function () {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            window.ext.IDTK_APP.makeCall("disableTouchLayer", "WebView");
        }
    };

    /**
     * Enables the touch events in the WebView environment.
     * @function
     */
    CocoonJS.App.enableTouchInTheWebView = function () {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            window.ext.IDTK_APP.makeCall("enableTouchLayer", "WebView");
        }
    };

    /**
     * Setups the update interval in seconds (1 second / X frames) to receive the accelerometer updates.
     * It defines the rate at which the devicemotion events are updated.
     * @function
     * @param {number} updateIntervalInSeconds The update interval in seconds to be set.
     */
    CocoonJS.App.setAccelerometerUpdateIntervalInSeconds = function (updateIntervalInSeconds) {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            return window.ext.IDTK_APP.makeCall("setAccelerometerUpdateIntervalInSeconds", updateIntervalInSeconds);
        }
    };

    /**
     * Returns the update interval in seconds that is currently set for accelerometer related events.
     * @function
     * @return {number} The update interval in seconds that is currently set for accelerometer related events.
     */
    CocoonJS.App.getAccelerometerUpdateIntervalInSeconds = function () {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            return window.ext.IDTK_APP.makeCall("getAccelerometerUpdateIntervalInSeconds");
        }
    };

    /**
     * Setups the update interval in seconds (1 second / X frames) to receive the gyroscope updates.
     * It defines the rate at which the devicemotion and deviceorientation events are updated.
     * @function
     * @param {number} updateIntervalInSeconds The update interval in seconds to be set.
     */
    CocoonJS.App.setGyroscopeUpdateIntervalInSeconds = function (updateIntervalInSeconds) {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            return window.ext.IDTK_APP.makeCall("setGyroscopeUpdateIntervalInSeconds", updateIntervalInSeconds);
        }
    };

    /**
     * Returns the update interval in seconds that is currently set for gyroscope related events.
     * @function
     * @return {number} The update interval in seconds that is currently set for gyroscope related events.
     */
    CocoonJS.App.getGyroscopeUpdateIntervalInSeconds = function () {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            window.ext.IDTK_APP.makeCall("getGyroscopeUpdateIntervalInSeconds");
        }
    };


    /**
     * Setups a origin proxy for a given typeName. What this means is that after calling this function the environment that makes this call will suddenly
     * have a way of creating instances of the given typeName and those instances will act as a transparent proxy to counterpart instances in the destination environment.
     * Manipulating attributes, calling funcitions or handling events will all be performed in the destination environment but the developer will think they will be
     * happening in the origin environment.
     * IMPORTANT NOTE: These proxies only work with types that use attributes and function parameters and return types that are primitive like numbers, strings or arrays.
     * @param {string} typeName The name of the type to be proxified.
     * @param {array} [attributeNames] A list of the names of the attributes to be proxified.
     * @param {array} [functionNames] A list of the names of the functions to be proxified.
     * @param {array} [eventHandlerNames] A list of the names of the event handlers to be proxified (onXXXX like attributes that represent callbacks).
     * A valid typeName and at least one valid array for attribute, function or event handler names is mandatory.
     */
    CocoonJS.App.setupOriginProxyType = function (typeName, attributeNames, functionNames, eventHandlerNames) {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            // Control the parameters.
            if (!typeName) throw "The given typeName must be valid.";
            if (!attributeNames && !functionNames && !eventHandlerNames) throw "There is no point on setting up a proxy for no attributes, functions nor eventHandlers.";
            attributeNames = attributeNames ? attributeNames : [];
            functionNames = functionNames ? functionNames : [];
            eventHandlerNames = eventHandlerNames ? eventHandlerNames : [];

            // The parent object will be the window. It could be another object but careful, the destination side should know about this.
            // TODO: Specify the parentObject as a parameter, obtain it's path from the window object and pass it to the destination environment so it knows about it.
            var parentObject = window;

            // Setup the destination side too.
            var jsCode = "CocoonJS.App.setupDestinationProxyType(" + JSON.stringify(typeName) + ", " + JSON.stringify(eventHandlerNames) + ");";
            CocoonJS.App.forward(jsCode);

            var originalType = parentObject[typeName];

            // Constructor. This will be the new proxified type in the origin environment. Instances of this type will be created by the developer without knowing that they are
            // internally calling to their counterparts in the destination environment.
            parentObject[typeName] = function () {
                var _this = this;

                // Each proxy object will have a origin object inside with all the necessary information to be a proxy to the destination.
                this._cocoonjs_proxy_object_data = {};
                // The id is obtained calling to the destination side to create an instance of the type.
                var jsCode = "CocoonJS.App.newDestinationProxyObject(" + JSON.stringify(typeName) + ");";
                this._cocoonjs_proxy_object_data.id = CocoonJS.App.forward(jsCode);
                // The eventHandlers dictionary contains objects of the type { eventHandlerName : string, eventHandler : function } to be able to make the callbacks when the 
                // webview makes the corresponding calls.
                this._cocoonjs_proxy_object_data.eventHandlers = {};
                // Also store the typename inside each instance.
                this._cocoonjs_proxy_object_data.typeName = typeName;
                // A dictionary to store the event handlers
                this._cocoonjs_proxy_object_data.eventListeners = {};

                // TODO: eventHandlers and eventListeners should be in the same list ;)

                // Store all the proxy instances in a list that belongs to the type itself.
                parentObject[typeName]._cocoonjs_proxy_type_data.proxyObjects[this._cocoonjs_proxy_object_data.id] = this;

                // Create a setter and a getter for all the attribute names that have been specified. When the attributes are accessed (set or get) a call to the destination counterpart will be performed.
                for (var i = 0; i < attributeNames.length; i++) {
                    (function (attributeName) {
                        _this.__defineSetter__(attributeName, function (value) {
                            var jsCode = "CocoonJS.App.setDestinationProxyObjectAttribute(" + JSON.stringify(typeName) + ", " + _this._cocoonjs_proxy_object_data.id + ", " + JSON.stringify(attributeName) + ", " + JSON.stringify(value) + ");";
                            return CocoonJS.App.forwardAsync(jsCode);
                        });
                        _this.__defineGetter__(attributeName, function () {
                            var jsCode = "CocoonJS.App.getDestinationProxyObjectAttribute(" + JSON.stringify(typeName) + ", " + _this._cocoonjs_proxy_object_data.id + ", " + JSON.stringify(attributeName) + ");";
                            return CocoonJS.App.forwardAsync(jsCode);
                        });
                    })(attributeNames[i]);
                }

                // Create a function that performs a call to the destination environment counterpart for all the function names that have been specified.
                for (var i = 0; i < functionNames.length; i++) {
                    (function (functionName) {
                        _this[functionName] = function () {
                            // Get the arguments as an array and add the typeName, the proxy id and the functionName before all the other arguments before making the call to the destination counterpart.
                            var argumentsArray = Array.prototype.slice.call(arguments);
                            argumentsArray.unshift(functionName);
                            argumentsArray.unshift(this._cocoonjs_proxy_object_data.id);
                            argumentsArray.unshift(typeName);
                            // Use the array to create the correct function call.
                            var jsCode = "CocoonJS.App.callDestinationProxyObjectFunction(";
                            for (var i = 0; i < argumentsArray.length; i++) {
                                // The second argument (the id) should not be stringified
                                jsCode += (i !== 1 ? JSON.stringify(argumentsArray[i]) : argumentsArray[i]) + (i < argumentsArray.length - 1 ? ", " : "");
                            }
                            jsCode += ");";
                            // TODO: This next call should be synchronous but it seems that some customers are experiencing some crash issues. Making it async solves these crashes.
                            // Another possible solution could be to be able to specify which calls could be async and which sync in the proxification array.
                            var ret = CocoonJS.App.forwardAsync(jsCode);
                            return ret;
                        };
                    })(functionNames[i]);
                }

                // Create a setter and getter for all the event handler names that have been specified. When the event handlers are accessed, store them inside the corresponding position on the eventHandlers
                // array so they can be called when the destination environment makes the corresponding callback call.
                for (var i = 0; i < eventHandlerNames.length; i++) {
                    (function (eventHandlerName) {
                        _this.__defineSetter__(eventHandlerName, function (value) {
                            _this._cocoonjs_proxy_object_data.eventHandlers[eventHandlerName] = value;
                        });
                        _this.__defineGetter__(eventHandlerName, function () {
                            return _this._cocoonjs_proxy_object_data.eventHandlers[eventHandlerName];
                        });
                    })(eventHandlerNames[i]);
                }

                // Setup the add and remove event listeners in the proxy object
                _this.addEventListener = function (eventTypeName, eventCallback) {
                    var addEventCallback = true;
                    // Check for the eventListeners
                    var eventListeners = _this._cocoonjs_proxy_object_data.eventListeners[eventTypeName];
                    if (eventListeners) {
                        // As the eventListeners were already added, check that the same callback has not been added.
                        addEventCallback = eventListeners.indexOf(eventCallback) < 0;
                    }
                    else {
                        // There are no event listeners, so add the one and add the listeners array for the specific event type name
                        eventListeners = [];
                        _this._cocoonjs_proxy_object_data.eventListeners[eventTypeName] = eventListeners;

                        // Forward the call so the other end registers a event listener (only one is needed).
                        var jsCode = "CocoonJS.App.addDestinationProxyObjectEventListener(" + JSON.stringify(_this._cocoonjs_proxy_object_data.typeName) + ", " + _this._cocoonjs_proxy_object_data.id + ", " + JSON.stringify(eventTypeName) + ");";
                        CocoonJS.App.forwardAsync(jsCode);
                    }
                    // Only if the alforithm above specify so, add the eventcallback and notify the destination environment to do the same
                    if (addEventCallback) {
                        eventListeners.push(eventCallback);
                    }
                };

                _this.removeEventListener = function (eventTypeName, eventCallback) {
                    // Check for the eventListeners
                    var eventListeners = _this._cocoonjs_proxy_object_data.eventListeners[eventTypeName];
                    if (eventListeners) {
                        var eventCallbackIndex = eventListeners.indexOf(eventCallback);
                        if (eventCallbackIndex >= 0) {
                            eventListeners.splice(eventCallbackIndex, 1);
                        }
                    }
                };

                // Return the proxy instance.
                return this;
            };

            // The type will contain a proxy data structure to store all the instances that are created so they are available when the destination environment calls back. 
            parentObject[typeName]._cocoonjs_proxy_type_data =
            {
                originalType:originalType,
                proxyObjects:[]
            };

            /**
             * Deletes a proxy instance from both the CocoonJS environment structures and also deleting it's webview environment counterpart.
             * This function should be manually called whenever a proxy instance won't be accessed anymore.
             * @param {object} object The proxy object to be deleted.
             */
            parentObject[typeName]._cocoonjs_proxy_type_data.deleteProxyObject = function (object) {
                var proxyObjectKey = CocoonJS.getKeyForValueInDictionary(this.proxyObjects, object);
                if (proxyObjectKey) {
                    var jsCode = "CocoonJS.App.deleteDestinationProxyObject(" + JSON.stringify(typeName) + ", " + object._cocoonjs_proxy_object_data.id + ");";
                    CocoonJS.App.forwardAsync(jsCode);
                    object._cocoonjs_proxy_object_data = null;
                    delete this.proxyObjects[proxyObjectKey];
                }
            };

            /**
             * Calls a event handler for the given proxy object id and eventHandlerName.
             * @param {number} id The id to be used to look for the proxy object for which to make the call to it's event handler.
             * @param {string} eventHandlerName The name of the handler to be called.
             * NOTE: Events are a complex thing in the HTML specification. This function just performs a call but at least provides a
             * structure to the event passing the target (the proxy object).
             * TODO: The destination should serialize the event object as far as it can so many parameters can be passed to the origin
             * side. Using JSON.stringify in the destination side and parse in origin side maybe? Still must add the target to the event structure though.
             */
            parentObject[typeName]._cocoonjs_proxy_type_data.callProxyObjectEventHandler = function (id, eventHandlerName) {
                var object = this.proxyObjects[id];
                var eventHandler = object._cocoonjs_proxy_object_data.eventHandlers[eventHandlerName];
                if (eventHandler) {
                    eventHandler({ target:object });
                }
            };

            parentObject[typeName]._cocoonjs_proxy_type_data.callProxyObjectEventListeners = function (id, eventTypeName) {
                var object = this.proxyObjects[id];
                var eventListeners = object._cocoonjs_proxy_object_data.eventListeners[eventTypeName].slice();
                for (var i = 0; i < eventListeners.length; i++) {
                    eventListeners[i]({ target:object });
                }
            };
        }
    };

    /**
     * Takes down the proxification of a type and restores it to it's original type. Do not worry if you pass a type name that is not proxified yet. The
     * function will handle it correctly for compativility reasons.
     * @param {string} typeName The name of the type to be deproxified (take down the proxification and restore the type to it's original state)
     */
    CocoonJS.App.takedownOriginProxyType = function (typeName) {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            var parentObject = window;
            if (parentObject[typeName] && parentObject[typeName]._cocoonjs_proxy_type_data) {
                parentObject[typeName] = parentObject[typeName]._cocoonjs_proxy_type_data.originalType;
            }
        }
    };

    /**
     * Deletes everything related to a proxy object in both environments. Do not worry of you do not pass a proxified object to the
     * function. For compatibility reasons, you can still have calls to this function even when no poxification of a type has been done.
     * @param {object} object The proxified object to be deleted.
     */
    CocoonJS.App.deleteOriginProxyObject = function (object) {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            var parentObject = window;
            if (object && object._cocoonjs_proxy_object_data) {
                parentObject[object._cocoonjs_proxy_object_data.typeName]._cocoonjs_proxy_type_data.deleteProxyObject(object);
            }
        }
    };

    /**
     * NOTE: This function should never be directly called. It will be called from the destination environment whenever it is needed to work with proxy objects.
     * It calls the origin proxy object when an event handler need to be updated/called from the destination environment.
     * @param {string} typeName The type name of the proxified type.
     * @param {number} id The id of the proxy object.
     * @param {string} eventHandlerName The name of the event handler to be called.
     */
    CocoonJS.App.callOriginProxyObjectEventHandler = function (typeName, id, eventHandlerName) {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            var parentObject = window;
            parentObject[typeName]._cocoonjs_proxy_type_data.callProxyObjectEventHandler(id, eventHandlerName);
        }
    };

    /**
     * NOTE: This function should never be directly called. It will be called from the destination environment whenever it is needed to work with proxy objects.
     * It calls the origin proxy object when all the event listeners related to a specific event need to be updated/called from the destination environment.
     * @param {string} typeName The type name of the proxified type.
     * @param {number} id The id of the proxy object.
     * @param {string} eventTypeName The name of the event type to call the listeners related to it.
     */
    CocoonJS.App.callOriginProxyObjectEventListeners = function (typeName, id, eventTypeName) {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            var parentObject = window;
            parentObject[typeName]._cocoonjs_proxy_type_data.callProxyObjectEventListeners(id, eventTypeName);
        }
    };

    /**
     * NOTE: This function should never be directly called. It will be called from the origin environment whenever it is needed to work with proxy objects.
     * Setups all the structures that are needed to proxify a destination type to an origin type.
     * @param {string} typeName The name of the type to be proxified.
     * @param {array} eventHandlerNames An array with al the event handlers to be proxified. Needed in order to be able to create callbacks for all the event handlers
     * and call to the CocoonJS counterparts accordingly.
     */
    CocoonJS.App.setupDestinationProxyType = function (typeName, eventHandlerNames) {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            var parentObject = window;

            // Add a cocoonjs structure to the destination proxified type to store some useful information like all the proxy instances that are created, plus the id counter 
            // and the names of all the event handlers and some utility functions.
            parentObject[typeName]._cocoonjs_proxy_type_data =
            {
                nextId:0,
                proxyObjects:{},
                eventHandlerNames:eventHandlerNames
            }
        }
    };

    /**
     * NOTE: This function should never be directly called. It will be called from the origin environment whenever it is needed to work with proxy objects.
     * Takes down the proxy type at the destination environment. Just removes the data structure related to proxies that was added to the type when proxification tool place.
     * @param {string} typeName The name of the type to take the proxification down.
     */
    CocoonJS.App.takedownDestinationProxyType = function (typeName) {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            var parentObject = window;
            if (parent[typeName] && parentObject[typeName]._cocoonjs_proxy_type_data) {
                delete parentObject[typeName]._cocoonjs_proxy_type_data;
            }
        }
    };

    /**
     * NOTE: This function should never be directly called. It will be called from the original environment whenever it is needed to work with proxy objects.
     * Creates a new destination object instance and generates a id to reference it from the original environment.
     * @param {string} typeName The name of the type to be proxified and to generate an instance.
     * @return The id to be used from the original environment to identify the corresponding destination object instance.
     */
    CocoonJS.App.newDestinationProxyObject = function (typeName) {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            var parentObject = window;

            var proxyObject = new parentObject[typeName]();
            // Also store some additional information in the proxy object
            proxyObject._cocoonjs_proxy_object_data = {};
            // Like the type name, that could be useful late ;)
            proxyObject._cocoonjs_proxy_object_data.typeName = typeName;
            // Caculate the id for the object. It will be returned to the origin environment so this object can be referenced later
            var proxyObjectId = parentObject[typeName]._cocoonjs_proxy_type_data.nextId;
            // Store the created object in the structure defined in the setup of proxification with an id associated to it
            parentObject[typeName]._cocoonjs_proxy_type_data.proxyObjects[proxyObjectId] = proxyObject;
            // Also store the id inside the proxy object itself
            proxyObject._cocoonjs_proxy_object_data.id = proxyObjectId;
            // Calculate a new id for the next object.
            parentObject[typeName]._cocoonjs_proxy_type_data.nextId++;

            // Setup all the event handlers.
            for (var i = 0; i < parentObject[typeName]._cocoonjs_proxy_type_data.eventHandlerNames.length; i++) {
                (function (eventHandlerName) {
                    proxyObject[eventHandlerName] = function (event) {
                        var proxyObject = this; // event.target;
                        // var eventHandlerName = CocoonJS.getKeyForValueInDictionary(proxyObject, this); // Avoid closures ;)
                        var jsCode = "CocoonJS.App.callOriginProxyObjectEventHandler(" + JSON.stringify(proxyObject._cocoonjs_proxy_object_data.typeName) + ", " + proxyObject._cocoonjs_proxy_object_data.id + ", " + JSON.stringify(eventHandlerName) + ");";
                        CocoonJS.App.forwardAsync(jsCode);
                    };
                })(parentObject[typeName]._cocoonjs_proxy_type_data.eventHandlerNames[i]);
            }

            // Add the dictionary where the event listeners (callbacks) will be added.
            proxyObject._cocoonjs_proxy_object_data.eventListeners = {};

            return proxyObjectId;
        }
    };

    /**
     * NOTE: This function should never be directly called. It will be called from the origin environement whenever it is needed to work with proxy objects.
     * Calls a function of a destination object idetified by it's typeName and id.
     * @param {string} typeName The name of the type of the proxy.
     * @param {number} id The id of the proxy object.
     * @param {string} functionName The name of the function to be called.
     * @return Whatever the function call returns.
     */
    CocoonJS.App.callDestinationProxyObjectFunction = function (typeName, id, functionName) {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            var parentObject = window;
            var argumentsArray = Array.prototype.slice.call(arguments);
            argumentsArray.splice(0, 3);
            var proxyObject = parentObject[typeName]._cocoonjs_proxy_type_data.proxyObjects[id];
            var result = proxyObject[functionName].apply(proxyObject, argumentsArray);
            return result;
        }
    };

    /**
     * NOTE: This function should never be directly called. It will be called from the original environment whenever it is needed to work with proxy objects.
     * Sets a value to the corresponding attributeName of a proxy object represented by it's typeName and id.
     * @param {string} typeName The name of the type of the proxy.
     * @param {number} id The id of the proxy object.
     * @param {string} attributeName The name of the attribute to be set.
     * @param {unknown} attributeValue The value to be set to the attribute.
     */
    CocoonJS.App.setDestinationProxyObjectAttribute = function (typeName, id, attributeName, attributeValue) {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            var parentObject = window;
            var proxyObject = parentObject[typeName]._cocoonjs_proxy_type_data.proxyObjects[id];
            proxyObject[attributeName] = attributeValue;
        }
    };

    /**
     * NOTE: This function should never be directly called. It will be called from the original environment whenever it is needed to work with proxy objects.
     * Retrieves the value of the corresponding attributeName of a proxy object represented by it's typeName and id.
     * @param {string} typeName The name of the type of the proxy.
     * @param {number} id The id of the proxy object.
     * @param {string} attributeName The name of the attribute to be retrieved.
     */
    CocoonJS.App.getDestinationProxyObjectAttribute = function (typeName, id, attributeName) {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            var parentObject = window;
            var proxyObject = parentObject[typeName]._cocoonjs_proxy_type_data.proxyObjects[id];
            return proxyObject[attributeName];
        }
    };

    /**
     * NOTE: This function should never be directly called. It will be called from the original environment whenever it is needed to work with proxy objects.
     * Deletes a proxy object identifying it using it's typeName and id. Deleting a proxy object mainly means to remove the instance from the global structure
     * that hold all the instances.
     * @param {string} typeName The name of the type of the proxy.
     * @param {number} id The id of the proxy object.
     */
    CocoonJS.App.deleteDestinationProxyObject = function (typeName, id) {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            var parentObject = window;
            delete parentObject[typeName]._cocoonjs_proxy_type_data.proxyObjects[id];
        }
    };

    /**
     * NOTE: This function should never be directly called. It will be called from the original environment whenever it is needed to work with proxy objects.
     */
    CocoonJS.App.addDestinationProxyObjectEventListener = function (typeName, id, eventTypeName) {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            var parentObject = window;
            // Look for the proxy object
            var proxyObject = parentObject[typeName]._cocoonjs_proxy_type_data.proxyObjects[id];

            var callback = function (event) {
                var proxyObject = this; // event.target;
                // var eventTypeName = CocoonJS.getKeyForValueInDictionary(proxyObject._cocoonjs_proxy_object_data.eventListeners, this); // Avoid closures ;)
                // TODO: Is there a way to retrieve the callbackId without a closure?
                var jsCode = "CocoonJS.App.callOriginProxyObjectEventListeners(" + JSON.stringify(proxyObject._cocoonjs_proxy_object_data.typeName) + ", " + proxyObject._cocoonjs_proxy_object_data.id + ", " + JSON.stringify(eventTypeName) + ");";
                CocoonJS.App.forwardAsync(jsCode);
            };

            proxyObject._cocoonjs_proxy_object_data.eventListeners[eventTypeName] = callback;

            // Finally add the event listener callback to the proxy object
            proxyObject.addEventListener(eventTypeName, callback);
        }
    };

    // TODO: We could add a removeDestinationProxyObjectEventListener although it seems that is not completely necessary.

    /**
     * Proxifies the XMLHttpRequest type for the environment where this call is made. After calling this function, all the new objects
     * of XMLHttpRequest that are instantiated, will be proxified objects that will make calls to the counterparts in the other environment (CocoonJS <-> WebView viceversa).
     * IMPORTANT NOTE: Remember to take down the proxification once you are done or to delete proxy objects whenever they are not needed anymore or memory leaks may occur.
     */
    CocoonJS.App.proxifyXHR = function () {
        var ATTRIBUTE_NAMES =
            [
                "timeout",
                "withCredentials",
                "upload",
                "status",
                "statusText",
                "responseType",
                "response",
                "responseText",
                "responseXML",
                "readyState"
            ];
        var FUNCTION_NAMES =
            [
                "open",
                "setRequestHeader",
                "send",
                "abort",
                "getResponseHeader",
                "getAllResponseHeaders",
                "overrideMimeType"
            ];
        var EVENT_HANDLER_NAMES =
            [
                "onloadstart",
                "onprogress",
                "onabort",
                "onerror",
                "onload",
                "ontimeout",
                "onloadend",
                "onreadystatechange"
            ];
        CocoonJS.App.setupOriginProxyType("XMLHttpRequest", ATTRIBUTE_NAMES, FUNCTION_NAMES, EVENT_HANDLER_NAMES);
    };

    /**
     * Proxifies the Audio type for the environment where this call is made. After calling this function, all the new objects
     * of Audio that are instantiated, will be proxified objects that will make calls to the counterparts in the other environment (CocoonJS <-> WebView viceversa).
     * IMPORTANT NOTE: Remember to take down the proxification once you are done or to delete proxy objects whenever they are not needed anymore or memory leaks may occur.
     */
    CocoonJS.App.proxifyAudio = function () {
        var ATTRIBUTE_NAMES =
            [
                "src",
                "loop",
                "volume",
                "preload"
            ];
        var FUNCTION_NAMES =
            [
                "play",
                "pause",
                "load",
                "canPlayType"
            ];
        var EVENT_HANDLER_NAMES =
            [
                "onended",
                "oncanplay",
                "oncanplaythrough",
                "onerror"
            ];
        CocoonJS.App.setupOriginProxyType("Audio", ATTRIBUTE_NAMES, FUNCTION_NAMES, EVENT_HANDLER_NAMES);
    };

    /**
     * Captures a image of the screen synchronously and saves it to a file. Sync mode allows to capture the screen in the middle of a frame rendering.
     * @param {string} fileName Desired file name and format (png or jpg). If no value is passed, "capture.png" value is used by default
     * @param {CocoonJS.App.StorageType} storageType The developer can specify the storage where it is stored. If no value is passed, the {@link CocoonJS.App.StorageType.TMP_STORAGE} value is used by default.
     * @param {CocoonJS.App.CaptureType} captureType. Optional value to choose capture type. [0: captures everything, 1: only captures cocoonjs surface 2: only captures system views]. @see CocoonJS.App.CaptureType
     * @return The URL of the saved file.
     * @throws exception if the image fails to be stored or there is another error.
     * @see CocoonJS.App.onCaptureScreenSucceeded
     * @see CocoonJS.App.onCaptureScreenFailed
     */
    CocoonJS.App.captureScreen = function (fileName, storageType, captureType) {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            return window.ext.IDTK_APP.makeCall("captureScreen", fileName, storageType, captureType);
        }
    };

    /**
     * Captures a image of the screen asynchronously and saves it to a file.
     * Async mode captures a final frame as soon as possible.
     * @param {string} Desired file name and format (png or jpg). If no value is passed, "capture.png" value is used by default
     * @param {CocoonJS.App.StorageType} [storageType] The developer can specify the storage where it is stored. If no value is passed, the {@link CocoonJS.App.StorageType.TMP_STORAGE} value is used by default.
     * @param {CocoonJS.App.CaptureType} captureType. Optional value to choose capture type. [0: captures everything, 1: only captures cocoonjs surface, 2: only captures system views]. @see CocoonJS.App.CaptureType
     * @param {function} callback. Response callback, check the error property to monitor errors. Check the 'url' property to get the URL of the saved Image
     */
    CocoonJS.App.captureScreenAsync = function (fileName, storageType, captureType, callback) {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            window.ext.IDTK_APP.makeCallAsync("captureScreen", fileName, storageType, captureType, callback);
        }
    };

    /**
     * Returns the device UUID
     * @return {string} The device UUID
     */
    CocoonJS.App.getDeviceId = function() {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            return window.ext.IDTK_APP.makeCall("getDeviceId");
        }
    };

    /**
     * Structure that defines the getDeviceInfo returned information
     */
    CocoonJS.App.DeviceInfo = {

        /**
        * The operating system name (ios, android,...)
        * @type string
        */
        os: null,

        /**
        * The operating system version (4.2.2, 5.0,...)
        * @type string
        */
        version: null,

        /**
        * The operating system screen density in dpi
        * @type string
        */
        dpi: null,

        /**
        * The device manufacturer (apple, samsung, lg,...)
        * @type string
        */
        brand: null,

        /**
        * The device model (iPhone 4S, SAMSUNG-SGH-I997, SAMSUNG-SGH-I997R, etc)
        * @type string
        */
        model: null,

        /**
        * The phone IMEI
        * Android: The phone IMEI is returned or null if the device has not telepohny
        * iOS: null is returned as we cannot get the IMEI in iOS, no public API available for that yet.
        * @type string
        */
        imei: null,

        /**
        * The platform Id
        * Android: The ANDROID_ID is used.
        * iOS: The OpenUDID is used as there is no Android ANDROID_ID equivalent in iOS
        * @type string
        */
        platformId: null,

        /**
        * The Odin generated id https://code.google.com/p/odinmobile/
        * @type string
        */
        odin: null,

        /**
        * The OpenUDID generated Id https://github.com/ylechelle/OpenUDID
        * @type string
        */
        openudid: null
    };

    /**
     * Returns the device Info
     * @return {CocoonJS.App.DeviceInfo} The device Info
     */
    CocoonJS.App.getDeviceInfo = function() {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            return window.ext.IDTK_APP.makeCall("getDeviceInfo");
        }
    };    

    /**
     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.App.onTextDialogFinished} event calls.
     * @name OnTextDialogFinishedListener
     * @function
     * @static
     * @memberOf CocoonJS.App
     * @param {string} text The text that was introduced in the text dialog when it was finished.
     */
    /**
     * This {@link CocoonJS.EventHandler} object allows listening to events called when the text dialog is finished by accepting it's content.
     * The callback function's documentation is represented by {@link CocoonJS.App.OnTextDialogFinishedListener}
     * @event
     * @static
     * @memberOf CocoonJS.App
     */
    CocoonJS.App.onTextDialogFinished = new CocoonJS.EventHandler("IDTK_APP", "App", "ontextdialogfinish");

    /**
     * This {@link CocoonJS.EventHandler} object allows listening to events called when the text dialog is finished by dismissing it's content.
     * The callback function does not receive any parameter.
     * @event
     * @static
     * @memberOf CocoonJS.App
     */
    CocoonJS.App.onTextDialogCancelled = new CocoonJS.EventHandler("IDTK_APP", "App", "ontextdialogcancel");

    /**
     * This {@link CocoonJS.EventHandler} object allows listening to events called when the text dialog is finished by accepting it's content.
     * The callback function does not receive any parameter.
     * @event
     * @static
     * @memberOf CocoonJS.App
     */
    CocoonJS.App.onMessageBoxConfirmed = new CocoonJS.EventHandler("IDTK_APP", "App", "onmessageboxconfirmed");

    /**
     * This {@link CocoonJS.EventHandler} object allows listening to events called when the text dialog is finished by dismissing it's content.
     * The callback function does not receive any parameter.
     * @event
     * @static
     * @memberOf CocoonJS.App
     */
    CocoonJS.App.onMessageBoxDenied = new CocoonJS.EventHandler("IDTK_APP", "App", "onmessageboxdenied");

    /**
     * This {@link CocoonJS.EventHandler} object allows listening to events called when the application is suspended.
     * The callback function does not receive any parameter.
     * @event
     * @static
     * @memberOf CocoonJS.App
     */
    CocoonJS.App.onSuspended = new CocoonJS.EventHandler("IDTK_APP", "App", "onsuspended");

    /**
     * This {@link CocoonJS.EventHandler} object allows listening to events called when the application is activated.
     * The callback function does not receive any parameter.
     * @event
     * @static
     * @memberOf CocoonJS.App
     */
    CocoonJS.App.onActivated = new CocoonJS.EventHandler("IDTK_APP", "App", "onactivated");

})();

//////////////////////////////////////
// COCOONJS_APP_FORCOCOONJS.JS		//
//////////////////////////////////////

(function()
{
    if (typeof window.CocoonJS === 'undefined' || window.CocoonJS === null) throw("The CocoonJS object must exist and be valid before adding more functionalities to an extension.");
    if (typeof window.CocoonJS.App === 'undefined' || window.CocoonJS.App === null) throw("The CocoonJS.App object must exist and be valid before adding more functionalities to it.");

    /**
    * This namespace represents all the basic functionalities available in the CocoonJS extension API.
    * @namespace
    */
    CocoonJS.App = CocoonJS.App ? CocoonJS.App : {};

    if (!CocoonJS.App.nativeExtensionObjectAvailable)
    {
        (function createWebView() { 
            CocoonJS.App.EmulatedWebView = document.createElement('div'); 
            CocoonJS.App.EmulatedWebView.setAttribute('id', 'CocoonJS_App_ForCocoonJS_WebViewDiv'); 
            CocoonJS.App.EmulatedWebView.style.width = 0; 
            CocoonJS.App.EmulatedWebView.style.height = 0; 
            CocoonJS.App.EmulatedWebView.style.position = "absolute"; 
            CocoonJS.App.EmulatedWebView.style.left = 0; 
            CocoonJS.App.EmulatedWebView.style.top = 0;
            CocoonJS.App.EmulatedWebView.style.backgroundColor = 'transparent';
            CocoonJS.App.EmulatedWebView.style.border = "0px solid #000"; 
            CocoonJS.App.EmulatedWebViewIFrame = document.createElement("IFRAME"); 
            CocoonJS.App.EmulatedWebViewIFrame.setAttribute('id', 'CocoonJS_App_ForCocoonJS_WebViewIFrame');
            CocoonJS.App.EmulatedWebViewIFrame.setAttribute('name', 'CocoonJS_App_ForCocoonJS_WebViewIFrame');
            CocoonJS.App.EmulatedWebViewIFrame.style.width = 0; 
            CocoonJS.App.EmulatedWebViewIFrame.style.height = 0; 
            CocoonJS.App.EmulatedWebViewIFrame.frameBorder = 0;
            CocoonJS.App.EmulatedWebViewIFrame.allowtransparency = true;
            CocoonJS.App.EmulatedWebView.appendChild(CocoonJS.App.EmulatedWebViewIFrame);
            if(!document.body)
            document.body = document.createElement("body");
            document.body.appendChild(CocoonJS.App.EmulatedWebView);
        })(); 
    }

    /**
    * Pauses the CocoonJS JavaScript execution loop.
    * @function
    * @augments CocoonJS.App
    */
    CocoonJS.App.pause = function()
    {
        if (CocoonJS.App.nativeExtensionObjectAvailable)
        {
            return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_APP", "pause", arguments);
        }
    };

    /**
    * Resumes the CocoonJS JavaScript execution loop.
    * @static
    * @function
    */
    CocoonJS.App.resume = function()
    {
        if (CocoonJS.App.nativeExtensionObjectAvailable)
        {
            return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_APP", "resume", arguments);
        }
    };

    /**
    * Loads a resource in the WebView environment from the CocoonJS environment.
    * @function
    * @param {string} path The path to the resource. It can be a remote URL or a path to a local file.
    * @param {CocoonJS.App.StorageType} [storageType] An optional parameter to specify at which storage in the device the file path is stored. By default, APP_STORAGE is used.
    * @see CocoonJS.App.load
    * @see CocoonJS.App.onLoadInTheWebViewSucceed
    * @see CocoonJS.App.onLoadInTheWebViewFailed
    */
    CocoonJS.App.loadInTheWebView = function(path, storageType)
    {
        if (CocoonJS.App.nativeExtensionObjectAvailable)
        {
            // TODO: All this code should be changed to a simple call makeNativeExtensionObjectFunctionCall when the native argument control is improved.
            var javaScriptCodeToForward = "ext.IDTK_APP.makeCall('loadPath'";
            if (typeof path !== 'undefined')
            {
                javaScriptCodeToForward += ", '" + path + "'";
                if (typeof storageType !== 'undefined')
                {
                    javaScriptCodeToForward += ", '" + storageType + "'";
                }
            }
            javaScriptCodeToForward += ");";

            return CocoonJS.App.forwardAsync(javaScriptCodeToForward);
        }
        else if (!navigator.isCocoonJS)
        {
            var xhr = new XMLHttpRequest();

            xhr.onreadystatechange = function(event) {
                if (xhr.readyState === 4)
                {
                    if (xhr.status === 200)
                    {
                        var callback= function(event){
                            CocoonJS.App.onLoadInTheWebViewSucceed.notifyEventListeners(path);
                            CocoonJS.App.EmulatedWebViewIFrame.removeEventListener("load", callback);
                        };

                        CocoonJS.App.EmulatedWebViewIFrame.addEventListener(
                            "load", 
                            callback
                        );
                        CocoonJS.App.EmulatedWebViewIFrame.contentWindow.location.href= path;
                    }
                    else if (xhr.status === 404)
                    {
                        this.onreadystatechange = null;
                        CocoonJS.App.onLoadInTheWebViewFailed.notifyEventListeners(path);
                    }
                }
            };
            xhr.open("GET", path, true);
            xhr.send();
        }
    };

    /**
     * Reloads the last loaded path in the WebView context.
     * @function
     */
    CocoonJS.App.reloadWebView = function()
    {
        if (CocoonJS.App.nativeExtensionObjectAvailable)
        {
            return CocoonJS.App.forwardAsync("ext.IDTK_APP.makeCall('reload');");
        }
        else if (!navigator.isCocoonJS)
        {
            CocoonJS.App.EmulatedWebViewIFrame.contentWindow.location.reload();
        }
    };

    /**
    * Shows the webview.
    * @function
    * @param {int} x The top lef x coordinate of the rectangle where the webview will be shown.
    * @param {int} y The top lef y coordinate of the rectangle where the webview will be shown.
    * @param {width} y The width of the rectangle where the webview will be shown.
    * @param {height} y The height of the rectangle where the webview will be shown.
    */
    CocoonJS.App.showTheWebView = function(x, y, width, height)
    {
        if (CocoonJS.App.nativeExtensionObjectAvailable)
        {
            var javaScriptCodeToForward = "ext.IDTK_APP.makeCall('show'";
            if (typeof x !== 'undefined' && typeof y !== 'undefined' && typeof width !== 'undefined' && typeof height !== 'undefined')
            {
                javaScriptCodeToForward += ", " + x + ", " + y + ", " + width + ", " + height;
            }
            javaScriptCodeToForward += ");";

            return CocoonJS.App.forwardAsync(javaScriptCodeToForward);
        }
        else if (!navigator.isCocoonJS)
        {
            CocoonJS.App.EmulatedWebViewIFrame.style.width = (width ? width : window.innerWidth)+'px';
            CocoonJS.App.EmulatedWebViewIFrame.style.height = (height ? height : window.innerHeight)+'px';
            CocoonJS.App.EmulatedWebView.style.left = (x ? x : 0)+'px';
            CocoonJS.App.EmulatedWebView.style.top = (y ? y : 0)+'px';
            CocoonJS.App.EmulatedWebView.style.width = (width ? width : window.innerWidth)+'px';
            CocoonJS.App.EmulatedWebView.style.height = (height ? height : window.innerHeight)+'px';
            CocoonJS.App.EmulatedWebView.style.display = "block";
        }
    };

    /**
    * Hides the webview.
    * @function
    */
    CocoonJS.App.hideTheWebView = function()
    {
        if (CocoonJS.App.nativeExtensionObjectAvailable)
        {
            var javaScriptCodeToForward = "ext.IDTK_APP.makeCall('hide');";
            return CocoonJS.App.forwardAsync(javaScriptCodeToForward);
        }
        else if (!navigator.isCocoonJS)
        {
            CocoonJS.App.EmulatedWebView.style.display = "none";
        }
    };

    /**
    * Marks a audio file to be used as music by the system. CocoonJS, internally, differentiates among music files and sound files.
    * Music files are usually bigger in size and longer in duration that sound files. There can only be just one music file 
    * playing at a specific given time. The developer can mark as many files as he/she wants to be treated as music. When the corresponding
    * HTML5 audio object is used, the system will automatically know how to treat the audio resource as music or as sound.
    * Note that it is not mandatory to use this function. The system automatically tries to identify if a file is suitable to be treated as music
    * or as sound by checking file size and duration thresholds. It is recommended, though, that the developer specifies him/herself what he/she considers
    * to be music.
    * @function
    * @param {string} audioFilePath The same audio file path that will be used to create HTML5 audio objects.
    */
    CocoonJS.App.markAsMusic = function(audioFilePath)
    {
        if (CocoonJS.App.nativeExtensionObjectAvailable)
        {
           return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_APP", "addForceMusic", arguments);
        }
    };

    /**
    * Activates or deactivates the antialas functionality from the CocoonJS rendering.
    * @function
    * @param {boolean} enable A flag that indicates if the antialas should be activated (true) or deactivated (false).
    */
    CocoonJS.App.setAntialias = function(enable)
    {
        if (CocoonJS.App.nativeExtensionObjectAvailable)
        {
           return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_APP", "setDefaultAntialias", arguments);
        }
    };

    /**
    * Sets a callback function that will be called whenever the system tries to finish the app.
    * The developer can specify how the system will react to the finish of the app by returning a
    * boolean value in the callback function: true means, close the app, false means that the developer
    * will handle the app close.
    * A common example of this is the back button in Android devices. When the back button is pressed, this
    * callback will be called and the system will react depending on the developers choice finishing, or not,
    * the application.
    * @function
    * @param {function} appShouldFinishCallback A function object that will be called when the system
    * determines that the app should be finished. This function must return a true or a false value
    * depending on what the developer wants: true === finish the app, false === do not close the app.
    */
    CocoonJS.App.setAppShouldFinishCallback = function(appShouldFinishCallback)
    {
        if (navigator.isCocoonJS)
        {
            window.onidtkappfinish = appShouldFinishCallback;
        }
    }

    /**
    * Sets the texture reduction options. The texture reduction is a process that allows big images to be reduced/scaled down when they are loaded.
    * Although the quality of the images may decrease, it can be very useful in low end devices or those with limited amount of memory.
    * The function sets the threshold on image size (width or height) that will be used in order to know if an image should be reduced or not.
    * It also allows to specify a list of strings to identify in which images file paths should be applied (when they meet the size threshold requirement) 
    * The developer will still think that the image is of the original size. CocoonJS handles all of the internals to be able to show the image correctly.
    * IMPORTANT NOTE: This function should be called when the application is initialized before any image is set to be loaded for obvious reasons ;).
    * and in which sould be forbid (even if they meet the threshold requirement).
    * @function
    * @param {number} sizeThreshold This parameter specifies the minimun size (either width or height) that an image should have in order to be reduced.
    * @param {string or array} [applyTo] This parameter can either be a string or an array of strings. It's purpose is to specify one (the string) or more (the array) substring(s) 
    * that will be compared against the file path of an image to be loaded in order to know if the reduction should be applied or not. If the image meets the
    * threshold size requirement and it's file path contains this string (or strings), it will be reduced. This parameter can also be null.
    * @param {string or array} [forbidFor] This parameter can either be a string or an array of strings. It's purpose is to specify one (the string) or more (the array) substring(s) 
    * that will be compared against the file path of an image to be loaded in order to know if the reduction should be applied or not. If the image meets the
    * threshold size requirement and it's file path contains this string (or strings), it won't be reduced. This parameter should be used in order to mantain the 
    * quality of some images even they meet the size threshold requirement.
    */
    CocoonJS.App.setTextureReduction = function(sizeThreshold, applyTo, forbidFor)
    {
        if (CocoonJS.App.nativeExtensionObjectAvailable)
        {
            CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_APP", "setDefaultTextureReducerThreshold", arguments);
        }
    };


    /**
    * Prints to the console the memory usage of the currently alive textures
    * @function
    */
    CocoonJS.App.logMemoryInfo = function()
    {
        if (CocoonJS.App.nativeExtensionObjectAvailable)
        {
            return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_APP", "logMemoryInfo", arguments);
        }
    };

    /**
    * Enable CocoonJS Webview FPS overlay.
    * @function
    */
    CocoonJS.App.enableFPSInTheWebView = function(fpsLayout, textColor)
    {
        if (!CocoonJS.App.fpsInTheWebViewEnabled)
        {
            fpsLayout = fpsLayout ? fpsLayout : CocoonJS.App.FPSLayout.TOP_RIGHT;
            textColor = textColor ? textColor : "white";
            var jsCode = "" +
                "(function()" +
                "{" +
                    "var COCOONJS_WEBVIEW_EXTENSION_SCRIPT_FILES = ['js/CocoonJSExtensions/CocoonJS.js', 'js/CocoonJSExtensions/CocoonJS_App.js', 'js/CocoonJSExtensions/CocoonJS_App_ForWebView.js'];" +
                    "var loadedScriptCounter = 0;" + 
                    "var loadedScriptFunction = function() " +
                    "{ " +
                        "loadedScriptCounter++;"+
                        "if (loadedScriptCounter >= COCOONJS_WEBVIEW_EXTENSION_SCRIPT_FILES.length)"+
                        "{"+
                            "CocoonJS.App.enableFPS(" + JSON.stringify(fpsLayout) + ", " + JSON.stringify(textColor) + ");"+
                        "}"+
                    "};"+
                    "for (var i = 0; i < COCOONJS_WEBVIEW_EXTENSION_SCRIPT_FILES.length; i++)"+
                    "{"+
                        "var s = document.createElement('script');"+
                        "s.onload = loadedScriptFunction;"+
                        "s.src = COCOONJS_WEBVIEW_EXTENSION_SCRIPT_FILES[i];"+
                        "document.body.appendChild(s);"+
                    "}" +
                "})();";
            setTimeout(function()
            {
                CocoonJS.App.forward(jsCode);
            }, 3000);
            CocoonJS.App.fpsInTheWebViewEnabled = true;
        }
    };

    /**
    * Disable CocoonJS Webview FPS overlay.
    * @function
    */
    CocoonJS.App.disableFPSInTheWebView = function()
    {
        // TODO: Implement this function.
    };

    /**
     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.App.onLoadInTheWebViewSucceed} event calls.
     * @name OnLoadInTheWebViewSucceedListener
     * @function
     * @static
     * @memberOf CocoonJS.App
     * @param {string} pageURL The URL of the page that had been loaded in the webview.
     */
    /**
    * This {@link CocoonJS.EventHandler} object allows listening to events called when the WebView load has completed successfully.
    * The callback function's documentation is represented by {@link CocoonJS.App.OnLoadInTheWebViewSucceedListener}
    * @event
    * @static
    * @memberOf CocoonJS.App
    * @param {string} pageURL A string that represents the page URL loaded.
    */
    CocoonJS.App.onLoadInTheWebViewSucceed = new CocoonJS.EventHandler("IDTK_APP", "App", "forwardpageload");

    /**
     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.App.onLoadInTheWebViewFailed} event calls.
     * @name OnLoadInTheWebViewFailedListener
     * @function
     * @static
     * @memberOf CocoonJS.App
     * @param {string} pageURL The URL of the page that had been loaded in the webview.
     */
    /**
    * This {@link CocoonJS.EventHandler} object allows listening to events called when the WebView load fails.
    * The callback function's documentation is represented by {@link CocoonJS.App.OnLoadInTheWebViewFailedListener}
    * @event
    * @static
    * @memberOf CocoonJS.App
    */
    CocoonJS.App.onLoadInTheWebViewFailed = new CocoonJS.EventHandler("IDTK_APP", "App", "forwardpagefail");
    
})();

//////////////////////////////////////
// COCOONJS_AD.JS                   //
//////////////////////////////////////

(function()
{
    // The CocoonJS must exist before creating the extension.
    if (typeof window.CocoonJS === 'undefined' || window.CocoonJS === null) throw("The CocoonJS object must exist and be valid before creating any extension object.");

    /**
    * This namespace represents the CocoonJS Advertisement extension API.
    * @namespace
    */
    CocoonJS.Ad = {};

    CocoonJS.Ad.nativeExtensionObjectAvailable = CocoonJS.nativeExtensionObjectAvailable && typeof window.ext.IDTK_SRV_AD !== 'undefined';

    /**
    * The predefined possible layouts for a banner ad.
    * @namespace 
    */
	CocoonJS.Ad.BannerLayout = 
	{
		/**
		* Specifies that the banner must be shown in the top of the screen and vertically centered.
		*/
	    TOP_CENTER      : "TOP_CENTER",

		/**
		* Specifies that the banner must be shown in the bottom of the screen and vertically centered.
		*/
	    BOTTOM_CENTER   : "BOTTOM_CENTER"
	};

	/**
    * A rectangle object that contains the banner dimensions
    * @namespace 
    * @constructor
    * @param {int} x The top lef x coordinate of the rectangle.
    * @param {int} y The top lef y coordinate of the rectangle.
    * @param {width} y The rectangle width.
    * @param {height} y The rectangle height.
    */
	CocoonJS.Ad.Rectangle = function(x, y, width, height) 
	{
		/**
		* The top lef x coordinate of the rectangle 
		* @field 
		* @type {int}
		*/
	    this.x = x;

		/**
		* The top lef y coordinate of the rectangle 
		* @field 
		* @type {int}
		*/
	    this.y = y;

	    /**
		* The rectangle width
		* @field 
		* @type {int}
		*/
	    this.width = width;

	    /**
		* The rectangle height
		* @field 
		* @type {int}
		*/
	    this.height = height;
	};

	CocoonJS.Ad.Banner = function(id)
	{
		if (typeof id !== 'number') throw "The given ad ID is not a number.";

		this.id = id;
		var me = this;

		/**
    	* This {@link CocoonJS.EventHandler} object allows listening to events called when a banner is shown.
    	* The callback function does not receive any parameter.
    	* @static
    	* @event
    	*/
		this.onBannerShown = new CocoonJS.EventHandler("IDTK_SRV_AD", "Ad", "onbannershow", function(sourceListener, args)
    	{
    		if (me.id === args[0]) 
    		{
    			sourceListener();
    		}
    	});

    	/**
    	* This {@link CocoonJS.EventHandler} object allows listening to events called when a banner is hidden.
    	* The callback function does not receive any parameter.
    	* @static
    	* @event
    	*/
		this.onBannerHidden = new CocoonJS.EventHandler("IDTK_SRV_AD", "Ad", "onbannerhide", function(sourceListener, args)
    	{
    		if (me.id === args[0]) 
    		{
    			sourceListener();
    		}
    	});

    	/**
    	* This {@link CocoonJS.EventHandler} object allows listening to events called when a banner is ready (cached).
    	* The callback function does not receive any parameter.
    	* @param {number} width The banner width
    	* @param {number} height The banner height
    	* @static
    	* @event
    	*/
		this.onBannerReady = new CocoonJS.EventHandler("IDTK_SRV_AD", "Ad", "onbannerready", function(sourceListener, args)
    	{
    		if (me.id === args[0]) 
    		{
    			sourceListener(args[1], args[2]);
    		}
    	});
	};

	CocoonJS.Ad.Banner.prototype = {

		/**
		* Shows a banner ad if available.
		* @function
		*/
		showBanner : function()
		{
			if (CocoonJS.Ad.nativeExtensionObjectAvailable)
			{
				CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_AD", "showBanner", [this.id], true);
			}
		},

		/**
		* Hides the banner ad if it was being shown.
		* @function
		*/
		hideBanner : function()
		{
			if (CocoonJS.Ad.nativeExtensionObjectAvailable)
			{
				CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_AD", "hideBanner", [this.id], true);
			}
		},

		/**
		* Refreshes the banner.
		* @function
		*/
		refreshBanner : function()
		{
			if (CocoonJS.Ad.nativeExtensionObjectAvailable)
			{
				CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_AD", "refreshBanner", [this.id], true);
			}
		},

		/**
		* Gets the rectangle representing the banner screen position.
		* @function
		* @return {CocoonJS.Ad.Rectangle} rectangle The rectangle representing the banner position and domensions.
		*/
		getRectangle : function()
		{
			if (CocoonJS.Ad.nativeExtensionObjectAvailable)
			{
				return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_AD", "getRectangle", [this.id]);
			}
		},

		/**
		* Sets the rectangle where the banner ad is going to be shown.
		* @function
		* @param {CocoonJS.Ad.Rectangle} rect The rectangle representing the banner position and domensions.
		*/
		setRectangle : function(rect)
		{
			if (CocoonJS.Ad.nativeExtensionObjectAvailable)
			{
				CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_AD", "setRectangle", [this.id, rect],true);
			}
		},

		/**
		* Sets the rectangle where the banner ad is going to be shown.
		* You can use this method if you want to have better control of the banner screen positioning.
		* @function
		* @param {CocoonJS.Ad.BannerLayout} bannerLayout The layout where the bannerwill be placed.
		*/
		setBannerLayout : function(bannerLayout)
		{
			if (CocoonJS.Ad.nativeExtensionObjectAvailable)
			{
				CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_AD", "setBannerLayout", [this.id, bannerLayout],true);
			}
		}
	};

	CocoonJS.Ad.Fullscreen = function(id)
	{
		if (typeof id !== 'number') throw "The given ad ID is not a number.";

		this.id = id;
		var me = this;

		/**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when a full screen ad is shown.
	    * The callback function does not receive any parameter.
	    * @static
	    * @event
	    */
		this.onFullScreenShown = new CocoonJS.EventHandler("IDTK_SRV_AD", "Ad", "onfullscreenshow", function(sourceListener, args)
    	{
    		if (me.id === args[0]) {
    			sourceListener();
    		}
    	});

		/**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when a full screen ad is hidden.
	    * The callback function does not receive any parameter.
	    * @static
	    * @event
	    */
    	this.onFullScreenHidden = new CocoonJS.EventHandler("IDTK_SRV_AD", "Ad", "onfullscreenhide", function(sourceListener, args)
    	{
    		if (me.id === args[0]) {
    			sourceListener();
    		}
    	});

    	/**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when a full screen ad is ready (cached).
	    * The callback function does not receive any parameter.
	    * @static
	    * @event
	    */
    	this.onFullScreenReady = new CocoonJS.EventHandler("IDTK_SRV_AD", "Ad", "onfullscreenready", function(sourceListener, args)
    	{
    		if (me.id === args[0]) {
    			sourceListener();
    		}
    	});
	};

	CocoonJS.Ad.Fullscreen.prototype = {

		/**
		* Shows a full screen ad if available.
		* @function
		* @see CocoonJS.Ad.onFullScreenShown
		* @see CocoonJS.Ad.onFullScreenHidden
		*/
		showFullScreen : function()
		{
			if (CocoonJS.Ad.nativeExtensionObjectAvailable)
			{
				return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_AD", "showFullScreen", [this.id], true);
			}
		},

		/**
		* Refreshes the fullscreen.
		* @function
		*/
		refreshFullScreen : function()
		{
			if (CocoonJS.Ad.nativeExtensionObjectAvailable)
			{
				return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_AD", "refreshFullScreen", [this.id], true);
			}
		}
	};

	/**
	* Initialize the service with service level initialization parameters.
	* @function
	* @param {object} An object with the required initialization parameters for the service.
	*/
	CocoonJS.Ad.requestInitialization = function(parameters)
	{
        if (typeof parameters === "undefined") {
            parameters = {};
        }

		if (CocoonJS.Ad.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_AD", "requestInitialization", arguments, true);
		}
	};

	/**
	* Creates a new banner ad.
	* @function
	* @param {object} An object containing the properties the ad will need for its initialization.
	*/
	CocoonJS.Ad.createBanner = function(parameters)
	{
		if (typeof parameters === "undefined") {
            parameters = {};
        }

		if (CocoonJS.Ad.nativeExtensionObjectAvailable)
		{
			var adId = CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_AD", "createBanner", [parameters]);
			var banner = new CocoonJS.Ad.Banner(adId);

			return banner;
		}
	};

	/**
	* Releases a banner.
	* @function
	* @param {object} The banner ad object to be released.
	*/
	CocoonJS.Ad.releaseBanner = function(banner)
	{
		if (typeof banner === "undefined") {
            throw "The banner ad object to be released is undefined"
        }

		if (CocoonJS.Ad.nativeExtensionObjectAvailable)
		{
			CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_AD", "releaseBanner", [banner.id]);
		}
	};

	/**
	* Creates a new fullscreen ad.
	* @function
	* @param {object} An object containing the properties the ad will need for its initialization.
	*/
	CocoonJS.Ad.createFullscreen = function(parameters)
	{
		if (typeof parameters === "undefined") {
            parameters = {};
        }

		if (CocoonJS.Ad.nativeExtensionObjectAvailable)
		{
			var adId = CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_AD", "createFullscreen", [parameters]);
			var fullscreen = new CocoonJS.Ad.Fullscreen(adId);

			return fullscreen;
		}
	};

	/**
	* Releases a fullscreen ad.
	* @function
	* @param {object} The fullscreen ad object to be released.
	*/
	CocoonJS.Ad.releaseFullscreen = function(fullscreen)
	{
		if (typeof fullscreen === "undefined") {
            throw "The fullscreen ad object to be released is undefined"
        }

		if (CocoonJS.Ad.nativeExtensionObjectAvailable)
		{
			CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_AD", "releaseFullscreen", [fullscreen.id]);
		}
	};

	/**
	* Shows a banner ad if available.
	* @function
	* @see CocoonJS.Ad.setBannerLayout
	* @see CocoonJS.Ad.onBannerShown
	*/
	CocoonJS.Ad.showBanner = function()
	{
		if (CocoonJS.Ad.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_AD", "showBanner", arguments, true);
		}
	};

	/**
	* Hides the banner ad if it was being shown.
	* @function
	*/
	CocoonJS.Ad.hideBanner = function()
	{
		if (CocoonJS.Ad.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_AD", "hideBanner", arguments, true);
		}
	};

	/**
	* Refreshes the banner.
	* @function
	*/
	CocoonJS.Ad.refreshBanner = function()
	{
		if (CocoonJS.Ad.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_AD", "refreshBanner", arguments, true);
		}
	};

	/**
	* Shows a full screen ad if available.
	* @function
	* @see CocoonJS.Ad.onFullScreenShown
	* @see CocoonJS.Ad.onFullScreenHidden
	*/
	CocoonJS.Ad.showFullScreen = function()
	{
		if (CocoonJS.Ad.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_AD", "showFullScreen", arguments, true);
		}
	};

	/**
	* Refreshes the fullscreen.
	* @function
	*/
	CocoonJS.Ad.refreshFullScreen = function()
	{
		if (CocoonJS.Ad.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_AD", "refreshFullScreen", arguments, true);
		}
	};

	/**
	* Makes a request to preload a banner ad.
	* @function
	*/
	CocoonJS.Ad.preloadBanner = function()
	{
		if (CocoonJS.Ad.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_AD", "preloadBanner", arguments, true);
		}
	};

	/**
	* Makes a request to preload a full screen ad.
	* @function
	*/
	CocoonJS.Ad.preloadFullScreen = function()
	{
		if (CocoonJS.Ad.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_AD", "preloadFullScreen", arguments, true);
		}
	};

	/**
	* Sets the rectangle where the banner ad is going to be shown.
	* @function
	* @param {CocoonJS.Ad.Rectangle} rect The rectangle representing the banner position and domensions.
	*/
	CocoonJS.Ad.setRectangle = function()
	{
		if (CocoonJS.Ad.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_AD", "setRectangle", arguments, true);
		}
	};

	/**
	* Gets the rectangle representing the banner screen position.
	* @function
	* @return {CocoonJS.Ad.Rectangle} rectangle The rectangle representing the banner position and domensions.
	*/
	CocoonJS.Ad.getRectangle = function()
	{
		if (CocoonJS.Ad.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_AD", "getRectangle", arguments);
		}
	};

	/**
	* Sets the rectangle where the banner ad is going to be shown.
	* You can use this method if you want to have better control of the banner screen positioning.
	* @function
	* @param {CocoonJS.Ad.BannerLayout} bannerLayout The layout where the bannerwill be placed.
	*/
	CocoonJS.Ad.setBannerLayout = function(bannerLayout)
	{
		if (CocoonJS.Ad.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_AD", "setBannerLayout", arguments, true);
		}
	};

    /**
    * This {@link CocoonJS.EventHandler} object allows listening to events called when a banner is shown.
    * The callback function does not receive any parameter.
    * @static
    * @event
    */
	CocoonJS.Ad.onBannerShown = new CocoonJS.EventHandler("IDTK_SRV_AD", "Ad", "onbannershow");

	/**
    * This {@link CocoonJS.EventHandler} object allows listening to events called when a banner is hidden.
    * The callback function does not receive any parameter.
    * @static
    * @event
    */
	CocoonJS.Ad.onBannerHidden = new CocoonJS.EventHandler("IDTK_SRV_AD", "Ad", "onbannerhide"); 

	/**
	* This {@link CocoonJS.EventHandler} object allows listening to events called when a banner is ready (cached).
	* The callback function does not receive any parameter.
	* @param {number} width The banner width
	* @param {number} height The banner height
	* @static
	* @event
	*/
	CocoonJS.Ad.onBannerReady = new CocoonJS.EventHandler("IDTK_SRV_AD", "Ad", "onbannerready"); 

    /**
    * This {@link CocoonJS.EventHandler} object allows listening to events called when a full screen ad is shown.
    * The callback function does not receive any parameter.
    * @static
    * @event
    */
	CocoonJS.Ad.onFullScreenShown = new CocoonJS.EventHandler("IDTK_SRV_AD", "Ad", "onfullscreenshow"); 

    /**
    * This {@link CocoonJS.EventHandler} object allows listening to events called when a full screen ad is hidden.
    * The callback function does not receive any parameter.
    * @static
    * @event
    */
	CocoonJS.Ad.onFullScreenHidden = new CocoonJS.EventHandler("IDTK_SRV_AD", "Ad", "onfullscreenhide");

	/**
    * This {@link CocoonJS.EventHandler} object allows listening to events called when a full screen ad is ready (cached).
    * The callback function does not receive any parameter.
    * @static
    * @event
    */
	CocoonJS.Ad.onFullScreenReady = new CocoonJS.EventHandler("IDTK_SRV_AD", "Ad", "onfullscreenready"); 

})();

//////////////////////////////////////
// COCOONJS_STORE.JS                //
//////////////////////////////////////

(function()
{
    // The CocoonJS must exist before creating the extension.
    if (typeof window.CocoonJS === 'undefined' || window.CocoonJS === null) throw("The CocoonJS object must exist and be valid before creating any extension object.");

    /**
    * This namespace represents the CocoonJS In-App Purchase extension.
    * @namespace
    */
    CocoonJS.Store = {};

    CocoonJS.Store.nativeExtensionObjectAvailable = CocoonJS.nativeExtensionObjectAvailable && typeof window.ext.IDTK_SRV_STORE !== 'undefined';

	/**
	* The data structure that represents the information of a product in the store.
	* @namespace
	* @constructor
	* @param {string} The id of the product.
	* @param {string} The alias of the product.
	* @param {CocoonJS.Store.ProductType} The product type @see CocoonJS.Store.ProductType.
	* @param {string} The title of the product.
	* @param {string} The description of the product.
	* @param {string} The localized price of the product.
	* @param {string} The URL of the asset to be downloaded for this purchase.
	*/
	CocoonJS.Store.ProductInfo = function(productAlias, productId, productType, title, description, price, localizedPrice, downloadURL)
	{
		/**
		* The id of the product.
		* @field
		* @type string
		*/
		this.productId = productId;

		/**
		* The alias of the product.
		* @field
		* @type string
		*/
		this.productAlias = productAlias;

		/**
		* The product type @see CocoonJS.Store.ProductType
		* @field
		* @type CocoonJS.Store.ProductType
		*/
		this.productType = productType;

		/**
		* The title of the product.
		* @field
		* @type string
		*/
		this.title = title;

		/**
		* The description of the product.
		* @field
		* @type string
		*/
		this.description = description;

		/**
		* The price of the product.
		* @field
		* @type string
		*/
		this.price = price;

		/**
		* The localized price of the product.
		* @field
		* @type string
		*/
		this.localizedPrice = localizedPrice;

		/**
		* The URL of the asset to be downloaded for this purchase.
		* @field
		* @type string
		*/
		this.downloadURL = downloadURL;

		return this;
	};

	/**
    * The predefined possible states of a purchase.
    * @namespace 
    */
	CocoonJS.Store.ProductType = 
	{
		/**
		* A consumable product. See platform documentation for further information.
		*/
	    CONSUMABLE : 0,

		/**
		* A non-cunsumable product. . See platform documentation for further information.
		*/
	    NON_CONSUMABLE : 1,

	    /**
		* An auto-renewable subscription. See platform documentation for further information.
		*/
	    AUTO_RENEWABLE_SUBSCRIPTION : 2,

	    /**
		* A free subscription. See platform documentation for further information.
		*/
	    FREE_SUBSCRIPTION : 3,

	    /**
		* A non-renewable subscription. See platform documentation for further information.
		*/
	    NON_RENEWABLE_SUBSCRIPTION : 4
	};

	/**
    * The predefined possible store types.
    * @namespace 
    */
	CocoonJS.Store.StoreType = 
	{
		/**
		* Apple AppStore
		*/
	    APP_STORE : 0,

	    /**
	    * Android Play Store
	    */
	    PLAY_STORE : 1,

		/**
		* Mock Store
		*/
		MOCK_STORE : 2,

		/**
	    * Amazon AppStore
	    */
	    CHROME_STORE : 3,

	    /**
	    * Amazon AppStore
	    */
	    AMAZON_STORE : 4,

	    /**
	    * Nook Store
	    */
	    NOOK_STORE : 5
	};

	/**
	* The data structure that represents the information of a purchase.
	* @namespace
	* @constructor
	* @param {string} The transaction id of a purchase.
	* @param {string} The time when the purchase was done in seconds since 1970.
	* @param {CocoonJS.Store.PurchaseState} The state of the purchase. @see CocoonJS.Store.PurchaseState
	* @param {string} The product id related to this purchase.
	* @param {number} The number of products of the productId kind purchased in this transaction.
	*/
	CocoonJS.Store.PurchaseInfo = function(transactionId, purchaseTime, purchaseState, productId, quantity)
	{
		/**
		* The transaction id of a purchase.
		* @field
		* @type string
		*/
		this.transactionId = transactionId;

		/**
		* The time when the purchase was done in seconds since 1970.
		* @field
		* @type string
		*/
		this.purchaseTime = purchaseTime;

		/**
		* The state of the purchase. @see CocoonJS.Store.PurchaseState
		* @field
		* @type CocoonJS.Store.PurchaseState
		*/
		this.purchaseState = purchaseState;

		/**
		* The product id related to this purchase.
		* @field
		* @type string
		*/
		this.productId = productId;

		/**
		* The number of products of the productId kind purchased in this transaction.
		* @field
		* @type number
		*/
		this.quantity = quantity;

		return this;
	};

	/**
    * The predefined possible states of a purchase.
    * @namespace 
    */
	CocoonJS.Store.PurchaseState = 
	{
		/**
		* The product has been successfully purchased. The transaction has ended successfully.
		*/
	    PURCHASED : 0,

		/**
		* The purchase has been canceled.
		*/
	    CANCELED : 1,

	    /**
		* The purchase has been refunded.
		*/
	    REFUNDED : 2,

	    /**
		* The purchase (subscriptions only) has expired and is no longer valid.
		*/
	    EXPIRED : 3
	};

	/**
	* Gets the name of the native store implementation. 
	* @return {CocoonJS.Store.StoreType} The store type
	* @function
	*/ 
	CocoonJS.Store.getStoreType = function()
	{
		if (CocoonJS.Store.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_STORE", "getStoreType", arguments);
		}
	};

	/**
	* Initialize the service with service level initialization parameters.
	* @function
	* @param {object} An object with the required initialization parameters for the service.
	*/
	CocoonJS.Store.requestInitialization = function(parameters)
	{
        if (typeof parameters === "undefined") 
        {
            parameters = {};
        }
        else
        {
        	if (parameters['managed'] !== undefined) parameters['remote'] = parameters['managed'];
        	if (parameters['sandbox'] !== undefined) parameters['debug'] = parameters['sandbox'];
        }

		if (CocoonJS.Store.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_STORE", "requestInitialization", arguments, true);
		}
	};

	/**
	* Starts the Store Service. 
	* This will make the system to initialize the Store Service and probably Store callbacks will start to be received after calling this method so you should have set your event handler before calling this method so don't lose any callback.
	* @function
	*/ 
	CocoonJS.Store.start = function()
	{
		if (CocoonJS.Store.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_STORE", "start", arguments);
		}
	};

	/**
	* This method allows you to check is the  Store service is available in this platform. 
	* Not all iOS and Android devices will have the Store service available so you should check if it is before calling any other method.
	* @function
	* @return {boolean} True if the service is available and false otherwise.
	*/ 
	CocoonJS.Store.canPurchase = function()
	{
		if (CocoonJS.Store.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_STORE", "canPurchase", arguments);
		}
	};

	/**
	* Fetches the products from the CocoonJS Cloud Compiling service store configuration. 
	* The request is monitored using the {@link CocoonJS.Store.onProductsFetchStarted}, {@link CocoonJS.Store.onProductsFetchCompleted} and {@link CocoonJS.Store.onProductsFetchFailed} event handlers.
	* @deprecated You should now use fetchProductsFromStore. We don't support cloud products now.
	* @function
	* @see CocoonJS.Store.onProductsFetchStarted
	* @see CocoonJS.Store.onProductsFetchCompleted
	* @see CocoonJS.Store.onProductsFetchFailed
	*/ 
	CocoonJS.Store.fetchProductsFromServer = function()
	{
		if (CocoonJS.Store.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_STORE", "fetchProductsFromServer", arguments, true);
		}
	};

	/**
	* Fetches the products information from the Store. 
	* The request is monitored using the {@link CocoonJS.Store.onProductsFetchStarted}, {@link CocoonJS.Store.onProductsFetchCompleted} and {@link CocoonJS.Store.onProductsFetchFailed} event handlers.
	* @function
	* @param {array} productIds An array with the ids of the products to retrieve information from.
	* @see CocoonJS.Store.onProductsFetchStarted
	* @see CocoonJS.Store.onProductsFetchCompleted
	* @see CocoonJS.Store.onProductsFetchFailed
	*/ 
	CocoonJS.Store.fetchProductsFromStore = function(productIds)
	{
		if (CocoonJS.Store.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_STORE", "fetchProductsFromStore", arguments, true);
		}
	};

	/**
	* Finish a purchase transaction and removes the transaction from the transaction queue. 
	* This method must be called after a purchase finishes successfully and the  {@link CocoonJS.Store.onProductPurchaseCompleted} callback has been received. 
	* If the purchase includes some asset to download from an external server this method must be called after the asset has been successfully downloaded. 
	* If you do not finish the transaction because the asset has not been correctly downloaded the {@link CocoonJS.Store.onProductPurchaseStarted} method will be called again later on.
	* @function
	* @param {string} transactionId The transactionId of the purchase to finish.
	*/ 
	CocoonJS.Store.finishPurchase = function(transactionId)
	{
		if (CocoonJS.Store.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_STORE", "finishPurchase", arguments, true);
		}
	};

	/**
	* Consumes a purchase. This makes that product to be purchasable again. 
	* @function
	* @param {string} transactionId The transaction Id of the purchase to consume.
	* @param {string} productId The product Id of the product to be consumed.
	*/ 
	CocoonJS.Store.consumePurchase = function(transactionId, productId)
	{
		if (CocoonJS.Store.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_STORE", "consumePurchase", arguments, true);
		}
	};

	/**
	* Request a product purchase given it's product id. 
	* The request is monitored using the {@link CocoonJS.Store.onPurchaseProductStarted}, {@link CocoonJS.Store.onProductPurchaseStarted} and {@link CocoonJS.Store.onProductPurchaseFailed} event handlers.
	* @function
	* @param {string} productId The id or alias of the product to be purchased.
	* @see CocoonJS.Store.onProductPurchaseStarted
	* @see CocoonJS.Store.onProductPurchaseCompleted
	* @see CocoonJS.Store.onProductPurchaseFailed
	*/ 
	CocoonJS.Store.purchaseProduct = function(productId)
	{
		if (CocoonJS.Store.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_STORE", "purchaseFeature", arguments, true);
		}
	};

	/**
	* Request a product purchase given it's product id showing a modal progress dialog. 
	* The request is monitored using the {@link CocoonJS.Store.onProductPurchaseStarted}, {@link CocoonJS.Store.onProductPurchaseCompleted} and {@link CocoonJS.Store.onProductPurchaseFailed} event handlers.
	* @function
	* @param {string} productId The id or alias of the product to be purchased.
	* @see CocoonJS.Store.onProductPurchaseStarted
	* @see CocoonJS.Store.onProductPurchaseCompleted
	* @see CocoonJS.Store.onProductPurchaseFailed
	*/ 
	CocoonJS.Store.puchaseProductModal = function(productId)
	{
		if (CocoonJS.Store.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_STORE", "purchaseFeatureModal", arguments, true);
		}
	};

	/**
	* Request the purchase of a product given it's product id showing a dialog with a preview of the product (title and description). 
	* The request is monitored using the {@link CocoonJS.Store.onProductPurchaseStarted}, {@link CocoonJS.Store.onProductPurchaseCompleted} and {@link CocoonJS.Store.onProductPurchaseFailed} event handlers.
	* @function
	* @param {string} productId The id or alias of the product to be purchased.
	* @see CocoonJS.Store.onProductPurchaseStarted
	* @see CocoonJS.Store.onProductPurchaseCompleted
	* @see CocoonJS.Store.onProductPurchaseFailed
	*/ 
	CocoonJS.Store.purchaseProductModalWithPreview = function(productId)
	{
		if (CocoonJS.Store.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_STORE", "purchaseFeatureModalWithPreview", arguments, true);
		}
	};

	/**
	* Returns if a product has been already purchased or not. 
	* @function
	* @param {string} productId The product id or alias of the product to be checked.
	* @returns {boolean} A flag that indicates whether the product has been already purchased (true) or not (false).
	*/
	CocoonJS.Store.isProductPurchased = function(productId)
	{
		if (CocoonJS.Store.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_STORE", "isFeaturePurchased", arguments);
		}
	};

	/**
	* Restores all the purchases from the platform's market. 
	* For each already purchased product {@link CocoonJS.Store.onPurchaseProductStarted}, {@link CocoonJS.Store.onPurchaseProductCompleted} and {@link CocoonJS.Store.onPurchaseProductFailed} event handlers are called again
	* @function
	* @see CocoonJS.Store.onRestorePurchasesStarted
	* @see CocoonJS.Store.onRestorePurchasesCompleted
	* @see CocoonJS.Store.onRestorePurchasesFailed
	*/
	CocoonJS.Store.restorePurchases = function()
	{
		if (CocoonJS.Store.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_STORE", "restorePurchases", arguments, true);
		}
	};

	/**
	* Restores all the purchases from the platform's market showing a modal progress dialog. 
	* For each already purchased product {@link CocoonJS.Store.onPurchaseProductStarted}, {@link CocoonJS.Store.onPurchaseProductCompleted} and {@link CocoonJS.Store.onPurchaseProductFailed} event handlers are called again
	* @function
	* @see CocoonJS.Store.onRestorePurchasesStarted
	* @see CocoonJS.Store.onRestorePurchasesCompleted
	* @see CocoonJS.Store.onRestorePurchasesFailed
	*/
	CocoonJS.Store.restorePurchasesModal = function()
	{
		if (CocoonJS.Store.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_STORE", "restorePurchasesModal", arguments, true);
		}
	};

	/**
	* Returns all the products available to be purchased.
	* @function
	* @returns {array} An array with  all the {@link CocoonJS.Store.ProductInfo} objects available for purchase.
	*/
	CocoonJS.Store.getProducts = function()
	{
		if (CocoonJS.Store.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_STORE", "getProducts", arguments);
		}
	};

	/**
	* Adds a product to the products local DB. 
	* @function
	* @param {CocoonJS.Store.ProductInfo} product The product to be added to the local products DB.
	*/
	CocoonJS.Store.addProduct = function(product)
	{
		if (CocoonJS.Store.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_STORE", "addProduct", arguments);
		}
	};

	/**
	* Removes a product from the products local DB given its productId. 
	* @function
	* @param {string} productId The product or alias of the product to be removed from the local products DB.
	*/
	CocoonJS.Store.removeProduct = function(productId)
	{
		if (CocoonJS.Store.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_STORE", "removeProduct", arguments);
		}
	};

	/**
	* Returns all the locally stored purchases.
	* @function
	* @returns {array} An array with all the {@link CocoonJS.Store.PurchaseInfo} completed purchases.
	*/
	CocoonJS.Store.getPurchases = function()
	{
		if (CocoonJS.Store.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_STORE", "getPurchases", arguments);
		}
	};

	/**
	* Adds a purchase to the local purchases DB. 
	* @function
	* @param {CocoonJS.Store.StorePurchase} purchase The purchase to be added.
	*/ 
	CocoonJS.Store.addPurchase = function(purchase)
	{
		if (CocoonJS.Store.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_STORE", "addPurchase", arguments);
		}
	};

	/**
	* Removes a purchase from the local purchases DB given it's transaction id. 
	* @function
	* @param {string} transactionId The id of the transaction to be removed.
	*/ 
	CocoonJS.Store.removePurchase = function(transactionId)
	{
		if (CocoonJS.Store.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_STORE", "removePurchase", arguments);
		}
	};

	/**
	* (TESTING ONLY) Simulate a purchase cancel. 
	* This method is not allowed in production services and will only work in Mocks. 
	* The request is monitored using the {@link CocoonJS.Store.onPurchaseProductStarted}, {@link CocoonJS.Store.onProductPurchaseStarted} and {@link CocoonJS.Store.onProductPurchaseFailed} event handlers.
	* @function
	* @param {string} transactionId The transactionId of the purchase to be canceled.
	*/
	CocoonJS.Store.cancelPurchase = function(transactionId)
	{
		if (CocoonJS.Store.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_STORE", "cancelPurchase", arguments);
		}
	};

	/**
	* (TESTING ONLY) Simulate a purchase refundment. 
	* This method is not allowed in production services and will only work in Mocks. 
	* The request is monitored using the {@link CocoonJS.Store.onPurchaseProductStarted}, {@link CocoonJS.Store.onProductPurchaseStarted} and {@link CocoonJS.Store.onProductPurchaseFailed} event handlers.
	* @function
	* @param {string} transactionId The transactionId of the purchase to be refunded.
	*/
	CocoonJS.Store.refundPurchase = function(transactionId)
	{
		if (CocoonJS.Store.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_STORE", "refundPurchase", arguments);
		}
	};

	/**
	* (TESTING ONLY) Simulate a purchase expiration. 
	* This method is not allowed in production services and will only work in Mocks. 
	* The request is monitored using the {@link CocoonJS.Store.onPurchaseProductStarted}, {@link CocoonJS.Store.onProductPurchaseStarted} and {@link CocoonJS.Store.onProductPurchaseFailed} event handlers.
	* @function
	* @param {string} transactionId The transactionId of the purchase to be expired.
	*/
	CocoonJS.Store.expirePurchase = function(transactionId)
	{
		if (CocoonJS.Store.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_STORE", "expirePurchase", arguments);
		}
	};

	/**
    * This {@link CocoonJS.EventHandler} object allows listening to events called when the products fetch has started.
    * The callback function receives no parameters.
    * @static
    * @event
    */
	CocoonJS.Store.onProductsFetchStarted = new CocoonJS.EventHandler("IDTK_SRV_STORE", "Store", "onProductsFetchStarted");

    /**
    * This {@link CocoonJS.EventHandler} object allows listening to events called when the products fetch has completed.
    * The callback function receives a parameter with an the valid products array.
    * @static
    * @event
    * @param {array} validProducts An array of {@link CocoonJS.Store.ProductInfo} objects representing all the valid fetched products.
    */
	CocoonJS.Store.onProductsFetchCompleted = new CocoonJS.EventHandler("IDTK_SRV_STORE", "Store", "onProductsFetchCompleted"); 

    /**
    * This {@link CocoonJS.EventHandler} object allows listening to events called when the products fetch has failed.
    * The callback function receives an error message as a parameter.
    * @static
    * @event
    * @param {string} errorMessage The error message.
    */
	CocoonJS.Store.onProductsFetchFailed = new CocoonJS.EventHandler("IDTK_SRV_STORE", "Store", "onProductsFetchFailed"); 

    /**
    * This {@link CocoonJS.EventHandler} object allows listening to events called when the purchase of a product starts.
    * The callback function receives a parameters with the information of the purchased product @see CocoonJS.Store.ProductInfo.
    * @static
	* @event
    * @param {string} productId The product id of the product being purchased.
    */
	CocoonJS.Store.onProductPurchaseStarted = new CocoonJS.EventHandler("IDTK_SRV_STORE", "Store", "onProductPurchaseStarted"); 

	/**
    * This {@link CocoonJS.EventHandler} object allows listening to events called when a request for purchase verification has been received from the Store.
    * The callback function receives two parameters, one with the productId of the purchased product and another one with a JSON object containing the data to be verified.
    * In Andorid this JSON object will containt two keys: signedData and signature. You will need that information to verify the purchase against the backend server.
    * @static
    * @event
    * @param {string} productId The product id of the product to be verified.
    * @param {string} data The string with the data to be verified.
    */
	CocoonJS.Store.onProductPurchaseVerificationRequestReceived = new CocoonJS.EventHandler("IDTK_SRV_STORE", "Store", "onProductPurchaseVerificationRequestReceived");

    /**
    * This {@link CocoonJS.EventHandler} object allows listening to events called when the purchase of a product succeeds.
    * The callback function receives as parameter the information of the purchase {@see CocoonJS.Store.PurchaseInfo}.
    * @static
    * @event
    * @param {CocoonJS.Store.PurchaseInfo} purchaseInfo The purchase info.
    */
	CocoonJS.Store.onProductPurchaseCompleted = new CocoonJS.EventHandler("IDTK_SRV_STORE", "Store", "onProductPurchaseCompleted"); 

    /**
    * This {@link CocoonJS.EventHandler} object allows listening to events called when the purchase of a product fails.
    * The callback function receives a parameters with the product id and an error message.
    * @static
    * @event
    * @param {string} productId The product id.
    * @param {string} msg The error message.
    */
	CocoonJS.Store.onProductPurchaseFailed = new CocoonJS.EventHandler("IDTK_SRV_STORE", "Store", "onProductPurchaseFailed"); 

    /**
    * This {@link CocoonJS.EventHandler} object allows listening to events called when the restore purchases operation has started.
    * The callback function receives no parameters.
    * @static
    * @event
    */
	CocoonJS.Store.onRestorePurchasesStarted = new CocoonJS.EventHandler("IDTK_SRV_STORE", "Store", "onRestorePurchasesStarted"); 

    /**
    * This {@link CocoonJS.EventHandler} object allows listening to events called when the restore purchases operation has completed.
    * The callback function receives no parameters.
    * @static
    * @event
    */
	CocoonJS.Store.onRestorePurchasesCompleted = new CocoonJS.EventHandler("IDTK_SRV_STORE", "Store", "onRestorePurchasesCompleted"); 

	/**
    * This {@link CocoonJS.EventHandler} object allows listening to events called when the restore purchases operation has failed.
    * The callback function receives an error message as a parameter.
    * @static
    * @event
    * @param {string} errorMessage The error message.
    */
	CocoonJS.Store.onRestorePurchasesFailed = new CocoonJS.EventHandler("IDTK_SRV_STORE", "Store", "onRestorePurchasesFailed");

	/**
    * This {@link CocoonJS.EventHandler} object allows listening to events called when the consume purchase operation has started.
    * @static
    * @event
    * @param {string} transactionId The transaction id of the purchase being consumed.
    */
	CocoonJS.Store.onConsumePurchaseStarted = new CocoonJS.EventHandler("IDTK_SRV_STORE", "Store", "onConsumePurchaseStarted"); 

    /**
    * This {@link CocoonJS.EventHandler} object allows listening to events called when the consume purchase operation has completed.
    * @static
    * @event
    * @param {string} transactionId The transaction id of the consumed purchase.
    */
	CocoonJS.Store.onConsumePurchaseCompleted = new CocoonJS.EventHandler("IDTK_SRV_STORE", "Store", "onConsumePurchaseCompleted"); 

	/**
    * This {@link CocoonJS.EventHandler} object allows listening to events called when the consume purchase operation has failed.
    * @static
    * @event
    * @param {string} transactionId The transaction id of the purchase that couldn't be consumed.
    * @param {string} errorMessage The error message.
    */
	CocoonJS.Store.onConsumePurchaseFailed = new CocoonJS.EventHandler("IDTK_SRV_STORE", "Store", "onConsumePurchaseFailed");

})();

//////////////////////////////////////
// COCOONJS_SOCIAL.JS               //
//////////////////////////////////////

(function()
{
    // The CocoonJS must exist before creating the extension.
    if (typeof window.CocoonJS === 'undefined' || window.CocoonJS === null) throw("The CocoonJS object must exist and be valid before creating any extension object.");

	/**
	* This type represents the access to a native Social extension API. As there can be more than
	* one service of this type, more than one instance can be created.
	* @namespace
	* @constructor
	* @param {string} nativeExtensionName The name of the native ext object extension property name.
	* @param {string} extensionName The name of the CocoonJS object extension property name.
	*/
	CocoonJS.Social = function(nativeExtensionName, extensionName)
	{
		if (typeof nativeExtensionName !== 'string') throw "The given native extension name '" + nativeExtensionName + "' is not a string.";
		if (typeof extensionName !== 'string') throw "The given extension name '" + extensionName + "' is not a string.";

		this.nativeExtensionName = nativeExtensionName;
		this.extensionName = extensionName;
	    this.nativeExtensionObjectAvailable = CocoonJS.nativeExtensionObjectAvailable && typeof window.ext[nativeExtensionName] !== 'undefined';

	    /**
	     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.Social.onRequestInitializationSucceed} event calls.
	     * @name OnRequestInitializationSucceedListener
	     * @function
	     * @static
	     * @memberOf CocoonJS.Social
	     * @param {object} initializationData The data structure passed when requestInitialization was called.
	     */
	    /**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when the user information request suceeds.
	    * The callback function's documentation is represented by {@link CocoonJS.Social.OnRequestInitializationSucceedListener}
	    * @static
	    * @event
	    * @memberOf CocoonJS.Social
	    */
	    this.onRequestInitializationSucceed = new CocoonJS.EventHandler(this.nativeExtensionName, this.extensionName, "onRequestInitializationSucceed");

	    /**
	     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.Social.onRequestInitializationFailed} event calls.
	     * @name OnRequestInitializationFailedListener
	     * @function
	     * @static
	     * @memberOf CocoonJS.Social
	     * @param {object} initializationData The data structure passed when the requestInitialization function was called.
	     * @param {string} errorMessage The message that describes why the request did fail.
	     */
	    /**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when the user information request fails.
	    * The callback function's documentation is represented by {@link CocoonJS.Social.OnRequestInitializationFailedListener}
	    * @static
	    * @event
	    * @memberOf CocoonJS.Social
	    */
	    this.onRequestInitializationFailed = new CocoonJS.EventHandler(this.nativeExtensionName, this.extensionName, "onRequestInitializationFailed");

	    /**
	     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.Social.onRequestLoginSucceed} event calls.
	     * @name OnRequestLoginSucceedListener
	     * @function
	     * @static
	     * @memberOf CocoonJS.Social
	     * @param {CocoonJS.Social.UserInfo} userInfo The structure that describes the information of the user that logged in.
	     */
	    /**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when the user login request succeeds.
	    * The callback function's documentation is represented by {@link CocoonJS.Social.OnRequestLoginSucceedListener}
	    * @static
	    * @event
	    * @memberOf CocoonJS.Social
	    */
		this.onRequestLoginSucceed = new CocoonJS.EventHandler(this.nativeExtensionName, this.extensionName, "onRequestLoginSucceed");

	    /**
	     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.Social.onRequestLoginFailed} event calls.
	     * @name OnRequestLoginFailedListener
	     * @function
	     * @static
	     * @memberOf CocoonJS.Social
	     * @param {string} errorMessage The message that describes why the request did fail.
	     */
	    /**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when the user login request fails.
	    * The callback function's documentation is represented by {@link CocoonJS.Social.OnRequestLoginFailedListener}
	    * @static
	    * @event
	    * @memberOf CocoonJS.Social
	    */
		this.onRequestLoginFailed = new CocoonJS.EventHandler(this.nativeExtensionName, this.extensionName, "onRequestLoginFailed");

	    /**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when the user logs out.
	    * The callback function does not receive any parameter.
	    * @static
	    * @event
	    * @memberOf CocoonJS.Social
	    */
		this.onLogout = new CocoonJS.EventHandler(this.nativeExtensionName, this.extensionName, "onLogout");

	    /**
	     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.Social.onRequestUserInfoSucceed} event calls.
	     * @name OnRequestUserInfoSucceedListener
	     * @function
	     * @static
	     * @memberOf CocoonJS.Social
	     * @param {CocoonJS.Social.UserInfo} userInfo The structure that describes the information of the request user id.
	     */
	    /**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when the user information request suceeds.
	    * The callback function's documentation is represented by {@link CocoonJS.Social.OnUserInfoRequestSucceedListener}
	    * @static
	    * @event
	    * @memberOf CocoonJS.Social
	    */
		this.onRequestUserInfoSucceed = new CocoonJS.EventHandler(this.nativeExtensionName, this.extensionName, "onRequestUserInfoSucceed");

	    /**
	     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.Social.onRequestUserInfoFailed} event calls.
	     * @name OnRequestUserInfoFailedListener
	     * @function
	     * @static
	     * @memberOf CocoonJS.Social
	     * @param {string} userID The id used in the request.
	     * @param {string} errorMessage The message that describes why the request did fail.
	     */
	    /**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when the user information request fails.
	    * The callback function's documentation is represented by {@link CocoonJS.Social.OnUserInfoRequestFailedListener}
	    * @static
	    * @event
	    * @memberOf CocoonJS.Social
	    */
		this.onRequestUserInfoFailed = new CocoonJS.EventHandler(this.nativeExtensionName, this.extensionName, "onRequestUserInfoFailed");

	    /**
	     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.Social.onRequestUserImageURLSucceed} event calls.
	     * @name OnRequestUserImageURLSucceedListener
	     * @function
	     * @static
	     * @memberOf CocoonJS.Social
	     * @param {string} userID The id used in the request.
	     * @param {string} imageURL The URL of the image of the requested user. 
	     */
	    /**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when the user image URL request succeeds.
	    * The callback function's documentation is represented by {@link CocoonJS.Social.OnRequestUserImageURLSucceedListener}
	    * @static
	    * @event
	    * @memberOf CocoonJS.Social
	    */
		this.onRequestUserImageURLSucceed = new CocoonJS.EventHandler(this.nativeExtensionName, this.extensionName, "onRequestUserImageURLSucceed");

	    /**
	     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.Social.onRequestUserImageURLFailed} event calls.
	     * @name OnRequestUserImageURLFailedListener
	     * @function
	     * @static
	     * @memberOf CocoonJS.Social
	     * @param {string} userID The id of the user the request was placed for.
	     * @param {string} errorMessage The message that describes why the request did fail.
	     */
	    /**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when the user image URL request fails.
	    * The callback function's documentation is represented by {@link CocoonJS.Social.OnRequestUserImageURLFailedListener}
	    * @static
	    * @event
	    * @memberOf CocoonJS.Social
	    */
		this.onRequestUserImageURLFailed = new CocoonJS.EventHandler(this.nativeExtensionName, this.extensionName, "onRequestUserImageURLFailed");

	    /**
	     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.Social.onRequestUserFriendsUserInfosSucceed} event calls.
	     * @name OnRequestUserFriendsUserInfosSucceedListener
	     * @function
	     * @static
	     * @memberOf CocoonJS.Social
	     * @param {string} userID The id of the user for whom the friend user infos where requested.
	     * @param {array} friendsInfo An array of {@link CocoonJS.Social.UserInfo} objects representing the information of the friends of the user.
	     */
	    /**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when the user's friends info is successfully retrieved.
	    * The callback function's documentation is represented by {@link CocoonJS.Social.OnRequestUserFriendsUserInfosSucceedListener}
	    * @static
	    * @event
	    * @memberOf CocoonJS.Social
	    */
		this.onRequestUserFriendsUserInfosSucceed = new CocoonJS.EventHandler(this.nativeExtensionName, this.extensionName, "onRequestUserFriendsUserInfosSucceed");

	    /**
	     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.Social.onRequestUserFriendsUserInfosFailed} event calls.
	     * @name OnRequestUserFriendsUserInfosFailedListener
	     * @function
	     * @static
	     * @memberOf CocoonJS.Social
	     * @param 
	     * @param {string} userID The id of the user fro whom the friends infos were requested.
	     * @param {string} errorMessage The error message.
	     */
	    /**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when the user's friends info fails to be retrieved.
	    * The callback function's documentation is represented by {@link CocoonJS.Social.OnRequestUserFriendsUserInfosFailedListener}
	    * @static
	    * @event
	    * @memberOf CocoonJS.Social
	    */
		this.onRequestUserFriendsUserInfosFailed = new CocoonJS.EventHandler(this.nativeExtensionName, this.extensionName, "onRequestUserFriendsUserInfosFailed");

	    /**
	     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.Social.onRequestMessagePublicationSucceed} event calls.
	     * @name OnRequestMessagePublicationSucceedListener
	     * @function
	     * @static
	     * @memberOf CocoonJS.Social
 	     * @param {CocoonJS.Social.Message} message The message that has been published.
	     */
	    /**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when the user message publication request succeeds.
	    * The callback function's documentation is represented by {@link CocoonJS.Social.OnRequestMessagePublicationSucceedListener}
	    * @static
	    * @event
	    * @memberOf CocoonJS.Social
	    * @param {CocoonJS.Social.Message} message The message that has been published.
	    */
		this.onRequestMessagePublicationSucceed = new CocoonJS.EventHandler(this.nativeExtensionName, this.extensionName, "onRequestMessagePublicationSucceed");

	    /**
	     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.Social.onRequestMessagePublicationFailed} event calls.
	     * @name OnRequestMessagePublicationFailedListener
	     * @function
	     * @static
	     * @memberOf CocoonJS.Social
	     * @param {CocoonJS.Social.Message} message The message that was supposed to be published.
	     * @param {string} errorMessage The error message.
	     */
	    /**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when the user message publication request fails.
	    * The callback function's documentation is represented by {@link CocoonJS.Social.OnRequestMessagePublicationFailedListener}
	    * @static
	    * @event
	    * @memberOf CocoonJS.Social
	    */
		this.onRequestMessagePublicationFailed = new CocoonJS.EventHandler(this.nativeExtensionName, this.extensionName, "onRequestMessagePublicationFailed");

		/**
        * @ignore
        */
        this.on= function(event, callback) {
            event= "on"+event[0].toUpperCase()+event.substr(1);
            var signal= this[event];
            if (signal) {
                signal.addEventListener(callback);
            } else {
                console.error("SocialGaming service: '"+this.extensionName+"' does not understand '"+event+' signal.');
            }

            return this;
        };

	    return this;
	};

	CocoonJS.Social.prototype = {
        userInfo : null,
        userInfoCocoonJS : null,

        /**
        * @ignore
        */
        getUserInfo : function() {
            return this.userInfo;
        },

        /**
        * Returns the information of the currently logged in user.
        * @return {@link CocoonJS.Social.UserInfo}
        */
        getLoggedInUserInfo : function() {
            if (this.nativeExtensionObjectAvailable) {
                return CocoonJS.makeNativeExtensionObjectFunctionCall(this.nativeExtensionName, "getLoggedInUserInfo", arguments);
            }
            else {
                return this.userInfoCocoonJS;
            }
        },

        /**
        * @ignore
        */
        setUserInfo : function( userInfo) {
            this.userInfo= userInfo;
        },

        /**
        * @ignore
        */
        setUserInfoCocoonJS : function( userInfoCocoonJS ) {
            this.userInfoCocoonJS = userInfoCocoonJS;
        },

		/**
        * Request initialization of the underlying social service.
        * @param {object} paramsObject A data structure to initialize the service. It will be dependable of the underlying service.
        * @see CocoonJS.Social.onRequestInitializationSucceed
        * @see CocoonJS.Social.onRequestInitializationFailed
        */
		requestInitialization : function(paramsObject) 
		{
			if (this.nativeExtensionObjectAvailable)
			{
				return CocoonJS.makeNativeExtensionObjectFunctionCall(this.nativeExtensionName, "requestInitialization", arguments, true);
			}
		},

		/**
        * Returns a flag to indicate if the underlying service has been initialized or not.
        * @return {boolean} If the underlying service had been initialized using the requestInitialization function call.
        */
		isInitialized : function()
		{
			if (this.nativeExtensionObjectAvailable)
			{
				return CocoonJS.makeNativeExtensionObjectFunctionCall(this.nativeExtensionName, "isInitialized", arguments);
			}
			else
			{
				return false;
			}
		},

		/**
		* Request to log in the social gaming application.
		* @see CocoonJS.Social.onRequestLoginSucceed
		* @see CocoonJS.Socual.onRequestLoginFailed
		*/
		requestLogin : function()
		{
			if (this.nativeExtensionObjectAvailable)
			{
				return CocoonJS.makeNativeExtensionObjectFunctionCall(this.nativeExtensionName, "requestLogin", arguments, true);
			}
		},

		/**
		* Request to log out of the social gaming application.
		* @see CocoonJS.Social.onRequestLoginSucceed
		* @see CocoonJS.Social.onRequestLoginFailed
		* @see CocoonJS.Social.onLogout
		*/
		requestLogout : function()
		{
			if (this.nativeExtensionObjectAvailable)
			{
				return CocoonJS.makeNativeExtensionObjectFunctionCall(this.nativeExtensionName, "requestLogout", arguments, true);
			}
		},

		/**
		* Check if the user is logged in.
		* @return {boolean} true if the user is still logged in, false otherwise.
		*/
		isLoggedIn : function()
		{
			if (this.nativeExtensionObjectAvailable)
			{
				return CocoonJS.makeNativeExtensionObjectFunctionCall(this.nativeExtensionName, "isLoggedIn", arguments);
			}
			else
			{
				return false;
			}
		},

		/**
		* Returns all the granted permissions for the current session.
		* @return {Array} An array containin the user granted permissions.
		*/
		getPermissions : function() 
		{
			if (this.nativeExtensionObjectAvailable)
			{
				return CocoonJS.makeNativeExtensionObjectFunctionCall(this.nativeExtensionName, "getPermissions", arguments);
			}
			else
			{
				return new Array();
			}
		},

		/**
		* Check if the user has granted the publish permission for the current session.
		* @return {boolean} true if the user has granted the publish permission for the current session, false otherwise.
		*/
		hasPublishPermission : function() 
		{
			if (this.nativeExtensionObjectAvailable)
			{
				return CocoonJS.makeNativeExtensionObjectFunctionCall(this.nativeExtensionName, "hasPublishPermission", arguments);
			}
			else
			{
				return false;
			}
		},

		/**
		* Request to retrieve the current or a specific user's id. The request can be monitored using the {@link CocoonJS.Social.onUserInfoRequestSucceed} and {@link CocoonJS.Social.onUserInfoRequestFailed} event handlers.
		* @param {string} [userId] The id of the user to retireve the information from. If no userID is specified, the currently logged in user is assumed.
		* @see CocoonJS.Social.onRequestUserInfoSucceed
		* @see CocoonJS.Social.onRequestUserInfoFailed
		*/
		requestUserInfo : function(userID)
		{
			if (this.nativeExtensionObjectAvailable)
			{
				return CocoonJS.makeNativeExtensionObjectFunctionCall(this.nativeExtensionName, "requestUserInfo", arguments, true);
			}
		},

		/**
		* Request to retrieve the Image of a user
		* @param {string} [userID] The id of the user to get the image for. If no userID is specified, the currently logged user is used.
		* @param {CocoonJS.Social.ImageSizeType} [imageSizeType] The size of the image. One of the possible values among the ones in the {@link CocoonJS.Social.ImageSizeType}. If no value is specified, SMALL is used.
		* @see CocoonJS.Social.onRequestUserImageURLSucceed;
		* @see CocoonJS.Social.onRequestUserImageURLFailed;
		*/
		requestUserImageURL : function( imageSizeType, userID)
		{
			if (this.nativeExtensionObjectAvailable)
			{
				return CocoonJS.makeNativeExtensionObjectFunctionCall(this.nativeExtensionName, "requestUserImageURL", arguments, true);
			}
		},

		/**
		* Request for the information of all the friends of the currently logged user.
		* @param {string} [userID] The id of the user to get the friends infos for. If no userID is specified, the currently logged user is used.
		* @see CocoonJS.Social.onRequestUserFriendsUserInfosSucceed;
		* @see CocoonJS.Social.onRequestUserFriendsUserInfosFailed;
		*/
		requestUserFriendsUserInfos : function(userID)
		{
			if (this.nativeExtensionObjectAvailable)
			{
				return CocoonJS.makeNativeExtensionObjectFunctionCall(this.nativeExtensionName, "requestUserFriendsUserInfos", arguments, true);
			}
		},

		/**
		* Request the publication of a message using a dialog.
		* @param {CocoonJS.Social.Message} message A object representing the information to be published.
		* @see CocoonJS.Social.onRequestMessagePublicationSucceed
		* @see CocoonJS.Social.onRequestMessagePublicationFailed
		*/
		requestMessagePublicationWithDialog : function(message)
		{
			if (this.nativeExtensionObjectAvailable)
			{
				return CocoonJS.makeNativeExtensionObjectFunctionCall(this.nativeExtensionName, "requestMessagePublicationWithDialog", arguments, true);
			}
		}
	};

	/**
	* This structure represents the possible images to be obtained for a user in the social gaming extension.
	* @namespace
	*/
	CocoonJS.Social.ImageSizeType = 
	{
		/**
		* Represent a thumbnail like image size.
		*/
	    THUMB : "thumb",

		/**
		* Represents the small image size.
		*/
	    SMALL : "small",

		/**
		* Represents the medium image size.
		*/
	    MEDIUM : "medium",

		/**
		* Represents the large image size.
		*/
	    LARGE : "large"
	};

	/**
	* The data structure that represents the information of a user inside the social gaming extension.
	* @namespace
	* @constructor
	* @param {string} userID The id of the user.
	* @param {string} userName The user name of the user.
	*/
	CocoonJS.Social.UserInfo = function(userID, userName)
	{
		/**
		* The id of the user.
		* @field
		* @type string
		*/
		this.userID = userID;

		/**
		* The user name of the user.
		* @field
		* @type string
		*/
		this.userName = userName;
	};

	/**
	* This type represents a message to be published.
	* @namespace
	* @constructor
	* @param {string} message The message to be published.
	* @param {string} mediaURL An URL to a media (image, video, ...)
	* @param {string} linkURL An URL to add to the message so the user can click on that link to get more information.
	* @param {string} linkText The text that will appear in the message link.
	* @param {string} linkCaption The text caption that will appear in the message link.
	*/
	CocoonJS.Social.Message = function(message, mediaURL, linkURL, linkText, linkCaption)
	{
		/**
		* The message to be published.
		* @field
		* @type string
		*/
		this.message = message;

		/**
		* An URL to a media (image, video, ...)
		* @field
		* @type string
		*/
		this.mediaURL = mediaURL;

		/**
		* An URL to add to the message so the user can click on that link to get more information.
		* @field
		* @type string
		*/
		this.linkURL = linkURL;

		/**
		* The text that will appear in the message link.
		* @field
		* @type string
		*/
		this.linkText = linkText;

		/**
		* The text caption that will appear in the message link.
		* @field
		* @type string
		*/
		this.linkCaption = linkCaption;

		return this;
	};

})();

//////////////////////////////////////
// COCOONJS_SOCIALGAMING.JS         //
//////////////////////////////////////

(function()
{
    // The CocoonJS must exist before creating the extension.
    if (typeof window.CocoonJS === 'undefined' || window.CocoonJS === null) throw("The CocoonJS object must exist and be valid before creating any extension object.");

    if (!CocoonJS.Social)
		throw("The CocoonJS.Social object must exist and be valid before creating any extension object.");

	/**
	* This type represents the access to a native Social Gamming extension API. As there can be more than
	* one service of this type, more than one instance can be created.
	* @namespace
	* @constructor
	* @param {string} nativeExtensionName The name of the native ext object extension property name.
	* @param {string} extensionName The name of the CocoonJS object extension property name.
	*/
	CocoonJS.SocialGaming = function(nativeExtensionName, extensionName)
	{
		CocoonJS.SocialGaming.superclass.constructor.call(this, nativeExtensionName, extensionName);

	    /**
	     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.SocialGaming.onRequestUserAndFriendsScoresSucceed} event calls.
	     * @name OnRequestUserAndFriendsScoresSucceedListener
	     * @function
	     * @static
	     * @memberOf CocoonJS.SocialGaming
	     * @param {array} userAndFriendsScoreInfos An array of {@link CocoonJS.SocialGaming.UserScoreInfo} objects representing the information of the user's and friends' scores.
	     */
		/**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when the user and friends scores request succeeds.
	    * The callback function's documentation is represented by {@link CocoonJS.SocialGaming.OnRequestUserAndFriendsScoresSucceedListener}
	    * @event
	    * @static
	    * @memberOf CocoonJS.SocialGaming
	    */
		this.onRequestUserAndFriendsScoresSucceed = new CocoonJS.EventHandler(this.nativeExtensionName, this.extensionName, "onRequestUserAndFriendsScoresSucceed");

	    /**
	     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.SocialGaming.onRequestUserAndFriendsScoresFailed} event calls.
	     * @name OnRequestUserAndFriendsScoresFailedListener
	     * @function
	     * @static
	     * @memberOf CocoonJS.SocialGaming
	     * @param {string} userID The id of the user for whom the score and friends scores were requested.
	     * @param {string} leadeboardID The id of the leaderboard for whom the score and friends scores were requested.
	     * @param {string} errorMessage The error message.
	     */
	    /**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when the user and his/her friends scores request fails.
	    * The callback function's documentation is represented by {@link CocoonJS.SocialGaming.OnRequestUserAndFriendsScoresFailedListener}
	    * @event
	    * @static
	    * @memberOf CocoonJS.SocialGaming
	    */
		this.onRequestUserAndFriendsScoresFailed = new CocoonJS.EventHandler(this.nativeExtensionName, this.extensionName, "onRequestUserAndFriendsScoresFailed");

	    /**
	     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.SocialGaming.onRequestUserScoreSucceed} event calls.
	     * @name OnRequestUserScoreSucceedListener
	     * @function
	     * @static
	     * @memberOf CocoonJS.SocialGaming
	     * @param {CocoonJS.SocialGaming.UserScoreInfo} userScoreInfo The info of the user's score.
	     */
	    /**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when the user's score information request suceeds.
	    * The callback function's documentation is represented by {@link CocoonJS.SocialGaming.OnRequestUserScoreSucceedListener}
	    * @event
	    * @static
	    * @memberOf CocoonJS.SocialGaming
	    */
		this.onRequestUserScoreSucceed = new CocoonJS.EventHandler(this.nativeExtensionName, this.extensionName, "onRequestUserScoreSucceed");

	    /**
	     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.SocialGaming.onRequestUserScoreFailed} event calls.
	     * @name OnRequestUserScoreFailedListener
	     * @function
	     * @static
	     * @memberOf CocoonJS.SocialGaming
	     * @param {string} userID The id of the user for whom the score was requested.
	     * @param {string} leaderboardID The id of the leaderboard for whom the score was requested.
	     * @param {string} errorMessage The error message.
	     */
	    /**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when the user's score information request fails.
	    * The callback function's documentation is represented by {@link CocoonJS.SocialGaming.OnRequestUserScoreFailedListener}
	    * @event
	    * @static
	    * @memberOf CocoonJS.SocialGaming
	    */
		this.onRequestUserScoreFailed = new CocoonJS.EventHandler(this.nativeExtensionName, this.extensionName, "onRequestUserScoreFailed");

	    /**
	     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.SocialGaming.onSubmitUserScoreSucceed} event calls.
	     * @name OnSubmitUserScoreSucceedListener
	     * @function
	     * @static
	     * @memberOf CocoonJS.SocialGaming
	     * @param {string} userID The id of the user for whom the score has been submitted.
	     * @param {string} leaderboardID The id of the leaderboard for which the score has been submitted.
	     * @param {number} score The score that has been submitted.
	     */
	    /**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when the user's score submit suceeds.
	    * The callback function's documentation is represented by {@link CocoonJS.SocialGaming.OnSubmitUserScoreSucceedListener}
	    * @event
	    * @static
	    * @memberOf CocoonJS.SocialGaming
	    */
		this.onSubmitUserScoreSucceed = new CocoonJS.EventHandler(this.nativeExtensionName, this.extensionName, "onSubmitUserScoreSucceed");

	    /**
	     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.SocialGaming.onSubmitUserScoreFailed} event calls.
	     * @name OnSubmitUserScoreFailedListener
	     * @function
	     * @static
	     * @memberOf CocoonJS.SocialGaming
	     * @param {string} userID The id of the user for whom the score submition was requested.
	     * @param {string} leaderboadID The id of the leaderboard for which the score submition was requested.
	     * @param {number} score The score that was submitted and failed.
	     * @param {string} errorMessage The error message.
	     */
	    /**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when the user's score submit fails.
	    * The callback function's documentation is represented by {@link CocoonJS.SocialGaming.OnSubmitUserScoreFailedListener}
	    * @event
	    * @static
	    * @memberOf CocoonJS.SocialGaming
	    */
		this.onSubmitUserScoreFailed = new CocoonJS.EventHandler(this.nativeExtensionName, this.extensionName, "onSubmitUserScoreFailed");

	    /**
	     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.SocialGaming.onRequestUserAchievementsSucceed} event calls.
	     * @name OnRequestUserAchievementsSucceedListener
	     * @function
	     * @static
	     * @memberOf CocoonJS.SocialGaming
	     * @param {string} userID The id of the user for whom the achievements where requested.
	     * @param {array} achievementsInfos An array of {@link CocoonJS.SocialGaming.AchievementInfo} objects representing the information of the user's achievements.
	     */
	    /**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when the user's achievements info are successfully retrieved.
	    * The callback function's documentation is represented by {@link CocoonJS.SocialGaming.OnRequestUserAchievementsSucceedListener}
	    * @event
	    * @static
	    * @memberOf CocoonJS.SocialGaming
	    */
		this.onRequestUserAchievementsSucceed = new CocoonJS.EventHandler(this.nativeExtensionName, this.extensionName, "onRequestUserAchievementsSucceed");

	    /**
	     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.SocialGaming.onRequestUserAchievementsFailed} event calls.
	     * @name OnRequestUserAchievementsFailedListener
	     * @function
	     * @static
	     * @memberOf CocoonJS.SocialGaming
	     * @param {string} userID The id of the user for whom the achievements were requested.
	   	 * @param {string} msg The error message.
	     */
	    /**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when the user's achievmeents info fails to be retrieved.
	    * The callback function's documentation is represented by {@link CocoonJS.SocialGaming.OnRequestUserAchievementsFailedListener}
	    * @event
	    * @static
	    * @memberOf CocoonJS.SocialGaming
	    */
		this.onRequestUserAchievementsFailed = new CocoonJS.EventHandler(this.nativeExtensionName, this.extensionName, "onRequestUserAchievementsFailed");

	    /**
	     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.SocialGaming.onRequestAllAchievementsSucceed} event calls.
	     * @name OnRequestAllAchievementsSucceedListener
	     * @function
	     * @static
	     * @memberOf CocoonJS.SocialGaming
	     * @param {array} achievementsInfos An array of {@link CocoonJS.SocialGaming.AchievementInfo} objects representing the information of all the achievements.
	     */
	    /**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when the user's achievements info are successfully retrieved.
	    * The callback function's documentation is represented by {@link CocoonJS.SocialGaming.OnRequestAllAchievementsSucceedListener}
	    * @event
	    * @static
	    * @memberOf CocoonJS.SocialGaming
	    */
		this.onRequestAllAchievementsSucceed = new CocoonJS.EventHandler(this.nativeExtensionName, this.extensionName, "onRequestAllAchievementsSucceed");

	    /**
	     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.SocialGaming.onRequestAllAchievementsFailed} event calls.
	     * @name OnRequestAllAchievementsFailedListener
	     * @function
	     * @static
	     * @memberOf CocoonJS.SocialGaming
	   	 * @param {string} msg The error message.
	     */
	    /**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when the user's achievmeents info fails to be retrieved.
	    * The callback function's documentation is represented by {@link CocoonJS.SocialGaming.OnRequestAllAchievementsFailedListener}
	    * @event
	    * @static
	    * @memberOf CocoonJS.SocialGaming
	    */
		this.onRequestAllAchievementsFailed = new CocoonJS.EventHandler(this.nativeExtensionName, this.extensionName, "onRequestAllAchievementsFailed");

	    /**
	     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.SocialGaming.onRequestAchievementInfoSucceed} event calls.
	     * @name OnRequestAchievementInfoSucceedListener
	     * @function
	     * @static
	     * @memberOf CocoonJS.SocialGaming
	     * @param {CocoonJS.SocialGaming.AchievementInfo} achievementInfo A {@link CocoonJS.SocialGaming.AchievementInfo} object representing the information of the achievement.
	     */
		/**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when the request to retrieve the information of an achievement succeeds.
	    * The callback function's documentation is represented by {@link CocoonJS.SocialGaming.OnRequestAchievementInfoSucceedListener}
	    * @event
	    * @static
	    * @memberOf CocoonJS.SocialGaming
	    */
		this.onRequestAchievementInfoSucceed = new CocoonJS.EventHandler(this.nativeExtensionName, this.extensionName, "onRequestAchievementInfoSucceed");

	    /**
	     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.SocialGaming.onRequestAchievementInfoFailed} event calls.
	     * @name OnRequestAchievementInfoFailedListener
	     * @function
	     * @static
	     * @memberOf CocoonJS.SocialGaming
	     * @param {string} achievementID The id of the achievement for which the information retrieval was requested.
	     * @param {string} errorMessage The error message.
	     */
		/**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when the request to retrieve the information of an achievement fails.
	    * The callback function's documentation is represented by {@link CocoonJS.SocialGaming.OnRequestAchievementInfoFailedListener}
	    * @event
	    * @static
	    * @memberOf CocoonJS.SocialGaming
	    */
		this.onRequestAchievementInfoFailed = new CocoonJS.EventHandler(this.nativeExtensionName, this.extensionName, "onRequestAchievementInfoFailed");

	    /**
	     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.SocialGaming.onSubmitUserAchievementSucceed} event calls.
	     * @name OnSubmitUserAchievementSucceedListener
	     * @function
	     * @static
	     * @memberOf CocoonJS.SocialGaming
	     * @param {string} userID The id of the user for whom the achievement has been submitted.
	     * @param {string} achievementID The id of the achievement that has been submitted.
	     */
	    /**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when a user's achievement submition succeeds.
	    * The callback function's documentation is represented by {@link CocoonJS.SocialGaming.OnSubmitUserAchievementSucceedListener}
	    * @event
	    * @static
	    * @memberOf CocoonJS.SocialGaming
	    */
		this.onSubmitUserAchievementSucceed = new CocoonJS.EventHandler(this.nativeExtensionName, this.extensionName, "onSubmitUserAchievementSucceed");

	    /**
	     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.SocialGaming.onSubmitUserAchievementFailed} event calls.
	     * @name OnSubmitUserAchievementFailedListener
	     * @function
	     * @static
	     * @memberOf CocoonJS.SocialGaming
	     * @param {string} userID The id of the user for whom the achievment was submitted.
	     * @param {string} achievementID The id of the achievement that was submitted.
	     * @param {string} msg The error message.
	     */
	    /**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when a user's achievement submition fails.
	    * The callback function's documentation is represented by {@link CocoonJS.SocialGaming.OnSubmitUserAchievementFailedListener}
	    * @event
	    * @static
	    * @memberOf CocoonJS.SocialGaming
	    */
		this.onSubmitUserAchievementFailed = new CocoonJS.EventHandler(this.nativeExtensionName, this.extensionName, "onSubmitUserAchievementFailed");

	    /**
	     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.SocialGaming.onResetUserAchievementsSucceed} event calls.
	     * @name OnResetUserAchievementsSucceedListener
	     * @function
	     * @static
	     * @memberOf CocoonJS.SocialGaming
	     * @param {string} userID The id of the user for whom the achievements were reset.
	     */
	    /**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when a user's achievement reset succeeds.
	    * The callback function's documentation is represented by {@link CocoonJS.SocialGaming.OnResetUserAchievementsSucceedListener}
	    * @event
	    * @static
	    * @memberOf CocoonJS.SocialGaming
	    */
		this.onResetUserAchievementsSucceed = new CocoonJS.EventHandler(this.nativeExtensionName, this.extensionName, "onResetUserAchievementsSucceed");

	    /**
	     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.SocialGaming.onResetUserAchievementsFailed} event calls.
	     * @name OnResetUserAchievementsFailedListener
	     * @function
	     * @static
	     * @memberOf CocoonJS.SocialGaming
	     * @param {string} userID The id of the user for whom the achievements where tried to be reset.
	     * @param {string} msg The error message.
	     */
	    /**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when a user's achievement reset fails.
	    * The callback function's documentation is represented by {@link CocoonJS.SocialGaming.OnResetUserAchievementsFailedListener}
	    * @event
	    * @static
	    * @memberOf CocoonJS.SocialGaming
	    */
		this.onResetUserAchievementsFailed = new CocoonJS.EventHandler(this.nativeExtensionName, this.extensionName, "onResetUserAchievementsFailed");

	    /**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when the users closes the achievements view.
	    * The callback function does not receive any parameter.
	    * @event
	    * @static
	    * @memberOf CocoonJS.SocialGaming
	    */
		this.onAchievementsViewClosed  = new CocoonJS.EventHandler(this.nativeExtensionName, this.extensionName, "onAchievementsViewClosed");

	    /**
	     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.SocialGaming.onAchievementsViewFailed} event calls.
	     * @name OnAchievementsViewFailedListener
	     * @function
	     * @static
	     * @memberOf CocoonJS.SocialGaming
	     * @param {string} errorMessage The message that describes why the call failed.
	     */
		/**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when the achievements view failed to show.
	    * The callback function's documentation is represented by {@link CocoonJS.SocialGaming.OnAchievementsViewFailedListener}
	    * @event
	    * @static
	    * @memberOf CocoonJS.SocialGaming
	    */
		this.onAchievementsViewFailed  = new CocoonJS.EventHandler(this.nativeExtensionName, this.extensionName, "onAchievementsViewFailed");

		/**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when achievements view shows successfully.
	    * The callback function does not receive any parameter.
	    * @event
	    * @static
	    * @memberOf CocoonJS.SocialGaming
	    */
		this.onAchievementsViewSucceed = new CocoonJS.EventHandler(this.nativeExtensionName, this.extensionName, "onAchievementsViewSucceed");

	    /**
	     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.SocialGaming.onLeaderboardViewClosed} event calls.
	     * @name OnLeaderboardViewClosedListener
	     * @function
	     * @static
	     * @memberOf CocoonJS.SocialGaming
	     * @param {string} leaderboardID The id of the leaderboard for which it's vew was requested to be shown.
	     */
	    /**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when a user's achievement reset fails.
	    * The callback function's documentation is represented by {@link CocoonJS.SocialGaming.OnLeaderboardViewClosedListener}
	    * @event
	    * @static
	    * @memberOf CocoonJS.SocialGaming
	    */
   		this.onLeaderboardViewClosed  = new CocoonJS.EventHandler(this.nativeExtensionName, this.extensionName, "onLeaderboardViewClosed");

	    /**
	     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.SocialGaming.onLeaderboardViewFailed} event calls.
	     * @name OnLeaderboardViewFailedListener
	     * @function
	     * @static
	     * @memberOf CocoonJS.SocialGaming
	     * @param {string} leaderboardID The id of the leaderboard for which it's vew was requested to be shown.
	     * @param {string} errorMessage The error message.
	     */
	    /**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when a user's achievement reset fails.
	    * The callback function's documentation is represented by {@link CocoonJS.SocialGaming.OnLeaderboardViewFailedListener}
	    * @event
	    * @static
	    * @memberOf CocoonJS.SocialGaming
	    */
   		this.onLeaderboardViewFailed  = new CocoonJS.EventHandler(this.nativeExtensionName, this.extensionName, "onLeaderboardViewFailed");

	    /**
	     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.SocialGaming.onLeaderboardViewSucceed} event calls.
	     * @name OnLeaderboardViewSucceedListener
	     * @function
	     * @static
	     * @memberOf CocoonJS.SocialGaming
	     * @param {string} leaderboardID The id of the leaderboard for which it's vew was requested to be shown.
	     */
	    /**
	    * This {@link CocoonJS.EventHandler} object allows listening to events called when a user's achievement reset fails.
	    * The callback function's documentation is represented by {@link CocoonJS.SocialGaming.OnLeaderboardViewSucceedListener}
	    * @event
	    * @static
	    * @memberOf CocoonJS.SocialGaming
	    */
   		this.onLeaderboardViewSucceed = new CocoonJS.EventHandler(this.nativeExtensionName, this.extensionName, "onLeaderboardViewSucceed");

		return this;
	};

	CocoonJS.SocialGaming.prototype = 
	{
        abstractToSocialGamingAchievementMap : null,
        abstractToSocialGamingAchievementMapInverse : null,

        /**
        * @ignore
        */
        setAbstractToSocialGamingAchievementMap : function( map ) {
            this.abstractToSocialGamingAchievementMap= map;

            // build a reciprocal map.
            this.abstractToSocialGamingAchievementMapInverse= {};
            for( var id in map ) {
                if ( map.hasOwnProperty(id) ) {
                    this.abstractToSocialGamingAchievementMapInverse[ map[id] ]= id;
                }
            }
            return this;
        },

        /**
        * @ignore
        */
        getAbstractToSocialGamingAchievementTranslation : function( achievementID ) {
            /**
             * If a translation map for abstract in-game achievements has been set, translate achievementID from
             * abstract to SocialGamingService.
             */
            if (this.abstractToSocialGamingAchievementMap) {
                var socialGamingAchievementID = this.abstractToSocialGamingAchievementMap[achievementID];
                if (socialGamingAchievementID) {
                    console.log("Abstract achieventID='" + achievementID + "' turned to '" + socialGamingAchievementID + "'");
                    achievementID = socialGamingAchievementID;
                } else {
                    console.log("Something may be wrong: abstract achievementID: '" + achievementID + "' w/o translation.")
                }
            }

            return achievementID;
        },

		/**
		* Request to retrieve the scores of all friends of a given user.
		* @param {string} [leaderboardID] The id of the leaderboard to request the scores for.
		* @param {string} [userID] The id of the user. If null or undefined is passed, the currently logged in user id is used.
		* @see CocoonJS.SocialGaming.onRequestUserAndFriendsScoresSucceed
		* @see CocoonJS.SocialGaming.onRequestUserAndFriendsScoresFailed
		*/
		requestUserAndFriendsScores : function(leaderboardID, userID)
		{
			if (this.nativeExtensionObjectAvailable)
			{
				return CocoonJS.makeNativeExtensionObjectFunctionCall(this.nativeExtensionName, "requestUserAndFriendsScores", arguments, true);
			}
		},

		/**
		* Request to retrieve the score of a user.
		* @param {string} [leaderboardID] The id of the scores leaderboard to retireve the score from. If null or underfined is passed, the "leadeboard" id will be used.
		* @param {string} [userID] The id of the user to retireve the score from. If null or undefined is passed, the currently logged in user id is used.
		* @see CocoonJS.SocialGaming.onRequestUserScoreSucceed
		* @see CocoonJS.SocualGaming.onRequestUserScoreFailed
		*/
		requestUserScore : function(leaderboardID, userID)
		{
			if (this.nativeExtensionObjectAvailable)
			{
				return CocoonJS.makeNativeExtensionObjectFunctionCall(this.nativeExtensionName, "requestUserScore", arguments, true);
			}
		},

		/**
		* Request to the server the score of a user.
		* @param {number} [score] the score to submit
		* @param {string} [leaderboardID] The id of the scores leaderboard to submit the score to. If null or underfined is passed, the "leadeboard" id will be used.
		* @param {string} [userID] The id of the user to submit the score for. If null or undefined is passed, the currently logged in user id is used.
		* @see CocoonJS.SocialGaming.onSubmitUserScoreSucceed
		* @see CocoonJS.SocualGaming.onSubmitUserScoreFailed
		*/
		submitUserScore : function(score, leaderboardID, userID)
		{
			if (this.nativeExtensionObjectAvailable)
			{
				return CocoonJS.makeNativeExtensionObjectFunctionCall(this.nativeExtensionName, "submitUserScore", arguments, true);
			}
		},
		/**
		* Shows the leaderboard using a platform dependant view.
		* @param {string} [leaderboardID] The id of the scores leaderboard to show the view for. If null or underfined is passed, the "leadeboard" id will be used.
		* @see CocoonJS.SocialGaming.onLeaderboardViewClosed
		*/
		showLeaderboardView : function(leaderboardID)
		{
			if (this.nativeExtensionObjectAvailable)
			{
				return CocoonJS.makeNativeExtensionObjectFunctionCall(this.nativeExtensionName, "showLeaderboardView", arguments, true);
			}
		},

		/**
		* Request to retrieve the user achievements. The request can be monitored using the {@link CocoonJS.SocialGaming.onRequestUserAchievementsSucceed} and {@link CocoonJS.Social.onRequestUserAchievementsFailed} event handlers.
		* @param {string} [userID] The id of the user to retireve the achievements from. if null/undefined/"" is specified, the currently logged in user is assumed.
		* @see CocoonJS.SocialGaming.onRequestUserAchievementsSucceed
		* @see CocoonJS.SocialGaming.onRequestUserAchievementsFailed
		*/
		requestUserAchievements : function(userID)
		{
			if (this.nativeExtensionObjectAvailable)
			{
				return CocoonJS.makeNativeExtensionObjectFunctionCall(this.nativeExtensionName, "requestUserAchievements", arguments, true);
			}
		},

		/**
		* Request to retrieve all the achievements. The request can be monitored using the {@link CocoonJS.SocialGaming.onRequestAllAchievementsSucceed} and {@link CocoonJS.Social.onRequestAllAchievementsFailed} event handlers.
		* @see CocoonJS.SocialGaming.onRequestAllAchievementsSucceed
		* @see CocoonJS.SocialGaming.onRequestAllAchievementsFailed
		*/
		requestAllAchievements : function()
		{
			if (this.nativeExtensionObjectAvailable)
			{
				return CocoonJS.makeNativeExtensionObjectFunctionCall(this.nativeExtensionName, "requestAllAchievements", arguments, true);
			}
		},

		/**
		* Request to retrieve the information about an achievement. 
		* @param {string} achievementID The id of the achievement to get the information for.
		* @param {CocoonJS.Social.ImageSizeType} [imageSizeType] The size of the image. One of the possible values among the ones in the {@link CocoonJS.Social.ImageSizeType}
		*/
		requestAchievementInfo : function(achievementID)
		{
			if (this.nativeExtensionObjectAvailable)
			{
				return CocoonJS.makeNativeExtensionObjectFunctionCall(this.nativeExtensionName, "requestAchievementInfo", arguments, true);
			}
		},

		/**
		* Submits an achievement to the server. If the process fails, the achievement is stored to submit it later.
		* @param {string} [achievementID] the achievement identifier
		* @param {number} [percentComplete] an optional number between 0 and 100 that indicates a completion percentage.
		* @see CocoonJS.SocialGaming.onSubmitAchievementSucceed
		* @see CocoonJS.SocualGaming.onSubmitAchievementFailed
		*/
        submitUserAchievement:function (achievementID, userID) {
            achievementID = this.getAbstractToSocialGamingAchievementTranslation(achievementID);

            if (this.nativeExtensionObjectAvailable) {
                return CocoonJS.makeNativeExtensionObjectFunctionCall(this.nativeExtensionName, "submitUserAchievement", arguments, true);
            }
        },

		/**
		* Shows the achievements using a platform dependant view.
		* @see CocoonJS.SocialGaming.onAchievementsViewClosed
		*/
		showUserAchievementsView : function(userID)
		{
			if (this.nativeExtensionObjectAvailable)
			{
				return CocoonJS.makeNativeExtensionObjectFunctionCall(this.nativeExtensionName, "showUserAchievementsView", arguments, true);
			}
		},

		/**
		* Resets all the achievements of the current user
		* @param {string} [userID] The id of the user to reset the achievements for. If null/undefined/"", the logged in user is assumed.
		* @see CocoonJS.SocialGaming.onResetAchievementsSucceed
		* @see CocoonJS.SocualGaming.onResetAchievementsFailed
		*/
		resetUserAchievements : function(userID)
		{
			if (this.nativeExtensionObjectAvailable)
			{
				return CocoonJS.makeNativeExtensionObjectFunctionCall(this.nativeExtensionName, "resetUserAchievements", arguments, true);
			}
		}
	};

	/**
    * @ignore
    */
	CocoonJS.extend(CocoonJS.SocialGaming, CocoonJS.Social);

	/**
	* The data structure that represents the information of the user score in the application.
	* @namespace
	* @constructor
	* @param {string} userID The user id.
	* @param {number} score The score of the user.
	* @param {string} userName The name of the user.
	* @param {string} imageURL The url of the user image.
	* @param {number} leaderboardID The id of the leaderboard the score belongs to.
	*/
	CocoonJS.SocialGaming.UserScoreInfo = function(userID, score, userName, imageURL, leaderboardID)
	{
		/**
		* The user id. 
		* @type string
		*/
		this.userID = userID;

		/**
		* The score of the user.
		* @type number
		*/
		this.score = score ? score : 0;

		/**
		* The name of the user.
		* @type string
		*/
        this.userName = userName;

		/**
		* The url of the user image.
		* @type string
		*/
        this.imageURL = imageURL;

        /**
		* The id of the leaderboard the score belongs to.
		* @type number
		*/
        this.leaderboardID = leaderboardID;
	};

	/**
	* The data structure that represents the information of an achievement in the application.
	* @namespace
	* @constructor
	* @param {string} achievementID The id of the achievement info.
	* @param {string} title The title of the achievement.
	* @param {string} description The description of the achievement.
	* @param {string} imageURL The url to the image representing the achievement.
	* @param {number} points The points value of the achievement
	*/
	CocoonJS.SocialGaming.AchievementInfo = function(achievementID, title, description, imageURL, points)
	{
		/**
		* The id of the achievement info.
		* @type string
		*/
		this.achievementID = achievementID;

		/**
		* The title of the achievement.
		* @type string
		*/
		this.title = title;

		/**
		* The description of the achievement.
		* @type string
		*/
		this.description = description;

		/**
		* The url to the image representing the achievement.
		* @type string
		*/
		this.imageURL = imageURL;

		/**
		* The points value of the achievement
		* @type number
		*/
		this.points = points ? points : 0;
	};

})();

/////////////////////////////////////////
// COCOONJS_SOCIALGAMING_GAMECENTER.JS //
/////////////////////////////////////////

(function()
{
    // The CocoonJS must exist before creating the extension.
    if (typeof window.CocoonJS === 'undefined' || window.CocoonJS === null) throw("The CocoonJS object must exist and be valid before creating any extension object.");
    if (typeof window.CocoonJS.SocialGaming === 'undefined' || window.CocoonJS === null) throw("The CocoonJS.SocialGaming object must exist and be valid before creating a Game Center extension object.");

	/**
	* This instance represents the extension object to access GameCenter related native functionalities.
	* The data structure for initialization: None.
	* @see CocoonJS.Social
	*/
	CocoonJS.SocialGaming.GameCenter = new CocoonJS.SocialGaming("IDTK_SRV_SOCIAL_GAMECENTER", "SocialGaming.GameCenter");
})();

//////////////////////////////
// COCOONJS_GAMEPAD.JS 		//
//////////////////////////////

(function () {
    // The CocoonJS must exist before creating the extension.
    if (typeof window.CocoonJS === 'undefined' || window.CocoonJS === null) throw("The CocoonJS object must exist and be valid before creating any extension object.");

    /**
     * This namespace represents the functionalities related to OUYA android gaming control.
     * @namespace
     */
    CocoonJS.Gamepad = {};

    CocoonJS.Gamepad.nativeExtensionObjectAvailable = CocoonJS.nativeExtensionObjectAvailable && typeof window.ext.Gamepad !== 'undefined';

    CocoonJS.Gamepad.Indices = {
        BUTTON_0                : 0, 
        BUTTON_1                : 1,
        BUTTON_2                : 2,
        BUTTON_3                : 3,
        BUTTON_LEFT_BUMPER      : 4,
        BUTTON_RIGHT_BUMPER     : 5,
        
        BUTTON_LEFT_TRIGGER     : 6,
        BUTTON_RIGHT_TRIGGER    : 7,
        
        BUTTON_LEFT_JOYSTICK    : 10,
        BUTTON_RIGHT_JOYSTICK   : 11,
        BUTTON_DPAD_UP          : 12,
        BUTTON_DPAD_DOWN        : 13,
        BUTTON_DPAD_LEFT        : 14,
        BUTTON_DPAD_RIGHT       : 15,
        
        AXE_LEFT_JOYSTICK_X     : 0,
        AXE_LEFT_JOYSTICK_Y     : 1,
        AXE_RIGHT_JOYSTICK_X    : 2,
        AXE_RIGHT_JOYSTICK_Y    : 3
    };

    // If the extension is present and the navigator does not provide the gamepad API:
    // 1.- Add the getGamepads function to the navigator object.
    // 2.- Replace the window add and remove event listener functions to call to the extension for the gamepad related events.
    var systemSupportsGamepads = navigator["getGamepads"] || navigator["webkitGetGamepads"];
    if (CocoonJS.Gamepad.nativeExtensionObjectAvailable && !systemSupportsGamepads)
    {
        navigator.getGamepads = function()
        {
            return window.ext.Gamepad.makeCall("getGamepads");
        };

        CocoonJS.Gamepad.originalWindowAddEventListener = window.addEventListener;
        CocoonJS.Gamepad.originalWindowRemoveEventListener = window.removeEventListener;

        window.addEventListener = function(eventName, callback)
        {
            console.log("The new window.addEventListener has been called.");
            if (eventName === "gamepadconnected" || eventName === "gamepaddisconnected")
            {
                window.ext.Gamepad.addEventListener(eventName, callback);
            }
            else
            {
                var argumentsArray = Array.prototype.slice.call(arguments);
                CocoonJS.Gamepad.originalWindowAddEventListener.apply(window, argumentsArray);
            }
        };
        window.removeEventListener = function(eventName, callback)
        {
            console.log("The new window.removeEventListener has been called.");
            if (eventName === "gamepadconnected" || eventName === "gamepaddisconnected")
            {
                window.ext.Gamepad.removeEventListener(eventName, callback);
            }
            else
            {
                var argumentsArray = Array.prototype.slice.call(arguments);
                CocoonJS.Gamepad.originalWindowRemoveEventListener.apply(window, argumentsArray);
            }
        };
    }
})();

//////////////////////////////
// COCOONJS_NOTIFICATION.JS //
//////////////////////////////

(function()
{
    // The CocoonJS must exist before creating the extension.
    if (typeof window.CocoonJS === 'undefined' || window.CocoonJS === null) throw("The CocoonJS object must exist and be valid before creating any extension object.");

    /**
    * This namespace represents the CocoonJS Notification extension.
    * @namespace
    */
    CocoonJS.Notification = {};

    CocoonJS.Notification.nativeExtensionObjectAvailable = CocoonJS.nativeExtensionObjectAvailable && typeof window.ext.IDTK_SRV_NOTIFICATION !== 'undefined';

	/**
	* The data structure that represents the information of a local notification.
	* @namespace
	* @constructor
	* @param {string} message The notification message.
	* @param {boolean} soundEnabled A flag that indicates if the sound should be enabled for the notification.
	* @param {number} badgeNumber The number that will appear in the badge of the application icon in the home screen.
	* @param {object} userData The JSON data to attached to the notification.
	* @param {string} contentBody The body content to be showed in the expanded notification information.
	* @param {string} contentTitle The title to be showed in the expanded notification information.
	* @param {number} date Time in millisecs from 1970 when the notification will be fired.
	*/
	CocoonJS.Notification.LocalNotification = function(message, soundEnabled, badgeNumber, userData, contentBody, contentTitle, scheduleTime)
	{
		/**
		* The notification message.
		* @field
		* @type string
		*/
		this.message = message;

		/**
		* A flag that indicates if the sound should be enabled for the notification.
		* @field
		* @type boolean
		*/
		this.soundEnabled = soundEnabled;

		/**
		* (iOS only) The number that will appear in the badge of the application icon in the home screen.
		* @field
		* @type number
		*/
		this.badgeNumber = badgeNumber;

		/**
		* The JSON data to attached to the notification.
		* @field
		* @type object
		*/
		this.userData = userData;

		/**
		* (Android only) The body content to be showed in the expanded notification information.
		* @field
		* @type string
		*/
		if (contentBody !== undefined)
			this.contentBody = contentBody;
		else
			this.contentBody = "";

		/**
		* (Android only) The title to be showed in the expanded notification information.
		* @field
		* @type string
		*/
		if (contentTitle !== undefined)
			this.contentTitle = contentTitle;
		else
			this.contentTitle = "";

		/**
		* Time in millisecs from 1970 when the local notification will be fired
		* @field
		* @type number
		*/
		var currentTime = new Date().getTime();
		if (scheduleTime !== undefined){
			this.scheduleTime = scheduleTime;
		}else{
			this.scheduleTime = currentTime;
		}
	};

	/**
	* The data structure that represents the information of a push notification.
	* @namespace
	* @constructor
	* @param {string} message The notification message.
	* @param {boolean} soundEnabled A flag that indicates if the sound should be enabled for the notification.
	* @param {number} badgeNumber The number that will appear in the badge of the application icon in the home screen.
	* @param {object} userData The JSON data to attached to the notification.
	* @param {array} channels An array containing the channels names this notification will be delivered to.
	* @param {number} expirationTime A time in seconds from 1970 when the notification is no longer valid and will not be delivered in case it has not already been delivered.
	* @param {number} expirationTimeInterval An incremental ammount of time in from now when the notification is no longer valid and will not be delivered in case it has not already been delivered.
	*/
	CocoonJS.Notification.PushNotification = function(message, soundEnabled, badgeNumber, userData, channels, expirationTime, expirationTimeInterval)
	{
		/**
		* The notification message.
		* @field
		* @type string
		*/
		this.message = message;

		/**
		* A flag that indicates if the sound should be enabled for the notification.
		* @field
		* @type boolean
		*/
		this.soundEnabled = soundEnabled;

		/**
		* The number that will appear in the badge of the application icon in the home screen.
		* @field
		* @type number
		*/
		this.badgeNumber = badgeNumber;

		/**
		* The JSON data to attached to the notification.
		* @field
		* @type object
		*/
		this.userData = userData

		/**
		* An array containing the channels names this notification will be delivered to.
		* @field
		* @type array
		*/
		this.channels = channels;

		/**
		* A time in seconds from 1970 when the notification is no longer valid and will not be delivered in case it has not already been delivered.
		* @field
		* @type number
		*/
		if (expirationTime !== undefined)
			this.expirationTime = expirationTime;
		else
			this.expirationTime = 0;

		/**
		* An incremental ammount of time in from now when the notification is no longer valid and will not be delivered in case it has not already been delivered.
		* @field
		* @type number
		*/
		if (expirationTimeInterval !== undefined)
			this.expirationTimeInterval = expirationTimeInterval;
		else
			this.expirationTimeInterval = 0;
	};

	/**
	* Start processing received notifications. The user must call this method when the game is ready to process notifications. Notifications received before being prepared are stored and processed later.
	*/
	CocoonJS.Notification.start = function()
	{
		if (CocoonJS.Notification.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_NOTIFICATION", "start", arguments, true);
		}
	};


	/**
	* Register to be able to receive push notifications.
	* The registration process is controlled using the {@link CocoonJS.Notification.onRegisterForPushNotificationsSucceed} and {@link CocoonJS.Notification.onRegisterForPushNotificationsFailed} event handlers.
	* @function
	* @see {CocoonJS.Notification.onRegisterForPushNotificationsSucceed}
	* @see {CocoonJS.Notification.onRegisterForPushNotificationsFailed}
	*/
	CocoonJS.Notification.registerForPushNotifications = function()
	{
		if (CocoonJS.Notification.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_NOTIFICATION", "registerForPushNotifications", arguments, true);
		}
	};

	/**
	* Unregister from receiving push notifications.
	* The unregistration process is controlled using the {@link CocoonJS.Notification.onUnregisterForPushNotificationsSucceed} event handler.
	* @function
	* @see CocoonJS.Notification.onUnregisterForPushNotificationsSucceed
	*/
	CocoonJS.Notification.unregisterForPushNotifications = function()
	{
		if (CocoonJS.Notification.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_NOTIFICATION", "unregisterForPushNotifications", arguments, true);
		}
	};

	/**
	* Cancel the last sent local notification.
	* The last sent local notification will be remove from the notifications bar.
	* @function
	*/
	CocoonJS.Notification.cancelLastSentLocalNotificiation = function()
	{
		if (CocoonJS.Notification.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_NOTIFICATION", "cancelLocalNotification", arguments, true);
		}
	};

	/**
	* Cancel all sent local notifications.
	* All the notifications will ve removed from the notifications bar.
	* @function
	*/
	CocoonJS.Notification.cancelAllLocalNotifications = function()
	{
		if (CocoonJS.Notification.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_NOTIFICATION", "cancelAllLocalNotifications", arguments, true);
		}
	};

	/**
	* Send a local notification.
	* @function
	* @param {CocoonJS.Notification.LocalNotification} localNotification The local notification to be sent.
	*/
	CocoonJS.Notification.sendLocalNotification = function(localNotification)
	{
		if (CocoonJS.Notification.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_NOTIFICATION", "sendLocalNotification", arguments, true);
		}
	};

	/**
	* Subscribe to a channel in order to receive notifications targeted to that channel.
	* @function
	* @param {string} channel The channel id to subscribe to.
	*/
	CocoonJS.Notification.subscribeToChannel = function(channel)
	{
		if (CocoonJS.Notification.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_NOTIFICATION", "subscribe", arguments, true);
		}
	};

	/**
	* Unsubscribe from a channel in order to stop receiving notifications targeted to it.
	* @function
	* @param {string} channel The channel id to unsubscribe from.
	*/
	CocoonJS.Notification.unsubscribeFromChannel = function(channel)
	{
		if (CocoonJS.Notification.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_NOTIFICATION", "unsubscribe", arguments, true);
		}
	};

	/**
	* Send a push notification.
	* @function
	* @param {CocoonJS.Notification.PushNotification} pushNotification The push notification object to be sent.
	* @see CocoonJS.Notification.onPushNotificationDeliverySucceed
	* @see CocoonJS.Notification.onPushNotificationDeliveryFailed
	*/
	CocoonJS.Notification.sendPushNotification = function(pushNotification)
	{
		if (CocoonJS.Notification.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_NOTIFICATION", "sendPushNotification", arguments, true);
		}
	};

	/**
	* (iOS only) Set the badge number for this application.
	* This is useful if you want to modify the badge number set by a notification.
	* @function
	* @param {number} badgeNumber The number of the badge.
	*/
	CocoonJS.Notification.setBadgeNumber = function(badgeNumber)
	{
		if (CocoonJS.Notification.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_NOTIFICATION", "setBadgeNumber", arguments);
		}
	};

	/**
	* (iOS only) Returns the current badge number.
	* @function
	* @returns {number} The badge number.
	*/
	CocoonJS.Notification.getBadgeNumber = function()
	{
		if (CocoonJS.Notification.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_NOTIFICATION", "getBadgeNumber", arguments);
		}
	};

	/**
	* Returns the last received user data from a Local notification.
	* @function
	* @returns {object} The last received user data from a Local notification.
	*/
	CocoonJS.Notification.getLastReceivedLocalNotificationData = function()
	{
		if (CocoonJS.Notification.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_NOTIFICATION", "getLastReceivedLocalNotificationData", arguments);
		}
	};

	/**
	* Returns the last received user data from a Push notification.
	* @function
	* @returns {object} The last received user data from a Push notification.
	*/
	CocoonJS.Notification.getLastReceivedPushNotificationData = function()
	{
		if (CocoonJS.Notification.nativeExtensionObjectAvailable)
		{
			return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_SRV_NOTIFICATION", "getLastReceivedPushNotificationData", arguments);
		}
	};

    /**
    * This {@link CocoonJS.EventHandler} object allows listening to events called when the registration for push notification succeeds.
    * The callback function does not receive any parameter.
    * @static
    * @event
    * @param {string} token The token (apid or device token) received at registration time.
    * @memberOf CocoonJS.Notification
    */
	CocoonJS.Notification.onRegisterForPushNotificationsSucceed = new CocoonJS.EventHandler("IDTK_SRV_NOTIFICATION", "Notification", "pushNotificationServiceRegistered");

    /**
    * This {@link CocoonJS.EventHandler} object allows listening to events called when the unregistration for push notifications succeeds.
    * The callback function does not receive any parameter.
    * @static
    * @event
    * @memberOf CocoonJS.Notification
    */
	CocoonJS.Notification.onUnregisterForPushNotificationsSucceed = new CocoonJS.EventHandler("IDTK_SRV_NOTIFICATION", "Notification", "pushNotificationServiceUnregistered");

    /**
    * This {@link CocoonJS.EventHandler} object allows listening to events called when the registration for push notifications fails.
    * The callback function receives a parameter with error information.
    * @static
    * @event
    * @param {string} msg The error message.
    */
	CocoonJS.Notification.onRegisterForPushNotificationsFailed = new CocoonJS.EventHandler("IDTK_SRV_NOTIFICATION", "Notification", "pushNotificationServiceFailedToRegister");

    /**
    * This {@link CocoonJS.EventHandler} object allows listening to events called when a push notification is received.
    * The callback function receives a parameter with the userData of the received notification.
    * @static
    * @event
    * @param {object} userData An object with the notification userData information.
    */
	CocoonJS.Notification.onPushNotificationReceived = new CocoonJS.EventHandler("IDTK_SRV_NOTIFICATION", "Notification", "pushNotificationReceived");

    /**
    * This {@link CocoonJS.EventHandler} object allows listening to events called when a local notification is received.
    * The callback function receives a parameter with the userData of the received notification.
    * @static
    * @event
    * @param {object} userData An object with the notification userData information.
    */
	CocoonJS.Notification.onLocalNotificationReceived = new CocoonJS.EventHandler("IDTK_SRV_NOTIFICATION", "Notification", "localNotificationReceived");

    /**
    * This {@link CocoonJS.EventHandler} object allows listening to events called when a notification is successfully delivered.
    * The callback function receives a parameter with the notificationId of the delivered notification.
    * @static
    * @event
    * @param {string} userData A string with the notification userData information.
    */
	CocoonJS.Notification.onPushNotificationDeliverySucceed = new CocoonJS.EventHandler("IDTK_SRV_NOTIFICATION", "Notification", "pushNotificationSuccessfullyDelivered");

    /**
    * This {@link CocoonJS.EventHandler} object allows listening to events called when the delivery of push a notification fails.
    * The callback function receives a parameter with error information.
    * @static
    * @event
    * @param {string} msg The error message.
    */
	CocoonJS.Notification.onPushNotificationDeliveryFailed = new CocoonJS.EventHandler("IDTK_SRV_NOTIFICATION", "Notification", "pushNotificationDeliveryError");

})();

/////////////////
// PATHFIND.JS //
/////////////////

// Pathfind.js
// Written by Ashley Gullen
// Copyright (c) 2013 Scirra Ltd.

// A* pathfinding javascript implementation

(function() {
	
	var PF_CLEAR = 0;
	var PF_OBSTACLE = 32767;
	
	function node()
	{
		this.parent = null;
		
		this.x = 0;
		this.y = 0;

		this.f = 0;
		this.g = 0;
		this.h = 0;
	};
	
	var nodeCache = [];			// for recycling nodes
	
	function allocNode()
	{
		var ret;
		
		if (nodeCache.length)
			ret = nodeCache.pop();
		else
			ret = new node();
			
		ret.parent = null;
		ret.x = 0;
		ret.y = 0;
		ret.f = 0;
		ret.g = 0;
		ret.h = 0;
		return ret;
	};
	
	function freeNode(n)
	{
		if (nodeCache.length < 64000)
			nodeCache.push(n);
	};
	
	function resultNode(x_, y_)
	{
		this.x = x_ || 0;
		this.y = y_ || 0;
	};
	
	var resultNodeCache = [];			// for recycling resultNodes
	
	function allocResultNode()
	{
		if (resultNodeCache.length)
			return resultNodeCache.pop();
		else
			return new resultNode(0, 0);
	};
	
	function freeResultNode(n)
	{
		if (resultNodeCache.length < 10000)
			resultNodeCache.push(n);
	};
	
	var workersSupported = (typeof Worker !== "undefined");
	var isInWebWorker = (typeof document === "undefined");		// no DOM in a worker
	var myInstance = null;										// single pathfinder instance for worker
	
	if (isInWebWorker)
	{
		self.addEventListener("message", function (e)
		{
			var d = e.data;
			
			if (!d)
				return;		// could be empty postMessage() to start worker
			
			if (d.cmd === "init")
			{
				if (!myInstance)
					myInstance = new pathfinder();
					
				myInstance.init(d.hcells, d.vcells, d.data, d.diagonals);
			}
			else if (d.cmd === "find")
			{
				// receive a pathfind job, process it them dispatch result
				myInstance.pathEnd.parent = null;
				myInstance.targetX = d.endX;
				myInstance.targetY = d.endY;
				
				if (myInstance.doLongFindPath(d.startX, d.startY))
				{
					self.postMessage({ cmd: "result", pathList: myInstance.pathList });
				}
				else
				{
					self.postMessage({ cmd: "result", pathList: null });
				}
			}
			else if (d.cmd === "setdiag")
			{
				// update diagonalsEnabled flag
				myInstance.diagonalsEnabled = d.diagonals;
			}
			
		}, false);
	}
	
	function pathfinder()
	{
		this.hcells = 0;
		this.vcells = 0;
		
		this.pathEnd = allocNode();
		
		this.cells = null;
		this.openList = [];
		this.closedList = [];
		this.closedCache = {};
		this.pathList = [];
		
		this.currentNode = null;
		this.targetX = 0;
		this.targetY = 0;
		this.diagonalsEnabled = true;
		
		this.worker = null;
		this.workerQueue = [];		// jobs awaiting completion from worker in order of requests made
		this.workerRecycle = [];
		
		var self = this;
		var i, len;
		
		if (workersSupported && !isInWebWorker)
		{
			// Create worker and receive results of pathfind jobs from it
			this.worker = new Worker("pathfind.js");
			
			this.worker.addEventListener("message", function (e) {
			
				if (!e || !e.data)
					return;
				
				if (e.data.cmd === "result")
				{
					if (e.data.pathList)
					{
						for (i = 0, len = self.pathList.length; i < len; i++)
							freeResultNode(self.pathList[i]);
						
						self.pathList = e.data.pathList;
						self.workerQueue[0].success();
					}
					else
						self.workerQueue[0].fail();
						
					self.workerRecycle.push(self.workerQueue.shift());
				}
			}, false);
			
			this.worker.addEventListener("error", function (e) {
				console.error(e);
			}, false);
			
			this.worker.postMessage(null);
		}
	};
	
	pathfinder.prototype.init = function (hcells_, vcells_, data_, diagonals_)
	{
		this.hcells = hcells_;
		this.vcells = vcells_;
		this.cells = data_;
		this.diagonalsEnabled = diagonals_;
		
		if (workersSupported && !isInWebWorker)
		{
			this.worker.postMessage({
				cmd: "init",
				hcells: hcells_,
				vcells: vcells_,
				diagonals: diagonals_,
				data: data_
			});
		}
	};
	
	pathfinder.prototype.isReady = function ()
	{
		return !!this.cells;
	};
	
	pathfinder.prototype.setDiagonals = function (d)
	{
		if (this.diagonalsEnabled === d)
			return;
		
		this.diagonalsEnabled = d;
		
		if (workersSupported && !isInWebWorker)
		{
			this.worker.postMessage({
				cmd: "setdiag",
				diagonals: d,
			});
		}
	};
	
	pathfinder.prototype.at = function (x_, y_)
	{
		if (x_ < 0 || y_ < 0 || x_ >= this.hcells || y_ >= this.vcells)
			return PF_OBSTACLE;
			
		return this.cells[x_][y_];
	};
	
	pathfinder.prototype.findPath = function (startX, startY, endX, endY, successCallback, failCallback)
	{
		if (!this.cells)
		{
			// not yet initialised
			failCallback();
			return;
		}
		
		startX = Math.floor(startX);
		startY = Math.floor(startY);
		endX = Math.floor(endX);
		endY = Math.floor(endY);
		
		this.targetX = endX;
		this.targetY = endY;
		this.pathEnd.parent = null;
		
		// Check the box made by the start and dest cells.
		// If the complete box is empty, allow a direct move to target.
		var minX = Math.min(startX, endX);
		var maxX = Math.max(startX, endX);
		var minY = Math.min(startY, endY);
		var maxY = Math.max(startY, endY);
		
		// Path goes out of bounds: no calculable path
		if (minX < 0 || minY < 0 || maxX >= this.hcells || maxY >= this.vcells)
		{
			failCallback();
			return;
		}
		
		var x, y, i, len, c, h, n;

		if (this.diagonalsEnabled)
		{
			var canMoveDirect = true;
			
			for (x = minX; x <= maxX; x++)
			{
				for (y = minY; y <= maxY; y++)
				{
					if (this.cells[x][y] !== 0)
					{
						canMoveDirect = false;
						
						// Break both loops
						x = maxX + 1;
						break;
					}
				}
			}

			// A "direct" path is available (box is empty)
			if (canMoveDirect)
			{
				for (i = 0, len = this.pathList.length; i < len; i++)
					freeResultNode(this.pathList[i]);
				this.pathList.length = 0;
			
				this.pathEnd.x = endX;
				this.pathEnd.y = endY;
				this.pathEnd.parent = null;
				n = allocResultNode();
				n.x = endX;
				n.y = endY;
				this.pathList.push(n);
				successCallback();
				return;
			}
		}
		
		if (workersSupported)
		{
			// recycle objects in the worker queue
			if (this.workerRecycle.length)
				h = this.workerRecycle.pop();
			else
				h = {};
			
			h.success = successCallback;
			h.fail = failCallback;
			
			// dispatch the heavy lifting to the worker thread
			this.workerQueue.push(h);

			this.worker.postMessage({
				cmd: "find",
				startX: startX,
				startY: startY,
				endX: endX,
				endY: endY
			});
		}
		else
		{
			// no web worker support, just run on main thread
			if (this.doLongFindPath(startX, startY))
				successCallback();
			else
				failCallback();
		}
	};
		
	pathfinder.prototype.doLongFindPath = function (startX, startY)
	{
		var i, len, c, n, p, lastDir = 8, curDir = -1, addNode;
		for (i = 0, len = this.openList.length; i < len; i++)
			freeNode(this.openList[i]);
		for (i = 0, len = this.closedList.length; i < len; i++)
			freeNode(this.closedList[i]);
		for (i = 0, len = this.pathList.length; i < len; i++)
			freeResultNode(this.pathList[i]);
		this.openList.length = 0;
		this.closedList.length = 0;
		this.closedCache = {};
		this.pathList.length = 0;

		// Add the start node to the open list
		var startNode = allocNode();
		startNode.x = startX;
		startNode.y = startY;

		this.openList.push(startNode);
		var obsLeft = false, obsTop = false, obsRight = false, obsBottom = false;
		var diagonals = this.diagonalsEnabled;
		
		// While there are nodes on the open list
		while (this.openList.length)
		{
			// Move the best F value to closed list
			c = this.openList.shift();
			this.closedList.unshift(c);
			this.closedCache[((c.x << 16) + c.y).toString()] = true;

			// Are we there yet?
			if (c.x === this.targetX && c.y === this.targetY)
			{
				this.pathEnd.parent = c.parent;
				this.pathEnd.x = c.x;
				this.pathEnd.y = c.y;
				
				// Link up the whole path to an indexable array
				p = this.pathEnd;
				
				while (p)
				{
					// filter redundant nodes in straight lines
					if (this.pathList.length === 0)
					{
						addNode = true;
						
						if (p.parent)
						{
							lastDir = this.nodeDirection(p, p.parent);
							curDir = lastDir;
						}
					}
					else if (!p.parent)
						addNode = false;
					else 
					{
						curDir = this.nodeDirection(p, p.parent);
						addNode = (curDir !== lastDir);
					}
					
					if (addNode)
					{
						n = allocResultNode();
						n.x = p.x;
						n.y = p.y;
						this.pathList.unshift(n);
						lastDir = curDir;
					}
					
					p = p.parent;
				}
				
				return true;
			}

			// Get current node
			this.currentNode = c;
			var x = c.x;
			var y = c.y;
			
			var obsLeft = (this.at(x - 1, y) === PF_OBSTACLE);
			var obsTop = (this.at(x, y - 1) === PF_OBSTACLE);
			var obsRight = (this.at(x + 1, y) === PF_OBSTACLE);
			var obsBottom = (this.at(x, y + 1) === PF_OBSTACLE);

			// Check adjacent 8 nodes.  No diagonals allowed if either cell being crossed is obstacle.
			if (!obsLeft)
				this.addCellToOpenList(x - 1, y, 10);

			if (diagonals && !obsLeft && !obsTop)
				this.addCellToOpenList(x - 1, y - 1, 14);

			if (!obsTop)
				this.addCellToOpenList(x, y - 1, 10);

			if (diagonals && !obsTop && !obsRight)
				this.addCellToOpenList(x + 1, y - 1, 14);

			if (!obsRight)
				this.addCellToOpenList(x + 1, y, 10);

			if (diagonals && !obsRight && !obsBottom)
				this.addCellToOpenList(x + 1, y + 1, 14);

			if (!obsBottom)
				this.addCellToOpenList(x, y + 1, 10);

			if (diagonals && !obsBottom && !obsLeft)
				this.addCellToOpenList(x - 1, y + 1, 14);
		}
		
		return false;
	};
	
	pathfinder.prototype.insertToOpenList = function (c)
	{
		var i, len;
		
		// Needs to go at end
		if (c.f >= this.openList[this.openList.length - 1].f)
		{
			this.openList.push(c);
		}
		else
		{
			for (i = 0, len = this.openList.length; i < len; i++)
			{
				if (c.f < this.openList[i].f)
				{
					this.openList.splice(i, 0, c);
					break;
				}
			}
		}
	};
	
	pathfinder.prototype.addCellToOpenList = function (x_, y_, g_)
	{
		// Ignore if cell on closed list
		if (this.closedCache.hasOwnProperty(((x_ << 16) + y_).toString()))
			return;
		
		var i, len, c;
		
		// Cell costs can be increased by changing the number in the map
		var curCellCost = this.at(x_, y_);

		// Is this cell already on the open list?
		for (i = 0, len = this.openList.length; i < len; i++)
		{
			c = this.openList[i];
			
			if (x_ === c.x && y_ === c.y)
			{
				// Is this a better path?
				if (this.currentNode.g + g_ + curCellCost < c.g)
				{
					// Update F, G and H and update parent
					c.parent = this.currentNode;
					c.g = this.currentNode.g + g_ + curCellCost;
					c.h = this.estimateH(c.x, c.y);
					c.f = c.g + c.h;

					// This node's F has changed:  Delete it then re-insert it in the right place

					if (this.openList.length === 1)
					{
						// no need to remove then re-insert same node, just leave it there
						return;
					}
					
					this.openList.splice(i, 1);
					this.insertToOpenList(c);
				}

				return;
			}
		}

		// Not on the open list; add it in the right place
		c = allocNode();
		c.x = x_;
		c.y = y_;
		c.h = this.estimateH(x_, y_);
		c.g = this.currentNode.g + g_ + curCellCost;
		c.f = c.h + c.g;
		c.parent = this.currentNode;

		// Insert this node sorted in the open list
		// The loop below won't add new largest F values
		if (!this.openList.length)
		{
			this.openList.push(c);
			return;
		}
		
		this.insertToOpenList(c);
	};
	
	function quickAbs(x)
	{
		return x < 0 ? -x : x;
	};
	
	pathfinder.prototype.estimateH = function (x_, y_)
	{
		var dx = quickAbs(x_ - this.targetX);
		var dy = quickAbs(y_ - this.targetY);

		return dx * 10 + dy * 10;
	};
	
	pathfinder.prototype.nodeDirection = function (a, b)
	{
		var ax = a.x;
		var ay = a.y;
		var bx = b.x;
		var by = b.y;

		if (ax === bx)
		{
			if (by > ay) return 6;
			if (by < ay) return 2;
			if (ay == by) return 8;
		}
		else if (ay === by)
		{
			if (bx > ax) return 4;
			if (by < ax) return 0;
		}
		else
		{
			if (bx < ax && by < ay) return 1;
			if (bx > ax && by < ay) return 3;
			if (bx < ax && by > ay) return 7;
			if (bx > ax && by > ay) return 5;
		}
		return 8;
	};
	
	if (!isInWebWorker)
	{
		window.PF_CLEAR = PF_CLEAR;
		window.PF_OBSTACLE = PF_OBSTACLE;
		window.Pathfinder = pathfinder;
		
		window.ResultNode = resultNode;
		window.allocResultNode = allocResultNode;
		window.freeResultNode = freeResultNode;
	}

})();
(function() {
var cr = {};
cr.plugins_ = {};
cr.behaviors = {};
if (typeof Object.getPrototypeOf !== "function")
{
	if (typeof "test".__proto__ === "object")
	{
		Object.getPrototypeOf = function(object) {
			return object.__proto__;
		};
	}
	else
	{
		Object.getPrototypeOf = function(object) {
			return object.constructor.prototype;
		};
	}
}
(function(){
	cr.logexport = function (msg)
	{
		if (window.console && window.console.log)
			window.console.log(msg);
	};
	cr.seal = function(x)
	{
		return x;
	};
	cr.freeze = function(x)
	{
		return x;
	};
	cr.is_undefined = function (x)
	{
		return typeof x === "undefined";
	};
	cr.is_number = function (x)
	{
		return typeof x === "number";
	};
	cr.is_string = function (x)
	{
		return typeof x === "string";
	};
	cr.isPOT = function (x)
	{
		return x > 0 && ((x - 1) & x) === 0;
	};
	cr.abs = function (x)
	{
		return (x < 0 ? -x : x);
	};
	cr.max = function (a, b)
	{
		return (a > b ? a : b);
	};
	cr.min = function (a, b)
	{
		return (a < b ? a : b);
	};
	cr.PI = Math.PI;
	cr.round = function (x)
	{
		return (x + 0.5) | 0;
	};
	cr.floor = function (x)
	{
		return x | 0;
	};
	function Vector2(x, y)
	{
		this.x = x;
		this.y = y;
		cr.seal(this);
	};
	Vector2.prototype.offset = function (px, py)
	{
		this.x += px;
		this.y += py;
		return this;
	};
	Vector2.prototype.mul = function (px, py)
	{
		this.x *= px;
		this.y *= py;
		return this;
	};
	cr.vector2 = Vector2;
	cr.segments_intersect = function(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y)
	{
		if (cr.max(a1x, a2x) < cr.min(b1x, b2x)
		 || cr.min(a1x, a2x) > cr.max(b1x, b2x)
		 || cr.max(a1y, a2y) < cr.min(b1y, b2y)
		 || cr.min(a1y, a2y) > cr.max(b1y, b2y))
		{
			return false;
		}
		var dpx = b1x - a1x + b2x - a2x;
		var dpy = b1y - a1y + b2y - a2y;
		var qax = a2x - a1x;
		var qay = a2y - a1y;
		var qbx = b2x - b1x;
		var qby = b2y - b1y;
		var d = cr.abs(qay * qbx - qby * qax);
		var la = qbx * dpy - qby * dpx;
		var lb = qax * dpy - qay * dpx;
		return cr.abs(la) <= d && cr.abs(lb) <= d;
	};
	function Rect(left, top, right, bottom)
	{
		this.set(left, top, right, bottom);
		cr.seal(this);
	};
	Rect.prototype.set = function (left, top, right, bottom)
	{
		this.left = left;
		this.top = top;
		this.right = right;
		this.bottom = bottom;
	};
	Rect.prototype.width = function ()
	{
		return this.right - this.left;
	};
	Rect.prototype.height = function ()
	{
		return this.bottom - this.top;
	};
	Rect.prototype.offset = function (px, py)
	{
		this.left += px;
		this.top += py;
		this.right += px;
		this.bottom += py;
		return this;
	};
	Rect.prototype.intersects_rect = function (rc)
	{
		return !(rc.right < this.left || rc.bottom < this.top || rc.left > this.right || rc.top > this.bottom);
	};
	Rect.prototype.contains_pt = function (x, y)
	{
		return (x >= this.left && x <= this.right) && (y >= this.top && y <= this.bottom);
	};
	cr.rect = Rect;
	function Quad()
	{
		this.tlx = 0;
		this.tly = 0;
		this.trx = 0;
		this.try_ = 0;	// is a keyword otherwise!
		this.brx = 0;
		this.bry = 0;
		this.blx = 0;
		this.bly = 0;
		cr.seal(this);
	};
	Quad.prototype.set_from_rect = function (rc)
	{
		this.tlx = rc.left;
		this.tly = rc.top;
		this.trx = rc.right;
		this.try_ = rc.top;
		this.brx = rc.right;
		this.bry = rc.bottom;
		this.blx = rc.left;
		this.bly = rc.bottom;
	};
	Quad.prototype.set_from_rotated_rect = function (rc, a)
	{
		if (a === 0)
		{
			this.set_from_rect(rc);
		}
		else
		{
			var sin_a = Math.sin(a);
			var cos_a = Math.cos(a);
			var left_sin_a = rc.left * sin_a;
			var top_sin_a = rc.top * sin_a;
			var right_sin_a = rc.right * sin_a;
			var bottom_sin_a = rc.bottom * sin_a;
			var left_cos_a = rc.left * cos_a;
			var top_cos_a = rc.top * cos_a;
			var right_cos_a = rc.right * cos_a;
			var bottom_cos_a = rc.bottom * cos_a;
			this.tlx = left_cos_a - top_sin_a;
			this.tly = top_cos_a + left_sin_a;
			this.trx = right_cos_a - top_sin_a;
			this.try_ = top_cos_a + right_sin_a;
			this.brx = right_cos_a - bottom_sin_a;
			this.bry = bottom_cos_a + right_sin_a;
			this.blx = left_cos_a - bottom_sin_a;
			this.bly = bottom_cos_a + left_sin_a;
		}
	};
	Quad.prototype.offset = function (px, py)
	{
		this.tlx += px;
		this.tly += py;
		this.trx += px;
		this.try_ += py;
		this.brx += px;
		this.bry += py;
		this.blx += px;
		this.bly += py;
		return this;
	};
	Quad.prototype.bounding_box = function (rc)
	{
		rc.left =   cr.min(cr.min(this.tlx, this.trx),  cr.min(this.brx, this.blx));
		rc.top =    cr.min(cr.min(this.tly, this.try_), cr.min(this.bry, this.bly));
		rc.right =  cr.max(cr.max(this.tlx, this.trx),  cr.max(this.brx, this.blx));
		rc.bottom = cr.max(cr.max(this.tly, this.try_), cr.max(this.bry, this.bly));
	};
	Quad.prototype.contains_pt = function (x, y)
	{
		var v0x = this.trx - this.tlx;
		var v0y = this.try_ - this.tly;
		var v1x = this.brx - this.tlx;
		var v1y = this.bry - this.tly;
		var v2x = x - this.tlx;
		var v2y = y - this.tly;
		var dot00 = v0x * v0x + v0y * v0y
		var dot01 = v0x * v1x + v0y * v1y
		var dot02 = v0x * v2x + v0y * v2y
		var dot11 = v1x * v1x + v1y * v1y
		var dot12 = v1x * v2x + v1y * v2y
		var invDenom = 1.0 / (dot00 * dot11 - dot01 * dot01);
		var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
		var v = (dot00 * dot12 - dot01 * dot02) * invDenom;
		if ((u >= 0.0) && (v > 0.0) && (u + v < 1))
			return true;
		v0x = this.blx - this.tlx;
		v0y = this.bly - this.tly;
		var dot00 = v0x * v0x + v0y * v0y
		var dot01 = v0x * v1x + v0y * v1y
		var dot02 = v0x * v2x + v0y * v2y
		invDenom = 1.0 / (dot00 * dot11 - dot01 * dot01);
		u = (dot11 * dot02 - dot01 * dot12) * invDenom;
		v = (dot00 * dot12 - dot01 * dot02) * invDenom;
		return (u >= 0.0) && (v > 0.0) && (u + v < 1);
	};
	Quad.prototype.at = function (i, xory)
	{
		switch (i)
		{
			case 0: return xory ? this.tlx : this.tly;
			case 1: return xory ? this.trx : this.try_;
			case 2: return xory ? this.brx : this.bry;
			case 3: return xory ? this.blx : this.bly;
			case 4: return xory ? this.tlx : this.tly;		// same as 0, repeated for perf
			default: return xory ? this.tlx : this.tly;
		}
	};
	Quad.prototype.midX = function ()
	{
		return (this.tlx + this.trx  + this.brx + this.blx) / 4;
	};
	Quad.prototype.midY = function ()
	{
		return (this.tly + this.try_ + this.bry + this.bly) / 4;
	};
	Quad.prototype.intersects_segment = function (x1, y1, x2, y2)
	{
		if (this.contains_pt(x1, y1) || this.contains_pt(x2, y2))
			return true;
		var a1x, a1y, a2x, a2y;
		var i;
		for (i = 0; i < 4; i++)
		{
			a1x = this.at(i, true);
			a1y = this.at(i, false);
			a2x = this.at(i + 1, true);
			a2y = this.at(i + 1, false);
			if (cr.segments_intersect(x1, y1, x2, y2, a1x, a1y, a2x, a2y))
				return true;
		}
		return false;
	};
	Quad.prototype.intersects_quad = function (rhs)
	{
		var midx = rhs.midX();
		var midy = rhs.midY();
		if (this.contains_pt(midx, midy))
			return true;
		midx = this.midX();
		midy = this.midY();
		if (rhs.contains_pt(midx, midy))
			return true;
		var a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y;
		var i, j;
		for (i = 0; i < 4; i++)
		{
			for (j = 0; j < 4; j++)
			{
				a1x = this.at(i, true);
				a1y = this.at(i, false);
				a2x = this.at(i + 1, true);
				a2y = this.at(i + 1, false);
				b1x = rhs.at(j, true);
				b1y = rhs.at(j, false);
				b2x = rhs.at(j + 1, true);
				b2y = rhs.at(j + 1, false);
				if (cr.segments_intersect(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y))
					return true;
			}
		}
		return false;
	};
	cr.quad = Quad;
	cr.RGB = function (red, green, blue)
	{
		return Math.max(Math.min(red, 255), 0)
			 | (Math.max(Math.min(green, 255), 0) << 8)
			 | (Math.max(Math.min(blue, 255), 0) << 16);
	};
	cr.GetRValue = function (rgb)
	{
		return rgb & 0xFF;
	};
	cr.GetGValue = function (rgb)
	{
		return (rgb & 0xFF00) >> 8;
	};
	cr.GetBValue = function (rgb)
	{
		return (rgb & 0xFF0000) >> 16;
	};
	cr.shallowCopy = function (a, b, allowOverwrite)
	{
		var attr;
		for (attr in b)
		{
			if (b.hasOwnProperty(attr))
			{
;
				a[attr] = b[attr];
			}
		}
		return a;
	};
	cr.arrayRemove = function (arr, index)
	{
		var i, len;
		index = cr.floor(index);
		if (index < 0 || index >= arr.length)
			return;							// index out of bounds
		if (index === 0)					// removing first item
			arr.shift();
		else if (index === arr.length - 1)	// removing last item
			arr.pop();
		else
		{
			for (i = index, len = arr.length - 1; i < len; i++)
				arr[i] = arr[i + 1];
			arr.length = len;
		}
	};
	cr.shallowAssignArray = function(dest, src)
	{
		dest.length = src.length;
		var i, len;
		for (i = 0, len = src.length; i < len; i++)
			dest[i] = src[i];
	};
	cr.arrayFindRemove = function (arr, item)
	{
		var index = arr.indexOf(item);
		if (index !== -1)
			cr.arrayRemove(arr, index);
	};
	cr.clamp = function(x, a, b)
	{
		if (x < a)
			return a;
		else if (x > b)
			return b;
		else
			return x;
	};
	cr.to_radians = function(x)
	{
		return x / (180.0 / cr.PI);
	};
	cr.to_degrees = function(x)
	{
		return x * (180.0 / cr.PI);
	};
	cr.clamp_angle_degrees = function (a)
	{
		a %= 360;       // now in (-360, 360) range
		if (a < 0)
			a += 360;   // now in [0, 360) range
		return a;
	};
	cr.clamp_angle = function (a)
	{
		a %= 2 * cr.PI;       // now in (-2pi, 2pi) range
		if (a < 0)
			a += 2 * cr.PI;   // now in [0, 2pi) range
		return a;
	};
	cr.to_clamped_degrees = function (x)
	{
		return cr.clamp_angle_degrees(cr.to_degrees(x));
	};
	cr.to_clamped_radians = function (x)
	{
		return cr.clamp_angle(cr.to_radians(x));
	};
	cr.angleTo = function(x1, y1, x2, y2)
	{
		var dx = x2 - x1;
        var dy = y2 - y1;
		return Math.atan2(dy, dx);
	};
	cr.angleDiff = function (a1, a2)
	{
		if (a1 === a2)
			return 0;
		var s1 = Math.sin(a1);
		var c1 = Math.cos(a1);
		var s2 = Math.sin(a2);
		var c2 = Math.cos(a2);
		var n = s1 * s2 + c1 * c2;
		if (n >= 1)
			return 0;
		if (n <= -1)
			return cr.PI;
		return Math.acos(n);
	};
	cr.angleRotate = function (start, end, step)
	{
		var ss = Math.sin(start);
		var cs = Math.cos(start);
		var se = Math.sin(end);
		var ce = Math.cos(end);
		if (Math.acos(ss * se + cs * ce) > step)
		{
			if (cs * se - ss * ce > 0)
				return cr.clamp_angle(start + step);
			else
				return cr.clamp_angle(start - step);
		}
		else
			return cr.clamp_angle(end);
	};
	cr.angleClockwise = function (a1, a2)
	{
		var s1 = Math.sin(a1);
		var c1 = Math.cos(a1);
		var s2 = Math.sin(a2);
		var c2 = Math.cos(a2);
		return c1 * s2 - s1 * c2 <= 0;
	};
	cr.rotatePtAround = function (px, py, a, ox, oy, getx)
	{
		if (a === 0)
			return getx ? px : py;
		var sin_a = Math.sin(a);
		var cos_a = Math.cos(a);
		px -= ox;
		py -= oy;
		var left_sin_a = px * sin_a;
		var top_sin_a = py * sin_a;
		var left_cos_a = px * cos_a;
		var top_cos_a = py * cos_a;
		px = left_cos_a - top_sin_a;
		py = top_cos_a + left_sin_a;
		px += ox;
		py += oy;
		return getx ? px : py;
	}
	cr.distanceTo = function(x1, y1, x2, y2)
	{
		var dx = x2 - x1;
        var dy = y2 - y1;
		return Math.sqrt(dx*dx + dy*dy);
	};
	cr.xor = function (x, y)
	{
		return !x !== !y;
	};
	cr.lerp = function (a, b, x)
	{
		return a + (b - a) * x;
	};
	cr.hasAnyOwnProperty = function (o)
	{
		var p;
		for (p in o)
		{
			if (o.hasOwnProperty(p))
				return true;
		}
		return false;
	};
	cr.wipe = function (obj)
	{
		var p;
		for (p in obj)
		{
			if (obj.hasOwnProperty(p))
				delete obj[p];
		}
	};
	var startup_time = +(new Date());
	cr.performance_now = function()
	{
		if (typeof window["performance"] !== "undefined")
		{
			var winperf = window["performance"];
			if (typeof winperf.now !== "undefined")
				return winperf.now();
			else if (typeof winperf["webkitNow"] !== "undefined")
				return winperf["webkitNow"]();
			else if (typeof winperf["msNow"] !== "undefined")
				return winperf["msNow"]();
		}
		return Date.now() - startup_time;
	};
	function ObjectSet_()
	{
		this.items = {};
		this.item_count = 0;
		this.values_cache = [];
		this.cache_valid = true;
		cr.seal(this);
	};
	ObjectSet_.prototype.contains = function (x)
	{
		return this.items.hasOwnProperty(x.toString());
	};
	ObjectSet_.prototype.add = function (x)
	{
		var str = x.toString();
		if (!this.items.hasOwnProperty(str))
		{
			this.items[str] = x;
			this.item_count++;
			this.cache_valid = false;
		}
		return this;
	};
	ObjectSet_.prototype.remove = function (x)
	{
		var str = x.toString();
		if (this.items.hasOwnProperty(str))
		{
			delete this.items[str];
			this.item_count--;
			this.cache_valid = false;
		}
		return this;
	};
	ObjectSet_.prototype.clear = function ()
	{
		cr.wipe(this.items);
		this.item_count = 0;
		this.values_cache.length = 0;
		this.cache_valid = true;
		return this;
	};
	ObjectSet_.prototype.isEmpty = function ()
	{
		return this.item_count === 0;
	};
	ObjectSet_.prototype.count = function ()
	{
		return this.item_count;
	};
	ObjectSet_.prototype.update_cache = function ()
	{
		if (this.cache_valid)
			return;
		this.values_cache.length = this.item_count;
		var p, n = 0;
		for (p in this.items)
		{
			if (this.items.hasOwnProperty(p))
				this.values_cache[n++] = this.items[p];
		}
;
		this.cache_valid = true;
	};
	ObjectSet_.prototype.values = function ()
	{
		this.update_cache();
		return this.values_cache.slice(0);
	};
	ObjectSet_.prototype.valuesRef = function ()
	{
		this.update_cache();
		return this.values_cache;
	};
	cr.ObjectSet = ObjectSet_;
	function KahanAdder_()
	{
		this.c = 0;
        this.y = 0;
        this.t = 0;
        this.sum = 0;
		cr.seal(this);
	};
	KahanAdder_.prototype.add = function (v)
	{
		this.y = v - this.c;
	    this.t = this.sum + this.y;
	    this.c = (this.t - this.sum) - this.y;
	    this.sum = this.t;
	};
    KahanAdder_.prototype.reset = function ()
    {
        this.c = 0;
        this.y = 0;
        this.t = 0;
        this.sum = 0;
    };
	cr.KahanAdder = KahanAdder_;
	cr.regexp_escape = function(text)
	{
		return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
	};
	function CollisionPoly_(pts_array_)
	{
		this.pts_cache = [];
		this.set_pts(pts_array_);
		cr.seal(this);
	};
	CollisionPoly_.prototype.set_pts = function(pts_array_)
	{
		this.pts_array = pts_array_;
		this.pts_count = pts_array_.length / 2;			// x, y, x, y... in array
		this.pts_cache.length = pts_array_.length;
		this.cache_width = -1;
		this.cache_height = -1;
		this.cache_angle = 0;
	};
	CollisionPoly_.prototype.is_empty = function()
	{
		return !this.pts_array.length;
	};
	CollisionPoly_.prototype.set_from_quad = function(q, offx, offy, w, h)
	{
		this.pts_cache.length = 8;
		this.pts_count = 4;
		var myptscache = this.pts_cache;
		myptscache[0] = q.tlx - offx;
		myptscache[1] = q.tly - offy;
		myptscache[2] = q.trx - offx;
		myptscache[3] = q.try_ - offy;
		myptscache[4] = q.brx - offx;
		myptscache[5] = q.bry - offy;
		myptscache[6] = q.blx - offx;
		myptscache[7] = q.bly - offy;
		this.cache_width = w;
		this.cache_height = h;
	};
	CollisionPoly_.prototype.set_from_poly = function (r)
	{
		this.pts_count = r.pts_count;
		cr.shallowAssignArray(this.pts_cache, r.pts_cache);
	};
	CollisionPoly_.prototype.cache_poly = function(w, h, a)
	{
		if (this.cache_width === w && this.cache_height === h && this.cache_angle === a)
			return;		// cache up-to-date
		this.cache_width = w;
		this.cache_height = h;
		this.cache_angle = a;
		var i, len, x, y;
		var sina = 0;
		var cosa = 1;
		var myptsarray = this.pts_array;
		var myptscache = this.pts_cache;
		if (a !== 0)
		{
			sina = Math.sin(a);
			cosa = Math.cos(a);
		}
		for (i = 0, len = this.pts_count; i < len; i++)
		{
			x = myptsarray[i*2] * w;
			y = myptsarray[i*2+1] * h;
			myptscache[i*2] = (x * cosa) - (y * sina);
			myptscache[i*2+1] = (y * cosa) + (x * sina);
		}
	};
	CollisionPoly_.prototype.contains_pt = function (a2x, a2y)
	{
		var myptscache = this.pts_cache;
		if (a2x === myptscache[0] && a2y === myptscache[1])
			return true;
		var i, x, y, len = this.pts_count;
		var bboxLeft = myptscache[0];
		var bboxRight = bboxLeft;
		var bboxTop = myptscache[1];
		var bboxBottom = bboxTop;
		for (i = 1; i < len; i++)
		{
			x = myptscache[i*2];
			y = myptscache[i*2+1];
			if (x < bboxLeft)
				bboxLeft = x;
			if (x > bboxRight)
				bboxRight = x;
			if (y < bboxTop)
				bboxTop = y;
			if (y > bboxBottom)
				bboxBottom = y;
		}
		var a1x = bboxLeft - 110;
		var a1y = bboxTop - 101;
		var a3x = bboxRight + 131
		var a3y = bboxBottom + 120;
		var b1x, b1y, b2x, b2y;
		var count1 = 0, count2 = 0;
		for (i = 0; i < len; i++)
		{
			b1x = myptscache[i*2];
			b1y = myptscache[i*2+1];
			b2x = myptscache[((i+1)%len)*2];
			b2y = myptscache[((i+1)%len)*2+1];
			if (cr.segments_intersect(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y))
				count1++;
			if (cr.segments_intersect(a3x, a3y, a2x, a2y, b1x, b1y, b2x, b2y))
				count2++;
		}
		return (count1 % 2 === 1) || (count2 % 2 === 1);
	};
	CollisionPoly_.prototype.intersects_poly = function (rhs, offx, offy)
	{
		var rhspts = rhs.pts_cache;
		var mypts = this.pts_cache;
		if (this.contains_pt(rhspts[0] + offx, rhspts[1] + offy))
			return true;
		if (rhs.contains_pt(mypts[0] - offx, mypts[1] - offy))
			return true;
		var i, leni, j, lenj;
		var a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y;
		for (i = 0, leni = this.pts_count; i < leni; i++)
		{
			a1x = mypts[i*2];
			a1y = mypts[i*2+1];
			a2x = mypts[((i+1)%leni)*2];
			a2y = mypts[((i+1)%leni)*2+1];
			for (j = 0, lenj = rhs.pts_count; j < lenj; j++)
			{
				b1x = rhspts[j*2] + offx;
				b1y = rhspts[j*2+1] + offy;
				b2x = rhspts[((j+1)%lenj)*2] + offx;
				b2y = rhspts[((j+1)%lenj)*2+1] + offy;
				if (cr.segments_intersect(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y))
					return true;
			}
		}
		return false;
	};
	CollisionPoly_.prototype.intersects_segment = function (offx, offy, x1, y1, x2, y2)
	{
		var mypts = this.pts_cache;
		if (this.contains_pt(x1 - offx, y1 - offy))
			return true;
		var i, leni;
		var a1x, a1y, a2x, a2y;
		for (i = 0, leni = this.pts_count; i < leni; i++)
		{
			a1x = mypts[i*2] + offx;
			a1y = mypts[i*2+1] + offy;
			a2x = mypts[((i+1)%leni)*2] + offx;
			a2y = mypts[((i+1)%leni)*2+1] + offy;
			if (cr.segments_intersect(x1, y1, x2, y2, a1x, a1y, a2x, a2y))
				return true;
		}
		return false;
	};
	cr.CollisionPoly = CollisionPoly_;
	var fxNames = [ "lighter",
					"xor",
					"copy",
					"destination-over",
					"source-in",
					"destination-in",
					"source-out",
					"destination-out",
					"source-atop",
					"destination-atop"];
	cr.effectToCompositeOp = function(effect)
	{
		if (effect <= 0 || effect >= 11)
			return "source-over";
		return fxNames[effect - 1];	// not including "none" so offset by 1
	};
	cr.setGLBlend = function(this_, effect, gl)
	{
		if (!gl)
			return;
		this_.srcBlend = gl.ONE;
		this_.destBlend = gl.ONE_MINUS_SRC_ALPHA;
		switch (effect) {
		case 1:		// lighter (additive)
			this_.srcBlend = gl.ONE;
			this_.destBlend = gl.ONE;
			break;
		case 2:		// xor
			break;	// todo
		case 3:		// copy
			this_.srcBlend = gl.ONE;
			this_.destBlend = gl.ZERO;
			break;
		case 4:		// destination-over
			this_.srcBlend = gl.ONE_MINUS_DST_ALPHA;
			this_.destBlend = gl.ONE;
			break;
		case 5:		// source-in
			this_.srcBlend = gl.DST_ALPHA;
			this_.destBlend = gl.ZERO;
			break;
		case 6:		// destination-in
			this_.srcBlend = gl.ZERO;
			this_.destBlend = gl.SRC_ALPHA;
			break;
		case 7:		// source-out
			this_.srcBlend = gl.ONE_MINUS_DST_ALPHA;
			this_.destBlend = gl.ZERO;
			break;
		case 8:		// destination-out
			this_.srcBlend = gl.ZERO;
			this_.destBlend = gl.ONE_MINUS_SRC_ALPHA;
			break;
		case 9:		// source-atop
			this_.srcBlend = gl.DST_ALPHA;
			this_.destBlend = gl.ONE_MINUS_SRC_ALPHA;
			break;
		case 10:	// destination-atop
			this_.srcBlend = gl.ONE_MINUS_DST_ALPHA;
			this_.destBlend = gl.SRC_ALPHA;
			break;
		}
	};
	cr.round6dp = function (x)
	{
		return Math.round(x * 1000000) / 1000000;
	};
	/*
	var localeCompare_options = {
		"usage": "search",
		"sensitivity": "accent"
	};
	var has_localeCompare = !!"a".localeCompare;
	var localeCompare_works1 = (has_localeCompare && "a".localeCompare("A", undefined, localeCompare_options) === 0);
	var localeCompare_works2 = (has_localeCompare && "a".localeCompare("á", undefined, localeCompare_options) !== 0);
	var supports_localeCompare = (has_localeCompare && localeCompare_works1 && localeCompare_works2);
	*/
	cr.equals_nocase = function (a, b)
	{
		if (typeof a !== "string" || typeof b !== "string")
			return false;
		if (a.length !== b.length)
			return false;
		if (a === b)
			return true;
		/*
		if (supports_localeCompare)
		{
			return (a.localeCompare(b, undefined, localeCompare_options) === 0);
		}
		else
		{
		*/
			return a.toLowerCase() === b.toLowerCase();
	};
}());
var MatrixArray=typeof Float32Array!=="undefined"?Float32Array:Array,glMatrixArrayType=MatrixArray,vec3={},mat3={},mat4={},quat4={};vec3.create=function(a){var b=new MatrixArray(3);a&&(b[0]=a[0],b[1]=a[1],b[2]=a[2]);return b};vec3.set=function(a,b){b[0]=a[0];b[1]=a[1];b[2]=a[2];return b};vec3.add=function(a,b,c){if(!c||a===c)return a[0]+=b[0],a[1]+=b[1],a[2]+=b[2],a;c[0]=a[0]+b[0];c[1]=a[1]+b[1];c[2]=a[2]+b[2];return c};
vec3.subtract=function(a,b,c){if(!c||a===c)return a[0]-=b[0],a[1]-=b[1],a[2]-=b[2],a;c[0]=a[0]-b[0];c[1]=a[1]-b[1];c[2]=a[2]-b[2];return c};vec3.negate=function(a,b){b||(b=a);b[0]=-a[0];b[1]=-a[1];b[2]=-a[2];return b};vec3.scale=function(a,b,c){if(!c||a===c)return a[0]*=b,a[1]*=b,a[2]*=b,a;c[0]=a[0]*b;c[1]=a[1]*b;c[2]=a[2]*b;return c};
vec3.normalize=function(a,b){b||(b=a);var c=a[0],d=a[1],e=a[2],g=Math.sqrt(c*c+d*d+e*e);if(g){if(g===1)return b[0]=c,b[1]=d,b[2]=e,b}else return b[0]=0,b[1]=0,b[2]=0,b;g=1/g;b[0]=c*g;b[1]=d*g;b[2]=e*g;return b};vec3.cross=function(a,b,c){c||(c=a);var d=a[0],e=a[1],a=a[2],g=b[0],f=b[1],b=b[2];c[0]=e*b-a*f;c[1]=a*g-d*b;c[2]=d*f-e*g;return c};vec3.length=function(a){var b=a[0],c=a[1],a=a[2];return Math.sqrt(b*b+c*c+a*a)};vec3.dot=function(a,b){return a[0]*b[0]+a[1]*b[1]+a[2]*b[2]};
vec3.direction=function(a,b,c){c||(c=a);var d=a[0]-b[0],e=a[1]-b[1],a=a[2]-b[2],b=Math.sqrt(d*d+e*e+a*a);if(!b)return c[0]=0,c[1]=0,c[2]=0,c;b=1/b;c[0]=d*b;c[1]=e*b;c[2]=a*b;return c};vec3.lerp=function(a,b,c,d){d||(d=a);d[0]=a[0]+c*(b[0]-a[0]);d[1]=a[1]+c*(b[1]-a[1]);d[2]=a[2]+c*(b[2]-a[2]);return d};vec3.str=function(a){return"["+a[0]+", "+a[1]+", "+a[2]+"]"};
mat3.create=function(a){var b=new MatrixArray(9);a&&(b[0]=a[0],b[1]=a[1],b[2]=a[2],b[3]=a[3],b[4]=a[4],b[5]=a[5],b[6]=a[6],b[7]=a[7],b[8]=a[8]);return b};mat3.set=function(a,b){b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[3];b[4]=a[4];b[5]=a[5];b[6]=a[6];b[7]=a[7];b[8]=a[8];return b};mat3.identity=function(a){a[0]=1;a[1]=0;a[2]=0;a[3]=0;a[4]=1;a[5]=0;a[6]=0;a[7]=0;a[8]=1;return a};
mat3.transpose=function(a,b){if(!b||a===b){var c=a[1],d=a[2],e=a[5];a[1]=a[3];a[2]=a[6];a[3]=c;a[5]=a[7];a[6]=d;a[7]=e;return a}b[0]=a[0];b[1]=a[3];b[2]=a[6];b[3]=a[1];b[4]=a[4];b[5]=a[7];b[6]=a[2];b[7]=a[5];b[8]=a[8];return b};mat3.toMat4=function(a,b){b||(b=mat4.create());b[15]=1;b[14]=0;b[13]=0;b[12]=0;b[11]=0;b[10]=a[8];b[9]=a[7];b[8]=a[6];b[7]=0;b[6]=a[5];b[5]=a[4];b[4]=a[3];b[3]=0;b[2]=a[2];b[1]=a[1];b[0]=a[0];return b};
mat3.str=function(a){return"["+a[0]+", "+a[1]+", "+a[2]+", "+a[3]+", "+a[4]+", "+a[5]+", "+a[6]+", "+a[7]+", "+a[8]+"]"};mat4.create=function(a){var b=new MatrixArray(16);a&&(b[0]=a[0],b[1]=a[1],b[2]=a[2],b[3]=a[3],b[4]=a[4],b[5]=a[5],b[6]=a[6],b[7]=a[7],b[8]=a[8],b[9]=a[9],b[10]=a[10],b[11]=a[11],b[12]=a[12],b[13]=a[13],b[14]=a[14],b[15]=a[15]);return b};
mat4.set=function(a,b){b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[3];b[4]=a[4];b[5]=a[5];b[6]=a[6];b[7]=a[7];b[8]=a[8];b[9]=a[9];b[10]=a[10];b[11]=a[11];b[12]=a[12];b[13]=a[13];b[14]=a[14];b[15]=a[15];return b};mat4.identity=function(a){a[0]=1;a[1]=0;a[2]=0;a[3]=0;a[4]=0;a[5]=1;a[6]=0;a[7]=0;a[8]=0;a[9]=0;a[10]=1;a[11]=0;a[12]=0;a[13]=0;a[14]=0;a[15]=1;return a};
mat4.transpose=function(a,b){if(!b||a===b){var c=a[1],d=a[2],e=a[3],g=a[6],f=a[7],h=a[11];a[1]=a[4];a[2]=a[8];a[3]=a[12];a[4]=c;a[6]=a[9];a[7]=a[13];a[8]=d;a[9]=g;a[11]=a[14];a[12]=e;a[13]=f;a[14]=h;return a}b[0]=a[0];b[1]=a[4];b[2]=a[8];b[3]=a[12];b[4]=a[1];b[5]=a[5];b[6]=a[9];b[7]=a[13];b[8]=a[2];b[9]=a[6];b[10]=a[10];b[11]=a[14];b[12]=a[3];b[13]=a[7];b[14]=a[11];b[15]=a[15];return b};
mat4.determinant=function(a){var b=a[0],c=a[1],d=a[2],e=a[3],g=a[4],f=a[5],h=a[6],i=a[7],j=a[8],k=a[9],l=a[10],n=a[11],o=a[12],m=a[13],p=a[14],a=a[15];return o*k*h*e-j*m*h*e-o*f*l*e+g*m*l*e+j*f*p*e-g*k*p*e-o*k*d*i+j*m*d*i+o*c*l*i-b*m*l*i-j*c*p*i+b*k*p*i+o*f*d*n-g*m*d*n-o*c*h*n+b*m*h*n+g*c*p*n-b*f*p*n-j*f*d*a+g*k*d*a+j*c*h*a-b*k*h*a-g*c*l*a+b*f*l*a};
mat4.inverse=function(a,b){b||(b=a);var c=a[0],d=a[1],e=a[2],g=a[3],f=a[4],h=a[5],i=a[6],j=a[7],k=a[8],l=a[9],n=a[10],o=a[11],m=a[12],p=a[13],r=a[14],s=a[15],A=c*h-d*f,B=c*i-e*f,t=c*j-g*f,u=d*i-e*h,v=d*j-g*h,w=e*j-g*i,x=k*p-l*m,y=k*r-n*m,z=k*s-o*m,C=l*r-n*p,D=l*s-o*p,E=n*s-o*r,q=1/(A*E-B*D+t*C+u*z-v*y+w*x);b[0]=(h*E-i*D+j*C)*q;b[1]=(-d*E+e*D-g*C)*q;b[2]=(p*w-r*v+s*u)*q;b[3]=(-l*w+n*v-o*u)*q;b[4]=(-f*E+i*z-j*y)*q;b[5]=(c*E-e*z+g*y)*q;b[6]=(-m*w+r*t-s*B)*q;b[7]=(k*w-n*t+o*B)*q;b[8]=(f*D-h*z+j*x)*q;
b[9]=(-c*D+d*z-g*x)*q;b[10]=(m*v-p*t+s*A)*q;b[11]=(-k*v+l*t-o*A)*q;b[12]=(-f*C+h*y-i*x)*q;b[13]=(c*C-d*y+e*x)*q;b[14]=(-m*u+p*B-r*A)*q;b[15]=(k*u-l*B+n*A)*q;return b};mat4.toRotationMat=function(a,b){b||(b=mat4.create());b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[3];b[4]=a[4];b[5]=a[5];b[6]=a[6];b[7]=a[7];b[8]=a[8];b[9]=a[9];b[10]=a[10];b[11]=a[11];b[12]=0;b[13]=0;b[14]=0;b[15]=1;return b};
mat4.toMat3=function(a,b){b||(b=mat3.create());b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[4];b[4]=a[5];b[5]=a[6];b[6]=a[8];b[7]=a[9];b[8]=a[10];return b};mat4.toInverseMat3=function(a,b){var c=a[0],d=a[1],e=a[2],g=a[4],f=a[5],h=a[6],i=a[8],j=a[9],k=a[10],l=k*f-h*j,n=-k*g+h*i,o=j*g-f*i,m=c*l+d*n+e*o;if(!m)return null;m=1/m;b||(b=mat3.create());b[0]=l*m;b[1]=(-k*d+e*j)*m;b[2]=(h*d-e*f)*m;b[3]=n*m;b[4]=(k*c-e*i)*m;b[5]=(-h*c+e*g)*m;b[6]=o*m;b[7]=(-j*c+d*i)*m;b[8]=(f*c-d*g)*m;return b};
mat4.multiply=function(a,b,c){c||(c=a);var d=a[0],e=a[1],g=a[2],f=a[3],h=a[4],i=a[5],j=a[6],k=a[7],l=a[8],n=a[9],o=a[10],m=a[11],p=a[12],r=a[13],s=a[14],a=a[15],A=b[0],B=b[1],t=b[2],u=b[3],v=b[4],w=b[5],x=b[6],y=b[7],z=b[8],C=b[9],D=b[10],E=b[11],q=b[12],F=b[13],G=b[14],b=b[15];c[0]=A*d+B*h+t*l+u*p;c[1]=A*e+B*i+t*n+u*r;c[2]=A*g+B*j+t*o+u*s;c[3]=A*f+B*k+t*m+u*a;c[4]=v*d+w*h+x*l+y*p;c[5]=v*e+w*i+x*n+y*r;c[6]=v*g+w*j+x*o+y*s;c[7]=v*f+w*k+x*m+y*a;c[8]=z*d+C*h+D*l+E*p;c[9]=z*e+C*i+D*n+E*r;c[10]=z*g+C*
j+D*o+E*s;c[11]=z*f+C*k+D*m+E*a;c[12]=q*d+F*h+G*l+b*p;c[13]=q*e+F*i+G*n+b*r;c[14]=q*g+F*j+G*o+b*s;c[15]=q*f+F*k+G*m+b*a;return c};mat4.multiplyVec3=function(a,b,c){c||(c=b);var d=b[0],e=b[1],b=b[2];c[0]=a[0]*d+a[4]*e+a[8]*b+a[12];c[1]=a[1]*d+a[5]*e+a[9]*b+a[13];c[2]=a[2]*d+a[6]*e+a[10]*b+a[14];return c};
mat4.multiplyVec4=function(a,b,c){c||(c=b);var d=b[0],e=b[1],g=b[2],b=b[3];c[0]=a[0]*d+a[4]*e+a[8]*g+a[12]*b;c[1]=a[1]*d+a[5]*e+a[9]*g+a[13]*b;c[2]=a[2]*d+a[6]*e+a[10]*g+a[14]*b;c[3]=a[3]*d+a[7]*e+a[11]*g+a[15]*b;return c};
mat4.translate=function(a,b,c){var d=b[0],e=b[1],b=b[2],g,f,h,i,j,k,l,n,o,m,p,r;if(!c||a===c)return a[12]=a[0]*d+a[4]*e+a[8]*b+a[12],a[13]=a[1]*d+a[5]*e+a[9]*b+a[13],a[14]=a[2]*d+a[6]*e+a[10]*b+a[14],a[15]=a[3]*d+a[7]*e+a[11]*b+a[15],a;g=a[0];f=a[1];h=a[2];i=a[3];j=a[4];k=a[5];l=a[6];n=a[7];o=a[8];m=a[9];p=a[10];r=a[11];c[0]=g;c[1]=f;c[2]=h;c[3]=i;c[4]=j;c[5]=k;c[6]=l;c[7]=n;c[8]=o;c[9]=m;c[10]=p;c[11]=r;c[12]=g*d+j*e+o*b+a[12];c[13]=f*d+k*e+m*b+a[13];c[14]=h*d+l*e+p*b+a[14];c[15]=i*d+n*e+r*b+a[15];
return c};mat4.scale=function(a,b,c){var d=b[0],e=b[1],b=b[2];if(!c||a===c)return a[0]*=d,a[1]*=d,a[2]*=d,a[3]*=d,a[4]*=e,a[5]*=e,a[6]*=e,a[7]*=e,a[8]*=b,a[9]*=b,a[10]*=b,a[11]*=b,a;c[0]=a[0]*d;c[1]=a[1]*d;c[2]=a[2]*d;c[3]=a[3]*d;c[4]=a[4]*e;c[5]=a[5]*e;c[6]=a[6]*e;c[7]=a[7]*e;c[8]=a[8]*b;c[9]=a[9]*b;c[10]=a[10]*b;c[11]=a[11]*b;c[12]=a[12];c[13]=a[13];c[14]=a[14];c[15]=a[15];return c};
mat4.rotate=function(a,b,c,d){var e=c[0],g=c[1],c=c[2],f=Math.sqrt(e*e+g*g+c*c),h,i,j,k,l,n,o,m,p,r,s,A,B,t,u,v,w,x,y,z;if(!f)return null;f!==1&&(f=1/f,e*=f,g*=f,c*=f);h=Math.sin(b);i=Math.cos(b);j=1-i;b=a[0];f=a[1];k=a[2];l=a[3];n=a[4];o=a[5];m=a[6];p=a[7];r=a[8];s=a[9];A=a[10];B=a[11];t=e*e*j+i;u=g*e*j+c*h;v=c*e*j-g*h;w=e*g*j-c*h;x=g*g*j+i;y=c*g*j+e*h;z=e*c*j+g*h;e=g*c*j-e*h;g=c*c*j+i;d?a!==d&&(d[12]=a[12],d[13]=a[13],d[14]=a[14],d[15]=a[15]):d=a;d[0]=b*t+n*u+r*v;d[1]=f*t+o*u+s*v;d[2]=k*t+m*u+A*
v;d[3]=l*t+p*u+B*v;d[4]=b*w+n*x+r*y;d[5]=f*w+o*x+s*y;d[6]=k*w+m*x+A*y;d[7]=l*w+p*x+B*y;d[8]=b*z+n*e+r*g;d[9]=f*z+o*e+s*g;d[10]=k*z+m*e+A*g;d[11]=l*z+p*e+B*g;return d};mat4.rotateX=function(a,b,c){var d=Math.sin(b),b=Math.cos(b),e=a[4],g=a[5],f=a[6],h=a[7],i=a[8],j=a[9],k=a[10],l=a[11];c?a!==c&&(c[0]=a[0],c[1]=a[1],c[2]=a[2],c[3]=a[3],c[12]=a[12],c[13]=a[13],c[14]=a[14],c[15]=a[15]):c=a;c[4]=e*b+i*d;c[5]=g*b+j*d;c[6]=f*b+k*d;c[7]=h*b+l*d;c[8]=e*-d+i*b;c[9]=g*-d+j*b;c[10]=f*-d+k*b;c[11]=h*-d+l*b;return c};
mat4.rotateY=function(a,b,c){var d=Math.sin(b),b=Math.cos(b),e=a[0],g=a[1],f=a[2],h=a[3],i=a[8],j=a[9],k=a[10],l=a[11];c?a!==c&&(c[4]=a[4],c[5]=a[5],c[6]=a[6],c[7]=a[7],c[12]=a[12],c[13]=a[13],c[14]=a[14],c[15]=a[15]):c=a;c[0]=e*b+i*-d;c[1]=g*b+j*-d;c[2]=f*b+k*-d;c[3]=h*b+l*-d;c[8]=e*d+i*b;c[9]=g*d+j*b;c[10]=f*d+k*b;c[11]=h*d+l*b;return c};
mat4.rotateZ=function(a,b,c){var d=Math.sin(b),b=Math.cos(b),e=a[0],g=a[1],f=a[2],h=a[3],i=a[4],j=a[5],k=a[6],l=a[7];c?a!==c&&(c[8]=a[8],c[9]=a[9],c[10]=a[10],c[11]=a[11],c[12]=a[12],c[13]=a[13],c[14]=a[14],c[15]=a[15]):c=a;c[0]=e*b+i*d;c[1]=g*b+j*d;c[2]=f*b+k*d;c[3]=h*b+l*d;c[4]=e*-d+i*b;c[5]=g*-d+j*b;c[6]=f*-d+k*b;c[7]=h*-d+l*b;return c};
mat4.frustum=function(a,b,c,d,e,g,f){f||(f=mat4.create());var h=b-a,i=d-c,j=g-e;f[0]=e*2/h;f[1]=0;f[2]=0;f[3]=0;f[4]=0;f[5]=e*2/i;f[6]=0;f[7]=0;f[8]=(b+a)/h;f[9]=(d+c)/i;f[10]=-(g+e)/j;f[11]=-1;f[12]=0;f[13]=0;f[14]=-(g*e*2)/j;f[15]=0;return f};mat4.perspective=function(a,b,c,d,e){a=c*Math.tan(a*Math.PI/360);b*=a;return mat4.frustum(-b,b,-a,a,c,d,e)};
mat4.ortho=function(a,b,c,d,e,g,f){f||(f=mat4.create());var h=b-a,i=d-c,j=g-e;f[0]=2/h;f[1]=0;f[2]=0;f[3]=0;f[4]=0;f[5]=2/i;f[6]=0;f[7]=0;f[8]=0;f[9]=0;f[10]=-2/j;f[11]=0;f[12]=-(a+b)/h;f[13]=-(d+c)/i;f[14]=-(g+e)/j;f[15]=1;return f};
mat4.lookAt=function(a,b,c,d){d||(d=mat4.create());var e,g,f,h,i,j,k,l,n=a[0],o=a[1],a=a[2];g=c[0];f=c[1];e=c[2];c=b[1];j=b[2];if(n===b[0]&&o===c&&a===j)return mat4.identity(d);c=n-b[0];j=o-b[1];k=a-b[2];l=1/Math.sqrt(c*c+j*j+k*k);c*=l;j*=l;k*=l;b=f*k-e*j;e=e*c-g*k;g=g*j-f*c;(l=Math.sqrt(b*b+e*e+g*g))?(l=1/l,b*=l,e*=l,g*=l):g=e=b=0;f=j*g-k*e;h=k*b-c*g;i=c*e-j*b;(l=Math.sqrt(f*f+h*h+i*i))?(l=1/l,f*=l,h*=l,i*=l):i=h=f=0;d[0]=b;d[1]=f;d[2]=c;d[3]=0;d[4]=e;d[5]=h;d[6]=j;d[7]=0;d[8]=g;d[9]=i;d[10]=k;d[11]=
0;d[12]=-(b*n+e*o+g*a);d[13]=-(f*n+h*o+i*a);d[14]=-(c*n+j*o+k*a);d[15]=1;return d};mat4.fromRotationTranslation=function(a,b,c){c||(c=mat4.create());var d=a[0],e=a[1],g=a[2],f=a[3],h=d+d,i=e+e,j=g+g,a=d*h,k=d*i;d*=j;var l=e*i;e*=j;g*=j;h*=f;i*=f;f*=j;c[0]=1-(l+g);c[1]=k+f;c[2]=d-i;c[3]=0;c[4]=k-f;c[5]=1-(a+g);c[6]=e+h;c[7]=0;c[8]=d+i;c[9]=e-h;c[10]=1-(a+l);c[11]=0;c[12]=b[0];c[13]=b[1];c[14]=b[2];c[15]=1;return c};
mat4.str=function(a){return"["+a[0]+", "+a[1]+", "+a[2]+", "+a[3]+", "+a[4]+", "+a[5]+", "+a[6]+", "+a[7]+", "+a[8]+", "+a[9]+", "+a[10]+", "+a[11]+", "+a[12]+", "+a[13]+", "+a[14]+", "+a[15]+"]"};quat4.create=function(a){var b=new MatrixArray(4);a&&(b[0]=a[0],b[1]=a[1],b[2]=a[2],b[3]=a[3]);return b};quat4.set=function(a,b){b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[3];return b};
quat4.calculateW=function(a,b){var c=a[0],d=a[1],e=a[2];if(!b||a===b)return a[3]=-Math.sqrt(Math.abs(1-c*c-d*d-e*e)),a;b[0]=c;b[1]=d;b[2]=e;b[3]=-Math.sqrt(Math.abs(1-c*c-d*d-e*e));return b};quat4.inverse=function(a,b){if(!b||a===b)return a[0]*=-1,a[1]*=-1,a[2]*=-1,a;b[0]=-a[0];b[1]=-a[1];b[2]=-a[2];b[3]=a[3];return b};quat4.length=function(a){var b=a[0],c=a[1],d=a[2],a=a[3];return Math.sqrt(b*b+c*c+d*d+a*a)};
quat4.normalize=function(a,b){b||(b=a);var c=a[0],d=a[1],e=a[2],g=a[3],f=Math.sqrt(c*c+d*d+e*e+g*g);if(f===0)return b[0]=0,b[1]=0,b[2]=0,b[3]=0,b;f=1/f;b[0]=c*f;b[1]=d*f;b[2]=e*f;b[3]=g*f;return b};quat4.multiply=function(a,b,c){c||(c=a);var d=a[0],e=a[1],g=a[2],a=a[3],f=b[0],h=b[1],i=b[2],b=b[3];c[0]=d*b+a*f+e*i-g*h;c[1]=e*b+a*h+g*f-d*i;c[2]=g*b+a*i+d*h-e*f;c[3]=a*b-d*f-e*h-g*i;return c};
quat4.multiplyVec3=function(a,b,c){c||(c=b);var d=b[0],e=b[1],g=b[2],b=a[0],f=a[1],h=a[2],a=a[3],i=a*d+f*g-h*e,j=a*e+h*d-b*g,k=a*g+b*e-f*d,d=-b*d-f*e-h*g;c[0]=i*a+d*-b+j*-h-k*-f;c[1]=j*a+d*-f+k*-b-i*-h;c[2]=k*a+d*-h+i*-f-j*-b;return c};quat4.toMat3=function(a,b){b||(b=mat3.create());var c=a[0],d=a[1],e=a[2],g=a[3],f=c+c,h=d+d,i=e+e,j=c*f,k=c*h;c*=i;var l=d*h;d*=i;e*=i;f*=g;h*=g;g*=i;b[0]=1-(l+e);b[1]=k+g;b[2]=c-h;b[3]=k-g;b[4]=1-(j+e);b[5]=d+f;b[6]=c+h;b[7]=d-f;b[8]=1-(j+l);return b};
quat4.toMat4=function(a,b){b||(b=mat4.create());var c=a[0],d=a[1],e=a[2],g=a[3],f=c+c,h=d+d,i=e+e,j=c*f,k=c*h;c*=i;var l=d*h;d*=i;e*=i;f*=g;h*=g;g*=i;b[0]=1-(l+e);b[1]=k+g;b[2]=c-h;b[3]=0;b[4]=k-g;b[5]=1-(j+e);b[6]=d+f;b[7]=0;b[8]=c+h;b[9]=d-f;b[10]=1-(j+l);b[11]=0;b[12]=0;b[13]=0;b[14]=0;b[15]=1;return b};
quat4.slerp=function(a,b,c,d){d||(d=a);var e=a[0]*b[0]+a[1]*b[1]+a[2]*b[2]+a[3]*b[3],g,f;if(Math.abs(e)>=1)return d!==a&&(d[0]=a[0],d[1]=a[1],d[2]=a[2],d[3]=a[3]),d;g=Math.acos(e);f=Math.sqrt(1-e*e);if(Math.abs(f)<0.001)return d[0]=a[0]*0.5+b[0]*0.5,d[1]=a[1]*0.5+b[1]*0.5,d[2]=a[2]*0.5+b[2]*0.5,d[3]=a[3]*0.5+b[3]*0.5,d;e=Math.sin((1-c)*g)/f;c=Math.sin(c*g)/f;d[0]=a[0]*e+b[0]*c;d[1]=a[1]*e+b[1]*c;d[2]=a[2]*e+b[2]*c;d[3]=a[3]*e+b[3]*c;return d};
quat4.str=function(a){return"["+a[0]+", "+a[1]+", "+a[2]+", "+a[3]+"]"};
(function()
{
	var MAX_VERTICES = 8000;						// equates to 2500 objects being drawn
	var MAX_INDICES = (MAX_VERTICES / 2) * 3;		// 6 indices for every 4 vertices
	var MAX_POINTS = 8000;
	var MULTI_BUFFERS = 4;							// cycle 4 buffers to try and avoid blocking
	var BATCH_NULL = 0;
	var BATCH_QUAD = 1;
	var BATCH_SETTEXTURE = 2;
	var BATCH_SETOPACITY = 3;
	var BATCH_SETBLEND = 4;
	var BATCH_UPDATEMODELVIEW = 5;
	var BATCH_RENDERTOTEXTURE = 6;
	var BATCH_CLEAR = 7;
	var BATCH_POINTS = 8;
	var BATCH_SETPROGRAM = 9;
	var BATCH_SETPROGRAMPARAMETERS = 10;
	function GLWrap_(gl, isMobile)
	{
		this.width = 0;		// not yet known, wait for call to setSize()
		this.height = 0;
		this.cam = vec3.create([0, 0, 100]);			// camera position
		this.look = vec3.create([0, 0, 0]);				// lookat position
		this.up = vec3.create([0, 1, 0]);				// up vector
		this.worldScale = vec3.create([1, 1, 1]);		// world scaling factor
		this.matP = mat4.create();						// perspective matrix
		this.matMV = mat4.create();						// model view matrix
		this.lastMV = mat4.create();
		this.currentMV = mat4.create();
		this.gl = gl;
		this.initState();
	};
	GLWrap_.prototype.initState = function ()
	{
		var gl = this.gl;
		var i, len;
		this.lastOpacity = 1;
		this.lastTexture = null;
		this.currentOpacity = 1;
		gl.clearColor(0, 0, 0, 0);
		gl.clear(gl.COLOR_BUFFER_BIT);
		gl.enable(gl.BLEND);
        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
		gl.disable(gl.CULL_FACE);
		gl.disable(gl.DEPTH_TEST);
		this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
		this.lastSrcBlend = gl.ONE;
		this.lastDestBlend = gl.ONE_MINUS_SRC_ALPHA;
		this.pointBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER, this.pointBuffer);
		this.vertexBuffers = new Array(MULTI_BUFFERS);
		this.texcoordBuffers = new Array(MULTI_BUFFERS);
		for (i = 0; i < MULTI_BUFFERS; i++)
		{
			this.vertexBuffers[i] = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffers[i]);
			this.texcoordBuffers[i] = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER, this.texcoordBuffers[i]);
		}
		this.curBuffer = 0;
		this.indexBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
		this.vertexData = new Float32Array(MAX_VERTICES * 2);
		this.texcoordData = new Float32Array(MAX_VERTICES * 2);
		this.pointData = new Float32Array(MAX_POINTS * 4);
		var indexData = new Uint16Array(MAX_INDICES);
		i = 0, len = MAX_INDICES;
		var fv = 0;
		while (i < len)
		{
			indexData[i++] = fv;		// top left
			indexData[i++] = fv + 1;	// top right
			indexData[i++] = fv + 2;	// bottom right (first tri)
			indexData[i++] = fv;		// top left
			indexData[i++] = fv + 2;	// bottom right
			indexData[i++] = fv + 3;	// bottom left
			fv += 4;
		}
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indexData, gl.STATIC_DRAW);
		this.vertexPtr = 0;
		this.pointPtr = 0;
		var fsSource, vsSource;
		this.shaderPrograms = [];
		fsSource = [
			"varying mediump vec2 vTex;",
			"uniform lowp float opacity;",
			"uniform lowp sampler2D samplerFront;",
			"void main(void) {",
			"	gl_FragColor = texture2D(samplerFront, vTex);",
			"	gl_FragColor *= opacity;",
			"}"
		].join("\n");
		vsSource = [
			"attribute highp vec2 aPos;",
			"attribute mediump vec2 aTex;",
			"varying mediump vec2 vTex;",
			"uniform highp mat4 matP;",
			"uniform highp mat4 matMV;",
			"void main(void) {",
			"	gl_Position = matP * matMV * vec4(aPos.x, aPos.y, 0.0, 1.0);",
			"	vTex = aTex;",
			"}"
		].join("\n");
		var shaderProg = this.createShaderProgram({src: fsSource}, vsSource, "<default>");
;
		this.shaderPrograms.push(shaderProg);		// Default shader is always shader 0
		fsSource = [
			"uniform mediump sampler2D samplerFront;",
			"varying lowp float opacity;",
			"void main(void) {",
			"	gl_FragColor = texture2D(samplerFront, gl_PointCoord);",
			"	gl_FragColor *= opacity;",
			"}"
		].join("\n");
		var pointVsSource = [
			"attribute vec4 aPos;",
			"varying float opacity;",
			"uniform mat4 matP;",
			"uniform mat4 matMV;",
			"void main(void) {",
			"	gl_Position = matP * matMV * vec4(aPos.x, aPos.y, 0.0, 1.0);",
			"	gl_PointSize = aPos.z;",
			"	opacity = aPos.w;",
			"}"
		].join("\n");
		shaderProg = this.createShaderProgram({src: fsSource}, pointVsSource, "<point>");
;
		this.shaderPrograms.push(shaderProg);		// Point shader is always shader 1
		for (var shader_name in cr.shaders)
		{
			if (cr.shaders.hasOwnProperty(shader_name))
				this.shaderPrograms.push(this.createShaderProgram(cr.shaders[shader_name], vsSource, shader_name));
		}
		gl.activeTexture(gl.TEXTURE0);
		gl.bindTexture(gl.TEXTURE_2D, null);
		this.batch = [];
		this.batchPtr = 0;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
		this.lastProgram = -1;				// start -1 so first switchProgram can do work
		this.currentProgram = -1;			// current program during batch execution
		this.currentShader = null;
		this.fbo = gl.createFramebuffer();
		this.renderToTex = null;
		this.tmpVec3 = vec3.create([0, 0, 0]);
;
;
		var pointsizes = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE);
		this.minPointSize = pointsizes[0];
		this.maxPointSize = pointsizes[1];
;
		this.switchProgram(0);
		cr.seal(this);
	};
	function GLShaderProgram(gl, shaderProgram, name)
	{
		this.gl = gl;
		this.shaderProgram = shaderProgram;
		this.name = name;
		this.locAPos = gl.getAttribLocation(shaderProgram, "aPos");
		this.locATex = gl.getAttribLocation(shaderProgram, "aTex");
		this.locMatP = gl.getUniformLocation(shaderProgram, "matP");
		this.locMatMV = gl.getUniformLocation(shaderProgram, "matMV");
		this.locOpacity = gl.getUniformLocation(shaderProgram, "opacity");
		this.locSamplerFront = gl.getUniformLocation(shaderProgram, "samplerFront");
		this.locSamplerBack = gl.getUniformLocation(shaderProgram, "samplerBack");
		this.locDestStart = gl.getUniformLocation(shaderProgram, "destStart");
		this.locDestEnd = gl.getUniformLocation(shaderProgram, "destEnd");
		this.locSeconds = gl.getUniformLocation(shaderProgram, "seconds");
		this.locPixelWidth = gl.getUniformLocation(shaderProgram, "pixelWidth");
		this.locPixelHeight = gl.getUniformLocation(shaderProgram, "pixelHeight");
		this.locLayerScale = gl.getUniformLocation(shaderProgram, "layerScale");
		if (this.locOpacity)
			gl.uniform1f(this.locOpacity, 1);
		if (this.locSamplerFront)
			gl.uniform1i(this.locSamplerFront, 0);
		if (this.locSamplerBack)
			gl.uniform1i(this.locSamplerBack, 1);
		if (this.locDestStart)
			gl.uniform2f(this.locDestStart, 0.0, 0.0);
		if (this.locDestEnd)
			gl.uniform2f(this.locDestEnd, 1.0, 1.0);
		this.hasCurrentMatMV = false;		// matMV needs updating
	};
	GLWrap_.prototype.createShaderProgram = function(shaderEntry, vsSource, name)
	{
		var gl = this.gl;
		var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
		gl.shaderSource(fragmentShader, shaderEntry.src);
		gl.compileShader(fragmentShader);
		if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS))
		{
;
			gl.deleteShader(fragmentShader);
			return null;
		}
		var vertexShader = gl.createShader(gl.VERTEX_SHADER);
		gl.shaderSource(vertexShader, vsSource);
		gl.compileShader(vertexShader);
		if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS))
		{
;
			gl.deleteShader(fragmentShader);
			gl.deleteShader(vertexShader);
			return null;
		}
		var shaderProgram = gl.createProgram();
		gl.attachShader(shaderProgram, fragmentShader);
		gl.attachShader(shaderProgram, vertexShader);
		gl.linkProgram(shaderProgram);
		if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS))
		{
;
			gl.deleteShader(fragmentShader);
			gl.deleteShader(vertexShader);
			gl.deleteProgram(shaderProgram);
			return null;
		}
		gl.useProgram(shaderProgram);
		gl.validateProgram(shaderProgram);
;
		gl.deleteShader(fragmentShader);
		gl.deleteShader(vertexShader);
		var ret = new GLShaderProgram(gl, shaderProgram, name);
		ret.extendBoxHorizontal = shaderEntry.extendBoxHorizontal || 0;
		ret.extendBoxVertical = shaderEntry.extendBoxVertical || 0;
		ret.crossSampling = !!shaderEntry.crossSampling;
		ret.animated = !!shaderEntry.animated;
		ret.parameters = shaderEntry.parameters || [];
		var i, len;
		for (i = 0, len = ret.parameters.length; i < len; i++)
		{
			ret.parameters[i][1] = gl.getUniformLocation(shaderProgram, ret.parameters[i][0]);
			gl.uniform1f(ret.parameters[i][1], 0);
		}
		cr.seal(ret);
		return ret;
	};
	GLWrap_.prototype.getShaderIndex = function(name_)
	{
		var i, len;
		for (i = 0, len = this.shaderPrograms.length; i < len; i++)
		{
			if (this.shaderPrograms[i].name === name_)
				return i;
		}
		return -1;
	};
	GLWrap_.prototype.project = function (x, y, out)
	{
		var viewport = [0, 0, this.width, this.height];
		var mv = this.matMV;
		var proj = this.matP;
		var fTempo = [0, 0, 0, 0, 0, 0, 0, 0];
		fTempo[0] = mv[0]*x+mv[4]*y+mv[12];
		fTempo[1] = mv[1]*x+mv[5]*y+mv[13];
		fTempo[2] = mv[2]*x+mv[6]*y+mv[14];
		fTempo[3] = mv[3]*x+mv[7]*y+mv[15];
		fTempo[4] = proj[0]*fTempo[0]+proj[4]*fTempo[1]+proj[8]*fTempo[2]+proj[12]*fTempo[3];
		fTempo[5] = proj[1]*fTempo[0]+proj[5]*fTempo[1]+proj[9]*fTempo[2]+proj[13]*fTempo[3];
		fTempo[6] = proj[2]*fTempo[0]+proj[6]*fTempo[1]+proj[10]*fTempo[2]+proj[14]*fTempo[3];
		fTempo[7] = -fTempo[2];
		if(fTempo[7]===0.0)	//The w value
			return;
		fTempo[7]=1.0/fTempo[7];
		fTempo[4]*=fTempo[7];
		fTempo[5]*=fTempo[7];
		fTempo[6]*=fTempo[7];
		out[0]=(fTempo[4]*0.5+0.5)*viewport[2]+viewport[0];
		out[1]=(fTempo[5]*0.5+0.5)*viewport[3]+viewport[1];
	};
	GLWrap_.prototype.setSize = function(w, h, force)
	{
		if (this.width === w && this.height === h && !force)
			return;
		this.endBatch();
		this.width = w;
		this.height = h;
		this.gl.viewport(0, 0, w, h);
		mat4.perspective(45, w / h, 1, 1000, this.matP);
		mat4.lookAt(this.cam, this.look, this.up, this.matMV);
		var tl = [0, 0];
		var br = [0, 0];
		this.project(0, 0, tl);
		this.project(1, 1, br);
		this.worldScale[0] = 1 / (br[0] - tl[0]);
		this.worldScale[1] = -1 / (br[1] - tl[1]);
		var i, len, s;
		for (i = 0, len = this.shaderPrograms.length; i < len; i++)
		{
			s = this.shaderPrograms[i];
			s.hasCurrentMatMV = false;
			if (s.locMatP)
			{
				this.gl.useProgram(s.shaderProgram);
				this.gl.uniformMatrix4fv(s.locMatP, false, this.matP);
			}
		}
		this.gl.useProgram(this.shaderPrograms[this.lastProgram].shaderProgram);
		this.gl.bindTexture(this.gl.TEXTURE_2D, null);
		this.lastTexture = null;
	};
	GLWrap_.prototype.resetModelView = function ()
	{
		mat4.lookAt(this.cam, this.look, this.up, this.matMV);
		mat4.scale(this.matMV, this.worldScale);
	};
	GLWrap_.prototype.translate = function (x, y)
	{
		if (x === 0 && y === 0)
			return;
		this.tmpVec3[0] = x;// * this.worldScale[0];
		this.tmpVec3[1] = y;// * this.worldScale[1];
		this.tmpVec3[2] = 0;
		mat4.translate(this.matMV, this.tmpVec3);
	};
	GLWrap_.prototype.scale = function (x, y)
	{
		if (x === 1 && y === 1)
			return;
		this.tmpVec3[0] = x;
		this.tmpVec3[1] = y;
		this.tmpVec3[2] = 1;
		mat4.scale(this.matMV, this.tmpVec3);
	};
	GLWrap_.prototype.rotateZ = function (a)
	{
		if (a === 0)
			return;
		mat4.rotateZ(this.matMV, a);
	};
	GLWrap_.prototype.updateModelView = function()
	{
		var anydiff = false;
		for (var i = 0; i < 16; i++)
		{
			if (this.lastMV[i] !== this.matMV[i])
			{
				anydiff = true;
				break;
			}
		}
		if (!anydiff)
			return;
		var b = this.pushBatch();
		b.type = BATCH_UPDATEMODELVIEW;
		if (b.mat4param)
			mat4.set(this.matMV, b.mat4param);
		else
			b.mat4param = mat4.create(this.matMV);
		mat4.set(this.matMV, this.lastMV);
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	/*
	var debugBatch = false;
	jQuery(document).mousedown(
		function(info) {
			if (info.which === 2)
				debugBatch = true;
		}
	);
	*/
	function GLBatchJob(type_, glwrap_)
	{
		this.type = type_;
		this.glwrap = glwrap_;
		this.gl = glwrap_.gl;
		this.opacityParam = 0;		// for setOpacity()
		this.startIndex = 0;		// for quad()
		this.indexCount = 0;		// "
		this.texParam = null;		// for setTexture()
		this.mat4param = null;		// for updateModelView()
		this.shaderParams = [];		// for user parameters
		cr.seal(this);
	};
	GLBatchJob.prototype.doSetTexture = function ()
	{
		this.gl.bindTexture(this.gl.TEXTURE_2D, this.texParam);
	};
	GLBatchJob.prototype.doSetOpacity = function ()
	{
		var o = this.opacityParam;
		var glwrap = this.glwrap;
		glwrap.currentOpacity = o;
		var curProg = glwrap.currentShader;
		if (curProg.locOpacity)
			this.gl.uniform1f(curProg.locOpacity, o);
	};
	GLBatchJob.prototype.doQuad = function ()
	{
		this.gl.drawElements(this.gl.TRIANGLES, this.indexCount, this.gl.UNSIGNED_SHORT, this.startIndex * 2);
	};
	GLBatchJob.prototype.doSetBlend = function ()
	{
		this.gl.blendFunc(this.startIndex, this.indexCount);
	};
	GLBatchJob.prototype.doUpdateModelView = function ()
	{
		var i, len, s, shaderPrograms = this.glwrap.shaderPrograms, currentProgram = this.glwrap.currentProgram;
		for (i = 0, len = shaderPrograms.length; i < len; i++)
		{
			s = shaderPrograms[i];
			if (i === currentProgram && s.locMatMV)
			{
				this.gl.uniformMatrix4fv(s.locMatMV, false, this.mat4param);
				s.hasCurrentMatMV = true;
			}
			else
				s.hasCurrentMatMV = false;
		}
		mat4.set(this.mat4param, this.glwrap.currentMV);
	};
	GLBatchJob.prototype.doRenderToTexture = function ()
	{
		var gl = this.gl;
		var glwrap = this.glwrap;
		if (this.texParam)
		{
			gl.bindFramebuffer(gl.FRAMEBUFFER, glwrap.fbo);
			gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texParam, 0);
;
		}
		else
		{
			gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0);
			gl.bindFramebuffer(gl.FRAMEBUFFER, null);
		}
	};
	GLBatchJob.prototype.doClear = function ()
	{
		var gl = this.gl;
		if (this.startIndex === 0)		// clear whole surface
		{
			gl.clearColor(this.mat4param[0], this.mat4param[1], this.mat4param[2], this.mat4param[3]);
			gl.clear(gl.COLOR_BUFFER_BIT);
		}
		else							// clear rectangle
		{
			gl.enable(gl.SCISSOR_TEST);
			gl.scissor(this.mat4param[0], this.mat4param[1], this.mat4param[2], this.mat4param[3]);
			gl.clearColor(0, 0, 0, 0);
			gl.clear(this.gl.COLOR_BUFFER_BIT);
			gl.disable(gl.SCISSOR_TEST);
		}
	};
	GLBatchJob.prototype.doPoints = function ()
	{
		var gl = this.gl;
		var glwrap = this.glwrap;
		var s = glwrap.shaderPrograms[1];
		gl.useProgram(s.shaderProgram);
		if (!s.hasCurrentMatMV && s.locMatMV)
		{
			gl.uniformMatrix4fv(s.locMatMV, false, glwrap.currentMV);
			s.hasCurrentMatMV = true;
		}
		gl.enableVertexAttribArray(s.locAPos);
		gl.bindBuffer(gl.ARRAY_BUFFER, glwrap.pointBuffer);
		gl.vertexAttribPointer(s.locAPos, 4, gl.FLOAT, false, 0, 0);
		gl.drawArrays(gl.POINTS, this.startIndex / 4, this.indexCount);
		s = glwrap.currentShader;
		gl.useProgram(s.shaderProgram);
		if (s.locAPos >= 0)
		{
			gl.enableVertexAttribArray(s.locAPos);
			gl.bindBuffer(gl.ARRAY_BUFFER, glwrap.vertexBuffers[glwrap.curBuffer]);
			gl.vertexAttribPointer(s.locAPos, 2, gl.FLOAT, false, 0, 0);
		}
		if (s.locATex >= 0)
		{
			gl.enableVertexAttribArray(s.locATex);
			gl.bindBuffer(gl.ARRAY_BUFFER, glwrap.texcoordBuffers[glwrap.curBuffer]);
			gl.vertexAttribPointer(s.locATex, 2, gl.FLOAT, false, 0, 0);
		}
	};
	GLBatchJob.prototype.doSetProgram = function ()
	{
		var gl = this.gl;
		var glwrap = this.glwrap;
		var s = glwrap.shaderPrograms[this.startIndex];		// recycled param to save memory
		glwrap.currentProgram = this.startIndex;			// current batch program
		glwrap.currentShader = s;
		gl.useProgram(s.shaderProgram);						// switch to
		if (!s.hasCurrentMatMV && s.locMatMV)
		{
			gl.uniformMatrix4fv(s.locMatMV, false, glwrap.currentMV);
			s.hasCurrentMatMV = true;
		}
		if (s.locOpacity)
			gl.uniform1f(s.locOpacity, glwrap.currentOpacity);
		if (s.locAPos >= 0)
		{
			gl.enableVertexAttribArray(s.locAPos);
			gl.bindBuffer(gl.ARRAY_BUFFER, glwrap.vertexBuffers[glwrap.curBuffer]);
			gl.vertexAttribPointer(s.locAPos, 2, gl.FLOAT, false, 0, 0);
		}
		if (s.locATex >= 0)
		{
			gl.enableVertexAttribArray(s.locATex);
			gl.bindBuffer(gl.ARRAY_BUFFER, glwrap.texcoordBuffers[glwrap.curBuffer]);
			gl.vertexAttribPointer(s.locATex, 2, gl.FLOAT, false, 0, 0);
		}
	}
	GLBatchJob.prototype.doSetProgramParameters = function ()
	{
		var i, len, s = this.glwrap.currentShader;
		var gl = this.gl;
		if (s.locSamplerBack)
		{
			gl.activeTexture(gl.TEXTURE1);
			gl.bindTexture(gl.TEXTURE_2D, this.texParam);
			gl.activeTexture(gl.TEXTURE0);
		}
		if (s.locPixelWidth)
			gl.uniform1f(s.locPixelWidth, this.mat4param[0]);
		if (s.locPixelHeight)
			gl.uniform1f(s.locPixelHeight, this.mat4param[1]);
		if (s.locDestStart)
			gl.uniform2f(s.locDestStart, this.mat4param[2], this.mat4param[3]);
		if (s.locDestEnd)
			gl.uniform2f(s.locDestEnd, this.mat4param[4], this.mat4param[5]);
		if (s.locLayerScale)
			gl.uniform1f(s.locLayerScale, this.mat4param[6]);
		if (s.locSeconds)
			gl.uniform1f(s.locSeconds, cr.performance_now() / 1000.0);
		if (s.parameters.length)
		{
			for (i = 0, len = s.parameters.length; i < len; i++)
			{
				gl.uniform1f(s.parameters[i][1], this.shaderParams[i]);
			}
		}
	};
	GLWrap_.prototype.pushBatch = function ()
	{
		if (this.batchPtr === this.batch.length)
			this.batch.push(new GLBatchJob(BATCH_NULL, this));
		return this.batch[this.batchPtr++];
	};
	GLWrap_.prototype.endBatch = function ()
	{
		if (this.batchPtr === 0)
			return;
		if (this.gl.isContextLost())
			return;
		var gl = this.gl;
		if (this.pointPtr > 0)
		{
			gl.bindBuffer(gl.ARRAY_BUFFER, this.pointBuffer);
			gl.bufferData(gl.ARRAY_BUFFER, this.pointData.subarray(0, this.pointPtr), gl.STREAM_DRAW);
			if (s && s.locAPos >= 0 && s.name === "<point>")
				gl.vertexAttribPointer(s.locAPos, 4, gl.FLOAT, false, 0, 0);
		}
		if (this.vertexPtr > 0)
		{
			var s = this.currentShader;
			gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffers[this.curBuffer]);
			gl.bufferData(gl.ARRAY_BUFFER, this.vertexData.subarray(0, this.vertexPtr), gl.STREAM_DRAW);
			if (s && s.locAPos >= 0 && s.name !== "<point>")
				gl.vertexAttribPointer(s.locAPos, 2, gl.FLOAT, false, 0, 0);
			gl.bindBuffer(gl.ARRAY_BUFFER, this.texcoordBuffers[this.curBuffer]);
			gl.bufferData(gl.ARRAY_BUFFER, this.texcoordData.subarray(0, this.vertexPtr), gl.STREAM_DRAW);
			if (s && s.locATex >= 0 && s.name !== "<point>")
				gl.vertexAttribPointer(s.locATex, 2, gl.FLOAT, false, 0, 0);
		}
		var i, len, b;
		for (i = 0, len = this.batchPtr; i < len; i++)
		{
			b = this.batch[i];
			switch (b.type) {
			case BATCH_QUAD:
				b.doQuad();
				break;
			case BATCH_SETTEXTURE:
				b.doSetTexture();
				break;
			case BATCH_SETOPACITY:
				b.doSetOpacity();
				break;
			case BATCH_SETBLEND:
				b.doSetBlend();
				break;
			case BATCH_UPDATEMODELVIEW:
				b.doUpdateModelView();
				break;
			case BATCH_RENDERTOTEXTURE:
				b.doRenderToTexture();
				break;
			case BATCH_CLEAR:
				b.doClear();
				break;
			case BATCH_POINTS:
				b.doPoints();
				break;
			case BATCH_SETPROGRAM:
				b.doSetProgram();
				break;
			case BATCH_SETPROGRAMPARAMETERS:
				b.doSetProgramParameters();
				break;
			}
		}
		this.batchPtr = 0;
		this.vertexPtr = 0;
		this.pointPtr = 0;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
		this.curBuffer++;
		if (this.curBuffer >= MULTI_BUFFERS)
			this.curBuffer = 0;
	};
	GLWrap_.prototype.setOpacity = function (op)
	{
		if (op === this.lastOpacity)
			return;
		var b = this.pushBatch();
		b.type = BATCH_SETOPACITY;
		b.opacityParam = op;
		this.lastOpacity = op;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	GLWrap_.prototype.setTexture = function (tex)
	{
		if (tex === this.lastTexture)
			return;
		var b = this.pushBatch();
		b.type = BATCH_SETTEXTURE;
		b.texParam = tex;
		this.lastTexture = tex;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	GLWrap_.prototype.setBlend = function (s, d)
	{
		if (s === this.lastSrcBlend && d === this.lastDestBlend)
			return;
		var b = this.pushBatch();
		b.type = BATCH_SETBLEND;
		b.startIndex = s;		// recycle params to save memory
		b.indexCount = d;
		this.lastSrcBlend = s;
		this.lastDestBlend = d;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	GLWrap_.prototype.setAlphaBlend = function ()
	{
		this.setBlend(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);
	};
	var LAST_VERTEX = MAX_VERTICES * 2 - 8;
	GLWrap_.prototype.quad = function(tlx, tly, trx, try_, brx, bry, blx, bly)
	{
		if (this.vertexPtr >= LAST_VERTEX)
			this.endBatch();
		var v = this.vertexPtr;			// vertex cursor
		var vd = this.vertexData;		// vertex data array
		var td = this.texcoordData;		// texture coord data array
		if (this.hasQuadBatchTop)
		{
			this.batch[this.batchPtr - 1].indexCount += 6;
		}
		else
		{
			var b = this.pushBatch();
			b.type = BATCH_QUAD;
			b.startIndex = (v / 4) * 3;
			b.indexCount = 6;
			this.hasQuadBatchTop = true;
			this.hasPointBatchTop = false;
		}
		vd[v] = tlx;
		td[v++] = 0;
		vd[v] = tly;
		td[v++] = 0;
		vd[v] = trx;
		td[v++] = 1;
		vd[v] = try_;
		td[v++] = 0;
		vd[v] = brx;
		td[v++] = 1;
		vd[v] = bry;
		td[v++] = 1;
		vd[v] = blx;
		td[v++] = 0;
		vd[v] = bly;
		td[v++] = 1;
		this.vertexPtr = v;
	};
	GLWrap_.prototype.quadTex = function(tlx, tly, trx, try_, brx, bry, blx, bly, rcTex)
	{
		if (this.vertexPtr >= LAST_VERTEX)
			this.endBatch();
		var v = this.vertexPtr;			// vertex cursor
		var vd = this.vertexData;		// vertex data array
		var td = this.texcoordData;		// texture coord data array
		if (this.hasQuadBatchTop)
		{
			this.batch[this.batchPtr - 1].indexCount += 6;
		}
		else
		{
			var b = this.pushBatch();
			b.type = BATCH_QUAD;
			b.startIndex = (v / 4) * 3;
			b.indexCount = 6;
			this.hasQuadBatchTop = true;
			this.hasPointBatchTop = false;
		}
		vd[v] = tlx;
		td[v++] = rcTex.left;
		vd[v] = tly;
		td[v++] = rcTex.top;
		vd[v] = trx;
		td[v++] = rcTex.right;
		vd[v] = try_;
		td[v++] = rcTex.top;
		vd[v] = brx;
		td[v++] = rcTex.right;
		vd[v] = bry;
		td[v++] = rcTex.bottom;
		vd[v] = blx;
		td[v++] = rcTex.left;
		vd[v] = bly;
		td[v++] = rcTex.bottom;
		this.vertexPtr = v;
	};
	var LAST_POINT = MAX_POINTS - 4;
	GLWrap_.prototype.point = function(x_, y_, size_, opacity_)
	{
		if (this.pointPtr >= LAST_POINT)
			this.endBatch();
		var p = this.pointPtr;			// point cursor
		var pd = this.pointData;		// point data array
		if (this.hasPointBatchTop)
		{
			this.batch[this.batchPtr - 1].indexCount++;
		}
		else
		{
			var b = this.pushBatch();
			b.type = BATCH_POINTS;
			b.startIndex = p;
			b.indexCount = 1;
			this.hasPointBatchTop = true;
			this.hasQuadBatchTop = false;
		}
		pd[p++] = x_;
		pd[p++] = y_;
		pd[p++] = size_;
		pd[p++] = opacity_;
		this.pointPtr = p;
	};
	GLWrap_.prototype.switchProgram = function (progIndex)
	{
		if (this.lastProgram === progIndex)
			return;			// no change
		var shaderProg = this.shaderPrograms[progIndex];
		if (!shaderProg)
		{
			if (this.lastProgram === 0)
				return;								// already on default shader
			progIndex = 0;
			shaderProg = this.shaderPrograms[0];
		}
		var b = this.pushBatch();
		b.type = BATCH_SETPROGRAM;
		b.startIndex = progIndex;
		this.lastProgram = progIndex;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	GLWrap_.prototype.programUsesDest = function (progIndex)
	{
		var s = this.shaderPrograms[progIndex];
		return !!(s.locDestStart || s.locDestEnd);
	};
	GLWrap_.prototype.programUsesCrossSampling = function (progIndex)
	{
		return this.shaderPrograms[progIndex].crossSampling;
	};
	GLWrap_.prototype.programExtendsBox = function (progIndex)
	{
		var s = this.shaderPrograms[progIndex];
		return s.extendBoxHorizontal !== 0 || s.extendBoxVertical !== 0;
	};
	GLWrap_.prototype.getProgramBoxExtendHorizontal = function (progIndex)
	{
		return this.shaderPrograms[progIndex].extendBoxHorizontal;
	};
	GLWrap_.prototype.getProgramBoxExtendVertical = function (progIndex)
	{
		return this.shaderPrograms[progIndex].extendBoxVertical;
	};
	GLWrap_.prototype.getProgramParameterType = function (progIndex, paramIndex)
	{
		return this.shaderPrograms[progIndex].parameters[paramIndex][2];
	};
	GLWrap_.prototype.programIsAnimated = function (progIndex)
	{
		return this.shaderPrograms[progIndex].animated;
	};
	GLWrap_.prototype.setProgramParameters = function (backTex, pixelWidth, pixelHeight, destStartX, destStartY, destEndX, destEndY, layerScale, params)
	{
		var i, len, s = this.shaderPrograms[this.lastProgram];
		if (s.locPixelWidth || s.locPixelHeight || s.locSeconds || s.locSamplerBack ||
			s.locDestStart || s.locDestEnd || s.locLayerScale || params.length)
		{
			var b = this.pushBatch();
			b.type = BATCH_SETPROGRAMPARAMETERS;
			if (b.mat4param)
				mat4.set(this.matMV, b.mat4param);
			else
				b.mat4param = mat4.create();
			b.mat4param[0] = pixelWidth;
			b.mat4param[1] = pixelHeight;
			b.mat4param[2] = destStartX;
			b.mat4param[3] = destStartY;
			b.mat4param[4] = destEndX;
			b.mat4param[5] = destEndY;
			b.mat4param[6] = layerScale;
			b.texParam = backTex;
			if (params.length)
			{
				b.shaderParams.length = params.length;
				for (i = 0, len = params.length; i < len; i++)
					b.shaderParams[i] = params[i];
			}
			this.hasQuadBatchTop = false;
			this.hasPointBatchTop = false;
		}
	};
	GLWrap_.prototype.clear = function (r, g, b_, a)
	{
		var b = this.pushBatch();
		b.type = BATCH_CLEAR;
		b.startIndex = 0;					// clear all mode
		if (!b.mat4param)
			b.mat4param = mat4.create();
		b.mat4param[0] = r;
		b.mat4param[1] = g;
		b.mat4param[2] = b_;
		b.mat4param[3] = a;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	GLWrap_.prototype.clearRect = function (x, y, w, h)
	{
		var b = this.pushBatch();
		b.type = BATCH_CLEAR;
		b.startIndex = 1;					// clear rect mode
		if (!b.mat4param)
			b.mat4param = mat4.create();
		b.mat4param[0] = x;
		b.mat4param[1] = y;
		b.mat4param[2] = w;
		b.mat4param[3] = h;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	GLWrap_.prototype.present = function ()
	{
		this.endBatch();
		this.gl.flush();
		/*
		if (debugBatch)
		{
;
			debugBatch = false;
		}
		*/
	};
	function nextHighestPowerOfTwo(x) {
		--x;
		for (var i = 1; i < 32; i <<= 1) {
			x = x | x >> i;
		}
		return x + 1;
	}
	var all_textures = [];
	var textures_by_src = {};
	var BF_RGBA8 = 0;
	var BF_RGB8 = 1;
	var BF_RGBA4 = 2;
	var BF_RGB5_A1 = 3;
	var BF_RGB565 = 4;
	GLWrap_.prototype.loadTexture = function (img, tiling, linearsampling, pixelformat, tiletype)
	{
		tiling = !!tiling;
		linearsampling = !!linearsampling;
		var tex_key = img.src + "," + tiling + "," + linearsampling + (tiling ? ("," + tiletype) : "");
		var webGL_texture = null;
		if (typeof img.src !== "undefined" && textures_by_src.hasOwnProperty(tex_key))
		{
			webGL_texture = textures_by_src[tex_key];
			webGL_texture.c2refcount++;
			return webGL_texture;
		}
		this.endBatch();
;
		var gl = this.gl;
		var isPOT = (cr.isPOT(img.width) && cr.isPOT(img.height));
		webGL_texture = gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D, webGL_texture);
		gl.pixelStorei(gl["UNPACK_PREMULTIPLY_ALPHA_WEBGL"], true);
		var internalformat = gl.RGBA;
		var format = gl.RGBA;
		var type = gl.UNSIGNED_BYTE;
		if (pixelformat)
		{
			switch (pixelformat) {
			case BF_RGB8:
				internalformat = gl.RGB;
				format = gl.RGB;
				break;
			case BF_RGBA4:
				type = gl.UNSIGNED_SHORT_4_4_4_4;
				break;
			case BF_RGB5_A1:
				type = gl.UNSIGNED_SHORT_5_5_5_1;
				break;
			case BF_RGB565:
				internalformat = gl.RGB;
				format = gl.RGB;
				type = gl.UNSIGNED_SHORT_5_6_5;
				break;
			}
		}
		if (!isPOT && tiling)
		{
			var canvas = document.createElement("canvas");
			canvas.width = nextHighestPowerOfTwo(img.width);
			canvas.height = nextHighestPowerOfTwo(img.height);
			var ctx = canvas.getContext("2d");
			ctx.drawImage(img,
						  0, 0, img.width, img.height,
						  0, 0, canvas.width, canvas.height);
			gl.texImage2D(gl.TEXTURE_2D, 0, internalformat, format, type, canvas);
		}
		else
			gl.texImage2D(gl.TEXTURE_2D, 0, internalformat, format, type, img);
		if (tiling)
		{
			if (tiletype === "repeat-x")
			{
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
			}
			else if (tiletype === "repeat-y")
			{
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
			}
			else
			{
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
			}
		}
		else
		{
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
		}
		if (linearsampling)
		{
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
			if (isPOT)
			{
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);
				gl.generateMipmap(gl.TEXTURE_2D);
			}
			else
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
		}
		else
		{
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
		}
		gl.bindTexture(gl.TEXTURE_2D, null);
		this.lastTexture = null;
		webGL_texture.c2width = img.width;
		webGL_texture.c2height = img.height;
		webGL_texture.c2refcount = 1;
		webGL_texture.c2texkey = tex_key;
		all_textures.push(webGL_texture);
		textures_by_src[tex_key] = webGL_texture;
		return webGL_texture;
	};
	GLWrap_.prototype.createEmptyTexture = function (w, h, linearsampling, _16bit)
	{
		this.endBatch();
		var gl = this.gl;
		var webGL_texture = gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D, webGL_texture);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, _16bit ? gl.UNSIGNED_SHORT_4_4_4_4 : gl.UNSIGNED_BYTE, null);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, linearsampling ? gl.LINEAR : gl.NEAREST);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, linearsampling ? gl.LINEAR : gl.NEAREST);
		gl.bindTexture(gl.TEXTURE_2D, null);
		this.lastTexture = null;
		webGL_texture.c2width = w;
		webGL_texture.c2height = h;
		all_textures.push(webGL_texture);
		return webGL_texture;
	};
	GLWrap_.prototype.videoToTexture = function (video_, texture_, _16bit)
	{
		this.endBatch();
		var gl = this.gl;
		gl.bindTexture(gl.TEXTURE_2D, texture_);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, _16bit ? gl.UNSIGNED_SHORT_4_4_4_4 : gl.UNSIGNED_BYTE, video_);
		gl.bindTexture(gl.TEXTURE_2D, null);
		this.lastTexture = null;
	};
	GLWrap_.prototype.deleteTexture = function (tex)
	{
		if (!tex)
			return;
		if (typeof tex.c2refcount !== "undefined" && tex.c2refcount > 1)
		{
			tex.c2refcount--;
			return;
		}
		this.endBatch();
		this.gl.bindTexture(this.gl.TEXTURE_2D, null);
		this.lastTexture = null;
		cr.arrayFindRemove(all_textures, tex);
		if (typeof tex.c2texkey !== "undefined")
			delete textures_by_src[tex.c2texkey];
		this.gl.deleteTexture(tex);
	};
	GLWrap_.prototype.estimateVRAM = function ()
	{
		var total = this.width * this.height * 4 * 2;
		var i, len, t;
		for (i = 0, len = all_textures.length; i < len; i++)
		{
			t = all_textures[i];
			total += (t.c2width * t.c2height * 4);
		}
		return total;
	};
	GLWrap_.prototype.textureCount = function ()
	{
		return all_textures.length;
	};
	GLWrap_.prototype.setRenderingToTexture = function (tex)
	{
		if (tex === this.renderToTex)
			return;
		var b = this.pushBatch();
		b.type = BATCH_RENDERTOTEXTURE;
		b.texParam = tex;
		this.renderToTex = tex;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	cr.GLWrap = GLWrap_;
}());
;
(function()
{
	function Runtime(canvas)
	{
		if (!canvas || (!canvas.getContext && !canvas["dc"]))
			return;
		if (canvas["c2runtime"])
			return;
		else
			canvas["c2runtime"] = this;
		var self = this;
		this.isPhoneGap = (typeof window["device"] !== "undefined" && (typeof window["device"]["cordova"] !== "undefined" || typeof window["device"]["phonegap"] !== "undefined"));
		this.isDirectCanvas = !!canvas["dc"];
		this.isAppMobi = (typeof window["AppMobi"] !== "undefined" || this.isDirectCanvas);
		this.isCocoonJs = !!window["c2cocoonjs"];
		if (this.isCocoonJs)
		{
			CocoonJS["App"]["onSuspended"].addEventListener(function() {
				self["setSuspended"](true);
			});
			CocoonJS["App"]["onActivated"].addEventListener(function () {
				self["setSuspended"](false);
			});
		}
		this.isDomFree = this.isDirectCanvas || this.isCocoonJs;
		this.isTizen = /tizen/i.test(navigator.userAgent);
		this.isAndroid = /android/i.test(navigator.userAgent) && !this.isTizen;		// tizen says "like Android"
		this.isIE = /msie/i.test(navigator.userAgent);
		this.isiPhone = /iphone/i.test(navigator.userAgent) || /ipod/i.test(navigator.userAgent);	// treat ipod as an iphone
		this.isiPad = /ipad/i.test(navigator.userAgent);
		this.isiOS = this.isiPhone || this.isiPad;
		this.isChrome = /chrome/i.test(navigator.userAgent) || /chromium/i.test(navigator.userAgent);
		this.isSafari = !this.isChrome && /safari/i.test(navigator.userAgent);		// Chrome includes Safari in UA
		this.isWindows = /windows/i.test(navigator.userAgent);
		this.isNodeWebkit = (typeof window["c2nodewebkit"] !== "undefined");
		this.isArcade = (typeof window["is_scirra_arcade"] !== "undefined");
		this.isWindows8App = !!(typeof window["c2isWindows8"] !== "undefined" && window["c2isWindows8"]);
		this.isWindowsPhone8 = !!(typeof window["c2isWindowsPhone8"] !== "undefined" && window["c2isWindowsPhone8"]);
		this.isBlackberry10 = !!(typeof window["c2isBlackberry10"] !== "undefined" && window["c2isBlackberry10"]);
		this.devicePixelRatio = 1;
		this.isMobile = (this.isPhoneGap || this.isAppMobi || this.isCocoonJs || this.isAndroid || this.isiOS || this.isWindowsPhone8 || this.isBlackberry10 || this.isTizen);
		if (!this.isMobile)
			this.isMobile = /(blackberry|bb10|playbook|palm|symbian|nokia|windows\s+ce|phone|mobile|tablet)/i.test(navigator.userAgent);
		if (typeof cr_is_preview !== "undefined" && !this.isNodeWebkit && (window.location.search === "?nw" || /nodewebkit/i.test(navigator.userAgent)))
		{
			this.isNodeWebkit = true;
		}
		this.isDebug = (typeof cr_is_preview !== "undefined" && window.location.search.indexOf("debug") > -1)
		this.canvas = canvas;
		this.canvasdiv = document.getElementById("c2canvasdiv");
		this.gl = null;
		this.glwrap = null;
		this.ctx = null;
		this.canvas.oncontextmenu = function (e) { if (e.preventDefault) e.preventDefault(); return false; };
		this.canvas.onselectstart = function (e) { if (e.preventDefault) e.preventDefault(); return false; };
		if (this.isDirectCanvas)
			window["c2runtime"] = this;
		if (this.isNodeWebkit)
		{
			window.ondragover = function(e) { e.preventDefault(); return false; };
			window.ondrop = function(e) { e.preventDefault(); return false; };
		}
		this.width = canvas.width;
		this.height = canvas.height;
		this.lastwidth = this.width;
		this.lastheight = this.height;
		this.redraw = true;
		this.isSuspended = false;
		if (!Date.now) {
		  Date.now = function now() {
			return +new Date();
		  };
		}
		this.plugins = [];
		this.types = {};
		this.types_by_index = [];
		this.behaviors = [];
		this.layouts = {};
		this.layouts_by_index = [];
		this.eventsheets = {};
		this.eventsheets_by_index = [];
		this.wait_for_textures = [];        // for blocking until textures loaded
		this.triggers_to_postinit = [];
		this.all_global_vars = [];
		this.all_local_vars = [];
		this.deathRow = new cr.ObjectSet();
		this.isInClearDeathRow = false;
		this.isInOnDestroy = 0;					// needs to support recursion so increments and decrements and is true if > 0
		this.isRunningEvents = false;
		this.createRow = [];
		this.isLoadingState = false;
		this.saveToSlot = "";
		this.loadFromSlot = "";
		this.loadFromJson = "";
		this.lastSaveJson = "";
		this.signalledContinuousPreview = false;
		this.suspendDrawing = false;		// for hiding display until continuous preview loads
		this.dt = 0;
        this.dt1 = 0;
		this.logictime = 0;			// used to calculate CPUUtilisation
		this.cpuutilisation = 0;
		this.zeroDtCount = 0;
        this.timescale = 1.0;
        this.kahanTime = new cr.KahanAdder();
		this.last_tick_time = 0;
		this.measuring_dt = true;
		this.fps = 0;
		this.last_fps_time = 0;
		this.tickcount = 0;
		this.execcount = 0;
		this.framecount = 0;        // for fps
		this.objectcount = 0;
		this.changelayout = null;
		this.destroycallbacks = [];
		this.event_stack = [];
		this.event_stack_index = -1;
		this.localvar_stack = [[]];
		this.localvar_stack_index = 0;
		this.trigger_depth = 0;		// recursion depth for triggers
		this.pushEventStack(null);
		this.loop_stack = [];
		this.loop_stack_index = -1;
		this.next_uid = 0;
		this.next_puid = 0;		// permanent unique ids
		this.layout_first_tick = true;
		this.family_count = 0;
		this.suspend_events = [];
		this.raf_id = 0;
		this.timeout_id = 0;
		this.isloading = true;
		this.loadingprogress = 0;
		this.isNodeFullscreen = false;
		this.stackLocalCount = 0;	// number of stack-based local vars for recursion
		this.had_a_click = false;
        this.objects_to_tick = new cr.ObjectSet();
		this.objects_to_tick2 = new cr.ObjectSet();
		this.registered_collisions = [];
		this.temp_poly = new cr.CollisionPoly([]);
		this.temp_poly2 = new cr.CollisionPoly([]);
		this.allGroups = [];				// array of all event groups
        this.activeGroups = {};				// event group activation states
		this.cndsBySid = {};
		this.actsBySid = {};
		this.varsBySid = {};
		this.blocksBySid = {};
		this.running_layout = null;			// currently running layout
		this.layer_canvas = null;			// for layers "render-to-texture"
		this.layer_ctx = null;
		this.layer_tex = null;
		this.layout_tex = null;
		this.is_WebGL_context_lost = false;
		this.uses_background_blending = false;	// if any shader uses background blending, so entire layout renders to texture
		this.fx_tex = [null, null];
		this.fullscreen_scaling = 0;
		this.files_subfolder = "";			// path with project files
		this.objectsByUid = {};				// maps every in-use UID (as a string) to its instance
		this.loaderlogo = null;
		this.snapshotCanvas = null;
		this.snapshotData = "";
		this.load();
		this.isRetina = (!this.isDomFree && this.useiOSRetina && (this.isiOS || this.isTizen));
		this.devicePixelRatio = (this.isRetina ? (window["devicePixelRatio"] || 1) : 1);
		this.ClearDeathRow();
		var attribs;
		if (typeof jQuery !== "undefined" && this.fullscreen_mode > 0)
			this["setSize"](jQuery(window).width(), jQuery(window).height());
		try {
			if (this.enableWebGL && (this.isCocoonJs || !this.isDomFree))
			{
				attribs = { "depth": false, "antialias": !this.isMobile };
				var use_webgl = true;
				if (this.isChrome && this.isWindows)
				{
					var tempcanvas = document.createElement("canvas");
					var tempgl = (tempcanvas.getContext("webgl", attribs) || tempcanvas.getContext("experimental-webgl", attribs));
					if (tempgl.getSupportedExtensions().toString() === "OES_texture_float,OES_standard_derivatives,WEBKIT_WEBGL_lose_context")
					{
;
						use_webgl = false;
					}
				}
				if (use_webgl)
					this.gl = (canvas.getContext("webgl", attribs) || canvas.getContext("experimental-webgl", attribs));
			}
		}
		catch (e) {
		}
		if (this.gl)
		{
;
			if (!this.isDomFree)
			{
				this.overlay_canvas = document.createElement("canvas");
				jQuery(this.overlay_canvas).appendTo(this.canvas.parentNode);
				this.overlay_canvas.oncontextmenu = function (e) { return false; };
				this.overlay_canvas.onselectstart = function (e) { return false; };
				this.overlay_canvas.width = canvas.width;
				this.overlay_canvas.height = canvas.height;
				this.positionOverlayCanvas();
				this.overlay_ctx = this.overlay_canvas.getContext("2d");
			}
			this.glwrap = new cr.GLWrap(this.gl, this.isMobile);
			this.glwrap.setSize(canvas.width, canvas.height);
			this.ctx = null;
			this.canvas.addEventListener("webglcontextlost", function (ev) {
				ev.preventDefault();
				self.onContextLost();
				window["cr_setSuspended"](true);		// stop rendering
			}, false);
			this.canvas.addEventListener("webglcontextrestored", function (ev) {
				self.glwrap.initState();
				self.glwrap.setSize(self.glwrap.width, self.glwrap.height, true);
				self.layer_tex = null;
				self.layout_tex = null;
				self.fx_tex[0] = null;
				self.fx_tex[1] = null;
				self.onContextRestored();
				self.redraw = true;
				window["cr_setSuspended"](false);		// resume rendering
			}, false);
			var i, len, j, lenj, k, lenk, t, s, l, y;
			for (i = 0, len = this.types_by_index.length; i < len; i++)
			{
				t = this.types_by_index[i];
				for (j = 0, lenj = t.effect_types.length; j < lenj; j++)
				{
					s = t.effect_types[j];
					s.shaderindex = this.glwrap.getShaderIndex(s.id);
					this.uses_background_blending = this.uses_background_blending || this.glwrap.programUsesDest(s.shaderindex);
				}
			}
			for (i = 0, len = this.layouts_by_index.length; i < len; i++)
			{
				l = this.layouts_by_index[i];
				for (j = 0, lenj = l.effect_types.length; j < lenj; j++)
				{
					s = l.effect_types[j];
					s.shaderindex = this.glwrap.getShaderIndex(s.id);
				}
				for (j = 0, lenj = l.layers.length; j < lenj; j++)
				{
					y = l.layers[j];
					for (k = 0, lenk = y.effect_types.length; k < lenk; k++)
					{
						s = y.effect_types[k];
						s.shaderindex = this.glwrap.getShaderIndex(s.id);
						this.uses_background_blending = this.uses_background_blending || this.glwrap.programUsesDest(s.shaderindex);
					}
				}
			}
		}
		else
		{
			if (this.fullscreen_mode > 0 && this.isDirectCanvas)
			{
;
				this.canvas = null;
				document.oncontextmenu = function (e) { return false; };
				document.onselectstart = function (e) { return false; };
				this.ctx = AppMobi["canvas"]["getContext"]("2d");
				try {
					this.ctx["samplingMode"] = this.linearSampling ? "smooth" : "sharp";
					this.ctx["globalScale"] = 1;
					this.ctx["HTML5CompatibilityMode"] = true;
				} catch(e){}
				if (this.width !== 0 && this.height !== 0)
				{
					this.ctx.width = this.width;
					this.ctx.height = this.height;
				}
			}
			if (!this.ctx)
			{
;
				if (this.isCocoonJs)
				{
					attribs = { "antialias" : !!this.linearSampling };
					this.ctx = canvas.getContext("2d", attribs);
				}
				else
					this.ctx = canvas.getContext("2d");
				this.ctx["webkitImageSmoothingEnabled"] = this.linearSampling;
				this.ctx["mozImageSmoothingEnabled"] = this.linearSampling;
				this.ctx["msImageSmoothingEnabled"] = this.linearSampling;
				this.ctx["imageSmoothingEnabled"] = this.linearSampling;
			}
			this.overlay_canvas = null;
			this.overlay_ctx = null;
		}
		this.tickFunc = function () { self.tick(); };
		if (window != window.top && !this.isDomFree && !this.isWindows8App)
		{
			document.addEventListener("mousedown", function () {
				window.focus();
			}, true);
			document.addEventListener("touchstart", function () {
				window.focus();
			}, true);
		}
		if (typeof cr_is_preview !== "undefined")
		{
			if (this.isCocoonJs)
				console.log("[Construct 2] In preview-over-wifi via CocoonJS mode");
			if (window.location.search.indexOf("continuous") > -1)
			{
				cr.logexport("Reloading for continuous preview");
				this.loadFromSlot = "__c2_continuouspreview";
				this.suspendDrawing = true;
			}
			if (this.pauseOnBlur && !this.isMobile)
			{
				jQuery(window).focus(function ()
				{
					self["setSuspended"](false);
				});
				jQuery(window).blur(function ()
				{
					self["setSuspended"](true);
				});
			}
		}
		this.go();			// run loading screen
		this.extra = {};
		cr.seal(this);
	};
	var webkitRepaintFlag = false;
	Runtime.prototype["setSize"] = function (w, h)
	{
		var tryHideAddressBar = this.hideAddressBar && this.isiPhone && !navigator["standalone"] && !this.isDomFree && !this.isPhoneGap;
		var addressBarHeight = 0;
		if (tryHideAddressBar)
		{
			if (this.isiPhone)
				addressBarHeight = 60;
			else if (this.isAndroid)
				addressBarHeight = 56;
			h += addressBarHeight;
		}
		var offx = 0, offy = 0;
		var neww = 0, newh = 0, intscale = 0;
		var mode = this.fullscreen_mode;
		var isfullscreen = (document["mozFullScreen"] || document["webkitIsFullScreen"] || document["fullScreen"] || this.isNodeFullscreen);
		if (isfullscreen && this.fullscreen_scaling > 0)
			mode = this.fullscreen_scaling;
		if (mode >= 4)
		{
			var orig_aspect = this.original_width / this.original_height;
			var cur_aspect = w / h;
			if (cur_aspect > orig_aspect)
			{
				neww = h * orig_aspect;
				if (mode === 5)	// integer scaling
				{
					intscale = neww / this.original_width;
					if (intscale > 1)
						intscale = Math.floor(intscale);
					else if (intscale < 1)
						intscale = 1 / Math.ceil(1 / intscale);
					neww = this.original_width * intscale;
					newh = this.original_height * intscale;
					offx = (w - neww) / 2;
					offy = (h - newh) / 2;
					w = neww;
					h = newh;
				}
				else
				{
					offx = (w - neww) / 2;
					w = neww;
				}
			}
			else
			{
				newh = w / orig_aspect;
				if (mode === 5)	// integer scaling
				{
					intscale = newh / this.original_height;
					if (intscale > 1)
						intscale = Math.floor(intscale);
					else if (intscale < 1)
						intscale = 1 / Math.ceil(1 / intscale);
					neww = this.original_width * intscale;
					newh = this.original_height * intscale;
					offx = (w - neww) / 2;
					offy = (h - newh) / 2;
					w = neww;
					h = newh;
				}
				else
				{
					offy = (h - newh) / 2;
					h = newh;
				}
			}
			if (isfullscreen && !this.isNodeWebkit)
			{
				offx = 0;
				offy = 0;
			}
			offx = Math.floor(offx);
			offy = Math.floor(offy);
			w = Math.floor(w);
			h = Math.floor(h);
		}
		else if (this.isNodeWebkit && this.isNodeFullscreen && this.fullscreen_mode_set === 0)
		{
			offx = Math.floor((w - this.original_width) / 2);
			offy = Math.floor((h - this.original_height) / 2);
			w = this.original_width;
			h = this.original_height;
		}
		if (this.isRetina && this.isiPad && this.devicePixelRatio > 1)	// don't apply to iPad 1-2
		{
			if (w >= 1024)
				w = 1023;		// 2046 retina pixels
			if (h >= 1024)
				h = 1023;
		}
		var multiplier = this.devicePixelRatio;
		this.width = w * multiplier;
		this.height = h * multiplier;
		this.redraw = true;
		if (this.canvasdiv && !this.isDomFree)
		{
			jQuery(this.canvasdiv).css({"width": w + "px",
										"height": h + "px",
										"margin-left": offx,
										"margin-top": offy});
			if (typeof cr_is_preview !== "undefined")
			{
				jQuery("#borderwrap").css({"width": w + "px",
											"height": h + "px"});
			}
		}
		if (this.canvas)
		{
			this.canvas.width = w * multiplier;
			this.canvas.height = h * multiplier;
			if (this.isRetina)
			{
				jQuery(this.canvas).css({"width": w + "px",
										"height": h + "px"});
			}
		}
		if (this.overlay_canvas)
		{
			this.overlay_canvas.width = w;
			this.overlay_canvas.height = h;
		}
		if (this.glwrap)
			this.glwrap.setSize(w, h);
		if (this.isDirectCanvas && this.ctx)
		{
			this.ctx.width = w;
			this.ctx.height = h;
		}
		if (this.ctx)
		{
			this.ctx["webkitImageSmoothingEnabled"] = this.linearSampling;
			this.ctx["mozImageSmoothingEnabled"] = this.linearSampling;
			this.ctx["msImageSmoothingEnabled"] = this.linearSampling;
			this.ctx["imageSmoothingEnabled"] = this.linearSampling;
		}
		if (tryHideAddressBar && addressBarHeight > 0)
		{
			window.setTimeout(function () {
				window.scrollTo(0, 1);
			}, 100);
		}
	};
	Runtime.prototype.onContextLost = function ()
	{
		this.is_WebGL_context_lost = true;
		var i, len, t;
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			t = this.types_by_index[i];
			if (t.onLostWebGLContext)
				t.onLostWebGLContext();
		}
	};
	Runtime.prototype.onContextRestored = function ()
	{
		this.is_WebGL_context_lost = false;
		var i, len, t;
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			t = this.types_by_index[i];
			if (t.onRestoreWebGLContext)
				t.onRestoreWebGLContext();
		}
	};
	Runtime.prototype.positionOverlayCanvas = function()
	{
		if (this.isDomFree)
			return;
		var isfullscreen = (document["mozFullScreen"] || document["webkitIsFullScreen"] || document["fullScreen"] || this.isNodeFullscreen);
		var overlay_position = isfullscreen ? jQuery(this.canvas).offset() : jQuery(this.canvas).position();
		overlay_position.position = "absolute";
		jQuery(this.overlay_canvas).css(overlay_position);
	};
	var caf = window["cancelAnimationFrame"] ||
	  window["mozCancelAnimationFrame"]    ||
	  window["webkitCancelAnimationFrame"] ||
	  window["msCancelAnimationFrame"]     ||
	  window["oCancelAnimationFrame"];
	Runtime.prototype["setSuspended"] = function (s)
	{
		var i, len;
		if (s && !this.isSuspended)
		{
			cr.logexport("[Construct 2] Suspending");
			this.isSuspended = true;			// next tick will be last
			if (this.raf_id !== 0 && caf)		// note: CocoonJS does not implement cancelAnimationFrame
				caf(this.raf_id);
			if (this.timeout_id !== 0)
				clearTimeout(this.timeout_id);
			for (i = 0, len = this.suspend_events.length; i < len; i++)
				this.suspend_events[i](true);
		}
		else if (!s && this.isSuspended)
		{
			cr.logexport("[Construct 2] Resuming");
			this.isSuspended = false;
			this.last_tick_time = cr.performance_now();	// ensure first tick is a zero-dt one
			this.last_fps_time = cr.performance_now();	// reset FPS counter
			this.framecount = 0;
			this.logictime = 0;
			for (i = 0, len = this.suspend_events.length; i < len; i++)
				this.suspend_events[i](false);
			this.tick();						// kick off runtime again
		}
	};
	Runtime.prototype.addSuspendCallback = function (f)
	{
		this.suspend_events.push(f);
	};
	Runtime.prototype.load = function ()
	{
;
		var pm = cr.getProjectModel();
		this.name = pm[0];
		this.first_layout = pm[1];
		this.fullscreen_mode = pm[11];	// 0 = off, 1 = crop, 2 = scale inner, 3 = scale outer, 4 = letterbox scale, 5 = integer letterbox scale
		this.fullscreen_mode_set = pm[11];
		if (this.isDomFree && (pm[11] >= 4 || pm[11] === 0))
		{
			cr.logexport("[Construct 2] Letterbox scale fullscreen modes are not supported on this platform - falling back to 'Scale outer'");
			this.fullscreen_mode = 3;
			this.fullscreen_mode_set = 3;
		}
		this.uses_loader_layout = pm[17];
		this.loaderstyle = pm[18];
		if (this.loaderstyle === 0)
		{
			this.loaderlogo = new Image();
			this.loaderlogo.src = "loading-logo.png";
		}
		this.next_uid = pm[20];
		this.system = new cr.system_object(this);
		var i, len, j, lenj, k, lenk, idstr, m, b, t, f;
		var plugin, plugin_ctor;
		for (i = 0, len = pm[2].length; i < len; i++)
		{
			m = pm[2][i];
;
			cr.add_common_aces(m);
			plugin = new m[0](this);
			plugin.singleglobal = m[1];
			plugin.is_world = m[2];
			plugin.must_predraw = m[9];
			if (plugin.onCreate)
				plugin.onCreate();  // opportunity to override default ACEs
			cr.seal(plugin);
			this.plugins.push(plugin);
		}
		pm = cr.getProjectModel();
		for (i = 0, len = pm[3].length; i < len; i++)
		{
			m = pm[3][i];
			plugin_ctor = m[1];
;
			plugin = null;
			for (j = 0, lenj = this.plugins.length; j < lenj; j++)
			{
				if (this.plugins[j] instanceof plugin_ctor)
				{
					plugin = this.plugins[j];
					break;
				}
			}
;
;
			var type_inst = new plugin.Type(plugin);
;
			type_inst.name = m[0];
			type_inst.is_family = m[2];
			type_inst.instvar_sids = m[3].slice(0);
			type_inst.vars_count = m[3].length;
			type_inst.behs_count = m[4];
			type_inst.fx_count = m[5];
			type_inst.sid = m[11];
			if (type_inst.is_family)
			{
				type_inst.members = [];				// types in this family
				type_inst.family_index = this.family_count++;
				type_inst.families = null;
			}
			else
			{
				type_inst.members = null;
				type_inst.family_index = -1;
				type_inst.families = [];			// families this type belongs to
			}
			type_inst.family_var_map = null;
			type_inst.family_beh_map = null;
			type_inst.family_fx_map = null;
			type_inst.is_contained = false;
			type_inst.container = null;
			if (m[6])
			{
				type_inst.texture_file = m[6][0];
				type_inst.texture_filesize = m[6][1];
				type_inst.texture_pixelformat = m[6][2];
			}
			else
			{
				type_inst.texture_file = null;
				type_inst.texture_filesize = 0;
				type_inst.texture_pixelformat = 0;		// rgba8
			}
			if (m[7])
			{
				type_inst.animations = m[7];
			}
			else
			{
				type_inst.animations = null;
			}
			type_inst.index = i;                                // save index in to types array in type
			type_inst.instances = [];                           // all instances of this type
			type_inst.deadCache = [];							// destroyed instances to recycle next create
			type_inst.solstack = [new cr.selection(type_inst)]; // initialise SOL stack with one empty SOL
			type_inst.cur_sol = 0;
			type_inst.default_instance = null;
			type_inst.stale_iids = true;
			type_inst.updateIIDs = cr.type_updateIIDs;
			type_inst.getFirstPicked = cr.type_getFirstPicked;
			type_inst.getPairedInstance = cr.type_getPairedInstance;
			type_inst.getCurrentSol = cr.type_getCurrentSol;
			type_inst.pushCleanSol = cr.type_pushCleanSol;
			type_inst.pushCopySol = cr.type_pushCopySol;
			type_inst.popSol = cr.type_popSol;
			type_inst.getBehaviorByName = cr.type_getBehaviorByName;
			type_inst.getBehaviorIndexByName = cr.type_getBehaviorIndexByName;
			type_inst.getEffectIndexByName = cr.type_getEffectIndexByName;
			type_inst.applySolToContainer = cr.type_applySolToContainer;
			type_inst.extra = {};
			type_inst.toString = cr.type_toString;
			type_inst.behaviors = [];
			for (j = 0, lenj = m[8].length; j < lenj; j++)
			{
				b = m[8][j];
				var behavior_ctor = b[1];
				var behavior_plugin = null;
				for (k = 0, lenk = this.behaviors.length; k < lenk; k++)
				{
					if (this.behaviors[k] instanceof behavior_ctor)
					{
						behavior_plugin = this.behaviors[k];
						break;
					}
				}
				if (!behavior_plugin)
				{
					behavior_plugin = new behavior_ctor(this);
					behavior_plugin.my_instances = new cr.ObjectSet(); 	// instances of this behavior
					if (behavior_plugin.onCreate)
						behavior_plugin.onCreate();
					cr.seal(behavior_plugin);
					this.behaviors.push(behavior_plugin);
				}
				var behavior_type = new behavior_plugin.Type(behavior_plugin, type_inst);
				behavior_type.name = b[0];
				behavior_type.sid = b[2];
				behavior_type.onCreate();
				cr.seal(behavior_type);
				type_inst.behaviors.push(behavior_type);
			}
			type_inst.global = m[9];
			type_inst.isOnLoaderLayout = m[10];
			type_inst.effect_types = [];
			for (j = 0, lenj = m[12].length; j < lenj; j++)
			{
				type_inst.effect_types.push({
					id: m[12][j][0],
					name: m[12][j][1],
					shaderindex: -1,
					active: true,
					index: j
				});
			}
			if (!this.uses_loader_layout || type_inst.is_family || type_inst.isOnLoaderLayout || !plugin.is_world)
			{
				type_inst.onCreate();
				cr.seal(type_inst);
			}
			if (type_inst.name)
				this.types[type_inst.name] = type_inst;
			this.types_by_index.push(type_inst);
			if (plugin.singleglobal)
			{
				var instance = new plugin.Instance(type_inst);
				instance.uid = this.next_uid++;
				instance.puid = this.next_puid++;
				instance.iid = 0;
				instance.get_iid = cr.inst_get_iid;
				instance.toString = cr.inst_toString;
				instance.properties = m[13];
				instance.onCreate();
				cr.seal(instance);
				type_inst.instances.push(instance);
				this.objectsByUid[instance.uid.toString()] = instance;
			}
		}
		for (i = 0, len = pm[4].length; i < len; i++)
		{
			var familydata = pm[4][i];
			var familytype = this.types_by_index[familydata[0]];
			var familymember;
			for (j = 1, lenj = familydata.length; j < lenj; j++)
			{
				familymember = this.types_by_index[familydata[j]];
				familymember.families.push(familytype);
				familytype.members.push(familymember);
			}
		}
		for (i = 0, len = pm[22].length; i < len; i++)
		{
			var containerdata = pm[22][i];
			var containertypes = [];
			for (j = 0, lenj = containerdata.length; j < lenj; j++)
				containertypes.push(this.types_by_index[containerdata[j]]);
			for (j = 0, lenj = containertypes.length; j < lenj; j++)
			{
				containertypes[j].is_contained = true;
				containertypes[j].container = containertypes;
			}
		}
		if (this.family_count > 0)
		{
			for (i = 0, len = this.types_by_index.length; i < len; i++)
			{
				t = this.types_by_index[i];
				if (t.is_family || !t.families.length)
					continue;
				t.family_var_map = new Array(this.family_count);
				t.family_beh_map = new Array(this.family_count);
				t.family_fx_map = new Array(this.family_count);
				var all_fx = [];
				var varsum = 0;
				var behsum = 0;
				var fxsum = 0;
				for (j = 0, lenj = t.families.length; j < lenj; j++)
				{
					f = t.families[j];
					t.family_var_map[f.family_index] = varsum;
					varsum += f.vars_count;
					t.family_beh_map[f.family_index] = behsum;
					behsum += f.behs_count;
					t.family_fx_map[f.family_index] = fxsum;
					fxsum += f.fx_count;
					for (k = 0, lenk = f.effect_types.length; k < lenk; k++)
						all_fx.push(cr.shallowCopy({}, f.effect_types[k]));
				}
				t.effect_types = all_fx.concat(t.effect_types);
				for (j = 0, lenj = t.effect_types.length; j < lenj; j++)
					t.effect_types[j].index = j;
			}
		}
		for (i = 0, len = pm[5].length; i < len; i++)
		{
			m = pm[5][i];
			var layout = new cr.layout(this, m);
			cr.seal(layout);
			this.layouts[layout.name] = layout;
			this.layouts_by_index.push(layout);
		}
		for (i = 0, len = pm[6].length; i < len; i++)
		{
			m = pm[6][i];
			var sheet = new cr.eventsheet(this, m);
			cr.seal(sheet);
			this.eventsheets[sheet.name] = sheet;
			this.eventsheets_by_index.push(sheet);
		}
		for (i = 0, len = this.eventsheets_by_index.length; i < len; i++)
			this.eventsheets_by_index[i].postInit();
		for (i = 0, len = this.triggers_to_postinit.length; i < len; i++)
			this.triggers_to_postinit[i].postInit();
		this.triggers_to_postinit.length = 0;
		this.files_subfolder = pm[7];
		this.pixel_rounding = pm[8];
		this.original_width = pm[9];
		this.original_height = pm[10];
		this.aspect_scale = 1.0;
		this.enableWebGL = pm[12];
		this.linearSampling = pm[13];
		this.clearBackground = pm[14];
		this.versionstr = pm[15];
		var iOSretina = pm[16];
		if (iOSretina === 2)
			iOSretina = (this.isiPhone ? 1 : 0);
		this.useiOSRetina = (iOSretina !== 0);
		this.hideAddressBar = pm[19];
		this.pauseOnBlur = pm[21];
		this.start_time = Date.now();
	};
	Runtime.prototype.findWaitingTexture = function (src_)
	{
		var i, len;
		for (i = 0, len = this.wait_for_textures.length; i < len; i++)
		{
			if (this.wait_for_textures[i].cr_src === src_)
				return this.wait_for_textures[i];
		}
		return null;
	};
	Runtime.prototype.areAllTexturesLoaded = function ()
	{
		var totalsize = 0;
		var completedsize = 0;
		var ret = true;
		var i, len;
		for (i = 0, len = this.wait_for_textures.length; i < len; i++)
		{
			var filesize = this.wait_for_textures[i].cr_filesize;
			if (!filesize || filesize <= 0)
				filesize = 50000;
			totalsize += filesize;
			if (this.wait_for_textures[i].complete || this.wait_for_textures[i]["loaded"])
				completedsize += filesize;
			else
				ret = false;    // not all textures loaded
		}
		if (totalsize == 0)
			this.progress = 0;
		else
			this.progress = (completedsize / totalsize);
		return ret;
	};
	Runtime.prototype.go = function ()
	{
		if (!this.ctx && !this.glwrap)
			return;
		var ctx = this.ctx || this.overlay_ctx;
		if (this.overlay_canvas)
			this.positionOverlayCanvas();
		this.progress = 0;
		this.last_progress = -1;
		if (this.areAllTexturesLoaded())
			this.go_textures_done();
		else
		{
			var ms_elapsed = Date.now() - this.start_time;
			var multiplier = 1;
			if (this.isTizen)
				multiplier = this.devicePixelRatio;
			if (ctx)
			{
				if (this.loaderstyle !== 3 && ms_elapsed >= 500 && this.last_progress != this.progress)
				{
					ctx.clearRect(0, 0, this.width, this.height);
					var mx = this.width / (2 * multiplier);
					var my = this.height / (2 * multiplier);
					var haslogo = (this.loaderstyle === 0 && this.loaderlogo.complete);
					var hlw = 40;
					var hlh = 0;
					var logowidth = 80;
					if (haslogo)
					{
						logowidth = this.loaderlogo.width;
						hlw = logowidth / 2;
						hlh = this.loaderlogo.height / 2;
						ctx.drawImage(this.loaderlogo, cr.floor(mx - hlw), cr.floor(my - hlh));
					}
					if (this.loaderstyle <= 1)
					{
						my += hlh + (haslogo ? 12 : 0);
						mx -= hlw;
						mx = cr.floor(mx) + 0.5;
						my = cr.floor(my) + 0.5;
						ctx.fillStyle = "DodgerBlue";
						ctx.fillRect(mx, my, Math.floor(logowidth * this.progress), 6);
						ctx.strokeStyle = "black";
						ctx.strokeRect(mx, my, logowidth, 6);
						ctx.strokeStyle = "white";
						ctx.strokeRect(mx - 1, my - 1, logowidth + 2, 8);
					}
					else if (this.loaderstyle === 2)
					{
						ctx.font = "12pt Arial";
						ctx.fillStyle = "#999";
						ctx.textBaseLine = "middle";
						var percent_text = Math.round(this.progress * 100) + "%";
						var text_dim = ctx.measureText ? ctx.measureText(percent_text) : null;
						var text_width = text_dim ? text_dim.width : 0;
						ctx.fillText(percent_text, mx - (text_width / 2), my);
					}
				}
				this.last_progress = this.progress;
			}
			setTimeout((function (self) { return function () { self.go(); }; })(this), 100);
		}
	};
	Runtime.prototype.go_textures_done = function ()
	{
		if (this.overlay_canvas)
		{
			this.canvas.parentNode.removeChild(this.overlay_canvas);
			this.overlay_ctx = null;
			this.overlay_canvas = null;
		}
		this.start_time = Date.now();
		this.last_fps_time = cr.performance_now();       // for counting framerate
		var i, len, t;
		if (this.uses_loader_layout)
		{
			for (i = 0, len = this.types_by_index.length; i < len; i++)
			{
				t = this.types_by_index[i];
				if (!t.is_family && !t.isOnLoaderLayout && t.plugin.is_world)
				{
					t.onCreate();
					cr.seal(t);
				}
			}
		}
		else
			this.isloading = false;
		for (i = 0, len = this.layouts_by_index.length; i < len; i++)
		{
			this.layouts_by_index[i].createGlobalNonWorlds();
		}
		if (this.fullscreen_mode >= 2)
		{
			var orig_aspect = this.original_width / this.original_height;
			var cur_aspect = this.width / this.height;
			if ((this.fullscreen_mode !== 2 && cur_aspect > orig_aspect) || (this.fullscreen_mode === 2 && cur_aspect < orig_aspect))
				this.aspect_scale = this.height / this.original_height;
			else
				this.aspect_scale = this.width / this.original_width;
		}
		if (this.first_layout)
			this.layouts[this.first_layout].startRunning();
		else
			this.layouts_by_index[0].startRunning();
;
		if (!this.uses_loader_layout)
		{
			this.loadingprogress = 1;
			this.trigger(cr.system_object.prototype.cnds.OnLoadFinished, null);
		}
		this.tick();
		if (this.isDirectCanvas)
			AppMobi["webview"]["execute"]("onGameReady();");
	};
	var raf = window["requestAnimationFrame"] ||
	  window["mozRequestAnimationFrame"]    ||
	  window["webkitRequestAnimationFrame"] ||
	  window["msRequestAnimationFrame"]     ||
	  window["oRequestAnimationFrame"];
	Runtime.prototype.tick = function ()
	{
		if (!this.running_layout)
			return;
		var logic_start = cr.performance_now();
		if (this.isArcade)
		{
			var curwidth = jQuery(window).width();
			var curheight = jQuery(window).height();
			if (this.lastwidth !== curwidth || this.lastheight !== curheight)
			{
				this.lastwidth = curwidth;
				this.lastheight = curheight;
				this["setSize"](curwidth, curheight);
			}
		}
		if (this.isloading)
		{
			var done = this.areAllTexturesLoaded();		// updates this.progress
			this.loadingprogress = this.progress;
			if (done)
			{
				this.isloading = false;
				this.progress = 1;
				this.trigger(cr.system_object.prototype.cnds.OnLoadFinished, null);
			}
		}
		this.logic();
		if ((this.redraw || this.isCocoonJs) && !this.is_WebGL_context_lost && !this.suspendDrawing)
		{
			this.redraw = false;
			if (this.glwrap)
				this.drawGL();
			else
				this.draw();
			if (this.snapshotCanvas)
			{
				if (this.canvas && this.canvas.toDataURL)
				{
					this.snapshotData = this.canvas.toDataURL(this.snapshotCanvas[0], this.snapshotCanvas[1]);
					this.trigger(cr.system_object.prototype.cnds.OnCanvasSnapshot, null);
				}
				this.snapshotCanvas = null;
			}
		}
		this.tickcount++;
		this.execcount++;
		this.framecount++;
		this.logictime += cr.performance_now() - logic_start;
		if (this.isSuspended)
			return;
		if (raf)
			this.raf_id = raf(this.tickFunc, this.canvas);
		else
		{
			this.timeout_id = setTimeout(this.tickFunc, this.isMobile ? 1 : 16);
		}
	};
	Runtime.prototype.logic = function ()
	{
		var i, leni, j, lenj, k, lenk, type, inst, binst;
		var cur_time = cr.performance_now();
		if (cur_time - this.last_fps_time >= 1000)  // every 1 second
		{
			this.last_fps_time += 1000;
			this.fps = this.framecount;
			this.framecount = 0;
			this.cpuutilisation = this.logictime;
			this.logictime = 0;
		}
		if (this.measuring_dt)
		{
			if (this.last_tick_time !== 0)
			{
				var ms_diff = cur_time - this.last_tick_time;
				if (ms_diff === 0 && !this.isDebug)
				{
					this.zeroDtCount++;
					if (this.zeroDtCout >= 10)
						this.measuring_dt = false;
					this.dt1 = 1.0 / 60.0;            // 60fps assumed (0.01666...)
				}
				else
				{
					this.dt1 = ms_diff / 1000.0; // dt measured in seconds
					if (this.dt1 > 0.5)
						this.dt1 = 0;
					else if (this.dt1 > 0.1)
						this.dt1 = 0.1;
				}
			}
			this.last_tick_time = cur_time;
		}
        this.dt = this.dt1 * this.timescale;
        this.kahanTime.add(this.dt);
		var isfullscreen = (document["mozFullScreen"] || document["webkitIsFullScreen"] || document["fullScreen"] || this.isNodeFullscreen);
		if (this.fullscreen_mode >= 2 /* scale */ || (isfullscreen && this.fullscreen_scaling > 0))
		{
			var orig_aspect = this.original_width / this.original_height;
			var cur_aspect = this.width / this.height;
			var mode = this.fullscreen_mode;
			if (isfullscreen && this.fullscreen_scaling > 0)
				mode = this.fullscreen_scaling;
			if ((mode !== 2 && cur_aspect > orig_aspect) || (mode === 2 && cur_aspect < orig_aspect))
			{
				this.aspect_scale = this.height / this.original_height;
			}
			else
			{
				this.aspect_scale = this.width / this.original_width;
			}
			if (this.running_layout)
			{
				this.running_layout.scrollToX(this.running_layout.scrollX);
				this.running_layout.scrollToY(this.running_layout.scrollY);
			}
		}
		else
			this.aspect_scale = 1;
		this.ClearDeathRow();
		this.isInOnDestroy++;
		this.system.runWaits();		// prevent instance list changing
		this.isInOnDestroy--;
		this.ClearDeathRow();		// allow instance list changing
		this.isInOnDestroy++;
		for (i = 0, leni = this.types_by_index.length; i < leni; i++)
		{
			type = this.types_by_index[i];
			if (type.is_family || (!type.behaviors.length && !type.families.length))
				continue;
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				inst = type.instances[j];
				for (k = 0, lenk = inst.behavior_insts.length; k < lenk; k++)
				{
					inst.behavior_insts[k].tick();
				}
			}
		}
		for (i = 0, leni = this.types_by_index.length; i < leni; i++)
		{
			type = this.types_by_index[i];
			if (type.is_family || (!type.behaviors.length && !type.families.length))
				continue;	// type doesn't have any behaviors
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				inst = type.instances[j];
				for (k = 0, lenk = inst.behavior_insts.length; k < lenk; k++)
				{
					binst = inst.behavior_insts[k];
					if (binst.posttick)
						binst.posttick();
				}
			}
		}
        var tickarr = this.objects_to_tick.valuesRef();
        for (i = 0, leni = tickarr.length; i < leni; i++)
            tickarr[i].tick();
		this.isInOnDestroy--;		// end preventing instance lists from being changed
		this.handleSaveLoad();		// save/load now if queued
		i = 0;
		while (this.changelayout && i++ < 10)
		{
			this.doChangeLayout(this.changelayout);
		}
        for (i = 0, leni = this.eventsheets_by_index.length; i < leni; i++)
            this.eventsheets_by_index[i].hasRun = false;
		if (this.running_layout.event_sheet)
			this.running_layout.event_sheet.run();
		this.registered_collisions.length = 0;
		this.layout_first_tick = false;
		this.isInOnDestroy++;		// prevent instance lists from being changed
		for (i = 0, leni = this.types_by_index.length; i < leni; i++)
		{
			type = this.types_by_index[i];
			if (type.is_family || (!type.behaviors.length && !type.families.length))
				continue;	// type doesn't have any behaviors
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				var inst = type.instances[j];
				for (k = 0, lenk = inst.behavior_insts.length; k < lenk; k++)
				{
					binst = inst.behavior_insts[k];
					if (binst.tick2)
						binst.tick2();
				}
			}
		}
        tickarr = this.objects_to_tick2.valuesRef();
        for (i = 0, leni = tickarr.length; i < leni; i++)
            tickarr[i].tick2();
		this.isInOnDestroy--;		// end preventing instance lists from being changed
	};
	Runtime.prototype.doChangeLayout = function (changeToLayout)
	{
;
		var prev_layout = this.running_layout;
		this.running_layout.stopRunning();
		var i, len, j, lenj, k, lenk, type, inst, binst;
		if (this.glwrap)
		{
			for (i = 0, len = this.types_by_index.length; i < len; i++)
			{
				type = this.types_by_index[i];
				if (type.is_family)
					continue;
				if (type.unloadTextures && (!type.global || type.instances.length === 0) && changeToLayout.initial_types.indexOf(type) === -1)
				{
					type.unloadTextures();
				}
			}
		}
		if (prev_layout == changeToLayout)
			this.system.waits.length = 0;
		changeToLayout.startRunning();
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			type = this.types_by_index[i];
			if (!type.global && !type.plugin.singleglobal)
				continue;
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				inst = type.instances[j];
				if (inst.onLayoutChange)
					inst.onLayoutChange();
				if (inst.behavior_insts)
				{
					for (k = 0, lenk = inst.behavior_insts.length; k < lenk; k++)
					{
						binst = inst.behavior_insts[k];
						if (binst.onLayoutChange)
							binst.onLayoutChange();
					}
				}
			}
		}
		this.redraw = true;
		this.layout_first_tick = true;
		this.ClearDeathRow();
	};
    Runtime.prototype.tickMe = function (inst)
    {
        this.objects_to_tick.add(inst);
    };
	Runtime.prototype.untickMe = function (inst)
	{
		this.objects_to_tick.remove(inst);
	};
	Runtime.prototype.tick2Me = function (inst)
    {
        this.objects_to_tick2.add(inst);
    };
	Runtime.prototype.untick2Me = function (inst)
	{
		this.objects_to_tick2.remove(inst);
	};
    Runtime.prototype.getDt = function (inst)
    {
        if (!inst || inst.my_timescale === -1.0)
            return this.dt;
        return this.dt1 * inst.my_timescale;
    };
	Runtime.prototype.draw = function ()
	{
		this.running_layout.draw(this.ctx);
		if (this.isDirectCanvas)
			this.ctx["present"]();
	};
	Runtime.prototype.drawGL = function ()
	{
		this.running_layout.drawGL(this.glwrap);
		this.glwrap.present();
	};
	Runtime.prototype.addDestroyCallback = function (f)
	{
		if (f)
			this.destroycallbacks.push(f);
	};
	Runtime.prototype.removeDestroyCallback = function (f)
	{
		cr.arrayFindRemove(this.destroycallbacks, f);
	};
	Runtime.prototype.getObjectByUID = function (uid_)
	{
;
		return this.objectsByUid[uid_.toString()];
	};
	Runtime.prototype.DestroyInstance = function (inst)
	{
		var i, len;
		if (!this.deathRow.contains(inst))
		{
			this.deathRow.add(inst);
			if (inst.is_contained)
			{
				for (i = 0, len = inst.siblings.length; i < len; i++)
				{
					this.DestroyInstance(inst.siblings[i]);
				}
			}
			if (this.isInClearDeathRow)
				this.deathRow.values_cache.push(inst);
			this.isInOnDestroy++;		// support recursion
			this.trigger(Object.getPrototypeOf(inst.type.plugin).cnds.OnDestroyed, inst);
			this.isInOnDestroy--;
		}
	};
	Runtime.prototype.ClearDeathRow = function ()
	{
		var inst, index, type, instances, binst;
		var i, j, k, leni, lenj, lenk;
		var w, f;
		this.isInClearDeathRow = true;
		for (i = 0, leni = this.createRow.length; i < leni; i++)
		{
			inst = this.createRow[i];
			type = inst.type;
			type.instances.push(inst);
			for (j = 0, lenj = type.families.length; j < lenj; j++)
			{
				type.families[j].instances.push(inst);
				type.families[j].stale_iids = true;
			}
		}
		this.createRow.length = 0;
		var arr = this.deathRow.valuesRef();	// get array of items from set
		for (i = 0; i < arr.length; i++)		// check array length every time in case it changes
		{
			inst = arr[i];
			type = inst.type;
			instances = type.instances;
			for (j = 0, lenj = this.destroycallbacks.length; j < lenj; j++)
				this.destroycallbacks[j](inst);
			cr.arrayFindRemove(instances, inst);
			if (inst.layer)
			{
				cr.arrayRemove(inst.layer.instances, inst.get_zindex());
				inst.layer.zindices_stale = true;
			}
			for (j = 0, lenj = type.families.length; j < lenj; j++)
			{
				cr.arrayFindRemove(type.families[j].instances, inst);
				type.families[j].stale_iids = true;
			}
			if (inst.behavior_insts)
			{
				for (j = 0, lenj = inst.behavior_insts.length; j < lenj; j++)
				{
					binst = inst.behavior_insts[j];
					if (binst.onDestroy)
						binst.onDestroy();
					binst.behavior.my_instances.remove(inst);
				}
			}
            this.objects_to_tick.remove(inst);
			this.objects_to_tick2.remove(inst);
			for (j = 0, lenj = this.system.waits.length; j < lenj; j++)
			{
				w = this.system.waits[j];
				if (w.sols.hasOwnProperty(type.index))
					cr.arrayFindRemove(w.sols[type.index].insts, inst);
				if (!type.is_family)
				{
					for (k = 0, lenk = type.families.length; k < lenk; k++)
					{
						f = type.families[k];
						if (w.sols.hasOwnProperty(f.index))
							cr.arrayFindRemove(w.sols[f.index].insts, inst);
					}
				}
			}
			if (inst.onDestroy)
				inst.onDestroy();
			if (this.objectsByUid.hasOwnProperty(inst.uid.toString()))
				delete this.objectsByUid[inst.uid.toString()];
			this.objectcount--;
			if (type.deadCache.length < 64)
				type.deadCache.push(inst);
			type.stale_iids = true;
		}
		if (!this.deathRow.isEmpty())
			this.redraw = true;
		this.deathRow.clear();
		this.isInClearDeathRow = false;
	};
	Runtime.prototype.createInstance = function (type, layer, sx, sy)
	{
		if (type.is_family)
		{
			var i = cr.floor(Math.random() * type.members.length);
			return this.createInstance(type.members[i], layer, sx, sy);
		}
		if (!type.default_instance)
		{
			return null;
		}
		return this.createInstanceFromInit(type.default_instance, layer, false, sx, sy, false);
	};
	var all_behaviors = [];
	Runtime.prototype.createInstanceFromInit = function (initial_inst, layer, is_startup_instance, sx, sy, skip_siblings)
	{
		var i, len, j, lenj, p, effect_fallback, x, y;
		if (!initial_inst)
			return null;
		var type = this.types_by_index[initial_inst[1]];
;
;
		var is_world = type.plugin.is_world;
;
		if (this.isloading && is_world && !type.isOnLoaderLayout)
			return null;
		if (is_world && !this.glwrap && initial_inst[0][11] === 11)
			return null;
		var original_layer = layer;
		if (!is_world)
			layer = null;
		var inst;
		if (type.deadCache.length)
		{
			inst = type.deadCache.pop();
			inst.recycled = true;
			type.plugin.Instance.call(inst, type);
		}
		else
		{
			inst = new type.plugin.Instance(type);
			inst.recycled = false;
		}
		if (is_startup_instance && !skip_siblings)
			inst.uid = initial_inst[2];
		else
			inst.uid = this.next_uid++;
		this.objectsByUid[inst.uid.toString()] = inst;
		inst.puid = this.next_puid++;
		inst.iid = type.instances.length;
		for (i = 0, len = this.createRow.length; i < len; ++i)
		{
			if (this.createRow[i].type === type)
				inst.iid++;
		}
		inst.get_iid = cr.inst_get_iid;
		var initial_vars = initial_inst[3];
		if (inst.recycled)
		{
			cr.wipe(inst.extra);
		}
		else
		{
			inst.extra = {};
			if (typeof cr_is_preview !== "undefined")
			{
				inst.instance_var_names = [];
				inst.instance_var_names.length = initial_vars.length;
				for (i = 0, len = initial_vars.length; i < len; i++)
					inst.instance_var_names[i] = initial_vars[i][1];
			}
			inst.instance_vars = [];
			inst.instance_vars.length = initial_vars.length;
		}
		for (i = 0, len = initial_vars.length; i < len; i++)
			inst.instance_vars[i] = initial_vars[i][0];
		if (is_world)
		{
			var wm = initial_inst[0];
;
			inst.x = cr.is_undefined(sx) ? wm[0] : sx;
			inst.y = cr.is_undefined(sy) ? wm[1] : sy;
			inst.z = wm[2];
			inst.width = wm[3];
			inst.height = wm[4];
			inst.depth = wm[5];
			inst.angle = wm[6];
			inst.opacity = wm[7];
			inst.hotspotX = wm[8];
			inst.hotspotY = wm[9];
			inst.blend_mode = wm[10];
			effect_fallback = wm[11];
			if (!this.glwrap && type.effect_types.length)	// no WebGL renderer and shaders used
				inst.blend_mode = effect_fallback;			// use fallback blend mode - destroy mode was handled above
			inst.compositeOp = cr.effectToCompositeOp(inst.blend_mode);
			if (this.gl)
				cr.setGLBlend(inst, inst.blend_mode, this.gl);
			if (inst.recycled)
			{
				for (i = 0, len = wm[12].length; i < len; i++)
				{
					for (j = 0, lenj = wm[12][i].length; j < lenj; j++)
						inst.effect_params[i][j] = wm[12][i][j];
				}
				inst.bbox.set(0, 0, 0, 0);
				inst.bquad.set_from_rect(inst.bbox);
				inst.bbox_changed_callbacks.length = 0;
			}
			else
			{
				inst.effect_params = wm[12].slice(0);
				for (i = 0, len = inst.effect_params.length; i < len; i++)
					inst.effect_params[i] = wm[12][i].slice(0);
				inst.active_effect_types = [];
				inst.active_effect_flags = [];
				inst.active_effect_flags.length = type.effect_types.length;
				inst.bbox = new cr.rect(0, 0, 0, 0);
				inst.bquad = new cr.quad();
				inst.bbox_changed_callbacks = [];
				inst.set_bbox_changed = cr.set_bbox_changed;
				inst.add_bbox_changed_callback = cr.add_bbox_changed_callback;
				inst.contains_pt = cr.inst_contains_pt;
				inst.update_bbox = cr.update_bbox;
				inst.get_zindex = cr.inst_get_zindex;
			}
			for (i = 0, len = type.effect_types.length; i < len; i++)
				inst.active_effect_flags[i] = true;
			inst.updateActiveEffects = cr.inst_updateActiveEffects;
			inst.updateActiveEffects();
			inst.uses_shaders = !!inst.active_effect_types.length;
			inst.bbox_changed = true;
			inst.visible = true;
            inst.my_timescale = -1.0;
			inst.layer = layer;
			inst.zindex = layer.instances.length;	// will be placed at top of current layer
			if (typeof inst.collision_poly === "undefined")
				inst.collision_poly = null;
			inst.collisionsEnabled = true;
			this.redraw = true;
		}
		inst.toString = cr.inst_toString;
		var initial_props, binst;
		all_behaviors.length = 0;
		for (i = 0, len = type.families.length; i < len; i++)
		{
			all_behaviors.push.apply(all_behaviors, type.families[i].behaviors);
		}
		all_behaviors.push.apply(all_behaviors, type.behaviors);
		if (inst.recycled)
		{
			for (i = 0, len = all_behaviors.length; i < len; i++)
			{
				var btype = all_behaviors[i];
				binst = inst.behavior_insts[i];
				binst.recycled = true;
				btype.behavior.Instance.call(binst, btype, inst);
				initial_props = initial_inst[4][i];
				for (j = 0, lenj = initial_props.length; j < lenj; j++)
					binst.properties[j] = initial_props[j];
				binst.onCreate();
				btype.behavior.my_instances.add(inst);
			}
		}
		else
		{
			inst.behavior_insts = [];
			for (i = 0, len = all_behaviors.length; i < len; i++)
			{
				var btype = all_behaviors[i];
				var binst = new btype.behavior.Instance(btype, inst);
				binst.recycled = false;
				binst.properties = initial_inst[4][i].slice(0);
				binst.onCreate();
				cr.seal(binst);
				inst.behavior_insts.push(binst);
				btype.behavior.my_instances.add(inst);
			}
		}
		initial_props = initial_inst[5];
		if (inst.recycled)
		{
			for (i = 0, len = initial_props.length; i < len; i++)
				inst.properties[i] = initial_props[i];
		}
		else
			inst.properties = initial_props.slice(0);
		this.createRow.push(inst);
		if (layer)
		{
;
			layer.instances.push(inst);
		}
		this.objectcount++;
		if (type.is_contained)
		{
			inst.is_contained = true;
			if (inst.recycled)
				inst.siblings.length = 0;
			else
				inst.siblings = [];			// note: should not include self in siblings
			if (!is_startup_instance && !skip_siblings)	// layout links initial instances
			{
				for (i = 0, len = type.container.length; i < len; i++)
				{
					if (type.container[i] === type)
						continue;
					if (!type.container[i].default_instance)
					{
						return null;
					}
					inst.siblings.push(this.createInstanceFromInit(type.container[i].default_instance, original_layer, false, is_world ? inst.x : sx, is_world ? inst.y : sy, true));
				}
				for (i = 0, len = inst.siblings.length; i < len; i++)
				{
					inst.siblings[i].siblings.push(inst);
					for (j = 0; j < len; j++)
					{
						if (i !== j)
							inst.siblings[i].siblings.push(inst.siblings[j]);
					}
				}
			}
		}
		else
		{
			inst.is_contained = false;
			inst.siblings = null;
		}
		inst.onCreate();
		if (!inst.recycled)
			cr.seal(inst);
		for (i = 0, len = inst.behavior_insts.length; i < len; i++)
		{
			if (inst.behavior_insts[i].postCreate)
				inst.behavior_insts[i].postCreate();
		}
		return inst;
	};
	Runtime.prototype.getLayerByName = function (layer_name)
	{
		var i, len;
		for (i = 0, len = this.running_layout.layers.length; i < len; i++)
		{
			var layer = this.running_layout.layers[i];
			if (cr.equals_nocase(layer.name, layer_name))
				return layer;
		}
		return null;
	};
	Runtime.prototype.getLayerByNumber = function (index)
	{
		index = cr.floor(index);
		if (index < 0)
			index = 0;
		if (index >= this.running_layout.layers.length)
			index = this.running_layout.layers.length - 1;
		return this.running_layout.layers[index];
	};
	Runtime.prototype.getLayer = function (l)
	{
		if (cr.is_number(l))
			return this.getLayerByNumber(l);
		else
			return this.getLayerByName(l.toString());
	};
	Runtime.prototype.clearSol = function (solModifiers)
	{
		var i, len;
		for (i = 0, len = solModifiers.length; i < len; i++)
		{
			solModifiers[i].getCurrentSol().select_all = true;
		}
	};
	Runtime.prototype.pushCleanSol = function (solModifiers)
	{
		var i, len;
		for (i = 0, len = solModifiers.length; i < len; i++)
		{
			solModifiers[i].pushCleanSol();
		}
	};
	Runtime.prototype.pushCopySol = function (solModifiers)
	{
		var i, len;
		for (i = 0, len = solModifiers.length; i < len; i++)
		{
			solModifiers[i].pushCopySol();
		}
	};
	Runtime.prototype.popSol = function (solModifiers)
	{
		var i, len;
		for (i = 0, len = solModifiers.length; i < len; i++)
		{
			solModifiers[i].popSol();
		}
	};
	Runtime.prototype.testAndSelectCanvasPointOverlap = function (type, ptx, pty, inverted)
	{
		var sol = type.getCurrentSol();
		var i, j, inst, len;
		var lx, ly;
		if (sol.select_all)
		{
			if (!inverted)
			{
				sol.select_all = false;
				sol.instances.length = 0;   // clear contents
			}
			for (i = 0, len = type.instances.length; i < len; i++)
			{
				inst = type.instances[i];
				inst.update_bbox();
				lx = inst.layer.canvasToLayer(ptx, pty, true);
				ly = inst.layer.canvasToLayer(ptx, pty, false);
				if (inst.contains_pt(lx, ly))
				{
					if (inverted)
						return false;
					else
						sol.instances.push(inst);
				}
			}
		}
		else
		{
			j = 0;
			for (i = 0, len = sol.instances.length; i < len; i++)
			{
				inst = sol.instances[i];
				inst.update_bbox();
				lx = inst.layer.canvasToLayer(ptx, pty, true);
				ly = inst.layer.canvasToLayer(ptx, pty, false);
				if (inst.contains_pt(lx, ly))
				{
					if (inverted)
						return false;
					else
					{
						sol.instances[j] = sol.instances[i];
						j++;
					}
				}
			}
			if (!inverted)
				sol.instances.length = j;
		}
		type.applySolToContainer();
		if (inverted)
			return true;		// did not find anything overlapping
		else
			return sol.hasObjects();
	};
	Runtime.prototype.testOverlap = function (a, b)
	{
		if (!a || !b || a === b || !a.collisionsEnabled || !b.collisionsEnabled)
			return false;
		a.update_bbox();
		b.update_bbox();
		var layera = a.layer;
		var layerb = b.layer;
		var different_layers = (layera !== layerb && (layera.parallaxX !== layerb.parallaxX || layerb.parallaxY !== layerb.parallaxY || layera.scale !== layerb.scale || layera.angle !== layerb.angle || layera.zoomRate !== layerb.zoomRate));
		var i, len, x, y, haspolya, haspolyb, polya, polyb;
		if (!different_layers)	// same layers: easy check
		{
			if (!a.bbox.intersects_rect(b.bbox))
				return false;
			if (!a.bquad.intersects_quad(b.bquad))
				return false;
			haspolya = (a.collision_poly && !a.collision_poly.is_empty());
			haspolyb = (b.collision_poly && !b.collision_poly.is_empty());
			if (!haspolya && !haspolyb)
				return true;
			if (haspolya)
			{
				a.collision_poly.cache_poly(a.width, a.height, a.angle);
				polya = a.collision_poly;
			}
			else
			{
				this.temp_poly.set_from_quad(a.bquad, a.x, a.y, a.width, a.height);
				polya = this.temp_poly;
			}
			if (haspolyb)
			{
				b.collision_poly.cache_poly(b.width, b.height, b.angle);
				polyb = b.collision_poly;
			}
			else
			{
				this.temp_poly.set_from_quad(b.bquad, b.x, b.y, b.width, b.height);
				polyb = this.temp_poly;
			}
			return polya.intersects_poly(polyb, b.x - a.x, b.y - a.y);
		}
		else	// different layers: need to do full translated check
		{
			haspolya = (a.collision_poly && !a.collision_poly.is_empty());
			haspolyb = (b.collision_poly && !b.collision_poly.is_empty());
			if (haspolya)
			{
				a.collision_poly.cache_poly(a.width, a.height, a.angle);
				this.temp_poly.set_from_poly(a.collision_poly);
			}
			else
			{
				this.temp_poly.set_from_quad(a.bquad, a.x, a.y, a.width, a.height);
			}
			polya = this.temp_poly;
			if (haspolyb)
			{
				b.collision_poly.cache_poly(b.width, b.height, b.angle);
				this.temp_poly2.set_from_poly(b.collision_poly);
			}
			else
			{
				this.temp_poly2.set_from_quad(b.bquad, b.x, b.y, b.width, b.height);
			}
			polyb = this.temp_poly2;
			for (i = 0, len = polya.pts_count; i < len; i++)
			{
				x = polya.pts_cache[i*2];
				y = polya.pts_cache[i*2+1];
				polya.pts_cache[i*2] = layera.layerToCanvas(x + a.x, y + a.y, true);
				polya.pts_cache[i*2+1] = layera.layerToCanvas(x + a.x, y + a.y, false);
			}
			for (i = 0, len = polyb.pts_count; i < len; i++)
			{
				x = polyb.pts_cache[i*2];
				y = polyb.pts_cache[i*2+1];
				polyb.pts_cache[i*2] = layerb.layerToCanvas(x + b.x, y + b.y, true);
				polyb.pts_cache[i*2+1] = layerb.layerToCanvas(x + b.x, y + b.y, false);
			}
			return polya.intersects_poly(polyb, 0, 0);
		}
	};
	var tmpQuad = new cr.quad();
	var tmpRect = new cr.rect(0, 0, 0, 0);
	Runtime.prototype.testRectOverlap = function (r, b)
	{
		if (!b || !b.collisionsEnabled)
			return false;
		b.update_bbox();
		var layerb = b.layer;
		var haspolyb, polyb;
		if (!b.bbox.intersects_rect(r))
			return false;
		tmpQuad.set_from_rect(r);
		if (!b.bquad.intersects_quad(tmpQuad))
			return false;
		haspolyb = (b.collision_poly && !b.collision_poly.is_empty());
		if (!haspolyb)
			return true;
		b.collision_poly.cache_poly(b.width, b.height, b.angle);
		tmpQuad.offset(-r.left, -r.top);
		this.temp_poly.set_from_quad(tmpQuad, 0, 0, 1, 1);
		return b.collision_poly.intersects_poly(this.temp_poly, r.left - b.x, r.top - b.y);
	};
	Runtime.prototype.testSegmentOverlap = function (x1, y1, x2, y2, b)
	{
		if (!b || !b.collisionsEnabled)
			return false;
		b.update_bbox();
		var layerb = b.layer;
		var haspolyb, polyb;
		tmpRect.set(cr.min(x1, x2), cr.min(y1, y2), cr.max(x1, x2), cr.max(y1, y2));
		if (!b.bbox.intersects_rect(tmpRect))
			return false;
		if (!b.bquad.intersects_segment(x1, y1, x2, y2))
			return false;
		haspolyb = (b.collision_poly && !b.collision_poly.is_empty());
		if (!haspolyb)
			return true;
		b.collision_poly.cache_poly(b.width, b.height, b.angle);
		return b.collision_poly.intersects_segment(b.x, b.y, x1, y1, x2, y2);
	};
	Runtime.prototype.typeHasBehavior = function (t, b)
	{
		if (!b)
			return false;
		var i, len, j, lenj, f;
		for (i = 0, len = t.behaviors.length; i < len; i++)
		{
			if (t.behaviors[i].behavior instanceof b)
				return true;
		}
		if (!t.is_family)
		{
			for (i = 0, len = t.families.length; i < len; i++)
			{
				f = t.families[i];
				for (j = 0, lenj = f.behaviors.length; j < lenj; j++)
				{
					if (f.behaviors[j].behavior instanceof b)
						return true;
				}
			}
		}
		return false;
	};
	Runtime.prototype.typeHasNoSaveBehavior = function (t)
	{
		return this.typeHasBehavior(t, cr.behaviors.NoSave);
	};
	Runtime.prototype.typeHasPersistBehavior = function (t)
	{
		return this.typeHasBehavior(t, cr.behaviors.Persist);
	};
	Runtime.prototype.getSolidBehavior = function ()
	{
		if (!cr.behaviors.solid)
			return null;
		var i, len;
		for (i = 0, len = this.behaviors.length; i < len; i++)
		{
			if (this.behaviors[i] instanceof cr.behaviors.solid)
				return this.behaviors[i];
		}
		return null;
	};
	Runtime.prototype.testOverlapSolid = function (inst)
	{
		var solid = this.getSolidBehavior();
		if (!solid)
			return null;
		var i, len, s;
		var solids = solid.my_instances.valuesRef();
		for (i = 0, len = solids.length; i < len; ++i)
		{
			s = solids[i];
			if (!s.extra.solidEnabled)
				continue;
			if (this.testOverlap(inst, s))
				return s;
		}
		return null;
	};
	Runtime.prototype.testRectOverlapSolid = function (r)
	{
		var solid = this.getSolidBehavior();
		if (!solid)
			return null;
		var i, len, s;
		var solids = solid.my_instances.valuesRef();
		for (i = 0, len = solids.length; i < len; ++i)
		{
			s = solids[i];
			if (!s.extra.solidEnabled)
				continue;
			if (this.testRectOverlap(r, s))
				return s;
		}
		return null;
	};
	var jumpthru_array_ret = [];
	Runtime.prototype.testOverlapJumpThru = function (inst, all)
	{
		var jumpthru = null;
		var i, len, s;
		if (!cr.behaviors.jumpthru)
			return null;
		for (i = 0, len = this.behaviors.length; i < len; i++)
		{
			if (this.behaviors[i] instanceof cr.behaviors.jumpthru)
			{
				jumpthru = this.behaviors[i];
				break;
			}
		}
		if (!jumpthru)
			return null;
		var ret = null;
		if (all)
		{
			ret = jumpthru_array_ret;
			ret.length = 0;
		}
		var jumpthrus = jumpthru.my_instances.valuesRef();
		for (i = 0, len = jumpthrus.length; i < len; ++i)
		{
			s = jumpthrus[i];
			if (!s.extra.jumpthruEnabled)
				continue;
			if (this.testOverlap(inst, s))
			{
				if (all)
					ret.push(s);
				else
					return s;
			}
		}
		return ret;
	};
	Runtime.prototype.pushOutSolid = function (inst, xdir, ydir, dist, include_jumpthrus, specific_jumpthru)
	{
		var push_dist = dist || 50;
		var oldx = inst.x
		var oldy = inst.y;
		var i;
		var last_overlapped = null, secondlast_overlapped = null;
		for (i = 0; i < push_dist; i++)
		{
			inst.x = (oldx + (xdir * i));
			inst.y = (oldy + (ydir * i));
			inst.set_bbox_changed();
			if (!this.testOverlap(inst, last_overlapped))
			{
				last_overlapped = this.testOverlapSolid(inst);
				if (last_overlapped)
					secondlast_overlapped = last_overlapped;
				if (!last_overlapped)
				{
					if (include_jumpthrus)
					{
						if (specific_jumpthru)
							last_overlapped = (this.testOverlap(inst, specific_jumpthru) ? specific_jumpthru : null);
						else
							last_overlapped = this.testOverlapJumpThru(inst);
						if (last_overlapped)
							secondlast_overlapped = last_overlapped;
					}
					if (!last_overlapped)
					{
						if (secondlast_overlapped)
							this.pushInFractional(inst, xdir, ydir, secondlast_overlapped, 16);
						return true;
					}
				}
			}
		}
		inst.x = oldx;
		inst.y = oldy;
		inst.set_bbox_changed();
		return false;
	};
	Runtime.prototype.pushOut = function (inst, xdir, ydir, dist, otherinst)
	{
		var push_dist = dist || 50;
		var oldx = inst.x
		var oldy = inst.y;
		var i;
		for (i = 0; i < push_dist; i++)
		{
			inst.x = (oldx + (xdir * i));
			inst.y = (oldy + (ydir * i));
			inst.set_bbox_changed();
			if (!this.testOverlap(inst, otherinst))
				return true;
		}
		inst.x = oldx;
		inst.y = oldy;
		inst.set_bbox_changed();
		return false;
	};
	Runtime.prototype.pushInFractional = function (inst, xdir, ydir, obj, limit)
	{
		var divisor = 2;
		var frac;
		var forward = false;
		var overlapping = false;
		var bestx = inst.x;
		var besty = inst.y;
		while (divisor <= limit)
		{
			frac = 1 / divisor;
			divisor *= 2;
			inst.x += xdir * frac * (forward ? 1 : -1);
			inst.y += ydir * frac * (forward ? 1 : -1);
			inst.set_bbox_changed();
			if (this.testOverlap(inst, obj))
			{
				forward = true;
				overlapping = true;
			}
			else
			{
				forward = false;
				overlapping = false;
				bestx = inst.x;
				besty = inst.y;
			}
		}
		if (overlapping)
		{
			inst.x = bestx;
			inst.y = besty;
			inst.set_bbox_changed();
		}
	};
	Runtime.prototype.pushOutSolidNearest = function (inst, max_dist_)
	{
		var max_dist = (cr.is_undefined(max_dist_) ? 100 : max_dist_);
		var dist = 0;
		var oldx = inst.x
		var oldy = inst.y;
		var dir = 0;
		var dx = 0, dy = 0;
		var last_overlapped = this.testOverlapSolid(inst);
		if (!last_overlapped)
			return true;		// already clear of solids
		while (dist <= max_dist)
		{
			switch (dir) {
			case 0:		dx = 0; dy = -1; dist++; break;
			case 1:		dx = 1; dy = -1; break;
			case 2:		dx = 1; dy = 0; break;
			case 3:		dx = 1; dy = 1; break;
			case 4:		dx = 0; dy = 1; break;
			case 5:		dx = -1; dy = 1; break;
			case 6:		dx = -1; dy = 0; break;
			case 7:		dx = -1; dy = -1; break;
			}
			dir = (dir + 1) % 8;
			inst.x = cr.floor(oldx + (dx * dist));
			inst.y = cr.floor(oldy + (dy * dist));
			inst.set_bbox_changed();
			if (!this.testOverlap(inst, last_overlapped))
			{
				last_overlapped = this.testOverlapSolid(inst);
				if (!last_overlapped)
					return true;
			}
		}
		inst.x = oldx;
		inst.y = oldy;
		inst.set_bbox_changed();
		return false;
	};
	Runtime.prototype.registerCollision = function (a, b)
	{
		if (!a.collisionsEnabled || !b.collisionsEnabled)
			return;
		this.registered_collisions.push([a, b]);
	};
	Runtime.prototype.checkRegisteredCollision = function (a, b)
	{
		var i, len, x;
		for (i = 0, len = this.registered_collisions.length; i < len; i++)
		{
			x = this.registered_collisions[i];
			if ((x[0] == a && x[1] == b) || (x[0] == b && x[1] == a))
				return true;
		}
		return false;
	};
	Runtime.prototype.calculateSolidBounceAngle = function(inst, startx, starty, obj)
	{
		var objx = inst.x;
		var objy = inst.y;
		var radius = cr.max(10, cr.distanceTo(startx, starty, objx, objy));
		var startangle = cr.angleTo(startx, starty, objx, objy);
		var firstsolid = obj || this.testOverlapSolid(inst);
		if (!firstsolid)
			return cr.clamp_angle(startangle + cr.PI);
		var cursolid = firstsolid;
		var i, curangle, anticlockwise_free_angle, clockwise_free_angle;
		var increment = cr.to_radians(5);	// 5 degree increments
		for (i = 1; i < 36; i++)
		{
			curangle = startangle - i * increment;
			inst.x = startx + Math.cos(curangle) * radius;
			inst.y = starty + Math.sin(curangle) * radius;
			inst.set_bbox_changed();
			if (!this.testOverlap(inst, cursolid))
			{
				cursolid = obj ? null : this.testOverlapSolid(inst);
				if (!cursolid)
				{
					anticlockwise_free_angle = curangle;
					break;
				}
			}
		}
		if (i === 36)
			anticlockwise_free_angle = cr.clamp_angle(startangle + cr.PI);
		var cursolid = firstsolid;
		for (i = 1; i < 36; i++)
		{
			curangle = startangle + i * increment;
			inst.x = startx + Math.cos(curangle) * radius;
			inst.y = starty + Math.sin(curangle) * radius;
			inst.set_bbox_changed();
			if (!this.testOverlap(inst, cursolid))
			{
				cursolid = obj ? null : this.testOverlapSolid(inst);
				if (!cursolid)
				{
					clockwise_free_angle = curangle;
					break;
				}
			}
		}
		if (i === 36)
			clockwise_free_angle = cr.clamp_angle(startangle + cr.PI);
		inst.x = objx;
		inst.y = objy;
		inst.set_bbox_changed();
		if (clockwise_free_angle === anticlockwise_free_angle)
			return clockwise_free_angle;
		var half_diff = cr.angleDiff(clockwise_free_angle, anticlockwise_free_angle) / 2;
		var normal;
		if (cr.angleClockwise(clockwise_free_angle, anticlockwise_free_angle))
		{
			normal = cr.clamp_angle(anticlockwise_free_angle + half_diff + cr.PI);
		}
		else
		{
			normal = cr.clamp_angle(clockwise_free_angle + half_diff);
		}
;
		var vx = Math.cos(startangle);
		var vy = Math.sin(startangle);
		var nx = Math.cos(normal);
		var ny = Math.sin(normal);
		var v_dot_n = vx * nx + vy * ny;
		var rx = vx - 2 * v_dot_n * nx;
		var ry = vy - 2 * v_dot_n * ny;
		return cr.angleTo(0, 0, rx, ry);
	};
	var triggerSheetStack = [];
	var triggerSheetIndex = -1;
	Runtime.prototype.trigger = function (method, inst, value /* for fast triggers */)
	{
;
		if (!this.running_layout)
			return false;
		var sheet = this.running_layout.event_sheet;
		if (!sheet)
			return false;     // no event sheet active; nothing to trigger
		triggerSheetIndex++;
		if (triggerSheetIndex === triggerSheetStack.length)
			triggerSheetStack.push(new cr.ObjectSet());
		else
			triggerSheetStack[triggerSheetIndex].clear();
        var ret = this.triggerOnSheet(method, inst, sheet, value);
		triggerSheetIndex--;
		return ret;
    };
    Runtime.prototype.triggerOnSheet = function (method, inst, sheet, value)
    {
		var alreadyTriggeredSheets = triggerSheetStack[triggerSheetIndex];
        if (alreadyTriggeredSheets.contains(sheet))
            return false;
        alreadyTriggeredSheets.add(sheet);
        var includes = sheet.includes.valuesRef();
        var ret = false;
		var i, leni, r;
        for (i = 0, leni = includes.length; i < leni; i++)
        {
			if (includes[i].isActive())
			{
				r = this.triggerOnSheet(method, inst, includes[i].include_sheet, value);
				ret = ret || r;
			}
        }
		if (!inst)
		{
			r = this.triggerOnSheetForTypeName(method, inst, "system", sheet, value);
			ret = ret || r;
		}
		else
		{
			r = this.triggerOnSheetForTypeName(method, inst, inst.type.name, sheet, value);
			ret = ret || r;
			for (i = 0, leni = inst.type.families.length; i < leni; i++)
			{
				r = this.triggerOnSheetForTypeName(method, inst, inst.type.families[i].name, sheet, value);
				ret = ret || r;
			}
		}
		return ret;             // true if anything got triggered
	};
	Runtime.prototype.triggerOnSheetForTypeName = function (method, inst, type_name, sheet, value)
	{
		var i, leni;
		var ret = false, ret2 = false;
		var trig, index;
		var fasttrigger = (typeof value !== "undefined");
		var triggers = (fasttrigger ? sheet.fasttriggers : sheet.triggers);
		var obj_entry = triggers[type_name];
		if (!obj_entry)
			return ret;
		var triggers_list = null;
		for (i = 0, leni = obj_entry.length; i < leni; i++)
		{
			if (obj_entry[i].method == method)
			{
				triggers_list = obj_entry[i].evs;
				break;
			}
		}
		if (!triggers_list)
			return ret;
		var triggers_to_fire;
		if (fasttrigger)
		{
			triggers_to_fire = triggers_list[value];
		}
		else
		{
			triggers_to_fire = triggers_list;
		}
		if (!triggers_to_fire)
			return null;
		for (i = 0, leni = triggers_to_fire.length; i < leni; i++)
		{
			trig = triggers_to_fire[i][0];
			index = triggers_to_fire[i][1];
			ret2 = this.executeSingleTrigger(inst, type_name, trig, index);
			ret = ret || ret2;
		}
		return ret;
	};
	Runtime.prototype.executeSingleTrigger = function (inst, type_name, trig, index)
	{
		var i, leni;
		var ret = false;
		this.trigger_depth++;
		var current_event = this.getCurrentEventStack().current_event;
		if (current_event)
			this.pushCleanSol(current_event.solModifiersIncludingParents);
		var isrecursive = (this.trigger_depth > 1);		// calling trigger from inside another trigger
		this.pushCleanSol(trig.solModifiersIncludingParents);
		if (isrecursive)
			this.pushLocalVarStack();
		var event_stack = this.pushEventStack(trig);
		event_stack.current_event = trig;
		if (inst)
		{
			var sol = this.types[type_name].getCurrentSol();
			sol.select_all = false;
			sol.instances.length = 1;
			sol.instances[0] = inst;
			this.types[type_name].applySolToContainer();
		}
		var ok_to_run = true;
		if (trig.parent)
		{
			var temp_parents_arr = event_stack.temp_parents_arr;
			var cur_parent = trig.parent;
			while (cur_parent)
			{
				temp_parents_arr.push(cur_parent);
				cur_parent = cur_parent.parent;
			}
			temp_parents_arr.reverse();
			for (i = 0, leni = temp_parents_arr.length; i < leni; i++)
			{
				if (!temp_parents_arr[i].run_pretrigger())   // parent event failed
				{
					ok_to_run = false;
					break;
				}
			}
		}
		if (ok_to_run)
		{
			this.execcount++;
			if (trig.orblock)
				trig.run_orblocktrigger(index);
			else
				trig.run();
			ret = ret || event_stack.last_event_true;
		}
		this.popEventStack();
		if (isrecursive)
			this.popLocalVarStack();
		this.popSol(trig.solModifiersIncludingParents);
		if (current_event)
			this.popSol(current_event.solModifiersIncludingParents);
		if (this.isInOnDestroy === 0 && triggerSheetIndex === 0 && !this.isRunningEvents && (!this.deathRow.isEmpty() || this.createRow.length))
		{
			this.ClearDeathRow();
		}
		this.trigger_depth--;
		return ret;
	};
	Runtime.prototype.getCurrentCondition = function ()
	{
		var evinfo = this.getCurrentEventStack();
		return evinfo.current_event.conditions[evinfo.cndindex];
	};
	Runtime.prototype.getCurrentAction = function ()
	{
		var evinfo = this.getCurrentEventStack();
		return evinfo.current_event.actions[evinfo.actindex];
	};
	Runtime.prototype.pushLocalVarStack = function ()
	{
		this.localvar_stack_index++;
		if (this.localvar_stack_index >= this.localvar_stack.length)
			this.localvar_stack.push([]);
	};
	Runtime.prototype.popLocalVarStack = function ()
	{
;
		this.localvar_stack_index--;
	};
	Runtime.prototype.getCurrentLocalVarStack = function ()
	{
		return this.localvar_stack[this.localvar_stack_index];
	};
	Runtime.prototype.pushEventStack = function (cur_event)
	{
		this.event_stack_index++;
		if (this.event_stack_index >= this.event_stack.length)
			this.event_stack.push(new cr.eventStackFrame());
		var ret = this.getCurrentEventStack();
		ret.reset(cur_event);
		return ret;
	};
	Runtime.prototype.popEventStack = function ()
	{
;
		this.event_stack_index--;
	};
	Runtime.prototype.getCurrentEventStack = function ()
	{
		return this.event_stack[this.event_stack_index];
	};
	Runtime.prototype.pushLoopStack = function (name_)
	{
		this.loop_stack_index++;
		if (this.loop_stack_index >= this.loop_stack.length)
		{
			this.loop_stack.push(cr.seal({ name: name_, index: 0, stopped: false }));
		}
		var ret = this.getCurrentLoop();
		ret.name = name_;
		ret.index = 0;
		ret.stopped = false;
		return ret;
	};
	Runtime.prototype.popLoopStack = function ()
	{
;
		this.loop_stack_index--;
	};
	Runtime.prototype.getCurrentLoop = function ()
	{
		return this.loop_stack[this.loop_stack_index];
	};
	Runtime.prototype.getEventVariableByName = function (name, scope)
	{
		var i, leni, j, lenj, sheet, e;
		while (scope)
		{
			for (i = 0, leni = scope.subevents.length; i < leni; i++)
			{
				e = scope.subevents[i];
				if (e instanceof cr.eventvariable && cr.equals_nocase(name, e.name))
					return e;
			}
			scope = scope.parent;
		}
		for (i = 0, leni = this.eventsheets_by_index.length; i < leni; i++)
		{
			sheet = this.eventsheets_by_index[i];
			for (j = 0, lenj = sheet.events.length; j < lenj; j++)
			{
				e = sheet.events[j];
				if (e instanceof cr.eventvariable && cr.equals_nocase(name, e.name))
					return e;
			}
		}
		return null;
	};
	Runtime.prototype.getLayoutBySid = function (sid_)
	{
		var i, len;
		for (i = 0, len = this.layouts_by_index.length; i < len; i++)
		{
			if (this.layouts_by_index[i].sid === sid_)
				return this.layouts_by_index[i];
		}
		return null;
	};
	Runtime.prototype.getObjectTypeBySid = function (sid_)
	{
		var i, len;
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			if (this.types_by_index[i].sid === sid_)
				return this.types_by_index[i];
		}
		return null;
	};
	Runtime.prototype.getGroupBySid = function (sid_)
	{
		var i, len;
		for (i = 0, len = this.allGroups.length; i < len; i++)
		{
			if (this.allGroups[i].sid === sid_)
				return this.allGroups[i];
		}
		return null;
	};
	function makeSaveDb(e)
	{
		var db = e.target.result;
		db.createObjectStore("saves", { keyPath: "slot" });
	};
	function IndexedDB_WriteSlot(slot_, data_, oncomplete_, onerror_)
	{
		var request = indexedDB.open("_C2SaveStates");
		request.onupgradeneeded = makeSaveDb;
		request.onerror = onerror_;
		request.onsuccess = function (e)
		{
			var db = e.target.result;
			db.onerror = onerror_;
			var transaction = db.transaction(["saves"], "readwrite");
			var objectStore = transaction.objectStore("saves");
			var putReq = objectStore.put({"slot": slot_, "data": data_ });
			putReq.onsuccess = oncomplete_;
		};
	};
	function IndexedDB_ReadSlot(slot_, oncomplete_, onerror_)
	{
		var request = indexedDB.open("_C2SaveStates");
		request.onupgradeneeded = makeSaveDb;
		request.onerror = onerror_;
		request.onsuccess = function (e)
		{
			var db = e.target.result;
			db.onerror = onerror_;
			var transaction = db.transaction(["saves"]);
			var objectStore = transaction.objectStore("saves");
			var readReq = objectStore.get(slot_);
			readReq.onsuccess = function (e)
			{
				if (readReq.result)
					oncomplete_(readReq.result["data"]);
				else
					oncomplete_(null);
			};
		};
	};
	Runtime.prototype.signalContinuousPreview = function ()
	{
		this.signalledContinuousPreview = true;
	};
	function doContinuousPreviewReload()
	{
		cr.logexport("Reloading for continuous preview");
		if (!!window["c2cocoonjs"])
		{
			CocoonJS["App"]["reload"]();
		}
		else
		{
			if (window.location.search.indexOf("continuous") > -1)
				window.location.reload(true);
			else
				window.location = window.location + "?continuous";
		}
	};
	Runtime.prototype.handleSaveLoad = function ()
	{
		var self = this;
		var savingToSlot = this.saveToSlot;
		var savingJson = this.lastSaveJson;
		var loadingFromSlot = this.loadFromSlot;
		var continuous = false;
		if (this.signalledContinuousPreview)
		{
			continuous = true;
			savingToSlot = "__c2_continuouspreview";
			this.signalledContinuousPreview = false;
		}
		if (savingToSlot.length)
		{
			this.ClearDeathRow();
			savingJson = this.saveToJSONString();
			if (window.indexedDB && !this.isCocoonJs)
			{
				IndexedDB_WriteSlot(savingToSlot, savingJson, function ()
				{
					cr.logexport("Saved state to IndexedDB storage (" + savingJson.length + " bytes)");
					self.lastSaveJson = savingJson;
					self.trigger(cr.system_object.prototype.cnds.OnSaveComplete, null);
					self.lastSaveJson = "";
					if (continuous)
						doContinuousPreviewReload();
				}, function (e)
				{
					try {
						localStorage.setItem("__c2save_" + savingToSlot, savingJson);
						cr.logexport("Saved state to WebStorage (" + savingJson.length + " bytes)");
						self.lastSaveJson = savingJson;
						self.trigger(cr.system_object.prototype.cnds.OnSaveComplete, null);
						self.lastSaveJson = "";
						if (continuous)
							doContinuousPreviewReload();
					}
					catch (f)
					{
						cr.logexport("Failed to save game state: " + e + "; " + f);
					}
				});
			}
			else
			{
				try {
					localStorage.setItem("__c2save_" + savingToSlot, savingJson);
					cr.logexport("Saved state to WebStorage (" + savingJson.length + " bytes)");
					self.lastSaveJson = savingJson;
					this.trigger(cr.system_object.prototype.cnds.OnSaveComplete, null);
					self.lastSaveJson = "";
					if (continuous)
						doContinuousPreviewReload();
				}
				catch (e)
				{
					cr.logexport("Error saving to WebStorage: " + e);
				}
			}
			this.saveToSlot = "";
			this.loadFromSlot = "";
			this.loadFromJson = "";
		}
		if (loadingFromSlot.length)
		{
			if (window.indexedDB && !this.isCocoonJs)
			{
				IndexedDB_ReadSlot(loadingFromSlot, function (result_)
				{
					if (result_)
					{
						self.loadFromJson = result_;
						cr.logexport("Loaded state from IndexedDB storage (" + self.loadFromJson.length + " bytes)");
					}
					else
					{
						self.loadFromJson = localStorage.getItem("__c2save_" + loadingFromSlot) || "";
						cr.logexport("Loaded state from WebStorage (" + self.loadFromJson.length + " bytes)");
					}
					self.suspendDrawing = false;
					if (!self.loadFromJson.length)
						self.trigger(cr.system_object.prototype.cnds.OnLoadFailed, null);
				}, function (e)
				{
					self.loadFromJson = localStorage.getItem("__c2save_" + loadingFromSlot) || "";
					cr.logexport("Loaded state from WebStorage (" + self.loadFromJson.length + " bytes)");
					self.suspendDrawing = false;
					if (!self.loadFromJson.length)
						self.trigger(cr.system_object.prototype.cnds.OnLoadFailed, null);
				});
			}
			else
			{
				this.loadFromJson = localStorage.getItem("__c2save_" + loadingFromSlot) || "";
				cr.logexport("Loaded state from WebStorage (" + this.loadFromJson.length + " bytes)");
				this.suspendDrawing = false;
				if (!self.loadFromJson.length)
					self.trigger(cr.system_object.prototype.cnds.OnLoadFailed, null);
			}
			this.loadFromSlot = "";
			this.saveToSlot = "";
		}
		if (this.loadFromJson.length)
		{
			this.ClearDeathRow();
			this.loadFromJSONString(this.loadFromJson);
			this.lastSaveJson = this.loadFromJson;
			this.trigger(cr.system_object.prototype.cnds.OnLoadComplete, null);
			this.lastSaveJson = "";
			this.loadFromJson = "";
		}
	};
	function CopyExtraObject(extra)
	{
		var p, ret = {};
		for (p in extra)
		{
			if (extra.hasOwnProperty(p))
			{
				if (extra[p] instanceof cr.ObjectSet)
					continue;
				if (typeof extra[p].c2userdata !== "undefined")
					continue;
				ret[p] = extra[p];
			}
		}
		return ret;
	};
	Runtime.prototype.saveToJSONString = function()
	{
		var i, len, j, lenj, type, layout, typeobj, g, c, a, v, p;
		var o = {
			"c2save":				true,
			"version":				1,
			"rt": {
				"time":				this.kahanTime.sum,
				"timescale":		this.timescale,
				"tickcount":		this.tickcount,
				"execcount":		this.execcount,
				"next_uid":			this.next_uid,
				"running_layout":	this.running_layout.sid,
				"start_time_offset": (Date.now() - this.start_time)
			},
			"types": {},
			"layouts": {},
			"events": {
				"groups": {},
				"cnds": {},
				"acts": {},
				"vars": {}
			}
		};
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			type = this.types_by_index[i];
			if (type.is_family || this.typeHasNoSaveBehavior(type))
				continue;
			typeobj = {
				"instances": []
			};
			if (cr.hasAnyOwnProperty(type.extra))
				typeobj["ex"] = CopyExtraObject(type.extra);
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				typeobj["instances"].push(this.saveInstanceToJSON(type.instances[j]));
			}
			o["types"][type.sid.toString()] = typeobj;
		}
		for (i = 0, len = this.layouts_by_index.length; i < len; i++)
		{
			layout = this.layouts_by_index[i];
			o["layouts"][layout.sid.toString()] = layout.saveToJSON();
		}
		var ogroups = o["events"]["groups"];
		for (i = 0, len = this.allGroups.length; i < len; i++)
		{
			g = this.allGroups[i];
			ogroups[g.sid.toString()] = !!this.activeGroups[g.group_name];
		}
		var ocnds = o["events"]["cnds"];
		for (p in this.cndsBySid)
		{
			if (this.cndsBySid.hasOwnProperty(p))
			{
				c = this.cndsBySid[p];
				if (cr.hasAnyOwnProperty(c.extra))
					ocnds[p] = { "ex": CopyExtraObject(c.extra) };
			}
		}
		var oacts = o["events"]["acts"];
		for (p in this.actsBySid)
		{
			if (this.actsBySid.hasOwnProperty(p))
			{
				a = this.actsBySid[p];
				if (cr.hasAnyOwnProperty(a.extra))
					oacts[p] = { "ex": a.extra };
			}
		}
		var ovars = o["events"]["vars"];
		for (p in this.varsBySid)
		{
			if (this.varsBySid.hasOwnProperty(p))
			{
				v = this.varsBySid[p];
				if (!v.is_constant && (!v.parent || v.is_static))
					ovars[p] = v.data;
			}
		}
		o["system"] = this.system.saveToJSON();
		return JSON.stringify(o);
	};
	Runtime.prototype.refreshUidMap = function ()
	{
		var i, len, type, j, lenj, inst;
		this.objectsByUid = {};
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			type = this.types_by_index[i];
			if (type.is_family)
				continue;
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				inst = type.instances[j];
				this.objectsByUid[inst.uid.toString()] = inst;
			}
		}
	};
	Runtime.prototype.loadFromJSONString = function (str)
	{
		var o = JSON.parse(str);
		if (!o["c2save"])
			return;		// probably not a c2 save state
		if (o["version"] > 1)
			return;		// from future version of c2; assume not compatible
		var rt = o["rt"];
		this.kahanTime.reset();
		this.kahanTime.sum = rt["time"];
		this.timescale = rt["timescale"];
		this.tickcount = rt["tickcount"];
		this.execcount = rt["execcount"];
		this.start_time = Date.now() - rt["start_time_offset"];
		var layout_sid = rt["running_layout"];
		if (layout_sid !== this.running_layout.sid)
		{
			var changeToLayout = this.getLayoutBySid(layout_sid);
			if (changeToLayout)
				this.doChangeLayout(changeToLayout);
			else
				return;		// layout that was saved on has gone missing (deleted?)
		}
		this.isLoadingState = true;
		var i, len, j, lenj, k, lenk, p, type, existing_insts, load_insts, inst, binst, layout, layer, g, iid, t;
		var otypes = o["types"];
		for (p in otypes)
		{
			if (otypes.hasOwnProperty(p))
			{
				type = this.getObjectTypeBySid(parseInt(p, 10));
				if (!type || type.is_family || this.typeHasNoSaveBehavior(type))
					continue;
				if (otypes[p]["ex"])
					type.extra = otypes[p]["ex"];
				else
					cr.wipe(type.extra);
				existing_insts = type.instances;
				load_insts = otypes[p]["instances"];
				for (i = 0, len = cr.min(existing_insts.length, load_insts.length); i < len; i++)
				{
					this.loadInstanceFromJSON(existing_insts[i], load_insts[i]);
				}
				for (i = load_insts.length, len = existing_insts.length; i < len; i++)
					this.DestroyInstance(existing_insts[i]);
				for (i = existing_insts.length, len = load_insts.length; i < len; i++)
				{
					layer = null;
					if (type.plugin.is_world)
					{
						layer = this.running_layout.getLayerBySid(load_insts[i]["w"]["l"]);
						if (!layer)
							continue;
					}
					inst = this.createInstanceFromInit(type.default_instance, layer, false, 0, 0, true);
					this.loadInstanceFromJSON(inst, load_insts[i]);
				}
				type.stale_iids = true;
			}
		}
		this.ClearDeathRow();
		this.refreshUidMap();
		var olayouts = o["layouts"];
		for (p in olayouts)
		{
			if (olayouts.hasOwnProperty(p))
			{
				layout = this.getLayoutBySid(parseInt(p, 10));
				if (!layout)
					continue;		// must've gone missing
				layout.loadFromJSON(olayouts[p]);
			}
		}
		var ogroups = o["events"]["groups"];
		for (p in ogroups)
		{
			if (ogroups.hasOwnProperty(p))
			{
				g = this.getGroupBySid(parseInt(p, 10));
				if (g)
					this.activeGroups[g.group_name] = ogroups[p];
			}
		}
		var ocnds = o["events"]["cnds"];
		for (p in ocnds)
		{
			if (ocnds.hasOwnProperty(p) && this.cndsBySid.hasOwnProperty(p))
			{
				this.cndsBySid[p].extra = ocnds[p]["ex"];
			}
		}
		var oacts = o["events"]["acts"];
		for (p in oacts)
		{
			if (oacts.hasOwnProperty(p) && this.actsBySid.hasOwnProperty(p))
			{
				this.actsBySid[p].extra = oacts[p]["ex"];
			}
		}
		var ovars = o["events"]["vars"];
		for (p in ovars)
		{
			if (ovars.hasOwnProperty(p) && this.varsBySid.hasOwnProperty(p))
			{
				this.varsBySid[p].data = ovars[p];
			}
		}
		this.next_uid = rt["next_uid"];
		this.isLoadingState = false;
		this.system.loadFromJSON(o["system"]);
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			type = this.types_by_index[i];
			if (type.is_family)
				continue;
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				inst = type.instances[j];
				if (type.is_contained)
				{
					iid = inst.get_iid();
					inst.siblings.length = 0;
					for (k = 0, lenk = type.container.length; k < lenk; k++)
					{
						t = type.container[k];
						if (type === t)
							continue;
;
						inst.siblings.push(t.instances[iid]);
					}
				}
				if (inst.afterLoad)
					inst.afterLoad();
				if (inst.behavior_insts)
				{
					for (k = 0, lenk = inst.behavior_insts.length; k < lenk; k++)
					{
						binst = inst.behavior_insts[k];
						if (binst.afterLoad)
							binst.afterLoad();
					}
				}
			}
		}
		this.redraw = true;
	};
	Runtime.prototype.saveInstanceToJSON = function(inst)
	{
		var i, len, world, behinst, et;
		var type = inst.type;
		var plugin = type.plugin;
		var o = {
			"uid": inst.uid
		};
		if (cr.hasAnyOwnProperty(inst.extra))
			o["ex"] = CopyExtraObject(inst.extra);
		if (inst.instance_vars && inst.instance_vars.length)
		{
			o["ivs"] = {};
			for (i = 0, len = inst.instance_vars.length; i < len; i++)
			{
				o["ivs"][inst.type.instvar_sids[i].toString()] = inst.instance_vars[i];
			}
		}
		if (plugin.is_world)
		{
			world = {
				"x": inst.x,
				"y": inst.y,
				"w": inst.width,
				"h": inst.height,
				"l": inst.layer.sid,
				"zi": inst.get_zindex()
			};
			if (inst.angle !== 0)
				world["a"] = inst.angle;
			if (inst.opacity !== 1)
				world["o"] = inst.opacity;
			if (inst.hotspotX !== 0.5)
				world["hX"] = inst.hotspotX;
			if (inst.hotspotY !== 0.5)
				world["hY"] = inst.hotspotY;
			if (inst.blend_mode !== 0)
				world["bm"] = inst.blend_mode;
			if (!inst.visible)
				world["v"] = inst.visible;
			if (!inst.collisionsEnabled)
				world["ce"] = inst.collisionsEnabled;
			if (inst.my_timescale !== -1)
				world["mts"] = inst.my_timescale;
			if (type.effect_types.length)
			{
				world["fx"] = [];
				for (i = 0, len = type.effect_types.length; i < len; i++)
				{
					et = type.effect_types[i];
					world["fx"].push({"name": et.name,
									  "active": inst.active_effect_flags[et.index],
									  "params": inst.effect_params[et.index] });
				}
			}
			o["w"] = world;
		}
		if (inst.behavior_insts && inst.behavior_insts.length)
		{
			o["behs"] = {};
			for (i = 0, len = inst.behavior_insts.length; i < len; i++)
			{
				behinst = inst.behavior_insts[i];
				if (behinst.saveToJSON)
					o["behs"][behinst.type.sid.toString()] = behinst.saveToJSON();
			}
		}
		if (inst.saveToJSON)
			o["data"] = inst.saveToJSON();
		return o;
	};
	Runtime.prototype.getInstanceVarIndexBySid = function (type, sid_)
	{
		var i, len;
		for (i = 0, len = type.instvar_sids.length; i < len; i++)
		{
			if (type.instvar_sids[i] === sid_)
				return i;
		}
		return -1;
	};
	Runtime.prototype.getBehaviorIndexBySid = function (inst, sid_)
	{
		var i, len;
		for (i = 0, len = inst.behavior_insts.length; i < len; i++)
		{
			if (inst.behavior_insts[i].type.sid === sid_)
				return i;
		}
		return -1;
	};
	Runtime.prototype.loadInstanceFromJSON = function(inst, o)
	{
		var p, i, len, iv, oivs, world, fxindex, obehs, behindex;
		var oldlayer;
		var type = inst.type;
		var plugin = type.plugin;
		inst.uid = o["uid"];
		if (o["ex"])
			inst.extra = o["ex"];
		else
			cr.wipe(inst.extra);
		oivs = o["ivs"];
		if (oivs)
		{
			for (p in oivs)
			{
				if (oivs.hasOwnProperty(p))
				{
					iv = this.getInstanceVarIndexBySid(type, parseInt(p, 10));
					if (iv < 0 || iv >= inst.instance_vars.length)
						continue;		// must've gone missing
					inst.instance_vars[iv] = oivs[p];
				}
			}
		}
		if (plugin.is_world)
		{
			world = o["w"];
			if (inst.layer.sid !== world["l"])
			{
				oldlayer = inst.layer;
				inst.layer = this.running_layout.getLayerBySid(world["l"]);
				if (inst.layer)
				{
					inst.layer.instances.push(inst);
					inst.layer.zindices_stale = true;
					cr.arrayFindRemove(oldlayer.instances, inst);
					oldlayer.zindices_stale = true;
				}
				else
				{
					inst.layer = oldlayer;
					this.DestroyInstance(inst);
				}
			}
			inst.x = world["x"];
			inst.y = world["y"];
			inst.width = world["w"];
			inst.height = world["h"];
			inst.zindex = world["zi"];
			inst.angle = world.hasOwnProperty("a") ? world["a"] : 0;
			inst.opacity = world.hasOwnProperty("o") ? world["o"] : 1;
			inst.hotspotX = world.hasOwnProperty("hX") ? world["hX"] : 0.5;
			inst.hotspotY = world.hasOwnProperty("hY") ? world["hY"] : 0.5;
			inst.visible = world.hasOwnProperty("v") ? world["v"] : true;
			inst.collisionsEnabled = world.hasOwnProperty("ce") ? world["ce"] : true;
			inst.my_timescale = world.hasOwnProperty("mts") ? world["mts"] : -1;
			inst.blend_mode = world.hasOwnProperty("bm") ? world["bm"] : 0;;
			inst.compositeOp = cr.effectToCompositeOp(inst.blend_mode);
			if (this.gl)
				cr.setGLBlend(inst, inst.blend_mode, this.gl);
			inst.set_bbox_changed();
			if (world.hasOwnProperty("fx"))
			{
				for (i = 0, len = world["fx"].length; i < len; i++)
				{
					fxindex = type.getEffectIndexByName(world["fx"][i]["name"]);
					if (fxindex < 0)
						continue;		// must've gone missing
					inst.active_effect_flags[fxindex] = world["fx"][i]["active"];
					inst.effect_params[fxindex] = world["fx"][i]["params"];
				}
			}
			inst.updateActiveEffects();
		}
		obehs = o["behs"];
		if (obehs)
		{
			for (p in obehs)
			{
				if (obehs.hasOwnProperty(p))
				{
					behindex = this.getBehaviorIndexBySid(inst, parseInt(p, 10));
					if (behindex < 0)
						continue;		// must've gone missing
					inst.behavior_insts[behindex].loadFromJSON(obehs[p]);
				}
			}
		}
		if (o["data"])
			inst.loadFromJSON(o["data"]);
	};
	cr.runtime = Runtime;
	cr.createRuntime = function (canvasid)
	{
		return new Runtime(document.getElementById(canvasid));
	};
	cr.createDCRuntime = function (w, h)
	{
		return new Runtime({ "dc": true, "width": w, "height": h });
	};
	window["cr_createRuntime"] = cr.createRuntime;
	window["cr_createDCRuntime"] = cr.createDCRuntime;
	window["createCocoonJSRuntime"] = function ()
	{
		window["c2cocoonjs"] = true;
		var canvas = document.createElement("screencanvas") || document.createElement("canvas");
		document.body.appendChild(canvas);
		var rt = new Runtime(canvas);
		window["c2runtime"] = rt;
		window.addEventListener("orientationchange", function () {
			window["c2runtime"]["setSize"](window.innerWidth, window.innerHeight);
		});
		window["c2runtime"]["setSize"](window.innerWidth, window.innerHeight);
		return rt;
	};
}());
window["cr_getC2Runtime"] = function()
{
	var canvas = document.getElementById("c2canvas");
	if (canvas)
		return canvas["c2runtime"];
	else if (window["c2runtime"])
		return window["c2runtime"];
	else
		return null;
}
window["cr_sizeCanvas"] = function(w, h)
{
	if (w === 0 || h === 0)
		return;
	var runtime = window["cr_getC2Runtime"]();
	if (runtime)
		runtime["setSize"](w, h);
}
window["cr_setSuspended"] = function(s)
{
	var runtime = window["cr_getC2Runtime"]();
	if (runtime)
		runtime["setSuspended"](s);
}
;
(function()
{
	function Layout(runtime, m)
	{
		this.runtime = runtime;
		this.event_sheet = null;
		this.scrollX = (this.runtime.original_width / 2);
		this.scrollY = (this.runtime.original_height / 2);
		this.scale = 1.0;
		this.angle = 0;
		this.first_visit = true;
		this.name = m[0];
		this.width = m[1];
		this.height = m[2];
		this.unbounded_scrolling = m[3];
		this.sheetname = m[4];
		this.sid = m[5];
		var lm = m[6];
		var i, len;
		this.layers = [];
		this.initial_types = [];
		for (i = 0, len = lm.length; i < len; i++)
		{
			var layer = new cr.layer(this, lm[i]);
			layer.number = i;
			cr.seal(layer);
			this.layers.push(layer);
		}
		var im = m[7];
		this.initial_nonworld = [];
		for (i = 0, len = im.length; i < len; i++)
		{
			var inst = im[i];
			var type = this.runtime.types_by_index[inst[1]];
;
			if (!type.default_instance)
				type.default_instance = inst;
			this.initial_nonworld.push(inst);
			if (this.initial_types.indexOf(type) === -1)
				this.initial_types.push(type);
		}
		this.effect_types = [];
		this.active_effect_types = [];
		this.effect_params = [];
		for (i = 0, len = m[8].length; i < len; i++)
		{
			this.effect_types.push({
				id: m[8][i][0],
				name: m[8][i][1],
				shaderindex: -1,
				active: true,
				index: i
			});
			this.effect_params.push(m[8][i][2].slice(0));
		}
		this.updateActiveEffects();
		this.rcTex = new cr.rect(0, 0, 1, 1);
		this.rcTex2 = new cr.rect(0, 0, 1, 1);
		this.persist_data = {};
	};
	Layout.prototype.saveObjectToPersist = function (inst)
	{
		var sidStr = inst.type.sid.toString();
		if (!this.persist_data.hasOwnProperty(sidStr))
			this.persist_data[sidStr] = [];
		var type_persist = this.persist_data[sidStr];
		type_persist.push(this.runtime.saveInstanceToJSON(inst));
	};
	Layout.prototype.hasOpaqueBottomLayer = function ()
	{
		var layer = this.layers[0];
		return !layer.transparent && layer.opacity === 1.0 && !layer.forceOwnTexture && layer.visible;
	};
	Layout.prototype.updateActiveEffects = function ()
	{
		this.active_effect_types.length = 0;
		var i, len, et;
		for (i = 0, len = this.effect_types.length; i < len; i++)
		{
			et = this.effect_types[i];
			if (et.active)
				this.active_effect_types.push(et);
		}
	};
	Layout.prototype.getEffectByName = function (name_)
	{
		var i, len, et;
		for (i = 0, len = this.effect_types.length; i < len; i++)
		{
			et = this.effect_types[i];
			if (et.name === name_)
				return et;
		}
		return null;
	};
	var created_instances = [];
	Layout.prototype.startRunning = function ()
	{
		if (this.sheetname)
		{
			this.event_sheet = this.runtime.eventsheets[this.sheetname];
;
		}
		this.runtime.running_layout = this;
		this.scrollX = (this.runtime.original_width / 2);
		this.scrollY = (this.runtime.original_height / 2);
		var i, k, len, lenk, type, type_instances, inst, iid, t, s, p, q, type_data, layer;
		for (i = 0, len = this.runtime.types_by_index.length; i < len; i++)
		{
			type = this.runtime.types_by_index[i];
			if (type.is_family)
				continue;		// instances are only transferred for their real type
			type_instances = type.instances;
			for (k = 0, lenk = type_instances.length; k < lenk; k++)
			{
				inst = type_instances[k];
				if (inst.layer)
				{
					var num = inst.layer.number;
					if (num >= this.layers.length)
						num = this.layers.length - 1;
					inst.layer = this.layers[num];
					inst.layer.instances.push(inst);
					inst.layer.zindices_stale = true;
				}
			}
		}
		var layer;
		created_instances.length = 0;
		this.boundScrolling();
		for (i = 0, len = this.layers.length; i < len; i++)
		{
			layer = this.layers[i];
			layer.createInitialInstances();		// fills created_instances
			layer.disableAngle = true;
			var px = layer.canvasToLayer(0, 0, true);
			var py = layer.canvasToLayer(0, 0, false);
			layer.disableAngle = false;
			if (this.runtime.pixel_rounding)
			{
				px = (px + 0.5) | 0;
				py = (py + 0.5) | 0;
			}
			layer.rotateViewport(px, py, null);
		}
		var uids_changed = false;
		if (!this.first_visit)
		{
			for (p in this.persist_data)
			{
				if (this.persist_data.hasOwnProperty(p))
				{
					type = this.runtime.getObjectTypeBySid(parseInt(p, 10));
					if (!type || type.is_family || !this.runtime.typeHasPersistBehavior(type))
						continue;
					type_data = this.persist_data[p];
					for (i = 0, len = type_data.length; i < len; i++)
					{
						layer = null;
						if (type.plugin.is_world)
						{
							layer = this.getLayerBySid(type_data[i]["w"]["l"]);
							if (!layer)
								continue;
						}
						inst = this.runtime.createInstanceFromInit(type.default_instance, layer, false, 0, 0, true);
						this.runtime.loadInstanceFromJSON(inst, type_data[i]);
						uids_changed = true;
						created_instances.push(inst);
					}
					type_data.length = 0;
				}
			}
			for (i = 0, len = this.layers.length; i < len; i++)
			{
				this.layers[i].instances.sort(sortInstanceByZIndex);
				this.layers[i].zindices_stale = true;		// in case of duplicates/holes
			}
		}
		if (uids_changed)
		{
			this.runtime.ClearDeathRow();
			this.runtime.refreshUidMap();
		}
		for (i = 0; i < created_instances.length; i++)
		{
			inst = created_instances[i];
			if (!inst.type.is_contained)
				continue;
			iid = inst.get_iid();
			for (k = 0, lenk = inst.type.container.length; k < lenk; k++)
			{
				t = inst.type.container[k];
				if (inst.type === t)
					continue;
				if (t.instances.length > iid)
					inst.siblings.push(t.instances[iid]);
				else
				{
					if (!t.default_instance)
					{
					}
					else
					{
						s = this.runtime.createInstanceFromInit(t.default_instance, inst.layer, true, inst.x, inst.y, true);
						this.runtime.ClearDeathRow();
						t.updateIIDs();
						inst.siblings.push(s);
						created_instances.push(s);		// come back around and link up its own instances too
					}
				}
			}
		}
		for (i = 0, len = this.initial_nonworld.length; i < len; i++)
		{
			inst = this.runtime.createInstanceFromInit(this.initial_nonworld[i], null, true);
;
		}
		this.runtime.changelayout = null;
		this.runtime.ClearDeathRow();
		if (this.runtime.ctx && !this.runtime.isDomFree)
		{
			for (i = 0, len = this.runtime.types_by_index.length; i < len; i++)
			{
				t = this.runtime.types_by_index[i];
				if (t.is_family || !t.instances.length || !t.preloadCanvas2D)
					continue;
				t.preloadCanvas2D(this.runtime.ctx);
			}
		}
		/*
		if (this.runtime.glwrap)
		{
			console.log("Estimated VRAM at layout start: " + this.runtime.glwrap.textureCount() + " textures, approx. " + Math.round(this.runtime.glwrap.estimateVRAM() / 1024) + " kb");
		}
		*/
		for (i = 0, len = created_instances.length; i < len; i++)
		{
			inst = created_instances[i];
			this.runtime.trigger(Object.getPrototypeOf(inst.type.plugin).cnds.OnCreated, inst);
		}
		created_instances.length = 0;
		this.runtime.trigger(cr.system_object.prototype.cnds.OnLayoutStart, null);
		this.first_visit = false;
	};
	Layout.prototype.createGlobalNonWorlds = function ()
	{
		var i, k, len, initial_inst, inst, type;
		for (i = 0, k = 0, len = this.initial_nonworld.length; i < len; i++)
		{
			initial_inst = this.initial_nonworld[i];
			type = this.runtime.types_by_index[initial_inst[1]];
			if (type.global)
				inst = this.runtime.createInstanceFromInit(initial_inst, null, true);
			else
			{
				this.initial_nonworld[k] = initial_inst;
				k++;
			}
		}
		this.initial_nonworld.length = k;
	};
	Layout.prototype.stopRunning = function ()
	{
;
		/*
		if (this.runtime.glwrap)
		{
			console.log("Estimated VRAM at layout end: " + this.runtime.glwrap.textureCount() + " textures, approx. " + Math.round(this.runtime.glwrap.estimateVRAM() / 1024) + " kb");
		}
		*/
		this.runtime.trigger(cr.system_object.prototype.cnds.OnLayoutEnd, null);
		this.runtime.system.waits.length = 0;
		var i, leni, j, lenj;
		var layer_instances, inst, type;
		for (i = 0, leni = this.layers.length; i < leni; i++)
		{
			layer_instances = this.layers[i].instances;
			for (j = 0, lenj = layer_instances.length; j < lenj; j++)
			{
				inst = layer_instances[j];
				if (!inst.type.global)
				{
					if (this.runtime.typeHasPersistBehavior(inst.type))
						this.saveObjectToPersist(inst);
					this.runtime.DestroyInstance(inst);
				}
			}
			this.runtime.ClearDeathRow();
			layer_instances.length = 0;
			this.layers[i].zindices_stale = true;
		}
		for (i = 0, leni = this.runtime.types_by_index.length; i < leni; i++)
		{
			type = this.runtime.types_by_index[i];
			if (type.global || type.plugin.is_world || type.plugin.singleglobal || type.is_family)
				continue;
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
				this.runtime.DestroyInstance(type.instances[j]);
			this.runtime.ClearDeathRow();
		}
	};
	Layout.prototype.draw = function (ctx)
	{
		ctx.globalAlpha = 1;
		ctx.globalCompositeOperation = "source-over";
		if (this.runtime.clearBackground && !this.hasOpaqueBottomLayer())
			ctx.clearRect(0, 0, this.runtime.width, this.runtime.height);
		var i, len, l;
		for (i = 0, len = this.layers.length; i < len; i++)
		{
			l = this.layers[i];
			if (l.visible && l.opacity > 0 && l.blend_mode !== 11)
				l.draw(ctx);
		}
	};
	Layout.prototype.drawGL = function (glw)
	{
		var render_to_texture = (this.active_effect_types.length > 0 || this.runtime.uses_background_blending);
		if (render_to_texture)
		{
			if (!this.runtime.layout_tex)
			{
				this.runtime.layout_tex = glw.createEmptyTexture(this.runtime.width, this.runtime.height, this.runtime.linearSampling);
			}
			if (this.runtime.layout_tex.c2width !== this.runtime.width || this.runtime.layout_tex.c2height !== this.runtime.height)
			{
				glw.deleteTexture(this.runtime.layout_tex);
				this.runtime.layout_tex = glw.createEmptyTexture(this.runtime.width, this.runtime.height, this.runtime.linearSampling);
			}
			glw.setRenderingToTexture(this.runtime.layout_tex);
		}
		if (this.runtime.clearBackground && !this.hasOpaqueBottomLayer())
			glw.clear(0, 0, 0, 0);
		var i, len;
		for (i = 0, len = this.layers.length; i < len; i++)
		{
			if (this.layers[i].visible && this.layers[i].opacity > 0)
				this.layers[i].drawGL(glw);
		}
		if (render_to_texture)
		{
			if (this.active_effect_types.length <= 1)
			{
				if (this.active_effect_types.length === 1)
				{
					var etindex = this.active_effect_types[0].index;
					glw.switchProgram(this.active_effect_types[0].shaderindex);
					glw.setProgramParameters(null,								// backTex
											 1.0 / this.runtime.width,			// pixelWidth
											 1.0 / this.runtime.height,			// pixelHeight
											 0.0, 0.0,							// destStart
											 1.0, 1.0,							// destEnd
											 this.scale,						// layerScale
											 this.effect_params[etindex]);		// fx parameters
					if (glw.programIsAnimated(this.active_effect_types[0].shaderindex))
						this.runtime.redraw = true;
				}
				else
					glw.switchProgram(0);
				glw.setRenderingToTexture(null);				// to backbuffer
				glw.setOpacity(1);
				glw.setTexture(this.runtime.layout_tex);
				glw.setAlphaBlend();
				glw.resetModelView();
				glw.updateModelView();
				var halfw = this.runtime.width / 2;
				var halfh = this.runtime.height / 2;
				glw.quad(-halfw, halfh, halfw, halfh, halfw, -halfh, -halfw, -halfh);
				glw.setTexture(null);
			}
			else
			{
				this.renderEffectChain(glw, null, null, null);
			}
		}
	};
	Layout.prototype.getRenderTarget = function()
	{
		return (this.active_effect_types.length > 0 || this.runtime.uses_background_blending) ? this.runtime.layout_tex : null;
	};
	Layout.prototype.getMinLayerScale = function ()
	{
		var m = this.layers[0].getScale();
		var i, len, l;
		for (i = 1, len = this.layers.length; i < len; i++)
		{
			l = this.layers[i];
			if (l.parallaxX === 0 && l.parallaxY === 0)
				continue;
			if (l.getScale() < m)
				m = l.getScale();
		}
		return m;
	};
	Layout.prototype.scrollToX = function (x)
	{
		if (!this.unbounded_scrolling)
		{
			var widthBoundary = (this.runtime.width * (1 / this.getMinLayerScale()) / 2);
			if (x > this.width - widthBoundary)
				x = this.width - widthBoundary;
			if (x < widthBoundary)
				x = widthBoundary;
		}
		if (this.scrollX !== x)
		{
			this.scrollX = x;
			this.runtime.redraw = true;
		}
	};
	Layout.prototype.scrollToY = function (y)
	{
		if (!this.unbounded_scrolling)
		{
			var heightBoundary = (this.runtime.height * (1 / this.getMinLayerScale()) / 2);
			if (y > this.height - heightBoundary)
				y = this.height - heightBoundary;
			if (y < heightBoundary)
				y = heightBoundary;
		}
		if (this.scrollY !== y)
		{
			this.scrollY = y;
			this.runtime.redraw = true;
		}
	};
	Layout.prototype.boundScrolling = function ()
	{
		this.scrollToX(this.scrollX);
		this.scrollToY(this.scrollY);
	};
	Layout.prototype.renderEffectChain = function (glw, layer, inst, rendertarget)
	{
		var active_effect_types = inst ?
							inst.active_effect_types :
							layer ?
								layer.active_effect_types :
								this.active_effect_types;
		var layerScale = inst ? inst.layer.getScale() :
							layer ? layer.getScale() : 1;
		var fx_tex = this.runtime.fx_tex;
		var i, len, last, temp, fx_index = 0, other_fx_index = 1;
		var y, h;
		var windowWidth = this.runtime.width;
		var windowHeight = this.runtime.height;
		var halfw = windowWidth / 2;
		var halfh = windowHeight / 2;
		var rcTex = layer ? layer.rcTex : this.rcTex;
		var rcTex2 = layer ? layer.rcTex2 : this.rcTex2;
		var screenleft = 0, clearleft = 0;
		var screentop = 0, cleartop = 0;
		var screenright = windowWidth, clearright = windowWidth;
		var screenbottom = windowHeight, clearbottom = windowHeight;
		var boxExtendHorizontal = 0;
		var boxExtendVertical = 0;
		var inst_layer_angle = inst ? inst.layer.getAngle() : 0;
		if (inst)
		{
			for (i = 0, len = active_effect_types.length; i < len; i++)
			{
				boxExtendHorizontal += glw.getProgramBoxExtendHorizontal(active_effect_types[i].shaderindex);
				boxExtendVertical += glw.getProgramBoxExtendVertical(active_effect_types[i].shaderindex);
			}
			var bbox = inst.bbox;
			screenleft = layer.layerToCanvas(bbox.left, bbox.top, true);
			screentop = layer.layerToCanvas(bbox.left, bbox.top, false);
			screenright = layer.layerToCanvas(bbox.right, bbox.bottom, true);
			screenbottom = layer.layerToCanvas(bbox.right, bbox.bottom, false);
			if (inst_layer_angle !== 0)
			{
				var screentrx = layer.layerToCanvas(bbox.right, bbox.top, true);
				var screentry = layer.layerToCanvas(bbox.right, bbox.top, false);
				var screenblx = layer.layerToCanvas(bbox.left, bbox.bottom, true);
				var screenbly = layer.layerToCanvas(bbox.left, bbox.bottom, false);
				temp = Math.min(screenleft, screenright, screentrx, screenblx);
				screenright = Math.max(screenleft, screenright, screentrx, screenblx);
				screenleft = temp;
				temp = Math.min(screentop, screenbottom, screentry, screenbly);
				screenbottom = Math.max(screentop, screenbottom, screentry, screenbly);
				screentop = temp;
			}
			screenleft -= boxExtendHorizontal;
			screentop -= boxExtendVertical;
			screenright += boxExtendHorizontal;
			screenbottom += boxExtendVertical;
			rcTex2.left = screenleft / windowWidth;
			rcTex2.top = 1 - screentop / windowHeight;
			rcTex2.right = screenright / windowWidth;
			rcTex2.bottom = 1 - screenbottom / windowHeight;
			clearleft = screenleft = Math.floor(screenleft);
			cleartop = screentop = Math.floor(screentop);
			clearright = screenright = Math.ceil(screenright);
			clearbottom = screenbottom = Math.ceil(screenbottom);
			clearleft -= boxExtendHorizontal;
			cleartop -= boxExtendVertical;
			clearright += boxExtendHorizontal;
			clearbottom += boxExtendVertical;
			if (screenleft < 0)					screenleft = 0;
			if (screentop < 0)					screentop = 0;
			if (screenright > windowWidth)		screenright = windowWidth;
			if (screenbottom > windowHeight)	screenbottom = windowHeight;
			if (clearleft < 0)					clearleft = 0;
			if (cleartop < 0)					cleartop = 0;
			if (clearright > windowWidth)		clearright = windowWidth;
			if (clearbottom > windowHeight)		clearbottom = windowHeight;
			rcTex.left = screenleft / windowWidth;
			rcTex.top = 1 - screentop / windowHeight;
			rcTex.right = screenright / windowWidth;
			rcTex.bottom = 1 - screenbottom / windowHeight;
		}
		else
		{
			rcTex.left = rcTex2.left = 0;
			rcTex.top = rcTex2.top = 0;
			rcTex.right = rcTex2.right = 1;
			rcTex.bottom = rcTex2.bottom = 1;
		}
		var pre_draw = (inst && (((inst.angle || inst_layer_angle) && glw.programUsesDest(active_effect_types[0].shaderindex)) || boxExtendHorizontal !== 0 || boxExtendVertical !== 0 || inst.opacity !== 1 || inst.type.plugin.must_predraw)) || (layer && !inst && layer.opacity !== 1);
		glw.setAlphaBlend();
		if (pre_draw)
		{
			if (!fx_tex[fx_index])
			{
				fx_tex[fx_index] = glw.createEmptyTexture(windowWidth, windowHeight, this.runtime.linearSampling);
			}
			if (fx_tex[fx_index].c2width !== windowWidth || fx_tex[fx_index].c2height !== windowHeight)
			{
				glw.deleteTexture(fx_tex[fx_index]);
				fx_tex[fx_index] = glw.createEmptyTexture(windowWidth, windowHeight, this.runtime.linearSampling);
			}
			glw.switchProgram(0);
			glw.setRenderingToTexture(fx_tex[fx_index]);
			h = clearbottom - cleartop;
			y = (windowHeight - cleartop) - h;
			glw.clearRect(clearleft, y, clearright - clearleft, h);
			if (inst)
			{
				inst.drawGL(glw);
			}
			else
			{
				glw.setTexture(this.runtime.layer_tex);
				glw.setOpacity(layer.opacity);
				glw.resetModelView();
				glw.translate(-halfw, -halfh);
				glw.updateModelView();
				glw.quadTex(screenleft, screenbottom, screenright, screenbottom, screenright, screentop, screenleft, screentop, rcTex);
			}
			rcTex2.left = rcTex2.top = 0;
			rcTex2.right = rcTex2.bottom = 1;
			if (inst)
			{
				temp = rcTex.top;
				rcTex.top = rcTex.bottom;
				rcTex.bottom = temp;
			}
			fx_index = 1;
			other_fx_index = 0;
		}
		glw.setOpacity(1);
		var last = active_effect_types.length - 1;
		var post_draw = glw.programUsesCrossSampling(active_effect_types[last].shaderindex);
		var etindex = 0;
		for (i = 0, len = active_effect_types.length; i < len; i++)
		{
			if (!fx_tex[fx_index])
			{
				fx_tex[fx_index] = glw.createEmptyTexture(windowWidth, windowHeight, this.runtime.linearSampling);
			}
			if (fx_tex[fx_index].c2width !== windowWidth || fx_tex[fx_index].c2height !== windowHeight)
			{
				glw.deleteTexture(fx_tex[fx_index]);
				fx_tex[fx_index] = glw.createEmptyTexture(windowWidth, windowHeight, this.runtime.linearSampling);
			}
			glw.switchProgram(active_effect_types[i].shaderindex);
			etindex = active_effect_types[i].index;
			if (glw.programIsAnimated(active_effect_types[i].shaderindex))
				this.runtime.redraw = true;
			if (i == 0 && !pre_draw)
			{
				glw.setRenderingToTexture(fx_tex[fx_index]);
				h = clearbottom - cleartop;
				y = (windowHeight - cleartop) - h;
				glw.clearRect(clearleft, y, clearright - clearleft, h);
				if (inst)
				{
					glw.setProgramParameters(rendertarget,					// backTex
											 1.0 / inst.width,				// pixelWidth
											 1.0 / inst.height,				// pixelHeight
											 rcTex2.left, rcTex2.top,		// destStart
											 rcTex2.right, rcTex2.bottom,	// destEnd
											 layerScale,
											 inst.effect_params[etindex]);	// fx params
					inst.drawGL(glw);
				}
				else
				{
					glw.setProgramParameters(rendertarget,					// backTex
											 1.0 / windowWidth,				// pixelWidth
											 1.0 / windowHeight,			// pixelHeight
											 0.0, 0.0,						// destStart
											 1.0, 1.0,						// destEnd
											 layerScale,
											 layer ?						// fx params
												layer.effect_params[etindex] :
												this.effect_params[etindex]);
					glw.setTexture(layer ? this.runtime.layer_tex : this.runtime.layout_tex);
					glw.resetModelView();
					glw.translate(-halfw, -halfh);
					glw.updateModelView();
					glw.quadTex(screenleft, screenbottom, screenright, screenbottom, screenright, screentop, screenleft, screentop, rcTex);
				}
				rcTex2.left = rcTex2.top = 0;
				rcTex2.right = rcTex2.bottom = 1;
				if (inst && !post_draw)
				{
					temp = screenbottom;
					screenbottom = screentop;
					screentop = temp;
				}
			}
			else
			{
				glw.setProgramParameters(rendertarget,						// backTex
										 1.0 / windowWidth,					// pixelWidth
										 1.0 / windowHeight,				// pixelHeight
										 rcTex2.left, rcTex2.top,			// destStart
										 rcTex2.right, rcTex2.bottom,		// destEnd
										 layerScale,
										 inst ?								// fx params
											inst.effect_params[etindex] :
											layer ?
												layer.effect_params[etindex] :
												this.effect_params[etindex]);
				if (i === last && !post_draw)
				{
					if (inst)
						glw.setBlend(inst.srcBlend, inst.destBlend);
					else if (layer)
						glw.setBlend(layer.srcBlend, layer.destBlend);
					glw.setRenderingToTexture(rendertarget);
				}
				else
				{
					glw.setRenderingToTexture(fx_tex[fx_index]);
					h = clearbottom - cleartop;
					y = (windowHeight - cleartop) - h;
					glw.clearRect(clearleft, y, clearright - clearleft, h);
				}
				glw.setTexture(fx_tex[other_fx_index]);
				glw.resetModelView();
				glw.translate(-halfw, -halfh);
				glw.updateModelView();
				glw.quadTex(screenleft, screenbottom, screenright, screenbottom, screenright, screentop, screenleft, screentop, rcTex);
				if (i === last && !post_draw)
					glw.setTexture(null);
			}
			fx_index = (fx_index === 0 ? 1 : 0);
			other_fx_index = (fx_index === 0 ? 1 : 0);		// will be opposite to fx_index since it was just assigned
		}
		if (post_draw)
		{
			glw.switchProgram(0);
			if (inst)
				glw.setBlend(inst.srcBlend, inst.destBlend);
			else if (layer)
				glw.setBlend(layer.srcBlend, layer.destBlend);
			glw.setRenderingToTexture(rendertarget);
			glw.setTexture(fx_tex[other_fx_index]);
			glw.resetModelView();
			glw.translate(-halfw, -halfh);
			glw.updateModelView();
			if (inst && active_effect_types.length === 1 && !pre_draw)
				glw.quadTex(screenleft, screentop, screenright, screentop, screenright, screenbottom, screenleft, screenbottom, rcTex);
			else
				glw.quadTex(screenleft, screenbottom, screenright, screenbottom, screenright, screentop, screenleft, screentop, rcTex);
			glw.setTexture(null);
		}
	};
	Layout.prototype.getLayerBySid = function (sid_)
	{
		var i, len;
		for (i = 0, len = this.layers.length; i < len; i++)
		{
			if (this.layers[i].sid === sid_)
				return this.layers[i];
		}
		return null;
	};
	Layout.prototype.saveToJSON = function ()
	{
		var i, len, layer, et;
		var o = {
			"sx": this.scrollX,
			"sy": this.scrollY,
			"s": this.scale,
			"a": this.angle,
			"w": this.width,
			"h": this.height,
			"fv": this.first_visit,			// added r127
			"persist": this.persist_data,
			"fx": [],
			"layers": {}
		};
		for (i = 0, len = this.effect_types.length; i < len; i++)
		{
			et = this.effect_types[i];
			o["fx"].push({"name": et.name, "active": et.active, "params": this.effect_params[et.index] });
		}
		for (i = 0, len = this.layers.length; i < len; i++)
		{
			layer = this.layers[i];
			o["layers"][layer.sid.toString()] = layer.saveToJSON();
		}
		return o;
	};
	Layout.prototype.loadFromJSON = function (o)
	{
		var i, len, fx, p, layer;
		this.scrollX = o["sx"];
		this.scrollY = o["sy"];
		this.scale = o["s"];
		this.angle = o["a"];
		this.width = o["w"];
		this.height = o["h"];
		this.persist_data = o["persist"];
		if (typeof o["fv"] !== "undefined")
			this.first_visit = o["fv"];
		var ofx = o["fx"];
		for (i = 0, len = ofx.length; i < len; i++)
		{
			fx = this.getEffectByName(ofx[i]["name"]);
			if (!fx)
				continue;		// must've gone missing
			fx.active = ofx[i]["active"];
			this.effect_params[fx.index] = ofx[i]["params"];
		}
		this.updateActiveEffects();
		var olayers = o["layers"];
		for (p in olayers)
		{
			if (olayers.hasOwnProperty(p))
			{
				layer = this.getLayerBySid(parseInt(p, 10));
				if (!layer)
					continue;		// must've gone missing
				layer.loadFromJSON(olayers[p]);
			}
		}
	};
	cr.layout = Layout;
	function Layer(layout, m)
	{
		this.layout = layout;
		this.runtime = layout.runtime;
		this.instances = [];        // running instances
		this.scale = 1.0;
		this.angle = 0;
		this.disableAngle = false;
		this.tmprect = new cr.rect(0, 0, 0, 0);
		this.tmpquad = new cr.quad();
		this.viewLeft = 0;
		this.viewRight = 0;
		this.viewTop = 0;
		this.viewBottom = 0;
		this.zindices_stale = false;
		this.name = m[0];
		this.index = m[1];
		this.sid = m[2];
		this.visible = m[3];		// initially visible
		this.background_color = m[4];
		this.transparent = m[5];
		this.parallaxX = m[6];
		this.parallaxY = m[7];
		this.opacity = m[8];
		this.forceOwnTexture = m[9];
		this.zoomRate = m[10];
		this.blend_mode = m[11];
		this.effect_fallback = m[12];
		this.compositeOp = "source-over";
		this.srcBlend = 0;
		this.destBlend = 0;
		this.render_offscreen = false;
		var im = m[13];
		var i, len;
		this.initial_instances = [];
		for (i = 0, len = im.length; i < len; i++)
		{
			var inst = im[i];
			var type = this.runtime.types_by_index[inst[1]];
;
			if (!type.default_instance)
				type.default_instance = inst;
			this.initial_instances.push(inst);
			if (this.layout.initial_types.indexOf(type) === -1)
				this.layout.initial_types.push(type);
		}
		this.effect_types = [];
		this.active_effect_types = [];
		this.effect_params = [];
		for (i = 0, len = m[14].length; i < len; i++)
		{
			this.effect_types.push({
				id: m[14][i][0],
				name: m[14][i][1],
				shaderindex: -1,
				active: true,
				index: i
			});
			this.effect_params.push(m[14][i][2].slice(0));
		}
		this.updateActiveEffects();
		this.rcTex = new cr.rect(0, 0, 1, 1);
		this.rcTex2 = new cr.rect(0, 0, 1, 1);
	};
	Layer.prototype.updateActiveEffects = function ()
	{
		this.active_effect_types.length = 0;
		var i, len, et;
		for (i = 0, len = this.effect_types.length; i < len; i++)
		{
			et = this.effect_types[i];
			if (et.active)
				this.active_effect_types.push(et);
		}
	};
	Layer.prototype.getEffectByName = function (name_)
	{
		var i, len, et;
		for (i = 0, len = this.effect_types.length; i < len; i++)
		{
			et = this.effect_types[i];
			if (et.name === name_)
				return et;
		}
		return null;
	};
	Layer.prototype.createInitialInstances = function ()
	{
		var i, k, len, inst, initial_inst, type, keep, hasPersistBehavior;
		for (i = 0, k = 0, len = this.initial_instances.length; i < len; i++)
		{
			initial_inst = this.initial_instances[i];
			type = this.runtime.types_by_index[initial_inst[1]];
;
			hasPersistBehavior = this.runtime.typeHasPersistBehavior(type);
			keep = true;
			if (!hasPersistBehavior || this.layout.first_visit)
			{
				inst = this.runtime.createInstanceFromInit(initial_inst, this, true);
;
				created_instances.push(inst);
				if (inst.type.global)
					keep = false;
			}
			if (keep)
			{
				this.initial_instances[k] = this.initial_instances[i];
				k++;
			}
		}
		this.initial_instances.length = k;
		this.runtime.ClearDeathRow();		// flushes creation row so IIDs will be correct
		if (!this.runtime.glwrap && this.effect_types.length)	// no WebGL renderer and shaders used
			this.blend_mode = this.effect_fallback;				// use fallback blend mode
		this.compositeOp = cr.effectToCompositeOp(this.blend_mode);
		if (this.runtime.gl)
			cr.setGLBlend(this, this.blend_mode, this.runtime.gl);
	};
	Layer.prototype.updateZIndices = function ()
	{
		if (!this.zindices_stale)
			return;
		var i, len;
		for (i = 0, len = this.instances.length; i < len; i++)
		{
;
;
			this.instances[i].zindex = i;
		}
		this.zindices_stale = false;
	};
	Layer.prototype.getScale = function ()
	{
		return this.getNormalScale() * this.runtime.aspect_scale;
	};
	Layer.prototype.getNormalScale = function ()
	{
		return ((this.scale * this.layout.scale) - 1) * this.zoomRate + 1;
	};
	Layer.prototype.getAngle = function ()
	{
		if (this.disableAngle)
			return 0;
		return cr.clamp_angle(this.layout.angle + this.angle);
	};
	Layer.prototype.draw = function (ctx)
	{
		this.render_offscreen = (this.forceOwnTexture || this.opacity !== 1.0 || this.blend_mode !== 0);
		var layer_canvas = this.runtime.canvas;
		var layer_ctx = ctx;
		ctx.globalAlpha = 1;
		ctx.globalCompositeOperation = "source-over";
		if (this.render_offscreen)
		{
			if (!this.runtime.layer_canvas)
			{
				this.runtime.layer_canvas = document.createElement("canvas");
;
				layer_canvas = this.runtime.layer_canvas;
				layer_canvas.width = this.runtime.width;
				layer_canvas.height = this.runtime.height;
				this.runtime.layer_ctx = layer_canvas.getContext("2d");
;
			}
			layer_canvas = this.runtime.layer_canvas;
			layer_ctx = this.runtime.layer_ctx;
			if (layer_canvas.width !== this.runtime.width)
				layer_canvas.width = this.runtime.width;
			if (layer_canvas.height !== this.runtime.height)
				layer_canvas.height = this.runtime.height;
			if (this.transparent)
				layer_ctx.clearRect(0, 0, this.runtime.width, this.runtime.height);
		}
		if (!this.transparent)
		{
			layer_ctx.fillStyle = "rgb(" + this.background_color[0] + "," + this.background_color[1] + "," + this.background_color[2] + ")";
			layer_ctx.fillRect(0, 0, this.runtime.width, this.runtime.height);
		}
		layer_ctx.save();
		this.disableAngle = true;
		var px = this.canvasToLayer(0, 0, true);
		var py = this.canvasToLayer(0, 0, false);
		this.disableAngle = false;
		if (this.runtime.pixel_rounding)
		{
			px = (px + 0.5) | 0;
			py = (py + 0.5) | 0;
		}
		this.rotateViewport(px, py, layer_ctx);
		var myscale = this.getScale();
		layer_ctx.scale(myscale, myscale);
		layer_ctx.translate(-px, -py);
		var i, len, inst, bbox;
		for (i = 0, len = this.instances.length; i < len; i++)
		{
			inst = this.instances[i];
			if (!inst.visible || inst.width === 0 || inst.height === 0)
				continue;
			inst.update_bbox();
			bbox = inst.bbox;
			if (bbox.right < this.viewLeft || bbox.bottom < this.viewTop || bbox.left > this.viewRight || bbox.top > this.viewBottom)
				continue;
			layer_ctx.globalCompositeOperation = inst.compositeOp;
			inst.draw(layer_ctx);
		}
		layer_ctx.restore();
		if (this.render_offscreen)
		{
			ctx.globalCompositeOperation = this.compositeOp;
			ctx.globalAlpha = this.opacity;
			ctx.drawImage(layer_canvas, 0, 0);
		}
	};
	Layer.prototype.rotateViewport = function (px, py, ctx)
	{
		var myscale = this.getScale();
		this.viewLeft = px;
		this.viewTop = py;
		this.viewRight = px + (this.runtime.width * (1 / myscale));
		this.viewBottom = py + (this.runtime.height * (1 / myscale));
		var myAngle = this.getAngle();
		if (myAngle !== 0)
		{
			if (ctx)
			{
				ctx.translate(this.runtime.width / 2, this.runtime.height / 2);
				ctx.rotate(-myAngle);
				ctx.translate(this.runtime.width / -2, this.runtime.height / -2);
			}
			this.tmprect.set(this.viewLeft, this.viewTop, this.viewRight, this.viewBottom);
			this.tmprect.offset((this.viewLeft + this.viewRight) / -2, (this.viewTop + this.viewBottom) / -2);
			this.tmpquad.set_from_rotated_rect(this.tmprect, myAngle);
			this.tmpquad.bounding_box(this.tmprect);
			this.tmprect.offset((this.viewLeft + this.viewRight) / 2, (this.viewTop + this.viewBottom) / 2);
			this.viewLeft = this.tmprect.left;
			this.viewTop = this.tmprect.top;
			this.viewRight = this.tmprect.right;
			this.viewBottom = this.tmprect.bottom;
		}
	}
	Layer.prototype.drawGL = function (glw)
	{
		var windowWidth = this.runtime.width;
		var windowHeight = this.runtime.height;
		var shaderindex = 0;
		var etindex = 0;
		this.render_offscreen = (this.forceOwnTexture || this.opacity !== 1.0 || this.active_effect_types.length > 0 || this.blend_mode !== 0);
		if (this.render_offscreen)
		{
			if (!this.runtime.layer_tex)
			{
				this.runtime.layer_tex = glw.createEmptyTexture(this.runtime.width, this.runtime.height, this.runtime.linearSampling);
			}
			if (this.runtime.layer_tex.c2width !== this.runtime.width || this.runtime.layer_tex.c2height !== this.runtime.height)
			{
				glw.deleteTexture(this.runtime.layer_tex);
				this.runtime.layer_tex = glw.createEmptyTexture(this.runtime.width, this.runtime.height, this.runtime.linearSampling);
			}
			glw.setRenderingToTexture(this.runtime.layer_tex);
			if (this.transparent)
				glw.clear(0, 0, 0, 0);
		}
		if (!this.transparent)
		{
			glw.clear(this.background_color[0] / 255, this.background_color[1] / 255, this.background_color[2] / 255, 1);
		}
		this.disableAngle = true;
		var px = this.canvasToLayer(0, 0, true);
		var py = this.canvasToLayer(0, 0, false);
		this.disableAngle = false;
		if (this.runtime.pixel_rounding)
		{
			px = (px + 0.5) | 0;
			py = (py + 0.5) | 0;
		}
		this.rotateViewport(px, py, null);
		var myscale = this.getScale();
		glw.resetModelView();
		glw.scale(myscale, myscale);
		glw.rotateZ(-this.getAngle());
		glw.translate((this.viewLeft + this.viewRight) / -2, (this.viewTop + this.viewBottom) / -2);
		glw.updateModelView();
		var i, len, inst, bbox;
		for (i = 0, len = this.instances.length; i < len; i++)
		{
			inst = this.instances[i];
			if (!inst.visible || inst.width === 0 || inst.height === 0)
				continue;
			inst.update_bbox();
			bbox = inst.bbox;
			if (bbox.right < this.viewLeft || bbox.bottom < this.viewTop || bbox.left > this.viewRight || bbox.top > this.viewBottom)
				continue;
			if (inst.uses_shaders)
			{
				shaderindex = inst.active_effect_types[0].shaderindex;
				etindex = inst.active_effect_types[0].index;
				if (inst.active_effect_types.length === 1 && !glw.programUsesCrossSampling(shaderindex) &&
					!glw.programExtendsBox(shaderindex) && ((!inst.angle && !inst.layer.getAngle()) || !glw.programUsesDest(shaderindex)) &&
					inst.opacity === 1 && !inst.type.plugin.must_predraw)
				{
					glw.switchProgram(shaderindex);
					glw.setBlend(inst.srcBlend, inst.destBlend);
					if (glw.programIsAnimated(shaderindex))
						this.runtime.redraw = true;
					var destStartX = 0, destStartY = 0, destEndX = 0, destEndY = 0;
					if (glw.programUsesDest(shaderindex))
					{
						var bbox = inst.bbox;
						var screenleft = this.layerToCanvas(bbox.left, bbox.top, true);
						var screentop = this.layerToCanvas(bbox.left, bbox.top, false);
						var screenright = this.layerToCanvas(bbox.right, bbox.bottom, true);
						var screenbottom = this.layerToCanvas(bbox.right, bbox.bottom, false);
						destStartX = screenleft / windowWidth;
						destStartY = 1 - screentop / windowHeight;
						destEndX = screenright / windowWidth;
						destEndY = 1 - screenbottom / windowHeight;
					}
					glw.setProgramParameters(this.render_offscreen ? this.runtime.layer_tex : this.layout.getRenderTarget(), // backTex
											 1.0 / inst.width,			// pixelWidth
											 1.0 / inst.height,			// pixelHeight
											 destStartX, destStartY,
											 destEndX, destEndY,
											 this.getScale(),
											 inst.effect_params[etindex]);
					inst.drawGL(glw);
				}
				else
				{
					this.layout.renderEffectChain(glw, this, inst, this.render_offscreen ? this.runtime.layer_tex : this.layout.getRenderTarget());
					glw.resetModelView();
					glw.scale(myscale, myscale);
					glw.rotateZ(-this.getAngle());
					glw.translate((this.viewLeft + this.viewRight) / -2, (this.viewTop + this.viewBottom) / -2);
					glw.updateModelView();
				}
			}
			else
			{
				glw.switchProgram(0);		// un-set any previously set shader
				glw.setBlend(inst.srcBlend, inst.destBlend);
				inst.drawGL(glw);
			}
		}
		if (this.render_offscreen)
		{
			shaderindex = this.active_effect_types.length ? this.active_effect_types[0].shaderindex : 0;
			etindex = this.active_effect_types.length ? this.active_effect_types[0].index : 0;
			if (this.active_effect_types.length === 0 || (this.active_effect_types.length === 1 &&
				!glw.programUsesCrossSampling(shaderindex) && this.opacity === 1))
			{
				if (this.active_effect_types.length === 1)
				{
					glw.switchProgram(shaderindex);
					glw.setProgramParameters(this.layout.getRenderTarget(),		// backTex
											 1.0 / this.runtime.width,			// pixelWidth
											 1.0 / this.runtime.height,			// pixelHeight
											 0.0, 0.0,							// destStart
											 1.0, 1.0,							// destEnd
											 this.getScale(),					// layerScale
											 this.effect_params[etindex]);		// fx parameters
					if (glw.programIsAnimated(shaderindex))
						this.runtime.redraw = true;
				}
				else
					glw.switchProgram(0);
				glw.setRenderingToTexture(this.layout.getRenderTarget());
				glw.setOpacity(this.opacity);
				glw.setTexture(this.runtime.layer_tex);
				glw.setBlend(this.srcBlend, this.destBlend);
				glw.resetModelView();
				glw.updateModelView();
				var halfw = this.runtime.width / 2;
				var halfh = this.runtime.height / 2;
				glw.quad(-halfw, halfh, halfw, halfh, halfw, -halfh, -halfw, -halfh);
				glw.setTexture(null);
			}
			else
			{
				this.layout.renderEffectChain(glw, this, null, this.layout.getRenderTarget());
			}
		}
	};
	Layer.prototype.canvasToLayer = function (ptx, pty, getx)
	{
		var multiplier = this.runtime.devicePixelRatio;
		if (this.runtime.isRetina && this.runtime.fullscreen_mode > 0)
		{
			ptx *= multiplier;
			pty *= multiplier;
		}
		var ox = (this.runtime.original_width / 2);
		var oy = (this.runtime.original_height / 2);
		var x = ((this.layout.scrollX - ox) * this.parallaxX) + ox;
		var y = ((this.layout.scrollY - oy) * this.parallaxY) + oy;
		var invScale = 1 / this.getScale();
		x -= (this.runtime.width * invScale) / 2;
		y -= (this.runtime.height * invScale) / 2;
		x += ptx * invScale;
		y += pty * invScale;
		var a = this.getAngle();
		if (a !== 0)
		{
			x -= this.layout.scrollX;
			y -= this.layout.scrollY;
			var cosa = Math.cos(a);
			var sina = Math.sin(a);
			var x_temp = (x * cosa) - (y * sina);
			y = (y * cosa) + (x * sina);
			x = x_temp;
			x += this.layout.scrollX;
			y += this.layout.scrollY;
		}
		return getx ? x : y;
	};
	Layer.prototype.layerToCanvas = function (ptx, pty, getx)
	{
		var a = this.getAngle();
		if (a !== 0)
		{
			ptx -= this.layout.scrollX;
			pty -= this.layout.scrollY;
			var cosa = Math.cos(-a);
			var sina = Math.sin(-a);
			var x_temp = (ptx * cosa) - (pty * sina);
			pty = (pty * cosa) + (ptx * sina);
			ptx = x_temp;
			ptx += this.layout.scrollX;
			pty += this.layout.scrollY;
		}
		var ox = (this.runtime.original_width / 2);
		var oy = (this.runtime.original_height / 2);
		var x = ((this.layout.scrollX - ox) * this.parallaxX) + ox;
		var y = ((this.layout.scrollY - oy) * this.parallaxY) + oy;
		var invScale = 1 / this.getScale();
		x -= (this.runtime.width * invScale) / 2;
		y -= (this.runtime.height * invScale) / 2;
		x = (ptx - x) / invScale;
		y = (pty - y) / invScale;
		var multiplier = this.runtime.devicePixelRatio;
		if (this.runtime.isRetina && this.runtime.fullscreen_mode > 0)
		{
			x /= multiplier;
			y /= multiplier;
		}
		return getx ? x : y;
	};
	Layer.prototype.rotatePt = function (x_, y_, getx)
	{
		if (this.getAngle() === 0)
			return getx ? x_ : y_;
		var nx = this.layerToCanvas(x_, y_, true);
		var ny = this.layerToCanvas(x_, y_, false);
		this.disableAngle = true;
		var px = this.canvasToLayer(nx, ny, true);
		var py = this.canvasToLayer(nx, ny, true);
		this.disableAngle = false;
		return getx ? px : py;
	};
	Layer.prototype.saveToJSON = function ()
	{
		var i, len, et;
		var o = {
			"s": this.scale,
			"a": this.angle,
			"vl": this.viewLeft,
			"vt": this.viewTop,
			"vr": this.viewRight,
			"vb": this.viewBottom,
			"v": this.visible,
			"bc": this.background_color,
			"t": this.transparent,
			"px": this.parallaxX,
			"py": this.parallaxY,
			"o": this.opacity,
			"zr": this.zoomRate,
			"fx": [],
			"instances": []
		};
		for (i = 0, len = this.effect_types.length; i < len; i++)
		{
			et = this.effect_types[i];
			o["fx"].push({"name": et.name, "active": et.active, "params": this.effect_params[et.index] });
		}
		return o;
	};
	function sortInstanceByZIndex(a, b)
	{
		return a.zindex - b.zindex;
	};
	Layer.prototype.loadFromJSON = function (o)
	{
		var i, len, p, inst, fx;
		this.scale = o["s"];
		this.angle = o["a"];
		this.viewLeft = o["vl"];
		this.viewTop = o["vt"];
		this.viewRight = o["vr"];
		this.viewBottom = o["vb"];
		this.visible = o["v"];
		this.background_color = o["bc"];
		this.transparent = o["t"];
		this.parallaxX = o["px"];
		this.parallaxY = o["py"];
		this.opacity = o["o"];
		this.zoomRate = o["zr"];
		var ofx = o["fx"];
		for (i = 0, len = ofx.length; i < len; i++)
		{
			fx = this.getEffectByName(ofx[i]["name"]);
			if (!fx)
				continue;		// must've gone missing
			fx.active = ofx[i]["active"];
			this.effect_params[fx.index] = ofx[i]["params"];
		}
		this.updateActiveEffects();
		this.instances.sort(sortInstanceByZIndex);
		this.zindices_stale = true;
	};
	cr.layer = Layer;
}());
;
(function()
{
	var allUniqueSolModifiers = [];
	function testSolsMatch(arr1, arr2)
	{
		var i, len = arr1.length;
		switch (len) {
		case 0:
			return true;
		case 1:
			return arr1[0] === arr2[0];
		case 2:
			return arr1[0] === arr2[0] && arr1[1] === arr2[1];
		default:
			for (i = 0; i < len; i++)
			{
				if (arr1[i] !== arr2[i])
					return false;
			}
			return true;
		}
	};
	function solArraySorter(t1, t2)
	{
		return t1.index - t2.index;
	};
	function findMatchingSolModifier(arr)
	{
		var i, len, u, temp, subarr;
		if (arr.length === 2)
		{
			if (arr[0].index > arr[1].index)
			{
				temp = arr[0];
				arr[0] = arr[1];
				arr[1] = temp;
			}
		}
		else if (arr.length > 2)
			arr.sort(solArraySorter);		// so testSolsMatch compares in same order
		if (arr.length >= allUniqueSolModifiers.length)
			allUniqueSolModifiers.length = arr.length + 1;
		if (!allUniqueSolModifiers[arr.length])
			allUniqueSolModifiers[arr.length] = [];
		subarr = allUniqueSolModifiers[arr.length];
		for (i = 0, len = subarr.length; i < len; i++)
		{
			u = subarr[i];
			if (testSolsMatch(arr, u))
				return u;
		}
		subarr.push(arr);
		return arr;
	};
	function EventSheet(runtime, m)
	{
		this.runtime = runtime;
		this.triggers = {};
		this.fasttriggers = {};
        this.hasRun = false;
        this.includes = new cr.ObjectSet(); // all event sheets included by this sheet, at first-level indirection only
		this.name = m[0];
		var em = m[1];		// events model
		this.events = [];       // triggers won't make it to this array
		var i, len;
		for (i = 0, len = em.length; i < len; i++)
			this.init_event(em[i], null, this.events);
	};
    EventSheet.prototype.toString = function ()
    {
        return this.name;
    };
	EventSheet.prototype.init_event = function (m, parent, nontriggers)
	{
		switch (m[0]) {
		case 0:	// event block
		{
			var block = new cr.eventblock(this, parent, m);
			cr.seal(block);
			if (block.orblock)
			{
				nontriggers.push(block);
				var i, len;
				for (i = 0, len = block.conditions.length; i < len; i++)
				{
					if (block.conditions[i].trigger)
						this.init_trigger(block, i);
				}
			}
			else
			{
				if (block.is_trigger())
					this.init_trigger(block, 0);
				else
					nontriggers.push(block);
			}
			break;
		}
		case 1: // variable
		{
			var v = new cr.eventvariable(this, parent, m);
			cr.seal(v);
			nontriggers.push(v);
			break;
		}
        case 2:	// include
        {
            var inc = new cr.eventinclude(this, parent, m);
			cr.seal(inc);
            nontriggers.push(inc);
			break;
        }
		default:
;
		}
	};
	EventSheet.prototype.postInit = function ()
	{
		var i, len;
		for (i = 0, len = this.events.length; i < len; i++)
		{
			this.events[i].postInit(i < len - 1 && this.events[i + 1].is_else_block);
		}
	};
	EventSheet.prototype.run = function ()
	{
        this.hasRun = true;
		this.runtime.isRunningEvents = true;
		var i, len;
		for (i = 0, len = this.events.length; i < len; i++)
		{
			var ev = this.events[i];
			ev.run();
			this.runtime.clearSol(ev.solModifiers);
			if (!this.runtime.deathRow.isEmpty() || this.runtime.createRow.length)
				this.runtime.ClearDeathRow();
		}
		this.runtime.isRunningEvents = false;
	};
	EventSheet.prototype.init_trigger = function (trig, index)
	{
		if (!trig.orblock)
			this.runtime.triggers_to_postinit.push(trig);	// needs to be postInit'd later
		var i, len;
		var cnd = trig.conditions[index];
		var type_name;
		if (cnd.type)
			type_name = cnd.type.name;
		else
			type_name = "system";
		var fasttrigger = cnd.fasttrigger;
		var triggers = (fasttrigger ? this.fasttriggers : this.triggers);
		if (!triggers[type_name])
			triggers[type_name] = [];
		var obj_entry = triggers[type_name];
		var method = cnd.func;
		if (fasttrigger)
		{
			if (!cnd.parameters.length)				// no parameters
				return;
			var firstparam = cnd.parameters[0];
			if (firstparam.type !== 1 ||			// not a string param
				firstparam.expression.type !== 2)	// not a string literal node
			{
				return;
			}
			var fastevs;
			var firstvalue = firstparam.expression.value.toLowerCase();
			var i, len;
			for (i = 0, len = obj_entry.length; i < len; i++)
			{
				if (obj_entry[i].method == method)
				{
					fastevs = obj_entry[i].evs;
					if (!fastevs[firstvalue])
						fastevs[firstvalue] = [[trig, index]];
					else
						fastevs[firstvalue].push([trig, index]);
					return;
				}
			}
			fastevs = {};
			fastevs[firstvalue] = [[trig, index]];
			obj_entry.push({ method: method, evs: fastevs });
		}
		else
		{
			for (i = 0, len = obj_entry.length; i < len; i++)
			{
				if (obj_entry[i].method == method)
				{
					obj_entry[i].evs.push([trig, index]);
					return;
				}
			}
			obj_entry.push({ method: method, evs: [[trig, index]]});
		}
	};
	cr.eventsheet = EventSheet;
	function Selection(type)
	{
		this.type = type;
		this.instances = [];        // subset of picked instances
		this.else_instances = [];	// subset of unpicked instances
		this.select_all = true;
	};
	Selection.prototype.hasObjects = function ()
	{
		if (this.select_all)
			return this.type.instances.length;
		else
			return this.instances.length;
	};
	Selection.prototype.getObjects = function ()
	{
		if (this.select_all)
			return this.type.instances;
		else
			return this.instances;
	};
	/*
	Selection.prototype.ensure_picked = function (inst, skip_siblings)
	{
		var i, len;
		var orblock = inst.runtime.getCurrentEventStack().current_event.orblock;
		if (this.select_all)
		{
			this.select_all = false;
			if (orblock)
			{
				cr.shallowAssignArray(this.else_instances, inst.type.instances);
				cr.arrayFindRemove(this.else_instances, inst);
			}
			this.instances.length = 1;
			this.instances[0] = inst;
		}
		else
		{
			if (orblock)
			{
				i = this.else_instances.indexOf(inst);
				if (i !== -1)
				{
					this.instances.push(this.else_instances[i]);
					this.else_instances.splice(i, 1);
				}
			}
			else
			{
				if (this.instances.indexOf(inst) === -1)
					this.instances.push(inst);
			}
		}
		if (!skip_siblings)
		{
		}
	};
	*/
	Selection.prototype.pick_one = function (inst)
	{
		if (!inst)
			return;
		if (inst.runtime.getCurrentEventStack().current_event.orblock)
		{
			if (this.select_all)
			{
				this.instances.length = 0;
				cr.shallowAssignArray(this.else_instances, inst.type.instances);
				this.select_all = false;
			}
			var i = this.else_instances.indexOf(inst);
			if (i !== -1)
			{
				this.instances.push(this.else_instances[i]);
				this.else_instances.splice(i, 1);
			}
		}
		else
		{
			this.select_all = false;
			this.instances.length = 1;
			this.instances[0] = inst;
		}
	};
	cr.selection = Selection;
	function EventBlock(sheet, parent, m)
	{
		this.sheet = sheet;
		this.parent = parent;
		this.runtime = sheet.runtime;
		this.solModifiers = [];
		this.solModifiersIncludingParents = [];
		this.solWriterAfterCnds = false;	// block does not change SOL after running its conditions
		this.group = false;					// is group of events
		this.initially_activated = false;	// if a group, is active on startup
		this.toplevelevent = false;			// is an event block parented only by a top-level group
		this.toplevelgroup = false;			// is parented only by other groups or is top-level (i.e. not in a subevent)
		this.has_else_block = false;		// is followed by else
;
		this.conditions = [];
		this.actions = [];
		this.subevents = [];
        if (m[1])
        {
			this.group_name = m[1][1].toLowerCase();
			this.group = true;
			this.initially_activated = !!m[1][0];
			this.runtime.allGroups.push(this);
            this.runtime.activeGroups[(/*this.sheet.name + "|" + */this.group_name).toLowerCase()] = this.initially_activated;
        }
		else
		{
			this.group_name = "";
			this.group = false;
			this.initially_activated = false;
		}
		this.orblock = m[2];
		this.sid = m[3];
		if (!this.group)
			this.runtime.blocksBySid[this.sid.toString()] = this;
		var i, len;
		var cm = m[4];
		for (i = 0, len = cm.length; i < len; i++)
		{
			var cnd = new cr.condition(this, cm[i]);
			cr.seal(cnd);
			this.conditions.push(cnd);
			/*
			if (cnd.is_logical())
				this.is_logical = true;
			if (cnd.type && !cnd.type.plugin.singleglobal && this.cndReferences.indexOf(cnd.type) === -1)
				this.cndReferences.push(cnd.type);
			*/
			this.addSolModifier(cnd.type);
		}
		var am = m[5];
		for (i = 0, len = am.length; i < len; i++)
		{
			var act = new cr.action(this, am[i]);
			cr.seal(act);
			this.actions.push(act);
		}
		if (m.length === 7)
		{
			var em = m[6];
			for (i = 0, len = em.length; i < len; i++)
				this.sheet.init_event(em[i], this, this.subevents);
		}
		this.is_else_block = false;
		if (this.conditions.length)
			this.is_else_block = (this.conditions[0].type == null && this.conditions[0].func == cr.system_object.prototype.cnds.Else);
	};
	EventBlock.prototype.postInit = function (hasElse/*, prevBlock_*/)
	{
		var i, len;
		var p = this.parent;
		if (this.group)
		{
			this.toplevelgroup = true;
			while (p)
			{
				if (!p.group)
				{
					this.toplevelgroup = false;
					break;
				}
				p = p.parent;
			}
		}
		this.toplevelevent = !this.is_trigger() && (!this.parent || (this.parent.group && this.parent.toplevelgroup));
		this.has_else_block = !!hasElse;
		this.solModifiersIncludingParents = this.solModifiers.slice(0);
		p = this.parent;
		while (p)
		{
			for (i = 0, len = p.solModifiers.length; i < len; i++)
				this.addParentSolModifier(p.solModifiers[i]);
			p = p.parent;
		}
		this.solModifiers = findMatchingSolModifier(this.solModifiers);
		this.solModifiersIncludingParents = findMatchingSolModifier(this.solModifiersIncludingParents);
		var i, len/*, s*/;
		for (i = 0, len = this.conditions.length; i < len; i++)
			this.conditions[i].postInit();
		for (i = 0, len = this.actions.length; i < len; i++)
			this.actions[i].postInit();
		for (i = 0, len = this.subevents.length; i < len; i++)
		{
			this.subevents[i].postInit(i < len - 1 && this.subevents[i + 1].is_else_block);
		}
		/*
		if (this.is_else_block && this.prev_block)
		{
			for (i = 0, len = this.prev_block.solModifiers.length; i < len; i++)
			{
				s = this.prev_block.solModifiers[i];
				if (this.solModifiers.indexOf(s) === -1)
					this.solModifiers.push(s);
			}
		}
		*/
	}
	function addSolModifierToList(type, arr)
	{
		var i, len, t;
		if (!type)
			return;
		if (arr.indexOf(type) === -1)
			arr.push(type);
		if (type.is_contained)
		{
			for (i = 0, len = type.container.length; i < len; i++)
			{
				t = type.container[i];
				if (type === t)
					continue;		// already handled
				if (arr.indexOf(t) === -1)
					arr.push(t);
			}
		}
	};
	EventBlock.prototype.addSolModifier = function (type)
	{
		addSolModifierToList(type, this.solModifiers);
	};
	EventBlock.prototype.addParentSolModifier = function (type)
	{
		addSolModifierToList(type, this.solModifiersIncludingParents);
	};
	EventBlock.prototype.setSolWriterAfterCnds = function ()
	{
		this.solWriterAfterCnds = true;
		if (this.parent)
			this.parent.setSolWriterAfterCnds();
	};
	EventBlock.prototype.is_trigger = function ()
	{
		if (!this.conditions.length)    // no conditions
			return false;
		else
			return this.conditions[0].trigger;
	};
	EventBlock.prototype.run = function ()
	{
		var i, len, any_true = false/*, bail = false*/;
		var evinfo = this.runtime.getCurrentEventStack();
		evinfo.current_event = this;
		if (!this.is_else_block)
			evinfo.else_branch_ran = false;
		if (this.orblock)
		{
			if (this.conditions.length === 0)
				any_true = true;		// be sure to run if empty block
			for (evinfo.cndindex = 0, len = this.conditions.length; evinfo.cndindex < len; evinfo.cndindex++)
			{
				if (this.conditions[evinfo.cndindex].trigger)		// skip triggers when running OR block
					continue;
				if (this.conditions[evinfo.cndindex].run())			// make sure all conditions run and run if any were true
					any_true = true;
			}
			evinfo.last_event_true = any_true;
			if (any_true)
				this.run_actions_and_subevents();
		}
		else
		{
			for (evinfo.cndindex = 0, len = this.conditions.length; evinfo.cndindex < len; evinfo.cndindex++)
			{
				if (!this.conditions[evinfo.cndindex].run())    // condition failed
				{
					evinfo.last_event_true = false;
					if (this.toplevelevent && (!this.runtime.deathRow.isEmpty() || this.runtime.createRow.length))
						this.runtime.ClearDeathRow();
					return;										// bail out now
				}
			}
			evinfo.last_event_true = true;
			this.run_actions_and_subevents();
		}
		if (evinfo.last_event_true && this.has_else_block)
			evinfo.else_branch_ran = true;
		if (this.toplevelevent && (!this.runtime.deathRow.isEmpty() || this.runtime.createRow.length))
			this.runtime.ClearDeathRow();
	};
	EventBlock.prototype.run_orblocktrigger = function (index)
	{
		var evinfo = this.runtime.getCurrentEventStack();
		evinfo.current_event = this;
		if (this.conditions[index].run())
		{
			this.run_actions_and_subevents();
		}
	};
	EventBlock.prototype.run_actions_and_subevents = function ()
	{
		var evinfo = this.runtime.getCurrentEventStack();
		var len;
		for (evinfo.actindex = 0, len = this.actions.length; evinfo.actindex < len; evinfo.actindex++)
		{
			if (this.actions[evinfo.actindex].run())
				return;
		}
		this.run_subevents();
	};
	EventBlock.prototype.resume_actions_and_subevents = function ()
	{
		var evinfo = this.runtime.getCurrentEventStack();
		var len;
		for (len = this.actions.length; evinfo.actindex < len; evinfo.actindex++)
		{
			if (this.actions[evinfo.actindex].run())
				return;
		}
		this.run_subevents();
	};
	EventBlock.prototype.run_subevents = function ()
	{
		if (!this.subevents.length)
			return;
		var i, len, subev, pushpop/*, skipped_pop = false, pop_modifiers = null*/;
		var last = this.subevents.length - 1;
		this.runtime.pushEventStack(this);
		if (this.solWriterAfterCnds)
		{
			for (i = 0, len = this.subevents.length; i < len; i++)
			{
				subev = this.subevents[i];
				pushpop = (!this.toplevelgroup || (!this.group && i < last));
				if (pushpop)
					this.runtime.pushCopySol(subev.solModifiers);
				subev.run();
				if (pushpop)
					this.runtime.popSol(subev.solModifiers);
				else
					this.runtime.clearSol(subev.solModifiers);
			}
		}
		else
		{
			for (i = 0, len = this.subevents.length; i < len; i++)
			{
				this.subevents[i].run();
			}
		}
		this.runtime.popEventStack();
	};
	EventBlock.prototype.run_pretrigger = function ()
	{
		var evinfo = this.runtime.getCurrentEventStack();
		evinfo.current_event = this;
		var any_true = false;
		var i, len;
		for (evinfo.cndindex = 0, len = this.conditions.length; evinfo.cndindex < len; evinfo.cndindex++)
		{
;
			if (this.conditions[evinfo.cndindex].run())
				any_true = true;
			else if (!this.orblock)			// condition failed (let OR blocks run all conditions anyway)
				return false;               // bail out
		}
		return this.orblock ? any_true : true;
	};
	EventBlock.prototype.retrigger = function ()
	{
		this.runtime.execcount++;
		var prevcndindex = this.runtime.getCurrentEventStack().cndindex;
		var len;
		var evinfo = this.runtime.pushEventStack(this);
		if (!this.orblock)
		{
			for (evinfo.cndindex = prevcndindex + 1, len = this.conditions.length; evinfo.cndindex < len; evinfo.cndindex++)
			{
				if (!this.conditions[evinfo.cndindex].run())    // condition failed
				{
					this.runtime.popEventStack();               // moving up level of recursion
					return false;                               // bail out
				}
			}
		}
		this.run_actions_and_subevents();
		this.runtime.popEventStack();
		return true;		// ran an iteration
	};
	cr.eventblock = EventBlock;
	function Condition(block, m)
	{
		this.block = block;
		this.sheet = block.sheet;
		this.runtime = block.runtime;
		this.parameters = [];
		this.results = [];
		this.extra = {};		// for plugins to stow away some custom info
		this.func = m[1];
;
		this.trigger = (m[3] > 0);
		this.fasttrigger = (m[3] === 2);
		this.looping = m[4];
		this.inverted = m[5];
		this.isstatic = m[6];
		this.sid = m[7];
		this.runtime.cndsBySid[this.sid.toString()] = this;
		if (m[0] === -1)		// system object
		{
			this.type = null;
			this.run = this.run_system;
			this.behaviortype = null;
			this.beh_index = -1;
		}
		else
		{
			this.type = this.runtime.types_by_index[m[0]];
;
			if (this.isstatic)
				this.run = this.run_static;
			else
				this.run = this.run_object;
			if (m[2])
			{
				this.behaviortype = this.type.getBehaviorByName(m[2]);
;
				this.beh_index = this.type.getBehaviorIndexByName(m[2]);
;
			}
			else
			{
				this.behaviortype = null;
				this.beh_index = -1;
			}
			if (this.block.parent)
				this.block.parent.setSolWriterAfterCnds();
		}
		if (this.fasttrigger)
			this.run = this.run_true;
		if (m.length === 9)
		{
			var i, len;
			var em = m[8];
			for (i = 0, len = em.length; i < len; i++)
			{
				var param = new cr.parameter(this, em[i]);
				cr.seal(param);
				this.parameters.push(param);
			}
			this.results.length = em.length;
		}
	};
	Condition.prototype.postInit = function ()
	{
		var i, len;
		for (i = 0, len = this.parameters.length; i < len; i++)
			this.parameters[i].postInit();
	};
	/*
	Condition.prototype.is_logical = function ()
	{
		return !this.type || this.type.plugin.singleglobal;
	};
	*/
	Condition.prototype.run_true = function ()
	{
		return true;
	};
	Condition.prototype.run_system = function ()
	{
		var i, len;
		for (i = 0, len = this.parameters.length; i < len; i++)
			this.results[i] = this.parameters[i].get();
		return cr.xor(this.func.apply(this.runtime.system, this.results), this.inverted);
	};
	Condition.prototype.run_static = function ()
	{
		var i, len;
		for (i = 0, len = this.parameters.length; i < len; i++)
			this.results[i] = this.parameters[i].get(i);
		var ret = this.func.apply(this.behaviortype ? this.behaviortype : this.type, this.results);
		this.type.applySolToContainer();
		return ret;
	};
	Condition.prototype.run_object = function ()
	{
		var i, j, leni, lenj, ret, met, inst, s, sol2;
		var sol = this.type.getCurrentSol();
		var is_orblock = this.block.orblock && !this.trigger;		// triggers in OR blocks need to work normally
		var offset = 0;
		var is_contained = this.type.is_contained;
		if (sol.select_all) {
			sol.instances.length = 0;       // clear contents
			sol.else_instances.length = 0;
			for (i = 0, leni = this.type.instances.length; i < leni; i++)
			{
				inst = this.type.instances[i];
;
				for (j = 0, lenj = this.parameters.length; j < lenj; j++)
					this.results[j] = this.parameters[j].get(i);        // default SOL index is current object
				if (this.beh_index > -1)
				{
					if (this.type.is_family)
					{
						offset = inst.type.family_beh_map[this.type.family_index];
					}
					ret = this.func.apply(inst.behavior_insts[this.beh_index + offset], this.results);
				}
				else
					ret = this.func.apply(inst, this.results);
				met = cr.xor(ret, this.inverted);
				if (met)
					sol.instances.push(inst);
				else if (is_orblock)					// in OR blocks, keep the instances not meeting the condition for subsequent testing
					sol.else_instances.push(inst);
			}
			if (this.type.finish)
				this.type.finish(true);
			sol.select_all = false;
			this.type.applySolToContainer();
			return sol.hasObjects();
		}
		else {
			var k = 0;
			var using_else_instances = (is_orblock && this.runtime.getCurrentEventStack().cndindex > 0);
			var arr = (using_else_instances ? sol.else_instances : sol.instances);
			var any_true = false;
			for (i = 0, leni = arr.length; i < leni; i++)
			{
				inst = arr[i];
;
				for (j = 0, lenj = this.parameters.length; j < lenj; j++)
					this.results[j] = this.parameters[j].get(i);        // default SOL index is current object
				if (this.beh_index > -1)
				{
					if (this.type.is_family)
					{
						offset = inst.type.family_beh_map[this.type.family_index];
					}
					ret = this.func.apply(inst.behavior_insts[this.beh_index + offset], this.results);
				}
				else
					ret = this.func.apply(inst, this.results);
				if (cr.xor(ret, this.inverted))
				{
					any_true = true;
					if (using_else_instances)
					{
						sol.instances.push(inst);
						if (is_contained)
						{
							for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
							{
								s = inst.siblings[j];
								s.type.getCurrentSol().instances.push(s);
							}
						}
					}
					else
					{
						arr[k] = inst;
						if (is_contained)
						{
							for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
							{
								s = inst.siblings[j];
								s.type.getCurrentSol().instances[k] = s;
							}
						}
						k++;
					}
				}
				else
				{
					if (using_else_instances)
					{
						arr[k] = inst;
						if (is_contained)
						{
							for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
							{
								s = inst.siblings[j];
								s.type.getCurrentSol().else_instances[k] = s;
							}
						}
						k++;
					}
					else
					{
						sol.else_instances.push(inst);
						if (is_contained)
						{
							for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
							{
								s = inst.siblings[j];
								s.type.getCurrentSol().else_instances.push(s);
							}
						}
					}
				}
			}
			arr.length = k;
			if (is_contained)
			{
				for (i = 0, leni = this.type.container.length; i < leni; i++)
				{
					sol2 = this.type.container[i].getCurrentSol();
					if (using_else_instances)
						sol2.else_instances.length = k;
					else
						sol2.instances.length = k;
				}
			}
			var pick_in_finish = any_true;		// don't pick in finish() if we're only doing the logic test below
			if (using_else_instances && !any_true)
			{
				for (i = 0, leni = sol.instances.length; i < leni; i++)
				{
					inst = sol.instances[i];
					for (j = 0, lenj = this.parameters.length; j < lenj; j++)
						this.results[j] = this.parameters[j].get(i);
					if (this.beh_index > -1)
						ret = this.func.apply(inst.behavior_insts[this.beh_index], this.results);
					else
						ret = this.func.apply(inst, this.results);
					if (cr.xor(ret, this.inverted))
					{
						any_true = true;
						break;		// got our flag, don't need to test any more
					}
				}
			}
			if (this.type.finish)
				this.type.finish(pick_in_finish || is_orblock);
			return is_orblock ? any_true : sol.hasObjects();
		}
	};
	cr.condition = Condition;
	function Action(block, m)
	{
		this.block = block;
		this.sheet = block.sheet;
		this.runtime = block.runtime;
		this.parameters = [];
		this.results = [];
		this.extra = {};		// for plugins to stow away some custom info
		this.func = m[1];
;
		if (m[0] === -1)	// system
		{
			this.type = null;
			this.run = this.run_system;
			this.behaviortype = null;
			this.beh_index = -1;
		}
		else
		{
			this.type = this.runtime.types_by_index[m[0]];
;
			this.run = this.run_object;
			if (m[2])
			{
				this.behaviortype = this.type.getBehaviorByName(m[2]);
;
				this.beh_index = this.type.getBehaviorIndexByName(m[2]);
;
			}
			else
			{
				this.behaviortype = null;
				this.beh_index = -1;
			}
		}
		this.sid = m[3];
		this.runtime.actsBySid[this.sid.toString()] = this;
		if (m.length === 5)
		{
			var i, len;
			var em = m[4];
			for (i = 0, len = em.length; i < len; i++)
			{
				var param = new cr.parameter(this, em[i]);
				cr.seal(param);
				this.parameters.push(param);
			}
			this.results.length = em.length;
		}
	};
	Action.prototype.postInit = function ()
	{
		var i, len;
		for (i = 0, len = this.parameters.length; i < len; i++)
			this.parameters[i].postInit();
	};
	Action.prototype.run_system = function ()
	{
		var i, len;
		for (i = 0, len = this.parameters.length; i < len; i++)
			this.results[i] = this.parameters[i].get();
		return this.func.apply(this.runtime.system, this.results);
	};
	Action.prototype.run_object = function ()
	{
		var instances = this.type.getCurrentSol().getObjects();
		var i, j, leni, lenj, inst;
		for (i = 0, leni = instances.length; i < leni; i++)
		{
			inst = instances[i];
			for (j = 0, lenj = this.parameters.length; j < lenj; j++)
				this.results[j] = this.parameters[j].get(i);    // pass i to use as default SOL index
			if (this.beh_index > -1)
			{
				var offset = 0;
				if (this.type.is_family)
				{
					offset = inst.type.family_beh_map[this.type.family_index];
				}
				this.func.apply(inst.behavior_insts[this.beh_index + offset], this.results);
			}
			else
				this.func.apply(inst, this.results);
		}
		return false;
	};
	cr.action = Action;
	var tempValues = [];
	var tempValuesPtr = -1;
	function Parameter(owner, m)
	{
		this.owner = owner;
		this.block = owner.block;
		this.sheet = owner.sheet;
		this.runtime = owner.runtime;
		this.type = m[0];
		this.expression = null;
		this.solindex = 0;
		this.combosel = 0;
		this.layout = null;
		this.key = 0;
		this.object = null;
		this.index = 0;
		this.varname = null;
		this.eventvar = null;
		this.fileinfo = null;
		this.subparams = null;
		this.variadicret = null;
		var i, len, param;
		switch (m[0])
		{
			case 0:		// number
			case 7:		// any
				this.expression = new cr.expNode(this, m[1]);
				this.solindex = 0;
				this.get = this.get_exp;
				break;
			case 1:		// string
				this.expression = new cr.expNode(this, m[1]);
				this.solindex = 0;
				this.get = this.get_exp_str;
				break;
			case 5:		// layer
				this.expression = new cr.expNode(this, m[1]);
				this.solindex = 0;
				this.get = this.get_layer;
				break;
			case 3:		// combo
			case 8:		// cmp
				this.combosel = m[1];
				this.get = this.get_combosel;
				break;
			case 6:		// layout
				this.layout = this.runtime.layouts[m[1]];
;
				this.get = this.get_layout;
				break;
			case 9:		// keyb
				this.key = m[1];
				this.get = this.get_key;
				break;
			case 4:		// object
				this.object = this.runtime.types_by_index[m[1]];
;
				this.get = this.get_object;
				this.block.addSolModifier(this.object);
				if (this.owner instanceof cr.action)
					this.block.setSolWriterAfterCnds();
				else if (this.block.parent)
					this.block.parent.setSolWriterAfterCnds();
				break;
			case 10:	// instvar
				this.index = m[1];
				if (owner.type.is_family)
					this.get = this.get_familyvar;
				else
					this.get = this.get_instvar;
				break;
			case 11:	// eventvar
				this.varname = m[1];
				this.eventvar = null;
				this.get = this.get_eventvar;
				break;
			case 2:		// audiofile	["name", ismusic]
			case 12:	// fileinfo		"name"
				this.fileinfo = m[1];
				this.get = this.get_audiofile;
				break;
			case 13:	// variadic
				this.get = this.get_variadic;
				this.subparams = [];
				this.variadicret = [];
				for (i = 1, len = m.length; i < len; i++)
				{
					param = new cr.parameter(this.owner, m[i]);
					cr.seal(param);
					this.subparams.push(param);
					this.variadicret.push(0);
				}
				break;
			default:
;
		}
	};
	Parameter.prototype.postInit = function ()
	{
		var i, len;
		if (this.type === 11)		// eventvar
		{
			this.eventvar = this.runtime.getEventVariableByName(this.varname, this.block.parent);
;
		}
		else if (this.type === 13)	// variadic, postInit all sub-params
		{
			for (i = 0, len = this.subparams.length; i < len; i++)
				this.subparams[i].postInit();
		}
		if (this.expression)
			this.expression.postInit();
	};
	Parameter.prototype.pushTempValue = function ()
	{
		tempValuesPtr++;
		if (tempValues.length === tempValuesPtr)
			tempValues.push(new cr.expvalue());
		return tempValues[tempValuesPtr];
	};
	Parameter.prototype.popTempValue = function ()
	{
		tempValuesPtr--;
	};
	Parameter.prototype.get_exp = function (solindex)
	{
		this.solindex = solindex || 0;   // default SOL index to use
		var temp = this.pushTempValue();
		this.expression.get(temp);
		this.popTempValue();
		return temp.data;      			// return actual JS value, not expvalue
	};
	Parameter.prototype.get_exp_str = function (solindex)
	{
		this.solindex = solindex || 0;   // default SOL index to use
		var temp = this.pushTempValue();
		this.expression.get(temp);
		this.popTempValue();
		if (cr.is_string(temp.data))
			return temp.data;
		else
			return "";
	};
	Parameter.prototype.get_object = function ()
	{
		return this.object;
	};
	Parameter.prototype.get_combosel = function ()
	{
		return this.combosel;
	};
	Parameter.prototype.get_layer = function (solindex)
	{
		this.solindex = solindex || 0;   // default SOL index to use
		var temp = this.pushTempValue();
		this.expression.get(temp);
		this.popTempValue();
		if (temp.is_number())
			return this.runtime.getLayerByNumber(temp.data);
		else
			return this.runtime.getLayerByName(temp.data);
	}
	Parameter.prototype.get_layout = function ()
	{
		return this.layout;
	};
	Parameter.prototype.get_key = function ()
	{
		return this.key;
	};
	Parameter.prototype.get_instvar = function ()
	{
		return this.index;
	};
	Parameter.prototype.get_familyvar = function (solindex)
	{
		var familytype = this.owner.type;
		var realtype = null;
		var sol = familytype.getCurrentSol();
		var objs = sol.getObjects();
		if (objs.length)
			realtype = objs[solindex % objs.length].type;
		else
		{
;
			realtype = sol.else_instances[solindex % sol.else_instances.length].type;
		}
		return this.index + realtype.family_var_map[familytype.family_index];
	};
	Parameter.prototype.get_eventvar = function ()
	{
		return this.eventvar;
	};
	Parameter.prototype.get_audiofile = function ()
	{
		return this.fileinfo;
	};
	Parameter.prototype.get_variadic = function ()
	{
		var i, len;
		for (i = 0, len = this.subparams.length; i < len; i++)
		{
			this.variadicret[i] = this.subparams[i].get();
		}
		return this.variadicret;
	};
	cr.parameter = Parameter;
	function EventVariable(sheet, parent, m)
	{
		this.sheet = sheet;
		this.parent = parent;
		this.runtime = sheet.runtime;
		this.solModifiers = [];
		this.name = m[1];
		this.vartype = m[2];
		this.initial = m[3];
		this.is_static = !!m[4];
		this.is_constant = !!m[5];
		this.sid = m[6];
		this.runtime.varsBySid[this.sid.toString()] = this;
		this.data = this.initial;	// note: also stored in event stack frame for local nonstatic nonconst vars
		if (this.parent)			// local var
		{
			if (this.is_static || this.is_constant)
				this.localIndex = -1;
			else
				this.localIndex = this.runtime.stackLocalCount++;
			this.runtime.all_local_vars.push(this);
		}
		else						// global var
		{
			this.localIndex = -1;
			this.runtime.all_global_vars.push(this);
		}
	};
	EventVariable.prototype.postInit = function ()
	{
		this.solModifiers = findMatchingSolModifier(this.solModifiers);
	};
	EventVariable.prototype.setValue = function (x)
	{
;
		var lvs = this.runtime.getCurrentLocalVarStack();
		if (!this.parent || this.is_static || !lvs)
			this.data = x;
		else	// local nonstatic variable: use event stack to keep value at this level of recursion
		{
			if (this.localIndex >= lvs.length)
				lvs.length = this.localIndex + 1;
			lvs[this.localIndex] = x;
		}
	};
	EventVariable.prototype.getValue = function ()
	{
		var lvs = this.runtime.getCurrentLocalVarStack();
		if (!this.parent || this.is_static || !lvs || this.is_constant)
			return this.data;
		else	// local nonstatic variable
		{
			if (this.localIndex >= lvs.length)
			{
;
				return this.initial;
			}
			if (typeof lvs[this.localIndex] === "undefined")
			{
;
				return this.initial;
			}
			return lvs[this.localIndex];
		}
	};
	EventVariable.prototype.run = function ()
	{
		if (this.parent && !this.is_static && !this.is_constant)
			this.setValue(this.initial);
	};
	cr.eventvariable = EventVariable;
	function EventInclude(sheet, parent, m)
	{
		this.sheet = sheet;
		this.parent = parent;
		this.runtime = sheet.runtime;
		this.solModifiers = [];
		this.include_sheet = null;		// determined in postInit
		this.include_sheet_name = m[1];
	};
	EventInclude.prototype.toString = function ()
	{
		return "include:" + this.include_sheet.toString();
	};
	EventInclude.prototype.postInit = function ()
	{
        this.include_sheet = this.runtime.eventsheets[this.include_sheet_name];
;
;
        this.sheet.includes.add(this);
		this.solModifiers = findMatchingSolModifier(this.solModifiers);
	};
	EventInclude.prototype.run = function ()
	{
		if (this.parent)
			this.runtime.pushCleanSol(this.runtime.types_by_index);
        if (!this.include_sheet.hasRun)
            this.include_sheet.run();
        if (this.parent)
            this.runtime.popSol(this.runtime.types_by_index);
	};
	EventInclude.prototype.isActive = function ()
	{
		var p = this.parent;
		while (p)
		{
			if (p.group)
			{
				if (!this.runtime.activeGroups[p.group_name.toLowerCase()])
					return false;
			}
			p = p.parent;
		}
		return true;
	};
	cr.eventinclude = EventInclude;
	function EventStackFrame()
	{
		this.temp_parents_arr = [];
		this.reset(null);
		cr.seal(this);
	};
	EventStackFrame.prototype.reset = function (cur_event)
	{
		this.current_event = cur_event;
		this.cndindex = 0;
		this.actindex = 0;
		this.temp_parents_arr.length = 0;
		this.last_event_true = false;
		this.else_branch_ran = false;
	};
	EventStackFrame.prototype.isModifierAfterCnds = function ()
	{
		if (this.current_event.solWriterAfterCnds)
			return true;
		if (this.cndindex < this.current_event.conditions.length - 1)
			return !!this.current_event.solModifiers.length;
		return false;
	};
	cr.eventStackFrame = EventStackFrame;
}());
(function()
{
	function ExpNode(owner_, m)
	{
		this.owner = owner_;
		this.runtime = owner_.runtime;
		this.type = m[0];
;
		this.get = [this.eval_int,
					this.eval_float,
					this.eval_string,
					this.eval_unaryminus,
					this.eval_add,
					this.eval_subtract,
					this.eval_multiply,
					this.eval_divide,
					this.eval_mod,
					this.eval_power,
					this.eval_and,
					this.eval_or,
					this.eval_equal,
					this.eval_notequal,
					this.eval_less,
					this.eval_lessequal,
					this.eval_greater,
					this.eval_greaterequal,
					this.eval_conditional,
					this.eval_system_exp,
					this.eval_object_behavior_exp,
					this.eval_instvar_exp,
					this.eval_object_behavior_exp,
					this.eval_eventvar_exp][this.type];
		var paramsModel = null;
		this.value = null;
		this.first = null;
		this.second = null;
		this.third = null;
		this.func = null;
		this.results = null;
		this.parameters = null;
		this.object_type = null;
		this.beh_index = -1;
		this.instance_expr = null;
		this.varindex = -1;
		this.behavior_type = null;
		this.varname = null;
		this.eventvar = null;
		this.return_string = false;
		switch (this.type) {
		case 0:		// int
		case 1:		// float
		case 2:		// string
			this.value = m[1];
			break;
		case 3:		// unaryminus
			this.first = new cr.expNode(owner_, m[1]);
			break;
		case 18:	// conditional
			this.first = new cr.expNode(owner_, m[1]);
			this.second = new cr.expNode(owner_, m[2]);
			this.third = new cr.expNode(owner_, m[3]);
			break;
		case 19:	// system_exp
			this.func = m[1];
;
			this.results = [];
			this.parameters = [];
			if (m.length === 3)
			{
				paramsModel = m[2];
				this.results.length = paramsModel.length + 1;	// must also fit 'ret'
			}
			else
				this.results.length = 1;      // to fit 'ret'
			break;
		case 20:	// object_exp
			this.object_type = this.runtime.types_by_index[m[1]];
;
			this.beh_index = -1;
			this.func = m[2];
			this.return_string = m[3];
			if (m[4])
				this.instance_expr = new cr.expNode(owner_, m[4]);
			else
				this.instance_expr = null;
			this.results = [];
			this.parameters = [];
			if (m.length === 6)
			{
				paramsModel = m[5];
				this.results.length = paramsModel.length + 1;
			}
			else
				this.results.length = 1;	// to fit 'ret'
			break;
		case 21:		// instvar_exp
			this.object_type = this.runtime.types_by_index[m[1]];
;
			this.return_string = m[2];
			if (m[3])
				this.instance_expr = new cr.expNode(owner_, m[3]);
			else
				this.instance_expr = null;
			this.varindex = m[4];
			break;
		case 22:		// behavior_exp
			this.object_type = this.runtime.types_by_index[m[1]];
;
			this.behavior_type = this.object_type.getBehaviorByName(m[2]);
;
			this.beh_index = this.object_type.getBehaviorIndexByName(m[2]);
			this.func = m[3];
			this.return_string = m[4];
			if (m[5])
				this.instance_expr = new cr.expNode(owner_, m[5]);
			else
				this.instance_expr = null;
			this.results = [];
			this.parameters = [];
			if (m.length === 7)
			{
				paramsModel = m[6];
				this.results.length = paramsModel.length + 1;
			}
			else
				this.results.length = 1;	// to fit 'ret'
			break;
		case 23:		// eventvar_exp
			this.varname = m[1];
			this.eventvar = null;	// assigned in postInit
			break;
		}
		if (this.type >= 4 && this.type <= 17)
		{
			this.first = new cr.expNode(owner_, m[1]);
			this.second = new cr.expNode(owner_, m[2]);
		}
		if (paramsModel)
		{
			var i, len;
			for (i = 0, len = paramsModel.length; i < len; i++)
				this.parameters.push(new cr.expNode(owner_, paramsModel[i]));
		}
		cr.seal(this);
	};
	ExpNode.prototype.postInit = function ()
	{
		if (this.type === 23)	// eventvar_exp
		{
			this.eventvar = this.owner.runtime.getEventVariableByName(this.varname, this.owner.block.parent);
;
		}
		if (this.first)
			this.first.postInit();
		if (this.second)
			this.second.postInit();
		if (this.third)
			this.third.postInit();
		if (this.instance_expr)
			this.instance_expr.postInit();
		if (this.parameters)
		{
			var i, len;
			for (i = 0, len = this.parameters.length; i < len; i++)
				this.parameters[i].postInit();
		}
	};
	ExpNode.prototype.eval_system_exp = function (ret)
	{
		this.results[0] = ret;
		var temp = this.owner.pushTempValue();
		var i, len;
		for (i = 0, len = this.parameters.length; i < len; i++)
		{
			this.parameters[i].get(temp);
			this.results[i + 1] = temp.data;   // passing actual javascript value as argument instead of expvalue
		}
		this.owner.popTempValue();
		this.func.apply(this.runtime.system, this.results);
	};
	ExpNode.prototype.eval_object_behavior_exp = function (ret)
	{
		var sol = this.object_type.getCurrentSol();
		var instances = sol.getObjects();
		if (!instances.length)
		{
			if (sol.else_instances.length)
				instances = sol.else_instances;
			else
			{
				if (this.return_string)
					ret.set_string("");
				else
					ret.set_int(0);
				return;
			}
		}
		this.results[0] = ret;
		ret.object_class = this.object_type;		// so expression can access family type if need be
		var temp = this.owner.pushTempValue();
		var i, len;
		for (i = 0, len = this.parameters.length; i < len; i++) {
			this.parameters[i].get(temp);
			this.results[i + 1] = temp.data;   // passing actual javascript value as argument instead of expvalue
		}
		var index = this.owner.solindex;
		if (this.instance_expr) {
			this.instance_expr.get(temp);
			if (temp.is_number()) {
				index = temp.data;
				instances = this.object_type.instances;    // pick from all instances, not SOL
			}
		}
		this.owner.popTempValue();
		index %= instances.length;      // wraparound
		if (index < 0)
			index += instances.length;
		var returned_val;
		var inst = instances[index];
		if (this.beh_index > -1)
		{
			var offset = 0;
			if (this.object_type.is_family)
			{
				offset = inst.type.family_beh_map[this.object_type.family_index];
			}
			returned_val = this.func.apply(inst.behavior_insts[this.beh_index + offset], this.results);
		}
		else
			returned_val = this.func.apply(inst, this.results);
;
	};
	ExpNode.prototype.eval_instvar_exp = function (ret)
	{
		var sol = this.object_type.getCurrentSol();
		var instances = sol.getObjects();
		if (!instances.length)
		{
			if (sol.else_instances.length)
				instances = sol.else_instances;
			else
			{
				if (this.return_string)
					ret.set_string("");
				else
					ret.set_int(0);
				return;
			}
		}
		var index = this.owner.solindex;
		if (this.instance_expr)
		{
			var temp = this.owner.pushTempValue();
			this.instance_expr.get(temp);
			if (temp.is_number())
			{
				index = temp.data;
				var type_instances = this.object_type.instances;
				index %= type_instances.length;     // wraparound
				if (index < 0)                      // offset
					index += type_instances.length;
				var to_ret = type_instances[index].instance_vars[this.varindex];
				if (cr.is_string(to_ret))
					ret.set_string(to_ret);
				else
					ret.set_float(to_ret);
				this.owner.popTempValue();
				return;         // done
			}
			this.owner.popTempValue();
		}
		index %= instances.length;      // wraparound
		if (index < 0)
			index += instances.length;
		var inst = instances[index];
		var offset = 0;
		if (this.object_type.is_family)
		{
			offset = inst.type.family_var_map[this.object_type.family_index];
		}
		var to_ret = inst.instance_vars[this.varindex + offset];
		if (cr.is_string(to_ret))
			ret.set_string(to_ret);
		else
			ret.set_float(to_ret);
	};
	ExpNode.prototype.eval_int = function (ret)
	{
		ret.type = cr.exptype.Integer;
		ret.data = this.value;
	};
	ExpNode.prototype.eval_float = function (ret)
	{
		ret.type = cr.exptype.Float;
		ret.data = this.value;
	};
	ExpNode.prototype.eval_string = function (ret)
	{
		ret.type = cr.exptype.String;
		ret.data = this.value;
	};
	ExpNode.prototype.eval_unaryminus = function (ret)
	{
		this.first.get(ret);                // retrieve operand
		if (ret.is_number())
			ret.data = -ret.data;
	};
	ExpNode.prototype.eval_add = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number() && temp.is_number())
		{
			ret.data += temp.data;          // both operands numbers: add
			if (temp.is_float())
				ret.make_float();
		}
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_subtract = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number() && temp.is_number())
		{
			ret.data -= temp.data;          // both operands numbers: subtract
			if (temp.is_float())
				ret.make_float();
		}
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_multiply = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number() && temp.is_number())
		{
			ret.data *= temp.data;          // both operands numbers: multiply
			if (temp.is_float())
				ret.make_float();
		}
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_divide = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number() && temp.is_number())
		{
			ret.data /= temp.data;          // both operands numbers: divide
			ret.make_float();
		}
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_mod = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number() && temp.is_number())
		{
			ret.data %= temp.data;          // both operands numbers: modulo
			if (temp.is_float())
				ret.make_float();
		}
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_power = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number() && temp.is_number())
		{
			ret.data = Math.pow(ret.data, temp.data);   // both operands numbers: raise to power
			if (temp.is_float())
				ret.make_float();
		}
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_and = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number())
		{
			if (temp.is_string())
			{
				ret.set_string(ret.data.toString() + temp.data);
			}
			else
			{
				if (ret.data && temp.data)
					ret.set_int(1);
				else
					ret.set_int(0);
			}
		}
		else if (ret.is_string())
		{
			if (temp.is_string())
				ret.data += temp.data;
			else
			{
				ret.data += (Math.round(temp.data * 1e10) / 1e10).toString();
			}
		}
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_or = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number() && temp.is_number())
		{
			if (ret.data || temp.data)
				ret.set_int(1);
			else
				ret.set_int(0);
		}
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_conditional = function (ret)
	{
		this.first.get(ret);                // condition operand
		if (ret.data)                       // is true
			this.second.get(ret);           // evaluate second operand to ret
		else
			this.third.get(ret);            // evaluate third operand to ret
	};
	ExpNode.prototype.eval_equal = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		ret.set_int(ret.data === temp.data ? 1 : 0);
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_notequal = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		ret.set_int(ret.data !== temp.data ? 1 : 0);
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_less = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		ret.set_int(ret.data < temp.data ? 1 : 0);
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_lessequal = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		ret.set_int(ret.data <= temp.data ? 1 : 0);
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_greater = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		ret.set_int(ret.data > temp.data ? 1 : 0);
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_greaterequal = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		ret.set_int(ret.data >= temp.data ? 1 : 0);
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_eventvar_exp = function (ret)
	{
		var val = this.eventvar.getValue();
		if (cr.is_number(val))
			ret.set_float(val);
		else
			ret.set_string(val);
	};
	cr.expNode = ExpNode;
	function ExpValue(type, data)
	{
		this.type = type || cr.exptype.Integer;
		this.data = data || 0;
		this.object_class = null;
;
;
;
		if (this.type == cr.exptype.Integer)
			this.data = Math.floor(this.data);
		cr.seal(this);
	};
	ExpValue.prototype.is_int = function ()
	{
		return this.type === cr.exptype.Integer;
	};
	ExpValue.prototype.is_float = function ()
	{
		return this.type === cr.exptype.Float;
	};
	ExpValue.prototype.is_number = function ()
	{
		return this.type === cr.exptype.Integer || this.type === cr.exptype.Float;
	};
	ExpValue.prototype.is_string = function ()
	{
		return this.type === cr.exptype.String;
	};
	ExpValue.prototype.make_int = function ()
	{
		if (!this.is_int())
		{
			if (this.is_float())
				this.data = Math.floor(this.data);      // truncate float
			else if (this.is_string())
				this.data = parseInt(this.data, 10);
			this.type = cr.exptype.Integer;
		}
	};
	ExpValue.prototype.make_float = function ()
	{
		if (!this.is_float())
		{
			if (this.is_string())
				this.data = parseFloat(this.data);
			this.type = cr.exptype.Float;
		}
	};
	ExpValue.prototype.make_string = function ()
	{
		if (!this.is_string())
		{
			this.data = this.data.toString();
			this.type = cr.exptype.String;
		}
	};
	ExpValue.prototype.set_int = function (val)
	{
;
		this.type = cr.exptype.Integer;
		this.data = Math.floor(val);
	};
	ExpValue.prototype.set_float = function (val)
	{
;
		this.type = cr.exptype.Float;
		this.data = val;
	};
	ExpValue.prototype.set_string = function (val)
	{
;
		this.type = cr.exptype.String;
		this.data = val;
	};
	ExpValue.prototype.set_any = function (val)
	{
		if (cr.is_number(val))
		{
			this.type = cr.exptype.Float;
			this.data = val;
		}
		else if (cr.is_string(val))
		{
			this.type = cr.exptype.String;
			this.data = val.toString();
		}
		else
		{
			this.type = cr.exptype.Integer;
			this.data = 0;
		}
	};
	cr.expvalue = ExpValue;
	cr.exptype = {
		Integer: 0,     // emulated; no native integer support in javascript
		Float: 1,
		String: 2
	};
}());
;
cr.system_object = function (runtime)
{
    this.runtime = runtime;
	this.waits = [];
};
cr.system_object.prototype.saveToJSON = function ()
{
	var o = {};
	var i, len, j, lenj, p, w, t, sobj;
	o["waits"] = [];
	var owaits = o["waits"];
	var waitobj;
	for (i = 0, len = this.waits.length; i < len; i++)
	{
		w = this.waits[i];
		waitobj = {
			"t": w.time,
			"ev": w.ev.sid,
			"sm": [],
			"sols": {}
		};
		if (w.ev.actions[w.actindex])
			waitobj["act"] = w.ev.actions[w.actindex].sid;
		for (j = 0, lenj = w.solModifiers.length; j < lenj; j++)
			waitobj["sm"].push(w.solModifiers[j].sid);
		for (p in w.sols)
		{
			if (w.sols.hasOwnProperty(p))
			{
				t = this.runtime.types_by_index[parseInt(p, 10)];
;
				sobj = {
					"sa": w.sols[p].sa,
					"insts": []
				};
				for (j = 0, lenj = w.sols[p].insts.length; j < lenj; j++)
					sobj["insts"].push(w.sols[p].insts[j].uid);
				waitobj["sols"][t.sid.toString()] = sobj;
			}
		}
		owaits.push(waitobj);
	}
	return o;
};
cr.system_object.prototype.loadFromJSON = function (o)
{
	var owaits = o["waits"];
	var i, len, j, lenj, p, w, addWait, e, aindex, t, savedsol, nusol, inst;
	this.waits.length = 0;
	for (i = 0, len = owaits.length; i < len; i++)
	{
		w = owaits[i];
		e = this.runtime.blocksBySid[w["ev"].toString()];
		if (!e)
			continue;	// event must've gone missing
		aindex = -1;
		for (j = 0, lenj = e.actions.length; j < lenj; j++)
		{
			if (e.actions[j].sid === w["act"])
			{
				aindex = j;
				break;
			}
		}
		if (aindex === -1)
			continue;	// action must've gone missing
		addWait = {};
		addWait.sols = {};
		addWait.solModifiers = [];
		addWait.deleteme = false;
		addWait.time = w["t"];
		addWait.ev = e;
		addWait.actindex = aindex;
		for (j = 0, lenj = w["sm"].length; j < lenj; j++)
		{
			t = this.runtime.getObjectTypeBySid(w["sm"][j]);
			if (t)
				addWait.solModifiers.push(t);
		}
		for (p in w["sols"])
		{
			if (w["sols"].hasOwnProperty(p))
			{
				t = this.runtime.getObjectTypeBySid(parseInt(p, 10));
				if (!t)
					continue;		// type must've been deleted
				savedsol = w["sols"][p];
				nusol = {
					sa: savedsol["sa"],
					insts: []
				};
				for (j = 0, lenj = savedsol["insts"].length; j < lenj; j++)
				{
					inst = this.runtime.getObjectByUID(savedsol["insts"][j]);
					if (inst)
						nusol.insts.push(inst);
				}
				addWait.sols[t.index.toString()] = nusol;
			}
		}
		this.waits.push(addWait);
	}
};
(function ()
{
	var sysProto = cr.system_object.prototype;
	function SysCnds() {};
    SysCnds.prototype.EveryTick = function()
    {
        return true;
    };
    SysCnds.prototype.OnLayoutStart = function()
    {
        return true;
    };
    SysCnds.prototype.OnLayoutEnd = function()
    {
        return true;
    };
    SysCnds.prototype.Compare = function(x, cmp, y)
    {
        return cr.do_cmp(x, cmp, y);
    };
    SysCnds.prototype.CompareTime = function (cmp, t)
    {
        var elapsed = this.runtime.kahanTime.sum;
        if (cmp === 0)
        {
            var cnd = this.runtime.getCurrentCondition();
            if (!cnd.extra.CompareTime_executed)
            {
                if (elapsed >= t)
                {
                    cnd.extra.CompareTime_executed = true;
                    return true;
                }
            }
            return false;
        }
        return cr.do_cmp(elapsed, cmp, t);
    };
    SysCnds.prototype.LayerVisible = function (layer)
    {
        if (!layer)
            return false;
        else
            return layer.visible;
    };
	SysCnds.prototype.LayerCmpOpacity = function (layer, cmp, opacity_)
	{
		if (!layer)
			return false;
		return cr.do_cmp(layer.opacity * 100, cmp, opacity_);
	};
    SysCnds.prototype.Repeat = function (count)
    {
		var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
        var current_loop = this.runtime.pushLoopStack();
        var i;
		if (solModifierAfterCnds)
		{
			for (i = 0; i < count && !current_loop.stopped; i++)
			{
				this.runtime.pushCopySol(current_event.solModifiers);
				current_loop.index = i;
				current_event.retrigger();
				this.runtime.popSol(current_event.solModifiers);
			}
		}
		else
		{
			for (i = 0; i < count && !current_loop.stopped; i++)
			{
				current_loop.index = i;
				current_event.retrigger();
			}
		}
        this.runtime.popLoopStack();
		return false;
    };
	SysCnds.prototype.While = function (count)
    {
		var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
        var current_loop = this.runtime.pushLoopStack();
        var i;
		if (solModifierAfterCnds)
		{
			for (i = 0; !current_loop.stopped; i++)
			{
				this.runtime.pushCopySol(current_event.solModifiers);
				current_loop.index = i;
				if (!current_event.retrigger())		// one of the other conditions returned false
					current_loop.stopped = true;	// break
				this.runtime.popSol(current_event.solModifiers);
			}
		}
		else
		{
			for (i = 0; !current_loop.stopped; i++)
			{
				current_loop.index = i;
				if (!current_event.retrigger())
					current_loop.stopped = true;
			}
		}
        this.runtime.popLoopStack();
		return false;
    };
    SysCnds.prototype.For = function (name, start, end)
    {
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
        var current_loop = this.runtime.pushLoopStack(name);
        var i;
		if (end < start)
		{
			if (solModifierAfterCnds)
			{
				for (i = start; i >= end && !current_loop.stopped; --i)  // inclusive to end
				{
					this.runtime.pushCopySol(current_event.solModifiers);
					current_loop.index = i;
					current_event.retrigger();
					this.runtime.popSol(current_event.solModifiers);
				}
			}
			else
			{
				for (i = start; i >= end && !current_loop.stopped; --i)  // inclusive to end
				{
					current_loop.index = i;
					current_event.retrigger();
				}
			}
		}
		else
		{
			if (solModifierAfterCnds)
			{
				for (i = start; i <= end && !current_loop.stopped; ++i)  // inclusive to end
				{
					this.runtime.pushCopySol(current_event.solModifiers);
					current_loop.index = i;
					current_event.retrigger();
					this.runtime.popSol(current_event.solModifiers);
				}
			}
			else
			{
				for (i = start; i <= end && !current_loop.stopped; ++i)  // inclusive to end
				{
					current_loop.index = i;
					current_event.retrigger();
				}
			}
		}
        this.runtime.popLoopStack();
		return false;
    };
	var foreach_instancestack = [];
	var foreach_instanceptr = -1;
    SysCnds.prototype.ForEach = function (obj)
    {
        var sol = obj.getCurrentSol();
		foreach_instanceptr++;
		if (foreach_instancestack.length === foreach_instanceptr)
			foreach_instancestack.push([]);
		var instances = foreach_instancestack[foreach_instanceptr];
		cr.shallowAssignArray(instances, sol.getObjects());
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
        var current_loop = this.runtime.pushLoopStack();
        var i, len, j, lenj, inst, s, sol2;
		var is_contained = obj.is_contained;
		if (solModifierAfterCnds)
		{
			for (i = 0, len = instances.length; i < len && !current_loop.stopped; i++)
			{
				this.runtime.pushCopySol(current_event.solModifiers);
				inst = instances[i];
				sol = obj.getCurrentSol();
				sol.select_all = false;
				sol.instances.length = 1;
				sol.instances[0] = inst;
				if (is_contained)
				{
					for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
					{
						s = inst.siblings[j];
						sol2 = s.type.getCurrentSol();
						sol2.select_all = false;
						sol2.instances.length = 1;
						sol2.instances[0] = s;
					}
				}
				current_loop.index = i;
				current_event.retrigger();
				this.runtime.popSol(current_event.solModifiers);
			}
		}
		else
		{
			sol.select_all = false;
			sol.instances.length = 1;
			for (i = 0, len = instances.length; i < len && !current_loop.stopped; i++)
			{
				inst = instances[i];
				sol.instances[0] = inst;
				if (is_contained)
				{
					for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
					{
						s = inst.siblings[j];
						sol2 = s.type.getCurrentSol();
						sol2.select_all = false;
						sol2.instances.length = 1;
						sol2.instances[0] = s;
					}
				}
				current_loop.index = i;
				current_event.retrigger();
			}
		}
		instances.length = 0;
        this.runtime.popLoopStack();
		foreach_instanceptr--;
		return false;
    };
	function foreach_sortinstances(a, b)
	{
		var va = a.extra.c2_foreachordered_val;
		var vb = b.extra.c2_foreachordered_val;
		if (cr.is_number(va) && cr.is_number(vb))
			return va - vb;
		else
		{
			va = "" + va;
			vb = "" + vb;
			if (va < vb)
				return -1;
			else if (va > vb)
				return 1;
			else
				return 0;
		}
	};
	SysCnds.prototype.ForEachOrdered = function (obj, exp, order)
    {
        var sol = obj.getCurrentSol();
		foreach_instanceptr++;
		if (foreach_instancestack.length === foreach_instanceptr)
			foreach_instancestack.push([]);
		var instances = foreach_instancestack[foreach_instanceptr];
		cr.shallowAssignArray(instances, sol.getObjects());
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var current_condition = this.runtime.getCurrentCondition();
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
        var current_loop = this.runtime.pushLoopStack();
		var i, len, j, lenj, inst, s, sol2;
		for (i = 0, len = instances.length; i < len; i++)
		{
			instances[i].extra.c2_foreachordered_val = current_condition.parameters[1].get(i);
		}
		instances.sort(foreach_sortinstances);
		if (order === 1)
			instances.reverse();
		var is_contained = obj.is_contained;
		if (solModifierAfterCnds)
		{
			for (i = 0, len = instances.length; i < len && !current_loop.stopped; i++)
			{
				this.runtime.pushCopySol(current_event.solModifiers);
				inst = instances[i];
				sol = obj.getCurrentSol();
				sol.select_all = false;
				sol.instances.length = 1;
				sol.instances[0] = inst;
				if (is_contained)
				{
					for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
					{
						s = inst.siblings[j];
						sol2 = s.type.getCurrentSol();
						sol2.select_all = false;
						sol2.instances.length = 1;
						sol2.instances[0] = s;
					}
				}
				current_loop.index = i;
				current_event.retrigger();
				this.runtime.popSol(current_event.solModifiers);
			}
		}
		else
		{
			sol.select_all = false;
			sol.instances.length = 1;
			for (i = 0, len = instances.length; i < len && !current_loop.stopped; i++)
			{
				inst = instances[i];
				sol.instances[0] = inst;
				if (is_contained)
				{
					for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
					{
						s = inst.siblings[j];
						sol2 = s.type.getCurrentSol();
						sol2.select_all = false;
						sol2.instances.length = 1;
						sol2.instances[0] = s;
					}
				}
				current_loop.index = i;
				current_event.retrigger();
			}
		}
		instances.length = 0;
        this.runtime.popLoopStack();
		foreach_instanceptr--;
		return false;
    };
	SysCnds.prototype.PickByComparison = function (obj_, exp_, cmp_, val_)
	{
		var i, len, k, inst;
		if (!obj_)
			return;
		foreach_instanceptr++;
		if (foreach_instancestack.length === foreach_instanceptr)
			foreach_instancestack.push([]);
		var tmp_instances = foreach_instancestack[foreach_instanceptr];
		var sol = obj_.getCurrentSol();
		cr.shallowAssignArray(tmp_instances, sol.getObjects());
		if (sol.select_all)
			sol.else_instances.length = 0;
		var current_condition = this.runtime.getCurrentCondition();
		for (i = 0, k = 0, len = tmp_instances.length; i < len; i++)
		{
			inst = tmp_instances[i];
			tmp_instances[k] = inst;
			exp_ = current_condition.parameters[1].get(i);
			val_ = current_condition.parameters[3].get(i);
			if (cr.do_cmp(exp_, cmp_, val_))
			{
				k++;
			}
			else
			{
				sol.else_instances.push(inst);
			}
		}
		tmp_instances.length = k;
		sol.select_all = false;
		cr.shallowAssignArray(sol.instances, tmp_instances);
		tmp_instances.length = 0;
		foreach_instanceptr--;
		obj_.applySolToContainer();
		return !!sol.instances.length;
	};
	SysCnds.prototype.PickByEvaluate = function (obj_, exp_)
	{
		var i, len, k, inst;
		if (!obj_)
			return;
		foreach_instanceptr++;
		if (foreach_instancestack.length === foreach_instanceptr)
			foreach_instancestack.push([]);
		var tmp_instances = foreach_instancestack[foreach_instanceptr];
		var sol = obj_.getCurrentSol();
		cr.shallowAssignArray(tmp_instances, sol.getObjects());
		if (sol.select_all)
			sol.else_instances.length = 0;
		var current_condition = this.runtime.getCurrentCondition();
		for (i = 0, k = 0, len = tmp_instances.length; i < len; i++)
		{
			inst = tmp_instances[i];
			tmp_instances[k] = inst;
			exp_ = current_condition.parameters[1].get(i);
			if (exp_)
			{
				k++;
			}
			else
			{
				sol.else_instances.push(inst);
			}
		}
		tmp_instances.length = k;
		sol.select_all = false;
		cr.shallowAssignArray(sol.instances, tmp_instances);
		tmp_instances.length = 0;
		foreach_instanceptr--;
		obj_.applySolToContainer();
		return !!sol.instances.length;
	};
    SysCnds.prototype.TriggerOnce = function ()
    {
        var cndextra = this.runtime.getCurrentCondition().extra;
		if (typeof cndextra.TriggerOnce_lastTick === "undefined")
			cndextra.TriggerOnce_lastTick = -1;
        var last_tick = cndextra.TriggerOnce_lastTick;
        var cur_tick = this.runtime.tickcount;
        cndextra.TriggerOnce_lastTick = cur_tick;
        return this.runtime.layout_first_tick || last_tick !== cur_tick - 1;
    };
    SysCnds.prototype.Every = function (seconds)
    {
        var cnd = this.runtime.getCurrentCondition();
        var last_time = cnd.extra.Every_lastTime || 0;
        var cur_time = this.runtime.kahanTime.sum;
		if (typeof cnd.extra.Every_seconds === "undefined")
			cnd.extra.Every_seconds = seconds;
		var this_seconds = cnd.extra.Every_seconds;
        if (cur_time >= last_time + this_seconds)
        {
            cnd.extra.Every_lastTime = last_time + this_seconds;
			if (cur_time >= cnd.extra.Every_lastTime + this_seconds)
				cnd.extra.Every_lastTime = cur_time;
			cnd.extra.Every_seconds = seconds;
            return true;
        }
        else
            return false;
    };
    SysCnds.prototype.PickNth = function (obj, index)
    {
        if (!obj)
            return false;
        var sol = obj.getCurrentSol();
        var instances = sol.getObjects();
		index = cr.floor(index);
        if (index < 0 || index >= instances.length)
            return false;
		var inst = instances[index];
        sol.pick_one(inst);
		obj.applySolToContainer();
        return true;
    };
	SysCnds.prototype.PickRandom = function (obj)
    {
        if (!obj)
            return false;
        var sol = obj.getCurrentSol();
        var instances = sol.getObjects();
		var index = cr.floor(Math.random() * instances.length);
        if (index >= instances.length)
            return false;
		var inst = instances[index];
        sol.pick_one(inst);
		obj.applySolToContainer();
        return true;
    };
	SysCnds.prototype.CompareVar = function (v, cmp, val)
    {
        return cr.do_cmp(v.getValue(), cmp, val);
    };
    SysCnds.prototype.IsGroupActive = function (group)
    {
        return this.runtime.activeGroups[(/*this.runtime.getCurrentCondition().sheet.name + "|" + */group).toLowerCase()];
    };
	SysCnds.prototype.IsPreview = function ()
	{
		return typeof cr_is_preview !== "undefined";
	};
	SysCnds.prototype.PickAll = function (obj)
    {
        if (!obj)
            return false;
		if (!obj.instances.length)
			return false;
        var sol = obj.getCurrentSol();
        sol.select_all = true;
		obj.applySolToContainer();
        return true;
    };
	SysCnds.prototype.IsMobile = function ()
	{
		return this.runtime.isMobile;
	};
	SysCnds.prototype.CompareBetween = function (x, a, b)
	{
		return x >= a && x <= b;
	};
	SysCnds.prototype.Else = function ()
	{
		var current_frame = this.runtime.getCurrentEventStack();
		if (current_frame.else_branch_ran)
			return false;		// another event in this else-if chain has run
		else
			return !current_frame.last_event_true;
		/*
		var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var prev_event = current_event.prev_block;
		if (!prev_event)
			return false;
		if (prev_event.is_logical)
			return !this.runtime.last_event_true;
		var i, len, j, lenj, s, sol, temp, inst, any_picked = false;
		for (i = 0, len = prev_event.cndReferences.length; i < len; i++)
		{
			s = prev_event.cndReferences[i];
			sol = s.getCurrentSol();
			if (sol.select_all || sol.instances.length === s.instances.length)
			{
				sol.select_all = false;
				sol.instances.length = 0;
			}
			else
			{
				if (sol.instances.length === 1 && sol.else_instances.length === 0 && s.instances.length >= 2)
				{
					inst = sol.instances[0];
					sol.instances.length = 0;
					for (j = 0, lenj = s.instances.length; j < lenj; j++)
					{
						if (s.instances[j] != inst)
							sol.instances.push(s.instances[j]);
					}
					any_picked = true;
				}
				else
				{
					temp = sol.instances;
					sol.instances = sol.else_instances;
					sol.else_instances = temp;
					any_picked = true;
				}
			}
		}
		return any_picked;
		*/
	};
	SysCnds.prototype.OnLoadFinished = function ()
	{
		return true;
	};
	SysCnds.prototype.OnCanvasSnapshot = function ()
	{
		return true;
	};
	SysCnds.prototype.EffectsSupported = function ()
	{
		return !!this.runtime.glwrap;
	};
	SysCnds.prototype.OnSaveComplete = function ()
	{
		return true;
	};
	SysCnds.prototype.OnLoadComplete = function ()
	{
		return true;
	};
	SysCnds.prototype.OnLoadFailed = function ()
	{
		return true;
	};
	SysCnds.prototype.ObjectUIDExists = function (u)
	{
		return !!this.runtime.getObjectByUID(u);
	};
	SysCnds.prototype.IsOnPlatform = function (p)
	{
		var rt = this.runtime;
		switch (p) {
		case 0:		// HTML5 website
			return !rt.isDomFree && !rt.isNodeWebkit && !rt.isPhoneGap && !rt.isWindows8App && !rt.isWindowsPhone8 && !rt.isBlackberry10;
		case 1:		// iOS
			return rt.isiOS;
		case 2:		// Android
			return rt.isAndroid;
		case 3:		// Windows 8
			return rt.isWindows8App;
		case 4:		// Windows Phone 8
			return rt.isWindowsPhone8;
		case 5:		// Blackberry 10
			return rt.isBlackberry10;
		case 6:		// Tizen
			return rt.isTizen;
		case 7:		// node-webkit
			return rt.isNodeWebkit;
		case 8:		// CocoonJS
			return rt.isCocoonJs;
		case 9:		// PhoneGap
			return rt.isPhoneGap;
		case 10:	// Scirra Arcade
			return rt.isArcade;
		case 11:	// node-webkit
			return rt.isNodeWebkit;
		default:	// should not be possible
			return false;
		}
	};
	var cacheRegex = null;
	var lastRegex = "";
	var lastFlags = "";
	function getRegex(regex_, flags_)
	{
		if (!cacheRegex || regex_ !== lastRegex || flags_ !== lastFlags)
		{
			cacheRegex = new RegExp(regex_, flags_);
			lastRegex = regex_;
			lastFlags = flags_;
		}
		cacheRegex.lastIndex = 0;		// reset
		return cacheRegex;
	};
	SysCnds.prototype.RegexTest = function (str_, regex_, flags_)
	{
		var regex = getRegex(regex_, flags_);
		return regex.test(str_);
	};
	var tmp_arr = [];
	SysCnds.prototype.PickOverlappingPoint = function (obj_, x_, y_)
	{
		if (!obj_)
            return false;
        var sol = obj_.getCurrentSol();
        var instances = sol.getObjects();
		var current_event = this.runtime.getCurrentEventStack().current_event;
		var orblock = current_event.orblock;
		var cnd = this.runtime.getCurrentCondition();
		var i, len, inst, pick;
		if (sol.select_all)
		{
			cr.shallowAssignArray(tmp_arr, instances);
			sol.else_instances.length = 0;
			sol.select_all = false;
			sol.instances.length = 0;
		}
		else
		{
			if (orblock)
			{
				cr.shallowAssignArray(tmp_arr, sol.else_instances);
				sol.else_instances.length = 0;
			}
			else
			{
				cr.shallowAssignArray(tmp_arr, instances);
				sol.instances.length = 0;
			}
		}
		for (i = 0, len = tmp_arr.length; i < len; ++i)
		{
			inst = tmp_arr[i];
			pick = cr.xor(inst.contains_pt(x_, y_), cnd.inverted);
			if (pick)
				sol.instances.push(inst);
			else
				sol.else_instances.push(inst);
		}
		obj_.applySolToContainer();
		return cr.xor(!!sol.instances.length, cnd.inverted);
	};
	sysProto.cnds = new SysCnds();
    function SysActs() {};
    SysActs.prototype.GoToLayout = function(to)
    {
		if (this.runtime.isloading)
			return;		// cannot change layout while loading on loader layout
		if (this.runtime.changelayout)
			return;		// already changing to a different layout
;
        this.runtime.changelayout = to;
    };
    SysActs.prototype.CreateObject = function (obj, layer, x, y)
    {
        if (!layer || !obj)
            return;
        var inst = this.runtime.createInstance(obj, layer, x, y);
		if (!inst)
			return;
		this.runtime.isInOnDestroy++;
		var i, len, s;
		this.runtime.trigger(Object.getPrototypeOf(obj.plugin).cnds.OnCreated, inst);
		if (inst.is_contained)
		{
			for (i = 0, len = inst.siblings.length; i < len; i++)
			{
				s = inst.siblings[i];
				this.runtime.trigger(Object.getPrototypeOf(s.type.plugin).cnds.OnCreated, s);
			}
		}
		this.runtime.isInOnDestroy--;
        var sol = obj.getCurrentSol();
        sol.select_all = false;
		sol.instances.length = 1;
		sol.instances[0] = inst;
		if (inst.is_contained)
		{
			for (i = 0, len = inst.siblings.length; i < len; i++)
			{
				s = inst.siblings[i];
				sol = s.type.getCurrentSol();
				sol.select_all = false;
				sol.instances.length = 1;
				sol.instances[0] = s;
			}
		}
    };
    SysActs.prototype.SetLayerVisible = function (layer, visible_)
    {
        if (!layer)
            return;
		if (layer.visible !== visible_)
		{
			layer.visible = visible_;
			this.runtime.redraw = true;
		}
    };
	SysActs.prototype.SetLayerOpacity = function (layer, opacity_)
	{
		if (!layer)
			return;
		opacity_ = cr.clamp(opacity_ / 100, 0, 1);
		if (layer.opacity !== opacity_)
		{
			layer.opacity = opacity_;
			this.runtime.redraw = true;
		}
	};
	SysActs.prototype.SetLayerScaleRate = function (layer, sr)
	{
		if (!layer)
			return;
		if (layer.zoomRate !== sr)
		{
			layer.zoomRate = sr;
			this.runtime.redraw = true;
		}
	};
	SysActs.prototype.SetLayoutScale = function (s)
	{
		if (!this.runtime.running_layout)
			return;
		if (this.runtime.running_layout.scale !== s)
		{
			this.runtime.running_layout.scale = s;
			this.runtime.running_layout.boundScrolling();
			this.runtime.redraw = true;
		}
	};
    SysActs.prototype.ScrollX = function(x)
    {
        this.runtime.running_layout.scrollToX(x);
    };
    SysActs.prototype.ScrollY = function(y)
    {
        this.runtime.running_layout.scrollToY(y);
    };
    SysActs.prototype.Scroll = function(x, y)
    {
        this.runtime.running_layout.scrollToX(x);
        this.runtime.running_layout.scrollToY(y);
    };
    SysActs.prototype.ScrollToObject = function(obj)
    {
        var inst = obj.getFirstPicked();
        if (inst)
        {
            this.runtime.running_layout.scrollToX(inst.x);
            this.runtime.running_layout.scrollToY(inst.y);
        }
    };
	SysActs.prototype.SetVar = function(v, x)
	{
;
		if (v.vartype === 0)
		{
			if (cr.is_number(x))
				v.setValue(x);
			else
				v.setValue(parseFloat(x));
		}
		else if (v.vartype === 1)
			v.setValue(x.toString());
	};
	SysActs.prototype.AddVar = function(v, x)
	{
;
		if (v.vartype === 0)
		{
			if (cr.is_number(x))
				v.setValue(v.getValue() + x);
			else
				v.setValue(v.getValue() + parseFloat(x));
		}
		else if (v.vartype === 1)
			v.setValue(v.getValue() + x.toString());
	};
	SysActs.prototype.SubVar = function(v, x)
	{
;
		if (v.vartype === 0)
		{
			if (cr.is_number(x))
				v.setValue(v.getValue() - x);
			else
				v.setValue(v.getValue() - parseFloat(x));
		}
	};
    SysActs.prototype.SetGroupActive = function (group, active)
    {
		var activeGroups = this.runtime.activeGroups;
		var groupkey = (/*this.runtime.getCurrentAction().sheet.name + "|" + */group).toLowerCase();
		switch (active) {
		case 0:
			activeGroups[groupkey] = false;
			break;
		case 1:
			activeGroups[groupkey] = true;
			break;
		case 2:
			activeGroups[groupkey] = !activeGroups[groupkey];
			break;
		}
    };
    SysActs.prototype.SetTimescale = function (ts_)
    {
        var ts = ts_;
        if (ts < 0)
            ts = 0;
        this.runtime.timescale = ts;
    };
    SysActs.prototype.SetObjectTimescale = function (obj, ts_)
    {
        var ts = ts_;
        if (ts < 0)
            ts = 0;
        if (!obj)
            return;
        var sol = obj.getCurrentSol();
        var instances = sol.getObjects();
        var i, len;
        for (i = 0, len = instances.length; i < len; i++)
        {
            instances[i].my_timescale = ts;
        }
    };
    SysActs.prototype.RestoreObjectTimescale = function (obj)
    {
        if (!obj)
            return false;
        var sol = obj.getCurrentSol();
        var instances = sol.getObjects();
        var i, len;
        for (i = 0, len = instances.length; i < len; i++)
        {
            instances[i].my_timescale = -1.0;
        }
    };
	var waitobjrecycle = [];
	function allocWaitObject()
	{
		var w;
		if (waitobjrecycle.length)
			w = waitobjrecycle.pop();
		else
		{
			w = {};
			w.sols = {};
			w.solModifiers = [];
		}
		w.deleteme = false;
		return w;
	};
	function freeWaitObject(w)
	{
		cr.wipe(w.sols);
		w.solModifiers.length = 0;
		waitobjrecycle.push(w);
	};
	var solstateobjects = [];
	function allocSolStateObject()
	{
		var s;
		if (solstateobjects.length)
			s = solstateobjects.pop();
		else
		{
			s = {};
			s.insts = [];
		}
		s.sa = false;
		return s;
	};
	function freeSolStateObject(s)
	{
		s.insts.length = 0;
		solstateobjects.push(s);
	};
	SysActs.prototype.Wait = function (seconds)
	{
		if (seconds < 0)
			return;
		var i, len, s, t, ss;
		var evinfo = this.runtime.getCurrentEventStack();
		var waitobj = allocWaitObject();
		waitobj.time = this.runtime.kahanTime.sum + seconds;
		waitobj.ev = evinfo.current_event;
		waitobj.actindex = evinfo.actindex + 1;	// pointing at next action
		for (i = 0, len = this.runtime.types_by_index.length; i < len; i++)
		{
			t = this.runtime.types_by_index[i];
			s = t.getCurrentSol();
			if (s.select_all && evinfo.current_event.solModifiers.indexOf(t) === -1)
				continue;
			waitobj.solModifiers.push(t);
			ss = allocSolStateObject();
			ss.sa = s.select_all;
			cr.shallowAssignArray(ss.insts, s.instances);
			waitobj.sols[i.toString()] = ss;
		}
		this.waits.push(waitobj);
		return true;
	};
	SysActs.prototype.SetLayerScale = function (layer, scale)
    {
        if (!layer)
            return;
		if (layer.scale === scale)
			return;
        layer.scale = scale;
        this.runtime.redraw = true;
    };
	SysActs.prototype.ResetGlobals = function ()
	{
		var i, len, g;
		for (i = 0, len = this.runtime.all_global_vars.length; i < len; i++)
		{
			g = this.runtime.all_global_vars[i];
			g.data = g.initial;
		}
	};
	SysActs.prototype.SetLayoutAngle = function (a)
	{
		a = cr.to_radians(a);
		a = cr.clamp_angle(a);
		if (this.runtime.running_layout)
		{
			if (this.runtime.running_layout.angle !== a)
			{
				this.runtime.running_layout.angle = a;
				this.runtime.redraw = true;
			}
		}
	};
	SysActs.prototype.SetLayerAngle = function (layer, a)
    {
        if (!layer)
            return;
		a = cr.to_radians(a);
		a = cr.clamp_angle(a);
		if (layer.angle === a)
			return;
        layer.angle = a;
        this.runtime.redraw = true;
    };
	SysActs.prototype.SetLayerParallax = function (layer, px, py)
    {
        if (!layer)
            return;
		if (layer.parallaxX === px / 100 && layer.parallaxY === py / 100)
			return;
        layer.parallaxX = px / 100;
		layer.parallaxY = py / 100;
        this.runtime.redraw = true;
    };
	SysActs.prototype.SetLayerBackground = function (layer, c)
    {
        if (!layer)
            return;
		var r = cr.GetRValue(c);
		var g = cr.GetGValue(c);
		var b = cr.GetBValue(c);
		if (layer.background_color[0] === r && layer.background_color[1] === g && layer.background_color[2] === b)
			return;
        layer.background_color[0] = r;
		layer.background_color[1] = g;
		layer.background_color[2] = b;
        this.runtime.redraw = true;
    };
	SysActs.prototype.SetLayerTransparent = function (layer, t)
    {
        if (!layer)
            return;
		if (!!t === !!layer.transparent)
			return;
		layer.transparent = !!t;
        this.runtime.redraw = true;
    };
	SysActs.prototype.StopLoop = function ()
	{
		if (this.runtime.loop_stack_index < 0)
			return;		// no loop currently running
		this.runtime.getCurrentLoop().stopped = true;
	};
	SysActs.prototype.GoToLayoutByName = function (layoutname)
	{
		if (this.runtime.isloading)
			return;		// cannot change layout while loading on loader layout
		if (this.runtime.changelayout)
			return;		// already changing to different layout
;
		var l;
		for (l in this.runtime.layouts)
		{
			if (this.runtime.layouts.hasOwnProperty(l) && cr.equals_nocase(l, layoutname))
			{
				this.runtime.changelayout = this.runtime.layouts[l];
				return;
			}
		}
	};
	SysActs.prototype.RestartLayout = function (layoutname)
	{
		if (this.runtime.isloading)
			return;		// cannot restart loader layouts
		if (this.runtime.changelayout)
			return;		// already changing to a different layout
;
		if (!this.runtime.running_layout)
			return;
		this.runtime.changelayout = this.runtime.running_layout;
		var i, len, g;
		for (i = 0, len = this.runtime.allGroups.length; i < len; i++)
		{
			g = this.runtime.allGroups[i];
			this.runtime.activeGroups[g.group_name.toLowerCase()] = g.initially_activated;
		}
	};
	SysActs.prototype.SnapshotCanvas = function (format_, quality_)
	{
		this.runtime.snapshotCanvas = [format_ === 0 ? "image/png" : "image/jpeg", quality_ / 100];
		this.runtime.redraw = true;		// force redraw so snapshot is always taken
	};
	SysActs.prototype.SetCanvasSize = function (w, h)
	{
		if (w <= 0 || h <= 0)
			return;
		this.runtime["setSize"](w, h);
	};
	SysActs.prototype.SetLayoutEffectEnabled = function (enable_, effectname_)
	{
		if (!this.runtime.running_layout || !this.runtime.glwrap)
			return;
		var et = this.runtime.running_layout.getEffectByName(effectname_);
		if (!et)
			return;		// effect name not found
		var enable = (enable_ === 1);
		if (et.active == enable)
			return;		// no change
		et.active = enable;
		this.runtime.running_layout.updateActiveEffects();
		this.runtime.redraw = true;
	};
	SysActs.prototype.SetLayerEffectEnabled = function (layer, enable_, effectname_)
	{
		if (!layer || !this.runtime.glwrap)
			return;
		var et = layer.getEffectByName(effectname_);
		if (!et)
			return;		// effect name not found
		var enable = (enable_ === 1);
		if (et.active == enable)
			return;		// no change
		et.active = enable;
		layer.updateActiveEffects();
		this.runtime.redraw = true;
	};
	SysActs.prototype.SetLayoutEffectParam = function (effectname_, index_, value_)
	{
		if (!this.runtime.running_layout || !this.runtime.glwrap)
			return;
		var et = this.runtime.running_layout.getEffectByName(effectname_);
		if (!et)
			return;		// effect name not found
		var params = this.runtime.running_layout.effect_params[et.index];
		index_ = Math.floor(index_);
		if (index_ < 0 || index_ >= params.length)
			return;		// effect index out of bounds
		if (this.runtime.glwrap.getProgramParameterType(et.shaderindex, index_) === 1)
			value_ /= 100.0;
		if (params[index_] === value_)
			return;		// no change
		params[index_] = value_;
		if (et.active)
			this.runtime.redraw = true;
	};
	SysActs.prototype.SetLayerEffectParam = function (layer, effectname_, index_, value_)
	{
		if (!layer || !this.runtime.glwrap)
			return;
		var et = layer.getEffectByName(effectname_);
		if (!et)
			return;		// effect name not found
		var params = layer.effect_params[et.index];
		index_ = Math.floor(index_);
		if (index_ < 0 || index_ >= params.length)
			return;		// effect index out of bounds
		if (this.runtime.glwrap.getProgramParameterType(et.shaderindex, index_) === 1)
			value_ /= 100.0;
		if (params[index_] === value_)
			return;		// no change
		params[index_] = value_;
		if (et.active)
			this.runtime.redraw = true;
	};
	SysActs.prototype.SaveState = function (slot_)
	{
		this.runtime.saveToSlot = slot_;
	};
	SysActs.prototype.LoadState = function (slot_)
	{
		this.runtime.loadFromSlot = slot_;
	};
	SysActs.prototype.LoadStateJSON = function (jsonstr_)
	{
		this.runtime.loadFromJson = jsonstr_;
	};
	sysProto.acts = new SysActs();
    function SysExps() {};
    SysExps.prototype["int"] = function(ret, x)
    {
        if (cr.is_string(x))
        {
            ret.set_int(parseInt(x, 10));
            if (isNaN(ret.data))
                ret.data = 0;
        }
        else
            ret.set_int(x);
    };
    SysExps.prototype["float"] = function(ret, x)
    {
        if (cr.is_string(x))
        {
            ret.set_float(parseFloat(x));
            if (isNaN(ret.data))
                ret.data = 0;
        }
        else
            ret.set_float(x);
    };
    SysExps.prototype.str = function(ret, x)
    {
        if (cr.is_string(x))
            ret.set_string(x);
        else
            ret.set_string(x.toString());
    };
    SysExps.prototype.len = function(ret, x)
    {
        ret.set_int(x.length || 0);
    };
    SysExps.prototype.random = function (ret, a, b)
    {
        if (b === undefined)
        {
            ret.set_float(Math.random() * a);
        }
        else
        {
            ret.set_float(Math.random() * (b - a) + a);
        }
    };
    SysExps.prototype.sqrt = function(ret, x)
    {
        ret.set_float(Math.sqrt(x));
    };
    SysExps.prototype.abs = function(ret, x)
    {
        ret.set_float(Math.abs(x));
    };
    SysExps.prototype.round = function(ret, x)
    {
        ret.set_int(Math.round(x));
    };
    SysExps.prototype.floor = function(ret, x)
    {
        ret.set_int(Math.floor(x));
    };
    SysExps.prototype.ceil = function(ret, x)
    {
        ret.set_int(Math.ceil(x));
    };
    SysExps.prototype.sin = function(ret, x)
    {
        ret.set_float(Math.sin(cr.to_radians(x)));
    };
    SysExps.prototype.cos = function(ret, x)
    {
        ret.set_float(Math.cos(cr.to_radians(x)));
    };
    SysExps.prototype.tan = function(ret, x)
    {
        ret.set_float(Math.tan(cr.to_radians(x)));
    };
    SysExps.prototype.asin = function(ret, x)
    {
        ret.set_float(cr.to_degrees(Math.asin(x)));
    };
    SysExps.prototype.acos = function(ret, x)
    {
        ret.set_float(cr.to_degrees(Math.acos(x)));
    };
    SysExps.prototype.atan = function(ret, x)
    {
        ret.set_float(cr.to_degrees(Math.atan(x)));
    };
    SysExps.prototype.exp = function(ret, x)
    {
        ret.set_float(Math.exp(x));
    };
    SysExps.prototype.ln = function(ret, x)
    {
        ret.set_float(Math.log(x));
    };
    SysExps.prototype.log10 = function(ret, x)
    {
        ret.set_float(Math.log(x) / Math.LN10);
    };
    SysExps.prototype.max = function(ret)
    {
		var max_ = arguments[1];
		var i, len;
		for (i = 2, len = arguments.length; i < len; i++)
		{
			if (max_ < arguments[i])
				max_ = arguments[i];
		}
		ret.set_float(max_);
    };
    SysExps.prototype.min = function(ret)
    {
        var min_ = arguments[1];
		var i, len;
		for (i = 2, len = arguments.length; i < len; i++)
		{
			if (min_ > arguments[i])
				min_ = arguments[i];
		}
		ret.set_float(min_);
    };
    SysExps.prototype.dt = function(ret)
    {
        ret.set_float(this.runtime.dt);
    };
    SysExps.prototype.timescale = function(ret)
    {
        ret.set_float(this.runtime.timescale);
    };
    SysExps.prototype.wallclocktime = function(ret)
    {
        ret.set_float((Date.now() - this.runtime.start_time) / 1000.0);
    };
    SysExps.prototype.time = function(ret)
    {
        ret.set_float(this.runtime.kahanTime.sum);
    };
    SysExps.prototype.tickcount = function(ret)
    {
        ret.set_int(this.runtime.tickcount);
    };
    SysExps.prototype.objectcount = function(ret)
    {
        ret.set_int(this.runtime.objectcount);
    };
    SysExps.prototype.fps = function(ret)
    {
        ret.set_int(this.runtime.fps);
    };
    SysExps.prototype.loopindex = function(ret, name_)
    {
		var loop, i, len;
        if (!this.runtime.loop_stack.length)
        {
            ret.set_int(0);
            return;
        }
        if (name_)
        {
            for (i = 0, len = this.runtime.loop_stack.length; i < len; i++)
            {
                loop = this.runtime.loop_stack[i];
                if (loop.name === name_)
                {
                    ret.set_int(loop.index);
                    return;
                }
            }
            ret.set_int(0);
        }
        else
        {
			loop = this.runtime.getCurrentLoop();
			ret.set_int(loop ? loop.index : -1);
        }
    };
    SysExps.prototype.distance = function(ret, x1, y1, x2, y2)
    {
        ret.set_float(cr.distanceTo(x1, y1, x2, y2));
    };
    SysExps.prototype.angle = function(ret, x1, y1, x2, y2)
    {
        ret.set_float(cr.to_degrees(cr.angleTo(x1, y1, x2, y2)));
    };
    SysExps.prototype.scrollx = function(ret)
    {
        ret.set_float(this.runtime.running_layout.scrollX);
    };
    SysExps.prototype.scrolly = function(ret)
    {
        ret.set_float(this.runtime.running_layout.scrollY);
    };
    SysExps.prototype.newline = function(ret)
    {
        ret.set_string("\n");
    };
    SysExps.prototype.lerp = function(ret, a, b, x)
    {
        ret.set_float(cr.lerp(a, b, x));
    };
    SysExps.prototype.windowwidth = function(ret)
    {
        ret.set_int(this.runtime.width);
    };
    SysExps.prototype.windowheight = function(ret)
    {
        ret.set_int(this.runtime.height);
    };
	SysExps.prototype.uppercase = function(ret, str)
	{
		ret.set_string(cr.is_string(str) ? str.toUpperCase() : "");
	};
	SysExps.prototype.lowercase = function(ret, str)
	{
		ret.set_string(cr.is_string(str) ? str.toLowerCase() : "");
	};
	SysExps.prototype.clamp = function(ret, x, l, u)
	{
		if (x < l)
			ret.set_float(l);
		else if (x > u)
			ret.set_float(u);
		else
			ret.set_float(x);
	};
	SysExps.prototype.layerscale = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		if (!layer)
			ret.set_float(0);
		else
			ret.set_float(layer.scale);
	};
	SysExps.prototype.layeropacity = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		if (!layer)
			ret.set_float(0);
		else
			ret.set_float(layer.opacity * 100);
	};
	SysExps.prototype.layerscalerate = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		if (!layer)
			ret.set_float(0);
		else
			ret.set_float(layer.zoomRate);
	};
	SysExps.prototype.layerparallaxx = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		if (!layer)
			ret.set_float(0);
		else
			ret.set_float(layer.parallaxX * 100);
	};
	SysExps.prototype.layerparallaxy = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		if (!layer)
			ret.set_float(0);
		else
			ret.set_float(layer.parallaxY * 100);
	};
	SysExps.prototype.layoutscale = function (ret)
	{
		if (this.runtime.running_layout)
			ret.set_float(this.runtime.running_layout.scale);
		else
			ret.set_float(0);
	};
	SysExps.prototype.layoutangle = function (ret)
	{
		ret.set_float(cr.to_degrees(this.runtime.running_layout.angle));
	};
	SysExps.prototype.layerangle = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		if (!layer)
			ret.set_float(0);
		else
			ret.set_float(cr.to_degrees(layer.angle));
	};
	SysExps.prototype.layoutwidth = function (ret)
	{
		ret.set_int(this.runtime.running_layout.width);
	};
	SysExps.prototype.layoutheight = function (ret)
	{
		ret.set_int(this.runtime.running_layout.height);
	};
	SysExps.prototype.find = function (ret, text, searchstr)
	{
		if (cr.is_string(text) && cr.is_string(searchstr))
			ret.set_int(text.search(new RegExp(cr.regexp_escape(searchstr), "i")));
		else
			ret.set_int(-1);
	};
	SysExps.prototype.left = function (ret, text, n)
	{
		ret.set_string(cr.is_string(text) ? text.substr(0, n) : "");
	};
	SysExps.prototype.right = function (ret, text, n)
	{
		ret.set_string(cr.is_string(text) ? text.substr(text.length - n) : "");
	};
	SysExps.prototype.mid = function (ret, text, index_, length_)
	{
		ret.set_string(cr.is_string(text) ? text.substr(index_, length_) : "");
	};
	SysExps.prototype.tokenat = function (ret, text, index_, sep)
	{
		if (cr.is_string(text) && cr.is_string(sep))
		{
			var arr = text.split(sep);
			var i = cr.floor(index_);
			if (i < 0 || i >= arr.length)
				ret.set_string("");
			else
				ret.set_string(arr[i]);
		}
		else
			ret.set_string("");
	};
	SysExps.prototype.tokencount = function (ret, text, sep)
	{
		if (cr.is_string(text) && text.length)
			ret.set_int(text.split(sep).length);
		else
			ret.set_int(0);
	};
	SysExps.prototype.replace = function (ret, text, find_, replace_)
	{
		if (cr.is_string(text) && cr.is_string(find_) && cr.is_string(replace_))
			ret.set_string(text.replace(new RegExp(cr.regexp_escape(find_), "gi"), replace_));
		else
			ret.set_string(cr.is_string(text) ? text : "");
	};
	SysExps.prototype.trim = function (ret, text)
	{
		ret.set_string(cr.is_string(text) ? text.trim() : "");
	};
	SysExps.prototype.pi = function (ret)
	{
		ret.set_float(cr.PI);
	};
	SysExps.prototype.layoutname = function (ret)
	{
		if (this.runtime.running_layout)
			ret.set_string(this.runtime.running_layout.name);
		else
			ret.set_string("");
	};
	SysExps.prototype.renderer = function (ret)
	{
		ret.set_string(this.runtime.gl ? "webgl" : "canvas2d");
	};
	SysExps.prototype.anglediff = function (ret, a, b)
	{
		ret.set_float(cr.to_degrees(cr.angleDiff(cr.to_radians(a), cr.to_radians(b))));
	};
	SysExps.prototype.choose = function (ret)
	{
		var index = cr.floor(Math.random() * (arguments.length - 1));
		ret.set_any(arguments[index + 1]);
	};
	SysExps.prototype.rgb = function (ret, r, g, b)
	{
		ret.set_int(cr.RGB(r, g, b));
	};
	SysExps.prototype.projectversion = function (ret)
	{
		ret.set_string(this.runtime.versionstr);
	};
	SysExps.prototype.anglelerp = function (ret, a, b, x)
	{
		a = cr.to_radians(a);
		b = cr.to_radians(b);
		var diff = cr.angleDiff(a, b);
		if (cr.angleClockwise(b, a))
		{
			ret.set_float(cr.to_clamped_degrees(a + diff * x));
		}
		else
		{
			ret.set_float(cr.to_clamped_degrees(a - diff * x));
		}
	};
	SysExps.prototype.anglerotate = function (ret, a, b, c)
	{
		a = cr.to_radians(a);
		b = cr.to_radians(b);
		c = cr.to_radians(c);
		ret.set_float(cr.to_clamped_degrees(cr.angleRotate(a, b, c)));
	};
	SysExps.prototype.zeropad = function (ret, n, d)
	{
		var s = (n < 0 ? "-" : "");
		if (n < 0) n = -n;
		var zeroes = d - n.toString().length;
		for (var i = 0; i < zeroes; i++)
			s += "0";
		ret.set_string(s + n.toString());
	};
	SysExps.prototype.cpuutilisation = function (ret)
	{
		ret.set_float(this.runtime.cpuutilisation / 1000);
	};
	SysExps.prototype.viewportleft = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.viewLeft : 0);
	};
	SysExps.prototype.viewporttop = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.viewTop : 0);
	};
	SysExps.prototype.viewportright = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.viewRight : 0);
	};
	SysExps.prototype.viewportbottom = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.viewBottom : 0);
	};
	SysExps.prototype.loadingprogress = function (ret)
	{
		ret.set_float(this.runtime.loadingprogress);
	};
	SysExps.prototype.unlerp = function(ret, a, b, y)
    {
        ret.set_float((y - a) / (b - a));
    };
	SysExps.prototype.canvassnapshot = function (ret)
	{
		ret.set_string(this.runtime.snapshotData);
	};
	SysExps.prototype.urlencode = function (ret, s)
	{
		ret.set_string(encodeURIComponent(s));
	};
	SysExps.prototype.urldecode = function (ret, s)
	{
		ret.set_string(decodeURIComponent(s));
	};
	SysExps.prototype.canvastolayerx = function (ret, layerparam, x, y)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.canvasToLayer(x, y, true) : 0);
	};
	SysExps.prototype.canvastolayery = function (ret, layerparam, x, y)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.canvasToLayer(x, y, false) : 0);
	};
	SysExps.prototype.layertocanvasx = function (ret, layerparam, x, y)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.layerToCanvas(x, y, true) : 0);
	};
	SysExps.prototype.layertocanvasy = function (ret, layerparam, x, y)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.layerToCanvas(x, y, false) : 0);
	};
	SysExps.prototype.savestatejson = function (ret)
	{
		ret.set_string(this.runtime.lastSaveJson);
	};
	SysExps.prototype.imagememoryusage = function (ret)
	{
		if (this.runtime.glwrap)
			ret.set_float(Math.round(100 * this.runtime.glwrap.estimateVRAM() / (1024 * 1024)) / 100);
		else
			ret.set_float(0);
	};
	SysExps.prototype.regexsearch = function (ret, str_, regex_, flags_)
	{
		var regex = getRegex(regex_, flags_);
		ret.set_int(str_ ? str_.search(regex) : -1);
	};
	SysExps.prototype.regexreplace = function (ret, str_, regex_, flags_, replace_)
	{
		var regex = getRegex(regex_, flags_);
		ret.set_string(str_ ? str_.replace(regex, replace_) : "");
	};
	var regexMatches = [];
	var lastMatchesStr = "";
	var lastMatchesRegex = "";
	var lastMatchesFlags = "";
	function updateRegexMatches(str_, regex_, flags_)
	{
		if (str_ === lastMatchesStr && regex_ === lastMatchesRegex && flags_ === lastMatchesFlags)
			return;
		var regex = getRegex(regex_, flags_);
		regexMatches = str_.match(regex);
		lastMatchesStr = str_;
		lastMatchesRegex = regex_;
		lastMatchesFlags = flags_;
	};
	SysExps.prototype.regexmatchcount = function (ret, str_, regex_, flags_)
	{
		var regex = getRegex(regex_, flags_);
		updateRegexMatches(str_, regex_, flags_);
		ret.set_int(regexMatches ? regexMatches.length : 0);
	};
	SysExps.prototype.regexmatchat = function (ret, str_, regex_, flags_, index_)
	{
		index_ = Math.floor(index_);
		var regex = getRegex(regex_, flags_);
		updateRegexMatches(str_, regex_, flags_);
		if (!regexMatches || index_ < 0 || index_ >= regexMatches.length)
			ret.set_string("");
		else
			ret.set_string(regexMatches[index_]);
	};
	SysExps.prototype.infinity = function (ret)
	{
		ret.set_float(Infinity);
	};
	sysProto.exps = new SysExps();
	sysProto.runWaits = function ()
	{
		var i, j, len, w, k, s, ss;
		var evinfo = this.runtime.getCurrentEventStack();
		for (i = 0, len = this.waits.length; i < len; i++)
		{
			w = this.waits[i];
			if (w.time > this.runtime.kahanTime.sum)
				continue;
			evinfo.current_event = w.ev;
			evinfo.actindex = w.actindex;
			evinfo.cndindex = 0;
			for (k in w.sols)
			{
				if (w.sols.hasOwnProperty(k))
				{
					s = this.runtime.types_by_index[parseInt(k, 10)].getCurrentSol();
					ss = w.sols[k];
					s.select_all = ss.sa;
					cr.shallowAssignArray(s.instances, ss.insts);
					freeSolStateObject(ss);
				}
			}
			w.ev.resume_actions_and_subevents();
			this.runtime.clearSol(w.solModifiers);
			w.deleteme = true;
		}
		for (i = 0, j = 0, len = this.waits.length; i < len; i++)
		{
			w = this.waits[i];
			this.waits[j] = w;
			if (w.deleteme)
				freeWaitObject(w);
			else
				j++;
		}
		this.waits.length = j;
	};
}());
;
cr.add_common_aces = function (m)
{
	var pluginProto = m[0].prototype;
	var singleglobal_ = m[1];
	var position_aces = m[3];
	var size_aces = m[4];
	var angle_aces = m[5];
	var appearance_aces = m[6];
	var zorder_aces = m[7];
	var effects_aces = m[8];
    if (!pluginProto.cnds)
        pluginProto.cnds = {};
    if (!pluginProto.acts)
        pluginProto.acts = {};
    if (!pluginProto.exps)
        pluginProto.exps = {};
    var cnds = pluginProto.cnds;
    var acts = pluginProto.acts;
    var exps = pluginProto.exps;
    if (position_aces)
    {
        cnds.CompareX = function (cmp, x)
        {
            return cr.do_cmp(this.x, cmp, x);
        };
        cnds.CompareY = function (cmp, y)
        {
            return cr.do_cmp(this.y, cmp, y);
        };
        cnds.IsOnScreen = function ()
        {
			var layer = this.layer;
            this.update_bbox();
            var bbox = this.bbox;
            return !(bbox.right < layer.viewLeft || bbox.bottom < layer.viewTop || bbox.left > layer.viewRight || bbox.top > layer.viewBottom);
        };
        cnds.IsOutsideLayout = function ()
        {
            this.update_bbox();
            var bbox = this.bbox;
            var layout = this.runtime.running_layout;
            return (bbox.right < 0 || bbox.bottom < 0 || bbox.left > layout.width || bbox.top > layout.height);
        };
		cnds.PickDistance = function (which, x, y)
		{
			var sol = this.getCurrentSol();
			var instances = sol.getObjects();
			if (!instances.length)
				return false;
			var inst = instances[0];
			var pickme = inst;
			var dist = cr.distanceTo(inst.x, inst.y, x, y);
			var i, len, d;
			for (i = 1, len = instances.length; i < len; i++)
			{
				inst = instances[i];
				d = cr.distanceTo(inst.x, inst.y, x, y);
				if ((which === 0 && d < dist) || (which === 1 && d > dist))
				{
					dist = d;
					pickme = inst;
				}
			}
			sol.pick_one(pickme);
			return true;
		};
        acts.SetX = function (x)
        {
            if (this.x !== x)
            {
                this.x = x;
                this.set_bbox_changed();
            }
        };
        acts.SetY = function (y)
        {
            if (this.y !== y)
            {
                this.y = y;
                this.set_bbox_changed();
            }
        };
        acts.SetPos = function (x, y)
        {
            if (this.x !== x || this.y !== y)
            {
                this.x = x;
                this.y = y;
                this.set_bbox_changed();
            }
        };
        acts.SetPosToObject = function (obj, imgpt)
        {
            var inst = obj.getPairedInstance(this);
            if (!inst)
				return;
			var newx, newy;
			if (inst.getImagePoint)
			{
				newx = inst.getImagePoint(imgpt, true);
				newy = inst.getImagePoint(imgpt, false);
			}
			else
			{
				newx = inst.x;
				newy = inst.y;
			}
			if (this.x !== newx || this.y !== newy)
            {
				this.x = newx;
				this.y = newy;
				this.set_bbox_changed();
            }
        };
        acts.MoveForward = function (dist)
        {
            if (dist !== 0)
            {
                this.x += Math.cos(this.angle) * dist;
                this.y += Math.sin(this.angle) * dist;
                this.set_bbox_changed();
            }
        };
        acts.MoveAtAngle = function (a, dist)
        {
            if (dist !== 0)
            {
                this.x += Math.cos(cr.to_radians(a)) * dist;
                this.y += Math.sin(cr.to_radians(a)) * dist;
                this.set_bbox_changed();
            }
        };
        exps.X = function (ret)
        {
            ret.set_float(this.x);
        };
        exps.Y = function (ret)
        {
            ret.set_float(this.y);
        };
        exps.dt = function (ret)
        {
            ret.set_float(this.runtime.getDt(this));
        };
    }
    if (size_aces)
    {
        cnds.CompareWidth = function (cmp, w)
        {
            return cr.do_cmp(this.width, cmp, w);
        };
        cnds.CompareHeight = function (cmp, h)
        {
            return cr.do_cmp(this.height, cmp, h);
        };
        acts.SetWidth = function (w)
        {
            if (this.width !== w)
            {
                this.width = w;
                this.set_bbox_changed();
            }
        };
        acts.SetHeight = function (h)
        {
            if (this.height !== h)
            {
                this.height = h;
                this.set_bbox_changed();
            }
        };
        acts.SetSize = function (w, h)
        {
            if (this.width !== w || this.height !== h)
            {
                this.width = w;
                this.height = h;
                this.set_bbox_changed();
            }
        };
        exps.Width = function (ret)
        {
            ret.set_float(this.width);
        };
        exps.Height = function (ret)
        {
            ret.set_float(this.height);
        };
		exps.BBoxLeft = function (ret)
        {
			this.update_bbox();
            ret.set_float(this.bbox.left);
        };
		exps.BBoxTop = function (ret)
        {
			this.update_bbox();
            ret.set_float(this.bbox.top);
        };
		exps.BBoxRight = function (ret)
        {
			this.update_bbox();
            ret.set_float(this.bbox.right);
        };
		exps.BBoxBottom = function (ret)
        {
			this.update_bbox();
            ret.set_float(this.bbox.bottom);
        };
    }
    if (angle_aces)
    {
        cnds.AngleWithin = function (within, a)
        {
            return cr.angleDiff(this.angle, cr.to_radians(a)) <= cr.to_radians(within);
        };
        cnds.IsClockwiseFrom = function (a)
        {
            return cr.angleClockwise(this.angle, cr.to_radians(a));
        };
		cnds.IsBetweenAngles = function (a, b)
		{
			var lower = cr.to_clamped_radians(a);
			var upper = cr.to_clamped_radians(b);
			var angle = cr.clamp_angle(this.angle);
			var obtuse = (!cr.angleClockwise(upper, lower));
			if (obtuse)
				return !(!cr.angleClockwise(angle, lower) && cr.angleClockwise(angle, upper));
			else
				return cr.angleClockwise(angle, lower) && !cr.angleClockwise(angle, upper);
		};
        acts.SetAngle = function (a)
        {
            var newangle = cr.to_radians(cr.clamp_angle_degrees(a));
            if (isNaN(newangle))
                return;
            if (this.angle !== newangle)
            {
                this.angle = newangle;
                this.set_bbox_changed();
            }
        };
        acts.RotateClockwise = function (a)
        {
            if (a !== 0 && !isNaN(a))
            {
                this.angle += cr.to_radians(a);
                this.angle = cr.clamp_angle(this.angle);
                this.set_bbox_changed();
            }
        };
        acts.RotateCounterclockwise = function (a)
        {
            if (a !== 0 && !isNaN(a))
            {
                this.angle -= cr.to_radians(a);
                this.angle = cr.clamp_angle(this.angle);
                this.set_bbox_changed();
            }
        };
        acts.RotateTowardAngle = function (amt, target)
        {
            var newangle = cr.angleRotate(this.angle, cr.to_radians(target), cr.to_radians(amt));
            if (isNaN(newangle))
                return;
            if (this.angle !== newangle)
            {
                this.angle = newangle;
                this.set_bbox_changed();
            }
        };
        acts.RotateTowardPosition = function (amt, x, y)
        {
            var dx = x - this.x;
            var dy = y - this.y;
            var target = Math.atan2(dy, dx);
            var newangle = cr.angleRotate(this.angle, target, cr.to_radians(amt));
            if (isNaN(newangle))
                return;
            if (this.angle !== newangle)
            {
                this.angle = newangle;
                this.set_bbox_changed();
            }
        };
        acts.SetTowardPosition = function (x, y)
        {
            var dx = x - this.x;
            var dy = y - this.y;
            var newangle = Math.atan2(dy, dx);
            if (isNaN(newangle))
                return;
            if (this.angle !== newangle)
            {
                this.angle = newangle;
                this.set_bbox_changed();
            }
        };
        exps.Angle = function (ret)
        {
            ret.set_float(cr.to_clamped_degrees(this.angle));
        };
    }
    if (!singleglobal_)
    {
        cnds.CompareInstanceVar = function (iv, cmp, val)
        {
            return cr.do_cmp(this.instance_vars[iv], cmp, val);
        };
        cnds.IsBoolInstanceVarSet = function (iv)
        {
            return this.instance_vars[iv];
        };
		cnds.PickInstVarHiLow = function (which, iv)
		{
			var sol = this.getCurrentSol();
			var instances = sol.getObjects();
			if (!instances.length)
				return false;
			var inst = instances[0];
			var pickme = inst;
			var val = inst.instance_vars[iv];
			var i, len, v;
			for (i = 1, len = instances.length; i < len; i++)
			{
				inst = instances[i];
				v = inst.instance_vars[iv];
				if ((which === 0 && v < val) || (which === 1 && v > val))
				{
					val = v;
					pickme = inst;
				}
			}
			sol.pick_one(pickme);
			return true;
		};
		cnds.PickByUID = function (u)
		{
			var i, len, j, inst, families, instances, sol;
			var cnd = this.runtime.getCurrentCondition();
			if (cnd.inverted)
			{
				sol = this.getCurrentSol();
				if (sol.select_all)
				{
					sol.select_all = false;
					sol.instances.length = 0;
					sol.else_instances.length = 0;
					instances = this.instances;
					for (i = 0, len = instances.length; i < len; i++)
					{
						inst = instances[i];
						if (inst.uid === u)
							sol.else_instances.push(inst);
						else
							sol.instances.push(inst);
					}
					return !!sol.instances.length;
				}
				else
				{
					for (i = 0, j = 0, len = sol.instances.length; i < len; i++)
					{
						inst = sol.instances[i];
						sol.instances[j] = inst;
						if (inst.uid === u)
						{
							sol.else_instances.push(inst);
						}
						else
							j++;
					}
					sol.instances.length = j;
					return !!sol.instances.length;
				}
			}
			else
			{
				inst = this.runtime.getObjectByUID(u);
				if (!inst)
					return false;
				sol = this.getCurrentSol();
				if (!sol.select_all && sol.instances.indexOf(inst) === -1)
					return false;		// not picked
				if (this.is_family)
				{
					families = inst.type.families;
					for (i = 0, len = families.length; i < len; i++)
					{
						if (families[i] === this)
						{
							sol.pick_one(inst);
							return true;
						}
					}
				}
				else if (inst.type === this)
				{
					sol.pick_one(inst);
					return true;
				}
				return false;
			}
		};
		cnds.OnCreated = function ()
		{
			return true;
		};
		cnds.OnDestroyed = function ()
		{
			return true;
		};
        acts.SetInstanceVar = function (iv, val)
        {
			var myinstvars = this.instance_vars;
            if (cr.is_number(myinstvars[iv]))
            {
                if (cr.is_number(val))
                    myinstvars[iv] = val;
                else
                    myinstvars[iv] = parseFloat(val);
            }
            else if (cr.is_string(myinstvars[iv]))
            {
                if (cr.is_string(val))
                    myinstvars[iv] = val;
                else
                    myinstvars[iv] = val.toString();
            }
            else
;
        };
        acts.AddInstanceVar = function (iv, val)
        {
			var myinstvars = this.instance_vars;
            if (cr.is_number(myinstvars[iv]))
            {
                if (cr.is_number(val))
                    myinstvars[iv] += val;
                else
                    myinstvars[iv] += parseFloat(val);
            }
            else if (cr.is_string(myinstvars[iv]))
            {
                if (cr.is_string(val))
                    myinstvars[iv] += val;
                else
                    myinstvars[iv] += val.toString();
            }
            else
;
        };
        acts.SubInstanceVar = function (iv, val)
        {
			var myinstvars = this.instance_vars;
            if (cr.is_number(myinstvars[iv]))
            {
                if (cr.is_number(val))
                    myinstvars[iv] -= val;
                else
                    myinstvars[iv] -= parseFloat(val);
            }
            else
;
        };
        acts.SetBoolInstanceVar = function (iv, val)
        {
            this.instance_vars[iv] = val ? 1 : 0;
        };
        acts.ToggleBoolInstanceVar = function (iv)
        {
            this.instance_vars[iv] = 1 - this.instance_vars[iv];
        };
        acts.Destroy = function ()
        {
            this.runtime.DestroyInstance(this);
        };
        exps.Count = function (ret)
        {
			var count = ret.object_class.instances.length;
			var i, len, inst;
			for (i = 0, len = this.runtime.createRow.length; i < len; i++)
			{
				inst = this.runtime.createRow[i];
				if (ret.object_class.is_family)
				{
					if (inst.type.families.indexOf(ret.object_class) >= 0)
						count++;
				}
				else
				{
					if (inst.type === ret.object_class)
						count++;
				}
			}
            ret.set_int(count);
        };
		exps.PickedCount = function (ret)
        {
            ret.set_int(ret.object_class.getCurrentSol().getObjects().length);
        };
		exps.UID = function (ret)
		{
			ret.set_int(this.uid);
		};
		exps.IID = function (ret)
		{
			ret.set_int(this.get_iid());
		};
    }
    if (appearance_aces)
    {
        cnds.IsVisible = function ()
        {
            return this.visible;
        };
        acts.SetVisible = function (v)
        {
			if (!v !== !this.visible)
			{
				this.visible = v;
				this.runtime.redraw = true;
			}
        };
        cnds.CompareOpacity = function (cmp, x)
        {
            return cr.do_cmp(cr.round6dp(this.opacity * 100), cmp, x);
        };
        acts.SetOpacity = function (x)
        {
            var new_opacity = x / 100.0;
            if (new_opacity < 0)
                new_opacity = 0;
            else if (new_opacity > 1)
                new_opacity = 1;
            if (new_opacity !== this.opacity)
            {
                this.opacity = new_opacity;
                this.runtime.redraw = true;
            }
        };
        exps.Opacity = function (ret)
        {
            ret.set_float(cr.round6dp(this.opacity * 100.0));
        };
    }
	if (zorder_aces)
	{
		cnds.IsOnLayer = function (layer_)
		{
			if (!layer_)
				return false;
			return this.layer === layer_;
		};
		cnds.PickTopBottom = function (which_)
		{
			var sol = this.getCurrentSol();
			var instances = sol.getObjects();
			if (!instances.length)
				return false;
			var inst = instances[0];
			var pickme = inst;
			var i, len;
			for (i = 1, len = instances.length; i < len; i++)
			{
				inst = instances[i];
				if (which_ === 0)
				{
					if (inst.layer.index > pickme.layer.index || (inst.layer.index === pickme.layer.index && inst.get_zindex() > pickme.get_zindex()))
					{
						pickme = inst;
					}
				}
				else
				{
					if (inst.layer.index < pickme.layer.index || (inst.layer.index === pickme.layer.index && inst.get_zindex() < pickme.get_zindex()))
					{
						pickme = inst;
					}
				}
			}
			sol.pick_one(pickme);
			return true;
		};
		acts.MoveToTop = function ()
		{
			var zindex = this.get_zindex();
			if (zindex === this.layer.instances.length - 1)
				return;
			cr.arrayRemove(this.layer.instances, zindex);
			this.layer.instances.push(this);
			this.runtime.redraw = true;
			this.layer.zindices_stale = true;
		};
		acts.MoveToBottom = function ()
		{
			var zindex = this.get_zindex();
			if (zindex === 0)
				return;
			cr.arrayRemove(this.layer.instances, zindex);
			this.layer.instances.unshift(this);
			this.runtime.redraw = true;
			this.layer.zindices_stale = true;
		};
		acts.MoveToLayer = function (layerMove)
		{
			if (!layerMove || layerMove == this.layer)
				return;
			cr.arrayRemove(this.layer.instances, this.get_zindex());
			this.layer.zindices_stale = true;
			this.layer = layerMove;
			this.zindex = layerMove.instances.length;
			layerMove.instances.push(this);
			this.runtime.redraw = true;
		};
		acts.ZMoveToObject = function (where_, obj_)
		{
			var isafter = (where_ === 0);
			if (!obj_)
				return;
			var other = obj_.getFirstPicked(this);
			if (!other || other.uid === this.uid)
				return;
			if (this.layer.index !== other.layer.index)
			{
				cr.arrayRemove(this.layer.instances, this.get_zindex());
				this.layer.zindices_stale = true;
				this.layer = other.layer;
				this.zindex = other.layer.instances.length;
				other.layer.instances.push(this);
			}
			var myZ = this.get_zindex();
			var insertZ = other.get_zindex();
			cr.arrayRemove(this.layer.instances, myZ);
			if (myZ < insertZ)
				insertZ--;
			if (isafter)
				insertZ++;
			if (insertZ === this.layer.instances.length)
				this.layer.instances.push(this);
			else
				this.layer.instances.splice(insertZ, 0, this);
			this.layer.zindices_stale = true;
			this.runtime.redraw = true;
		};
		exps.LayerNumber = function (ret)
		{
			ret.set_int(this.layer.number);
		};
		exps.LayerName = function (ret)
		{
			ret.set_string(this.layer.name);
		};
		exps.ZIndex = function (ret)
		{
			ret.set_int(this.get_zindex());
		};
	}
	if (effects_aces)
	{
		acts.SetEffectEnabled = function (enable_, effectname_)
		{
			if (!this.runtime.glwrap)
				return;
			var i = this.type.getEffectIndexByName(effectname_);
			if (i < 0)
				return;		// effect name not found
			var enable = (enable_ === 1);
			if (this.active_effect_flags[i] === enable)
				return;		// no change
			this.active_effect_flags[i] = enable;
			this.updateActiveEffects();
			this.runtime.redraw = true;
		};
		acts.SetEffectParam = function (effectname_, index_, value_)
		{
			if (!this.runtime.glwrap)
				return;
			var i = this.type.getEffectIndexByName(effectname_);
			if (i < 0)
				return;		// effect name not found
			var et = this.type.effect_types[i];
			var params = this.effect_params[i];
			index_ = Math.floor(index_);
			if (index_ < 0 || index_ >= params.length)
				return;		// effect index out of bounds
			if (this.runtime.glwrap.getProgramParameterType(et.shaderindex, index_) === 1)
				value_ /= 100.0;
			if (params[index_] === value_)
				return;		// no change
			params[index_] = value_;
			if (et.active)
				this.runtime.redraw = true;
		};
	}
};
cr.set_bbox_changed = function ()
{
    this.bbox_changed = true;       // will recreate next time box requested
    this.runtime.redraw = true;     // assume runtime needs to redraw
	var i, len;
	for (i = 0, len = this.bbox_changed_callbacks.length; i < len; i++)
	{
		this.bbox_changed_callbacks[i](this);
	}
};
cr.add_bbox_changed_callback = function (f)
{
	if (f)
		this.bbox_changed_callbacks.push(f);
};
cr.update_bbox = function ()
{
    if (!this.bbox_changed)
        return;                 // bounding box not changed
    this.bbox.set(this.x, this.y, this.x + this.width, this.y + this.height);
    this.bbox.offset(-this.hotspotX * this.width, -this.hotspotY * this.height);
    if (!this.angle)
    {
        this.bquad.set_from_rect(this.bbox);    // make bounding quad from box
    }
    else
    {
        this.bbox.offset(-this.x, -this.y);       					// translate to origin
        this.bquad.set_from_rotated_rect(this.bbox, this.angle);	// rotate around origin
        this.bquad.offset(this.x, this.y);      					// translate back to original position
        this.bquad.bounding_box(this.bbox);
    }
	var temp = 0;
	if (this.bbox.left > this.bbox.right)
	{
		temp = this.bbox.left;
		this.bbox.left = this.bbox.right;
		this.bbox.right = temp;
	}
	if (this.bbox.top > this.bbox.bottom)
	{
		temp = this.bbox.top;
		this.bbox.top = this.bbox.bottom;
		this.bbox.bottom = temp;
	}
    this.bbox_changed = false;  // bounding box up to date
};
cr.inst_contains_pt = function (x, y)
{
	if (!this.bbox.contains_pt(x, y))
		return false;
	if (!this.bquad.contains_pt(x, y))
		return false;
	if (this.collision_poly && !this.collision_poly.is_empty())
	{
		this.collision_poly.cache_poly(this.width, this.height, this.angle);
		return this.collision_poly.contains_pt(x - this.x, y - this.y);
	}
	else
		return true;
};
cr.inst_get_iid = function ()
{
	this.type.updateIIDs();
	return this.iid;
};
cr.inst_get_zindex = function ()
{
	this.layer.updateZIndices();
	return this.zindex;
};
cr.inst_updateActiveEffects = function ()
{
	this.active_effect_types.length = 0;
	var i, len, et, inst;
	for (i = 0, len = this.active_effect_flags.length; i < len; i++)
	{
		if (this.active_effect_flags[i])
			this.active_effect_types.push(this.type.effect_types[i]);
	}
	this.uses_shaders = !!this.active_effect_types.length;
};
cr.inst_toString = function ()
{
	return "Inst" + this.puid;
};
cr.type_getFirstPicked = function (frominst)
{
	if (frominst && frominst.is_contained && frominst.type != this)
	{
		var i, len, s;
		for (i = 0, len = frominst.siblings.length; i < len; i++)
		{
			s = frominst.siblings[i];
			if (s.type == this)
				return s;
		}
	}
    var instances = this.getCurrentSol().getObjects();
    if (instances.length)
        return instances[0];
    else
        return null;
};
cr.type_getPairedInstance = function (inst)
{
	var instances = this.getCurrentSol().getObjects();
	if (instances.length)
		return instances[inst.get_iid() % instances.length];
	else
		return null;
};
cr.type_updateIIDs = function ()
{
	if (!this.stale_iids || this.is_family)
		return;		// up to date or is family - don't want family to overwrite IIDs
	var i, len;
	for (i = 0, len = this.instances.length; i < len; i++)
		this.instances[i].iid = i;
	var next_iid = i;
	var createRow = this.runtime.createRow;
	for (i = 0, len = createRow.length; i < len; ++i)
	{
		if (createRow[i].type === this)
			createRow[i].iid = next_iid++;
	}
	this.stale_iids = false;
};
cr.type_getCurrentSol = function ()
{
    return this.solstack[this.cur_sol];
};
cr.type_pushCleanSol = function ()
{
    this.cur_sol++;
    if (this.cur_sol === this.solstack.length)
        this.solstack.push(new cr.selection(this));
    else
        this.solstack[this.cur_sol].select_all = true;  // else clear next SOL
};
cr.type_pushCopySol = function ()
{
    this.cur_sol++;
    if (this.cur_sol === this.solstack.length)
        this.solstack.push(new cr.selection(this));
    var clonesol = this.solstack[this.cur_sol];
    var prevsol = this.solstack[this.cur_sol - 1];
    if (prevsol.select_all)
        clonesol.select_all = true;
    else
    {
        clonesol.select_all = false;
		cr.shallowAssignArray(clonesol.instances, prevsol.instances);
    }
};
cr.type_popSol = function ()
{
;
    this.cur_sol--;
};
cr.type_getBehaviorByName = function (behname)
{
    var i, len, j, lenj, f, index = 0;
	if (!this.is_family)
	{
		for (i = 0, len = this.families.length; i < len; i++)
		{
			f = this.families[i];
			for (j = 0, lenj = f.behaviors.length; j < lenj; j++)
			{
				if (behname === f.behaviors[j].name)
				{
					this.extra.lastBehIndex = index;
					return f.behaviors[j];
				}
				index++;
			}
		}
	}
    for (i = 0, len = this.behaviors.length; i < len; i++) {
        if (behname === this.behaviors[i].name)
		{
			this.extra.lastBehIndex = index;
            return this.behaviors[i];
		}
		index++;
    }
	return null;
};
cr.type_getBehaviorIndexByName = function (behname)
{
    var b = this.getBehaviorByName(behname);
	if (b)
		return this.extra.lastBehIndex;
	else
		return -1;
};
cr.type_getEffectIndexByName = function (name_)
{
	var i, len;
	for (i = 0, len = this.effect_types.length; i < len; i++)
	{
		if (this.effect_types[i].name === name_)
			return i;
	}
	return -1;
};
cr.type_applySolToContainer = function ()
{
	if (!this.is_contained || this.is_family)
		return;
	var i, len, j, lenj, t, sol, sol2;
	this.updateIIDs();
	sol = this.getCurrentSol();
	var select_all = sol.select_all;
	var es = this.runtime.getCurrentEventStack();
	var orblock = es && es.current_event && es.current_event.orblock;
	for (i = 0, len = this.container.length; i < len; i++)
	{
		t = this.container[i];
		if (t === this)
			continue;
		t.updateIIDs();
		sol2 = t.getCurrentSol();
		sol2.select_all = select_all;
		if (!select_all)
		{
			sol2.instances.length = sol.instances.length;
			for (j = 0, lenj = sol.instances.length; j < lenj; j++)
				sol2.instances[j] = t.instances[sol.instances[j].iid];
			if (orblock)
			{
				sol2.else_instances.length = sol.else_instances.length;
				for (j = 0, lenj = sol.else_instances.length; j < lenj; j++)
					sol2.else_instances[j] = t.instances[sol.else_instances[j].iid];
			}
		}
	}
};
cr.type_toString = function ()
{
	return "Type" + this.sid;
};
cr.do_cmp = function (x, cmp, y)
{
	if (typeof x === "undefined" || typeof y === "undefined")
		return false;
    switch (cmp)
    {
        case 0:     // equal
            return x === y;
        case 1:     // not equal
            return x !== y;
        case 2:     // less
            return x < y;
        case 3:     // less/equal
            return x <= y;
        case 4:     // greater
            return x > y;
        case 5:     // greater/equal
            return x >= y;
        default:
;
            return false;
    }
};
cr.shaders = {};
window["cr_cjs_accelerated_physics"] = true;
;
;
cr.plugins_.Arr = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Arr.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	var arrCache = [];
	function allocArray()
	{
		if (arrCache.length)
			return arrCache.pop();
		else
			return [];
	};
	if (!Array.isArray)
	{
		Array.isArray = function (vArg) {
			return Object.prototype.toString.call(vArg) === "[object Array]";
		};
	}
	function freeArray(a)
	{
		var i, len;
		for (i = 0, len = a.length; i < len; i++)
		{
			if (Array.isArray(a[i]))
				freeArray(a[i]);
		}
		a.length = 0;
		arrCache.push(a);
	};
	instanceProto.onCreate = function()
	{
		this.cx = this.properties[0];
		this.cy = this.properties[1];
		this.cz = this.properties[2];
		if (!this.recycled)
			this.arr = allocArray();
		var a = this.arr;
		a.length = this.cx;
		var x, y, z;
		for (x = 0; x < this.cx; x++)
		{
			if (!a[x])
				a[x] = allocArray();
			a[x].length = this.cy;
			for (y = 0; y < this.cy; y++)
			{
				if (!a[x][y])
					a[x][y] = allocArray();
				a[x][y].length = this.cz;
				for (z = 0; z < this.cz; z++)
					a[x][y][z] = 0;
			}
		}
		this.forX = 0;
		this.forY = 0;
		this.forZ = 0;
	};
	instanceProto.onDestroy = function ()
	{
		var x;
		for (x = 0; x < this.cx; x++)
			freeArray(this.arr[x]);		// will recurse down and recycle other arrays
		this.arr.length = 0;
	};
	instanceProto.at = function (x, y, z)
	{
		x = Math.floor(x);
		y = Math.floor(y);
		z = Math.floor(z);
		if (isNaN(x) || x < 0 || x > this.cx - 1)
			return 0;
		if (isNaN(y) || y < 0 || y > this.cy - 1)
			return 0;
		if (isNaN(z) || z < 0 || z > this.cz - 1)
			return 0;
		return this.arr[x][y][z];
	};
	instanceProto.set = function (x, y, z, val)
	{
		x = Math.floor(x);
		y = Math.floor(y);
		z = Math.floor(z);
		if (isNaN(x) || x < 0 || x > this.cx - 1)
			return;
		if (isNaN(y) || y < 0 || y > this.cy - 1)
			return;
		if (isNaN(z) || z < 0 || z > this.cz - 1)
			return;
		this.arr[x][y][z] = val;
	};
	instanceProto.getAsJSON = function ()
	{
		return JSON.stringify({
			"c2array": true,
			"size": [this.cx, this.cy, this.cz],
			"data": this.arr
		});
	};
	instanceProto.saveToJSON = function ()
	{
		return {
			"size": [this.cx, this.cy, this.cz],
			"data": this.arr
		};
	};
	instanceProto.loadFromJSON = function (o)
	{
		var sz = o["size"];
		this.cx = sz[0];
		this.cy = sz[1];
		this.cz = sz[2];
		this.arr = o["data"];
	};
	instanceProto.setSize = function (w, h, d)
	{
		if (w < 0) w = 0;
		if (h < 0) h = 0;
		if (d < 0) d = 0;
		if (this.cx === w && this.cy === h && this.cz === d)
			return;		// no change
		this.cx = w;
		this.cy = h;
		this.cz = d;
		var x, y, z;
		var a = this.arr;
		a.length = w;
		for (x = 0; x < this.cx; x++)
		{
			if (cr.is_undefined(a[x]))
				a[x] = allocArray();
			a[x].length = h;
			for (y = 0; y < this.cy; y++)
			{
				if (cr.is_undefined(a[x][y]))
					a[x][y] = allocArray();
				a[x][y].length = d;
				for (z = 0; z < this.cz; z++)
				{
					if (cr.is_undefined(a[x][y][z]))
						a[x][y][z] = 0;
				}
			}
		}
	};
	function Cnds() {};
	Cnds.prototype.CompareX = function (x, cmp, val)
	{
		return cr.do_cmp(this.at(x, 0, 0), cmp, val);
	};
	Cnds.prototype.CompareXY = function (x, y, cmp, val)
	{
		return cr.do_cmp(this.at(x, y, 0), cmp, val);
	};
	Cnds.prototype.CompareXYZ = function (x, y, z, cmp, val)
	{
		return cr.do_cmp(this.at(x, y, z), cmp, val);
	};
	instanceProto.doForEachTrigger = function (current_event)
	{
		this.runtime.pushCopySol(current_event.solModifiers);
		current_event.retrigger();
		this.runtime.popSol(current_event.solModifiers);
	};
	Cnds.prototype.ArrForEach = function (dims)
	{
        var current_event = this.runtime.getCurrentEventStack().current_event;
		this.forX = 0;
		this.forY = 0;
		this.forZ = 0;
		switch (dims) {
		case 0:
			for (this.forX = 0; this.forX < this.cx; this.forX++)
			{
				for (this.forY = 0; this.forY < this.cy; this.forY++)
				{
					for (this.forZ = 0; this.forZ < this.cz; this.forZ++)
					{
						this.doForEachTrigger(current_event);
					}
				}
			}
			break;
		case 1:
			for (this.forX = 0; this.forX < this.cx; this.forX++)
			{
				for (this.forY = 0; this.forY < this.cy; this.forY++)
				{
					this.doForEachTrigger(current_event);
				}
			}
			break;
		case 2:
			for (this.forX = 0; this.forX < this.cx; this.forX++)
			{
				this.doForEachTrigger(current_event);
			}
			break;
		}
		this.forX = 0;
		this.forY = 0;
		this.forZ = 0;
		return false;
	};
	Cnds.prototype.CompareCurrent = function (cmp, val)
	{
		return cr.do_cmp(this.at(this.forX, this.forY, this.forZ), cmp, val);
	};
	Cnds.prototype.Contains = function(val)
	{
		var x, y, z;
		for (x = 0; x < this.cx; x++)
		{
			for (y = 0; y < this.cy; y++)
			{
				for (z = 0; z < this.cz; z++)
				{
					if (this.arr[x][y][z] === val)
						return true;
				}
			}
		}
		return false;
	};
	Cnds.prototype.IsEmpty = function ()
	{
		return this.cx === 0 || this.cy === 0 || this.cz === 0;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.Clear = function ()
	{
		var x, y, z;
		for (x = 0; x < this.cx; x++)
			for (y = 0; y < this.cy; y++)
				for (z = 0; z < this.cz; z++)
					this.arr[x][y][z] = 0;
	};
	Acts.prototype.SetSize = function (w, h, d)
	{
		this.setSize(w, h, d);
	};
	Acts.prototype.SetX = function (x, val)
	{
		this.set(x, 0, 0, val);
	};
	Acts.prototype.SetXY = function (x, y, val)
	{
		this.set(x, y, 0, val);
	};
	Acts.prototype.SetXYZ = function (x, y, z, val)
	{
		this.set(x, y, z, val);
	};
	Acts.prototype.Push = function (where, value, axis)
	{
		var x = 0, y = 0, z = 0;
		var a = this.arr;
		switch (axis) {
		case 0:	// X axis
			if (where === 0)	// back
			{
				x = a.length;
				a.push(allocArray());
			}
			else				// front
			{
				x = 0;
				a.unshift(allocArray());
			}
			a[x].length = this.cy;
			for ( ; y < this.cy; y++)
			{
				a[x][y] = allocArray();
				a[x][y].length = this.cz;
				for (z = 0; z < this.cz; z++)
					a[x][y][z] = value;
			}
			this.cx++;
			break;
		case 1: // Y axis
			for ( ; x < this.cx; x++)
			{
				if (where === 0)	// back
				{
					y = a[x].length;
					a[x].push(allocArray());
				}
				else				// front
				{
					y = 0;
					a[x].unshift(allocArray());
				}
				a[x][y].length = this.cz;
				for (z = 0; z < this.cz; z++)
					a[x][y][z] = value;
			}
			this.cy++;
			break;
		case 2:	// Z axis
			for ( ; x < this.cx; x++)
			{
				for (y = 0; y < this.cy; y++)
				{
					if (where === 0)	// back
					{
						a[x][y].push(value);
					}
					else				// front
					{
						a[x][y].unshift(value);
					}
				}
			}
			this.cz++;
			break;
		}
	};
	Acts.prototype.Pop = function (where, axis)
	{
		var x = 0, y = 0, z = 0;
		var a = this.arr;
		switch (axis) {
		case 0:	// X axis
			if (this.cx === 0)
				break;
			if (where === 0)	// back
			{
				freeArray(a.pop());
			}
			else				// front
			{
				freeArray(a.shift());
			}
			this.cx--;
			break;
		case 1: // Y axis
			if (this.cy === 0)
				break;
			for ( ; x < this.cx; x++)
			{
				if (where === 0)	// back
				{
					freeArray(a[x].pop());
				}
				else				// front
				{
					freeArray(a[x].shift());
				}
			}
			this.cy--;
			break;
		case 2:	// Z axis
			if (this.cz === 0)
				break;
			for ( ; x < this.cx; x++)
			{
				for (y = 0; y < this.cy; y++)
				{
					if (where === 0)	// back
					{
						a[x][y].pop();
					}
					else				// front
					{
						a[x][y].shift();
					}
				}
			}
			this.cz--;
			break;
		}
	};
	Acts.prototype.Reverse = function (axis)
	{
		var x = 0, y = 0, z = 0;
		var a = this.arr;
		if (this.cx === 0 || this.cy === 0 || this.cz === 0)
			return;		// no point reversing empty array
		switch (axis) {
		case 0:	// X axis
			a.reverse();
			break;
		case 1: // Y axis
			for ( ; x < this.cx; x++)
				a[x].reverse();
			break;
		case 2:	// Z axis
			for ( ; x < this.cx; x++)
				for (y = 0; y < this.cy; y++)
					a[x][y].reverse();
			this.cz--;
			break;
		}
	};
	function compareValues(va, vb)
	{
		if (cr.is_number(va) && cr.is_number(vb))
			return va - vb;
		else
		{
			var sa = "" + va;
			var sb = "" + vb;
			if (sa < sb)
				return -1;
			else if (sa > sb)
				return 1;
			else
				return 0;
		}
	}
	Acts.prototype.Sort = function (axis)
	{
		var x = 0, y = 0, z = 0;
		var a = this.arr;
		if (this.cx === 0 || this.cy === 0 || this.cz === 0)
			return;		// no point sorting empty array
		switch (axis) {
		case 0:	// X axis
			a.sort(function (a, b) {
				return compareValues(a[0][0], b[0][0]);
			});
			break;
		case 1: // Y axis
			for ( ; x < this.cx; x++)
			{
				a[x].sort(function (a, b) {
					return compareValues(a[0], b[0]);
				});
			}
			break;
		case 2:	// Z axis
			for ( ; x < this.cx; x++)
			{
				for (y = 0; y < this.cy; y++)
				{
					a[x][y].sort(compareValues);
				}
			}
			break;
		}
	};
	Acts.prototype.Delete = function (index, axis)
	{
		var x = 0, y = 0, z = 0;
		index = Math.floor(index);
		var a = this.arr;
		if (index < 0)
			return;
		switch (axis) {
		case 0:	// X axis
			if (index >= this.cx)
				break;
			freeArray(a[index]);
			a.splice(index, 1);
			this.cx--;
			break;
		case 1: // Y axis
			if (index >= this.cy)
				break;
			for ( ; x < this.cx; x++)
			{
				freeArray(a[x][index]);
				a[x].splice(index, 1);
			}
			this.cy--;
			break;
		case 2:	// Z axis
			if (index >= this.cz)
				break;
			for ( ; x < this.cx; x++)
			{
				for (y = 0; y < this.cy; y++)
				{
					a[x][y].splice(index, 1);
				}
			}
			this.cz--;
			break;
		}
	};
	Acts.prototype.Insert = function (value, index, axis)
	{
		var x = 0, y = 0, z = 0;
		index = Math.floor(index);
		var a = this.arr;
		if (index < 0)
			return;
		switch (axis) {
		case 0:	// X axis
			if (index > this.cx)
				return;
			x = index;
			a.splice(x, 0, allocArray());
			a[x].length = this.cy;
			for ( ; y < this.cy; y++)
			{
				a[x][y] = allocArray();
				a[x][y].length = this.cz;
				for (z = 0; z < this.cz; z++)
					a[x][y][z] = value;
			}
			this.cx++;
			break;
		case 1: // Y axis
			if (index > this.cy)
				return;
			for ( ; x < this.cx; x++)
			{
				y = index;
				a[x].splice(y, 0, allocArray());
				a[x][y].length = this.cz;
				for (z = 0; z < this.cz; z++)
					a[x][y][z] = value;
			}
			this.cy++;
			break;
		case 2:	// Z axis
			if (index > this.cz)
				return;
			for ( ; x < this.cx; x++)
			{
				for (y = 0; y < this.cy; y++)
				{
					a[x][y].splice(index, 0, value);
				}
			}
			this.cz++;
			break;
		}
	};
	Acts.prototype.JSONLoad = function (json_)
	{
		var o;
		try {
			o = JSON.parse(json_);
		}
		catch(e) { return; }
		if (!o["c2array"])		// presumably not a c2array object
			return;
		var sz = o["size"];
		this.cx = sz[0];
		this.cy = sz[1];
		this.cz = sz[2];
		this.arr = o["data"];
	};
	Acts.prototype.JSONDownload = function (filename)
	{
		var a = document.createElement("a");
		if (typeof a.download === "undefined")
		{
			var str = 'data:text/html,' + encodeURIComponent("<p><a download='" + filename + "' href=\"data:application/json,"
				+ encodeURIComponent(this.getAsJSON())
				+ "\">Download link</a></p>");
			window.open(str);
		}
		else
		{
			var body = document.getElementsByTagName("body")[0];
			a.textContent = filename;
			a.href = "data:application/json," + encodeURIComponent(this.getAsJSON());
			a.download = filename;
			body.appendChild(a);
			var clickEvent = document.createEvent("MouseEvent");
			clickEvent.initMouseEvent("click", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
			a.dispatchEvent(clickEvent);
			body.removeChild(a);
		}
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.At = function (ret, x, y_, z_)
	{
		var y = y_ || 0;
		var z = z_ || 0;
		ret.set_any(this.at(x, y, z));
	};
	Exps.prototype.Width = function (ret)
	{
		ret.set_int(this.cx);
	};
	Exps.prototype.Height = function (ret)
	{
		ret.set_int(this.cy);
	};
	Exps.prototype.Depth = function (ret)
	{
		ret.set_int(this.cz);
	};
	Exps.prototype.CurX = function (ret)
	{
		ret.set_int(this.forX);
	};
	Exps.prototype.CurY = function (ret)
	{
		ret.set_int(this.forY);
	};
	Exps.prototype.CurZ = function (ret)
	{
		ret.set_int(this.forZ);
	};
	Exps.prototype.CurValue = function (ret)
	{
		ret.set_any(this.at(this.forX, this.forY, this.forZ));
	};
	Exps.prototype.Front = function (ret)
	{
		ret.set_any(this.at(0, 0, 0));
	};
	Exps.prototype.Back = function (ret)
	{
		ret.set_any(this.at(this.cx - 1, 0, 0));
	};
	Exps.prototype.IndexOf = function (ret, v)
	{
		for (var i = 0; i < this.cx; i++)
		{
			if (this.arr[i][0][0] === v)
			{
				ret.set_int(i);
				return;
			}
		}
		ret.set_int(-1);
	};
	Exps.prototype.LastIndexOf = function (ret, v)
	{
		for (var i = this.cx - 1; i >= 0; i--)
		{
			if (this.arr[i][0][0] === v)
			{
				ret.set_int(i);
				return;
			}
		}
		ret.set_int(-1);
	};
	Exps.prototype.AsJSON = function (ret)
	{
		ret.set_string(this.getAsJSON());
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Audio = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Audio.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	var audRuntime = null;
	var audInst = null;
	var audTag = "";
	var appPath = "";			// for PhoneGap only
	var API_HTML5 = 0;
	var API_WEBAUDIO = 1;
	var API_PHONEGAP = 2;
	var API_APPMOBI = 3;
	var api = API_HTML5;
	var context = null;
	var audioBuffers = [];		// cache of buffers
	var audioInstances = [];	// cache of instances
	var lastAudio = null;
	var useOgg = false;			// determined at create time
	var timescale_mode = 0;
	var silent = false;
	var masterVolume = 1;
	var listenerX = 0;
	var listenerY = 0;
	var panningModel = 1;		// HRTF
	var distanceModel = 1;		// Inverse
	var refDistance = 10;
	var maxDistance = 10000;
	var rolloffFactor = 1;
	var micSource = null;
	var micTag = "";
	function dbToLinear(x)
	{
		var v = dbToLinear_nocap(x);
		if (v < 0)
			v = 0;
		if (v > 1)
			v = 1;
		return v;
	};
	function linearToDb(x)
	{
		if (x < 0)
			x = 0;
		if (x > 1)
			x = 1;
		return linearToDb_nocap(x);
	};
	function dbToLinear_nocap(x)
	{
		return Math.pow(10, x / 20);
	};
	function linearToDb_nocap(x)
	{
		return (Math.log(x) / Math.log(10)) * 20;
	};
	var effects = {};
	function getDestinationForTag(tag)
	{
		tag = tag.toLowerCase();
		if (effects.hasOwnProperty(tag))
		{
			if (effects[tag].length)
				return effects[tag][0].getInputNode();
		}
		return context["destination"];
	};
	function createGain()
	{
		if (context["createGain"])
			return context["createGain"]();
		else
			return context["createGainNode"]();
	};
	function createDelay(d)
	{
		if (context["createDelay"])
			return context["createDelay"](d);
		else
			return context["createDelayNode"](d);
	};
	function startSource(s)
	{
		if (s["start"])
			s["start"](0);
		else
			s["noteOn"](0);
	};
	function startSourceAt(s, x, d)
	{
		if (s["start"])
			s["start"](0, x);
		else
			s["noteGrainOn"](0, x, d - x);
	};
	function stopSource(s)
	{
		if (s["stop"])
			s["stop"](0);
		else
			s["noteOff"](0);
	};
	function setAudioParam(ap, value, ramp, time)
	{
		if (!ap)
			return;		// iOS is missing some parameters
		ap["cancelScheduledValues"](0);
		if (time === 0)
		{
			ap["value"] = value;
			return;
		}
		var curTime = context["currentTime"];
		time += curTime;
		switch (ramp) {
		case 0:		// step
			ap["setValueAtTime"](value, time);
			break;
		case 1:		// linear
			ap["setValueAtTime"](ap["value"], curTime);		// to set what to ramp from
			ap["linearRampToValueAtTime"](value, time);
			break;
		case 2:		// exponential
			ap["setValueAtTime"](ap["value"], curTime);		// to set what to ramp from
			ap["exponentialRampToValueAtTime"](value, time);
			break;
		}
	};
	var filterTypes = ["lowpass", "highpass", "bandpass", "lowshelf", "highshelf", "peaking", "notch", "allpass"];
	function FilterEffect(type, freq, detune, q, gain, mix)
	{
		this.type = "filter";
		this.params = [type, freq, detune, q, gain, mix];
		this.inputNode = createGain();
		this.wetNode = createGain();
		this.wetNode["gain"]["value"] = mix;
		this.dryNode = createGain();
		this.dryNode["gain"]["value"] = 1 - mix;
		this.filterNode = context["createBiquadFilter"]();
		if (typeof this.filterNode["type"] === "number")
			this.filterNode["type"] = type;
		else
			this.filterNode["type"] = filterTypes[type];
		this.filterNode["frequency"]["value"] = freq;
		if (this.filterNode["detune"])		// iOS 6 doesn't have detune yet
			this.filterNode["detune"]["value"] = detune;
		this.filterNode["Q"]["value"] = q;
		this.filterNode["gain"]["value"] = gain;
		this.inputNode["connect"](this.filterNode);
		this.inputNode["connect"](this.dryNode);
		this.filterNode["connect"](this.wetNode);
	};
	FilterEffect.prototype.connectTo = function (node)
	{
		this.wetNode["disconnect"]();
		this.wetNode["connect"](node);
		this.dryNode["disconnect"]();
		this.dryNode["connect"](node);
	};
	FilterEffect.prototype.remove = function ()
	{
		this.inputNode["disconnect"]();
		this.filterNode["disconnect"]();
		this.wetNode["disconnect"]();
		this.dryNode["disconnect"]();
	};
	FilterEffect.prototype.getInputNode = function ()
	{
		return this.inputNode;
	};
	FilterEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[4] = value;
			setAudioParam(this.wetNode["gain"], value, ramp, time);
			setAudioParam(this.dryNode["gain"], 1 - value, ramp, time);
			break;
		case 1:		// filter frequency
			this.params[0] = value;
			setAudioParam(this.filterNode["frequency"], value, ramp, time);
			break;
		case 2:		// filter detune
			this.params[1] = value;
			setAudioParam(this.filterNode["detune"], value, ramp, time);
			break;
		case 3:		// filter Q
			this.params[2] = value;
			setAudioParam(this.filterNode["Q"], value, ramp, time);
			break;
		case 4:		// filter/delay gain (note value is in dB here)
			this.params[3] = value;
			setAudioParam(this.filterNode["gain"], value, ramp, time);
			break;
		}
	};
	function DelayEffect(delayTime, delayGain, mix)
	{
		this.type = "delay";
		this.params = [delayTime, delayGain, mix];
		this.inputNode = createGain();
		this.wetNode = createGain();
		this.wetNode["gain"]["value"] = mix;
		this.dryNode = createGain();
		this.dryNode["gain"]["value"] = 1 - mix;
		this.mainNode = createGain();
		this.delayNode = createDelay(delayTime);
		this.delayNode["delayTime"]["value"] = delayTime;
		this.delayGainNode = createGain();
		this.delayGainNode["gain"]["value"] = delayGain;
		this.inputNode["connect"](this.mainNode);
		this.inputNode["connect"](this.dryNode);
		this.mainNode["connect"](this.wetNode);
		this.mainNode["connect"](this.delayNode);
		this.delayNode["connect"](this.delayGainNode);
		this.delayGainNode["connect"](this.mainNode);
	};
	DelayEffect.prototype.connectTo = function (node)
	{
		this.wetNode["disconnect"]();
		this.wetNode["connect"](node);
		this.dryNode["disconnect"]();
		this.dryNode["connect"](node);
	};
	DelayEffect.prototype.remove = function ()
	{
		this.inputNode["disconnect"]();
		this.mainNode["disconnect"]();
		this.delayNode["disconnect"]();
		this.delayGainNode["disconnect"]();
		this.wetNode["disconnect"]();
		this.dryNode["disconnect"]();
	};
	DelayEffect.prototype.getInputNode = function ()
	{
		return this.inputNode;
	};
	DelayEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[2] = value;
			setAudioParam(this.wetNode["gain"], value, ramp, time);
			setAudioParam(this.dryNode["gain"], 1 - value, ramp, time);
			break;
		case 4:		// filter/delay gain (note value is passed in dB but needs to be linear here)
			this.params[1] = dbToLinear(value);
			setAudioParam(this.delayGainNode["gain"], dbToLinear(value), ramp, time);
			break;
		case 5:		// delay time
			this.params[0] = value;
			setAudioParam(this.delayNode["delayTime"], value, ramp, time);
			break;
		}
	};
	function ConvolveEffect(buffer, normalize, mix, src)
	{
		this.type = "convolve";
		this.params = [normalize, mix, src];
		this.inputNode = createGain();
		this.wetNode = createGain();
		this.wetNode["gain"]["value"] = mix;
		this.dryNode = createGain();
		this.dryNode["gain"]["value"] = 1 - mix;
		this.convolveNode = context["createConvolver"]();
		if (buffer)
		{
			this.convolveNode["normalize"] = normalize;
			this.convolveNode["buffer"] = buffer;
		}
		this.inputNode["connect"](this.convolveNode);
		this.inputNode["connect"](this.dryNode);
		this.convolveNode["connect"](this.wetNode);
	};
	ConvolveEffect.prototype.connectTo = function (node)
	{
		this.wetNode["disconnect"]();
		this.wetNode["connect"](node);
		this.dryNode["disconnect"]();
		this.dryNode["connect"](node);
	};
	ConvolveEffect.prototype.remove = function ()
	{
		this.inputNode["disconnect"]();
		this.convolveNode["disconnect"]();
		this.wetNode["disconnect"]();
		this.dryNode["disconnect"]();
	};
	ConvolveEffect.prototype.getInputNode = function ()
	{
		return this.inputNode;
	};
	ConvolveEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[1] = value;
			setAudioParam(this.wetNode["gain"], value, ramp, time);
			setAudioParam(this.dryNode["gain"], 1 - value, ramp, time);
			break;
		}
	};
	function FlangerEffect(delay, modulation, freq, feedback, mix)
	{
		this.type = "flanger";
		this.params = [delay, modulation, freq, feedback, mix];
		this.inputNode = createGain();
		this.dryNode = createGain();
		this.dryNode["gain"]["value"] = 1 - (mix / 2);
		this.wetNode = createGain();
		this.wetNode["gain"]["value"] = mix / 2;
		this.feedbackNode = createGain();
		this.feedbackNode["gain"]["value"] = feedback;
		this.delayNode = createDelay(delay + modulation);
		this.delayNode["delayTime"]["value"] = delay;
		this.oscNode = context["createOscillator"]();
		this.oscNode["frequency"]["value"] = freq;
		this.oscGainNode = createGain();
		this.oscGainNode["gain"]["value"] = modulation;
		this.inputNode["connect"](this.delayNode);
		this.inputNode["connect"](this.dryNode);
		this.delayNode["connect"](this.wetNode);
		this.delayNode["connect"](this.feedbackNode);
		this.feedbackNode["connect"](this.delayNode);
		this.oscNode["connect"](this.oscGainNode);
		this.oscGainNode["connect"](this.delayNode["delayTime"]);
		startSource(this.oscNode);
	};
	FlangerEffect.prototype.connectTo = function (node)
	{
		this.dryNode["disconnect"]();
		this.dryNode["connect"](node);
		this.wetNode["disconnect"]();
		this.wetNode["connect"](node);
	};
	FlangerEffect.prototype.remove = function ()
	{
		this.inputNode["disconnect"]();
		this.delayNode["disconnect"]();
		this.oscNode["disconnect"]();
		this.oscGainNode["disconnect"]();
		this.dryNode["disconnect"]();
		this.wetNode["disconnect"]();
		this.feedbackNode["disconnect"]();
	};
	FlangerEffect.prototype.getInputNode = function ()
	{
		return this.inputNode;
	};
	FlangerEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[4] = value;
			setAudioParam(this.wetNode["gain"], value / 2, ramp, time);
			setAudioParam(this.dryNode["gain"], 1 - (value / 2), ramp, time);
			break;
		case 6:		// modulation
			this.params[1] = value / 1000;
			setAudioParam(this.oscGainNode["gain"], value / 1000, ramp, time);
			break;
		case 7:		// modulation frequency
			this.params[2] = value;
			setAudioParam(this.oscNode["frequency"], value, ramp, time);
			break;
		case 8:		// feedback
			this.params[3] = value / 100;
			setAudioParam(this.feedbackNode["gain"], value / 100, ramp, time);
			break;
		}
	};
	function PhaserEffect(freq, detune, q, modulation, modfreq, mix)
	{
		this.type = "phaser";
		this.params = [freq, detune, q, modulation, modfreq, mix];
		this.inputNode = createGain();
		this.dryNode = createGain();
		this.dryNode["gain"]["value"] = 1 - (mix / 2);
		this.wetNode = createGain();
		this.wetNode["gain"]["value"] = mix / 2;
		this.filterNode = context["createBiquadFilter"]();
		if (typeof this.filterNode["type"] === "number")
			this.filterNode["type"] = 7;	// all-pass
		else
			this.filterNode["type"] = "allpass";
		this.filterNode["frequency"]["value"] = freq;
		if (this.filterNode["detune"])		// iOS 6 doesn't have detune yet
			this.filterNode["detune"]["value"] = detune;
		this.filterNode["Q"]["value"] = q;
		this.oscNode = context["createOscillator"]();
		this.oscNode["frequency"]["value"] = modfreq;
		this.oscGainNode = createGain();
		this.oscGainNode["gain"]["value"] = modulation;
		this.inputNode["connect"](this.filterNode);
		this.inputNode["connect"](this.dryNode);
		this.filterNode["connect"](this.wetNode);
		this.oscNode["connect"](this.oscGainNode);
		this.oscGainNode["connect"](this.filterNode["frequency"]);
		startSource(this.oscNode);
	};
	PhaserEffect.prototype.connectTo = function (node)
	{
		this.dryNode["disconnect"]();
		this.dryNode["connect"](node);
		this.wetNode["disconnect"]();
		this.wetNode["connect"](node);
	};
	PhaserEffect.prototype.remove = function ()
	{
		this.inputNode["disconnect"]();
		this.filterNode["disconnect"]();
		this.oscNode["disconnect"]();
		this.oscGainNode["disconnect"]();
		this.dryNode["disconnect"]();
		this.wetNode["disconnect"]();
	};
	PhaserEffect.prototype.getInputNode = function ()
	{
		return this.inputNode;
	};
	PhaserEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[5] = value;
			setAudioParam(this.wetNode["gain"], value / 2, ramp, time);
			setAudioParam(this.dryNode["gain"], 1 - (value / 2), ramp, time);
			break;
		case 1:		// filter frequency
			this.params[0] = value;
			setAudioParam(this.filterNode["frequency"], value, ramp, time);
			break;
		case 2:		// filter detune
			this.params[1] = value;
			setAudioParam(this.filterNode["detune"], value, ramp, time);
			break;
		case 3:		// filter Q
			this.params[2] = value;
			setAudioParam(this.filterNode["Q"], value, ramp, time);
			break;
		case 6:		// modulation
			this.params[3] = value;
			setAudioParam(this.oscGainNode["gain"], value, ramp, time);
			break;
		case 7:		// modulation frequency
			this.params[4] = value;
			setAudioParam(this.oscNode["frequency"], value, ramp, time);
			break;
		}
	};
	function GainEffect(g)
	{
		this.type = "gain";
		this.params = [g];
		this.node = createGain();
		this.node["gain"]["value"] = g;
	};
	GainEffect.prototype.connectTo = function (node_)
	{
		this.node["disconnect"]();
		this.node["connect"](node_);
	};
	GainEffect.prototype.remove = function ()
	{
		this.node["disconnect"]();
	};
	GainEffect.prototype.getInputNode = function ()
	{
		return this.node;
	};
	GainEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 4:		// gain
			this.params[0] = dbToLinear(value);
			setAudioParam(this.node["gain"], dbToLinear(value), ramp, time);
			break;
		}
	};
	function TremoloEffect(freq, mix)
	{
		this.type = "tremolo";
		this.params = [freq, mix];
		this.node = createGain();
		this.node["gain"]["value"] = 1 - (mix / 2);
		this.oscNode = context["createOscillator"]();
		this.oscNode["frequency"]["value"] = freq;
		this.oscGainNode = createGain();
		this.oscGainNode["gain"]["value"] = mix / 2;
		this.oscNode["connect"](this.oscGainNode);
		this.oscGainNode["connect"](this.node["gain"]);
		startSource(this.oscNode);
	};
	TremoloEffect.prototype.connectTo = function (node_)
	{
		this.node["disconnect"]();
		this.node["connect"](node_);
	};
	TremoloEffect.prototype.remove = function ()
	{
		this.oscNode["disconnect"]();
		this.oscGainNode["disconnect"]();
		this.node["disconnect"]();
	};
	TremoloEffect.prototype.getInputNode = function ()
	{
		return this.node;
	};
	TremoloEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[1] = value;
			setAudioParam(this.node["gain"]["value"], 1 - (value / 2), ramp, time);
			setAudioParam(this.oscGainNode["gain"]["value"], value / 2, ramp, time);
			break;
		case 7:		// modulation frequency
			this.params[0] = value;
			setAudioParam(this.oscNode["frequency"], value, ramp, time);
			break;
		}
	};
	function RingModulatorEffect(freq, mix)
	{
		this.type = "ringmod";
		this.params = [freq, mix];
		this.inputNode = createGain();
		this.wetNode = createGain();
		this.wetNode["gain"]["value"] = mix;
		this.dryNode = createGain();
		this.dryNode["gain"]["value"] = 1 - mix;
		this.ringNode = createGain();
		this.ringNode["gain"]["value"] = 0;
		this.oscNode = context["createOscillator"]();
		this.oscNode["frequency"]["value"] = freq;
		this.oscNode["connect"](this.ringNode["gain"]);
		startSource(this.oscNode);
		this.inputNode["connect"](this.ringNode);
		this.inputNode["connect"](this.dryNode);
		this.ringNode["connect"](this.wetNode);
	};
	RingModulatorEffect.prototype.connectTo = function (node_)
	{
		this.wetNode["disconnect"]();
		this.wetNode["connect"](node_);
		this.dryNode["disconnect"]();
		this.dryNode["connect"](node_);
	};
	RingModulatorEffect.prototype.remove = function ()
	{
		this.oscNode["disconnect"]();
		this.ringNode["disconnect"]();
		this.inputNode["disconnect"]();
		this.wetNode["disconnect"]();
		this.dryNode["disconnect"]();
	};
	RingModulatorEffect.prototype.getInputNode = function ()
	{
		return this.inputNode;
	};
	RingModulatorEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[1] = value;
			setAudioParam(this.wetNode["gain"], value, ramp, time);
			setAudioParam(this.dryNode["gain"], 1 - value, ramp, time);
			break;
		case 7:		// modulation frequency
			this.params[0] = value;
			setAudioParam(this.oscNode["frequency"], value, ramp, time);
			break;
		}
	};
	function DistortionEffect(threshold, headroom, drive, makeupgain, mix)
	{
		this.type = "distortion";
		this.params = [threshold, headroom, drive, makeupgain, mix];
		this.inputNode = createGain();
		this.preGain = createGain();
		this.postGain = createGain();
		this.setDrive(drive, dbToLinear_nocap(makeupgain));
		this.wetNode = createGain();
		this.wetNode["gain"]["value"] = mix;
		this.dryNode = createGain();
		this.dryNode["gain"]["value"] = 1 - mix;
		this.waveShaper = context["createWaveShaper"]();
		this.curve = new Float32Array(65536);
		this.generateColortouchCurve(threshold, headroom);
		this.waveShaper.curve = this.curve;
		this.inputNode["connect"](this.preGain);
		this.inputNode["connect"](this.dryNode);
		this.preGain["connect"](this.waveShaper);
		this.waveShaper["connect"](this.postGain);
		this.postGain["connect"](this.wetNode);
	};
	DistortionEffect.prototype.setDrive = function (drive, makeupgain)
	{
		if (drive < 0.01)
			drive = 0.01;
		this.preGain["gain"]["value"] = drive;
		this.postGain["gain"]["value"] = Math.pow(1 / drive, 0.6) * makeupgain;
	};
	function e4(x, k)
	{
		return 1.0 - Math.exp(-k * x);
	}
	DistortionEffect.prototype.shape = function (x, linearThreshold, linearHeadroom)
	{
		var maximum = 1.05 * linearHeadroom * linearThreshold;
		var kk = (maximum - linearThreshold);
		var sign = x < 0 ? -1 : +1;
		var absx = x < 0 ? -x : x;
		var shapedInput = absx < linearThreshold ? absx : linearThreshold + kk * e4(absx - linearThreshold, 1.0 / kk);
		shapedInput *= sign;
		return shapedInput;
	};
	DistortionEffect.prototype.generateColortouchCurve = function (threshold, headroom)
	{
		var linearThreshold = dbToLinear_nocap(threshold);
		var linearHeadroom = dbToLinear_nocap(headroom);
		var n = 65536;
		var n2 = n / 2;
		var x = 0;
		for (var i = 0; i < n2; ++i) {
			x = i / n2;
			x = this.shape(x, linearThreshold, linearHeadroom);
			this.curve[n2 + i] = x;
			this.curve[n2 - i - 1] = -x;
		}
	};
	DistortionEffect.prototype.connectTo = function (node)
	{
		this.wetNode["disconnect"]();
		this.wetNode["connect"](node);
		this.dryNode["disconnect"]();
		this.dryNode["connect"](node);
	};
	DistortionEffect.prototype.remove = function ()
	{
		this.inputNode["disconnect"]();
		this.preGain["disconnect"]();
		this.waveShaper["disconnect"]();
		this.postGain["disconnect"]();
		this.wetNode["disconnect"]();
		this.dryNode["disconnect"]();
	};
	DistortionEffect.prototype.getInputNode = function ()
	{
		return this.inputNode;
	};
	DistortionEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[4] = value;
			setAudioParam(this.wetNode["gain"], value, ramp, time);
			setAudioParam(this.dryNode["gain"], 1 - value, ramp, time);
			break;
		}
	};
	function CompressorEffect(threshold, knee, ratio, attack, release)
	{
		this.type = "compressor";
		this.params = [threshold, knee, ratio, attack, release];
		this.node = context["createDynamicsCompressor"]();
		this.node["threshold"]["value"] = threshold;
		this.node["knee"]["value"] = knee;
		this.node["ratio"]["value"] = ratio;
		this.node["attack"]["value"] = attack;
		this.node["release"]["value"] = release;
	};
	CompressorEffect.prototype.connectTo = function (node_)
	{
		this.node["disconnect"]();
		this.node["connect"](node_);
	};
	CompressorEffect.prototype.remove = function ()
	{
		this.node["disconnect"]();
	};
	CompressorEffect.prototype.getInputNode = function ()
	{
		return this.node;
	};
	CompressorEffect.prototype.setParam = function(param, value, ramp, time)
	{
	};
	function AnalyserEffect(fftSize, smoothing)
	{
		this.type = "analyser";
		this.params = [fftSize, smoothing];
		this.node = context["createAnalyser"]();
		this.node["fftSize"] = fftSize;
		this.node["smoothingTimeConstant"] = smoothing;
		this.freqBins = new Float32Array(this.node["frequencyBinCount"]);
		this.signal = new Uint8Array(fftSize);
		this.peak = 0;
		this.rms = 0;
	};
	AnalyserEffect.prototype.tick = function ()
	{
		this.node["getFloatFrequencyData"](this.freqBins);
		this.node["getByteTimeDomainData"](this.signal);
		var fftSize = this.node["fftSize"];
		var i = 0;
		this.peak = 0;
		var rmsSquaredSum = 0;
		var s = 0;
		for ( ; i < fftSize; i++)
		{
			s = (this.signal[i] - 128) / 128;
			if (s < 0)
				s = -s;
			if (this.peak < s)
				this.peak = s;
			rmsSquaredSum += s * s;
		}
		this.peak = linearToDb(this.peak);
		this.rms = linearToDb(Math.sqrt(rmsSquaredSum / fftSize));
	};
	AnalyserEffect.prototype.connectTo = function (node_)
	{
		this.node["disconnect"]();
		this.node["connect"](node_);
	};
	AnalyserEffect.prototype.remove = function ()
	{
		this.node["disconnect"]();
	};
	AnalyserEffect.prototype.getInputNode = function ()
	{
		return this.node;
	};
	AnalyserEffect.prototype.setParam = function(param, value, ramp, time)
	{
	};
	var OT_POS_SAMPLES = 4;
	function ObjectTracker()
	{
		this.obj = null;
		this.loadUid = 0;
		this.speeds = [];
		this.lastX = 0;
		this.lastY = 0;
		this.moveAngle = 0;
	};
	ObjectTracker.prototype.setObject = function (obj_)
	{
		this.obj = obj_;
		if (this.obj)
		{
			this.lastX = this.obj.x;
			this.lastY = this.obj.y;
		}
		this.speeds.length = 0;
	};
	ObjectTracker.prototype.hasObject = function ()
	{
		return !!this.obj;
	};
	ObjectTracker.prototype.tick = function (dt)
	{
		if (!this.obj)
			return;
		this.moveAngle = cr.angleTo(this.lastX, this.lastY, this.obj.x, this.obj.y);
		var s = cr.distanceTo(this.lastX, this.lastY, this.obj.x, this.obj.y) / dt;
		if (this.speeds.length < OT_POS_SAMPLES)
			this.speeds.push(s);
		else
		{
			this.speeds.shift();
			this.speeds.push(s);
		}
		this.lastX = this.obj.x;
		this.lastY = this.obj.y;
	};
	ObjectTracker.prototype.getSpeed = function ()
	{
		if (!this.speeds.length)
			return 0;
		var i, len, sum = 0;
		for (i = 0, len = this.speeds.length; i < len; i++)
		{
			sum += this.speeds[i];
		}
		return sum / this.speeds.length;
	};
	ObjectTracker.prototype.getVelocityX = function ()
	{
		return Math.cos(this.moveAngle) * this.getSpeed();
	};
	ObjectTracker.prototype.getVelocityY = function ()
	{
		return Math.sin(this.moveAngle) * this.getSpeed();
	};
	var iOShadtouch = false;	// has had touch input on iOS to work around web audio API muting
	function C2AudioBuffer(src_, is_music)
	{
		this.src = src_;
		this.myapi = api;
		this.is_music = is_music;
		this.added_end_listener = false;
		var self = this;
		this.outNode = null;
		this.mediaSourceNode = null;
		this.panWhenReady = [];		// for web audio API positioned sounds
		this.seekWhenReady = 0;
		this.pauseWhenReady = false;
		if (api === API_WEBAUDIO && is_music && !audRuntime.isMobile)
		{
			this.myapi = API_HTML5;
			this.outNode = createGain();
		}
		this.bufferObject = null;			// actual audio object
		this.audioData = null;				// web audio api: ajax request result (compressed audio that needs decoding)
		var request;
		switch (this.myapi) {
		case API_HTML5:
			this.bufferObject = new Audio();
			if (api === API_WEBAUDIO && context["createMediaElementSource"])
			{
				this.bufferObject.addEventListener("canplay", function ()
				{
					self.mediaSourceNode = context["createMediaElementSource"](self.bufferObject);
					self.mediaSourceNode["connect"](self.outNode);
				});
			}
			this.bufferObject.autoplay = false;	// this is only a source buffer, not an instance
			this.bufferObject.preload = "auto";
			this.bufferObject.src = src_;
			break;
		case API_WEBAUDIO:
			request = new XMLHttpRequest();
			request.open("GET", src_, true);
			request.responseType = "arraybuffer";
			request.onload = function () {
				self.audioData = request.response;
				self.decodeAudioBuffer();
			};
			request.send();
			break;
		case API_PHONEGAP:
			this.bufferObject = true;
			break;
		case API_APPMOBI:
			this.bufferObject = true;
			break;
		}
	};
	C2AudioBuffer.prototype.decodeAudioBuffer = function ()
	{
		if (this.bufferObject || !this.audioData)
			return;		// audio already decoded or AJAX request not yet complete
		var self = this;
		if (context["decodeAudioData"])
		{
			context["decodeAudioData"](this.audioData, function (buffer) {
					self.bufferObject = buffer;
					var p, i, len, a;
					if (!cr.is_undefined(self.playTagWhenReady))
					{
						if (self.panWhenReady.length)
						{
							for (i = 0, len = self.panWhenReady.length; i < len; i++)
							{
								p = self.panWhenReady[i];
								a = new C2AudioInstance(self, p.thistag);
								a.setPannerEnabled(true);
								if (typeof p.objUid !== "undefined")
								{
									p.obj = audRuntime.getObjectByUID(p.objUid);
									if (!p.obj)
										continue;
								}
								if (p.obj)
								{
									var px = cr.rotatePtAround(p.obj.x, p.obj.y, -p.obj.layer.getAngle(), listenerX, listenerY, true);
									var py = cr.rotatePtAround(p.obj.x, p.obj.y, -p.obj.layer.getAngle(), listenerX, listenerY, false);
									a.setPan(px, py, cr.to_degrees(p.obj.angle - p.obj.layer.getAngle()), p.ia, p.oa, p.og);
									a.setObject(p.obj);
								}
								else
								{
									a.setPan(p.x, p.y, p.a, p.ia, p.oa, p.og);
								}
								a.play(self.loopWhenReady, self.volumeWhenReady, self.seekWhenReady);
								if (self.pauseWhenReady)
									a.pause();
								audioInstances.push(a);
							}
							self.panWhenReady.length = 0;
						}
						else
						{
							a = new C2AudioInstance(self, self.playTagWhenReady);
							a.play(self.loopWhenReady, self.volumeWhenReady, self.seekWhenReady);
							if (self.pauseWhenReady)
								a.pause();
							audioInstances.push(a);
						}
					}
					else if (!cr.is_undefined(self.convolveWhenReady))
					{
						var convolveNode = self.convolveWhenReady.convolveNode;
						convolveNode["normalize"] = self.normalizeWhenReady;
						convolveNode["buffer"] = buffer;
					}
			});
		}
		else
		{
			this.bufferObject = context["createBuffer"](this.audioData, false);
			if (!cr.is_undefined(this.playTagWhenReady))
			{
				var a = new C2AudioInstance(this, this.playTagWhenReady);
				a.play(this.loopWhenReady, this.volumeWhenReady, this.seekWhenReady);
				if (this.pauseWhenReady)
					a.pause();
				audioInstances.push(a);
			}
			else if (!cr.is_undefined(this.convolveWhenReady))
			{
				var convolveNode = this.convolveWhenReady.convolveNode;
				convolveNode["normalize"] = this.normalizeWhenReady;
				convolveNode["buffer"] = this.bufferObject;
			}
		}
	};
	C2AudioBuffer.prototype.isLoaded = function ()
	{
		switch (this.myapi) {
		case API_HTML5:
			return this.bufferObject["readyState"] === 4;	// HAVE_ENOUGH_DATA
		case API_WEBAUDIO:
			return !!this.audioData;			// null until AJAX request completes
		case API_PHONEGAP:
			return true;
		case API_APPMOBI:
			return true;
		}
		return false;
	};
	function C2AudioInstance(buffer_, tag_)
	{
		var self = this;
		this.tag = tag_;
		this.fresh = true;
		this.stopped = true;
		this.src = buffer_.src;
		this.buffer = buffer_;
		this.myapi = api;
		this.is_music = buffer_.is_music;
		this.playbackRate = 1;
		this.pgended = true;			// for PhoneGap only: ended flag
		this.resume_me = false;			// make sure resumes when leaving suspend
		this.is_paused = false;
		this.resume_position = 0;		// for web audio api to resume from correct playback position
		this.looping = false;
		this.is_muted = false;
		this.is_silent = false;
		this.volume = 1;
		this.mutevol = 1;
		this.startTime = audRuntime.kahanTime.sum;
		this.gainNode = null;
		this.pannerNode = null;
		this.pannerEnabled = false;
		this.objectTracker = null;
		this.panX = 0;
		this.panY = 0;
		this.panAngle = 0;
		this.panConeInner = 0;
		this.panConeOuter = 0;
		this.panConeOuterGain = 0;
		this.instanceObject = null;
		var add_end_listener = false;
		switch (this.myapi) {
		case API_HTML5:
			if (this.is_music)
			{
				this.instanceObject = buffer_.bufferObject;
				add_end_listener = !buffer_.added_end_listener;
				buffer_.added_end_listener = true;
			}
			else
			{
				this.instanceObject = new Audio();
				this.instanceObject.autoplay = false;
				this.instanceObject.src = buffer_.bufferObject.src;
				add_end_listener = true;
			}
			if (add_end_listener)
			{
				this.instanceObject.addEventListener('ended', function () {
						audTag = self.tag;
						self.stopped = true;
						audRuntime.trigger(cr.plugins_.Audio.prototype.cnds.OnEnded, audInst);
				});
			}
			break;
		case API_WEBAUDIO:
			this.gainNode = createGain();
			this.gainNode["connect"](getDestinationForTag(tag_));
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				if (buffer_.bufferObject)
				{
					this.instanceObject = context["createBufferSource"]();
					this.instanceObject["buffer"] = buffer_.bufferObject;
					this.instanceObject["connect"](this.gainNode);
				}
			}
			else
			{
				this.instanceObject = this.buffer.bufferObject;		// reference the audio element
				this.buffer.outNode["connect"](this.gainNode);
			}
			break;
		case API_PHONEGAP:
			this.instanceObject = new window["Media"](appPath + this.src, null, null, function (status) {
					if (status === window["Media"]["MEDIA_STOPPED"])
					{
						self.pgended = true;
						self.stopped = true;
						audTag = self.tag;
						audRuntime.trigger(cr.plugins_.Audio.prototype.cnds.OnEnded, audInst);
					}
			});
			break;
		case API_APPMOBI:
			this.instanceObject = true;
			break;
		}
	};
	C2AudioInstance.prototype.hasEnded = function ()
	{
		switch (this.myapi) {
		case API_HTML5:
			return this.instanceObject.ended;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				if (!this.fresh && !this.stopped && this.instanceObject["loop"])
					return false;
				if (this.is_paused)
					return false;
				return (audRuntime.kahanTime.sum - this.startTime) > this.buffer.bufferObject["duration"];
			}
			else
				return this.instanceObject.ended;
		case API_PHONEGAP:
			return this.pgended;
		case API_APPMOBI:
			true;	// recycling an AppMobi sound does not matter because it will just do another throwaway playSound
		}
		return true;
	};
	C2AudioInstance.prototype.canBeRecycled = function ()
	{
		if (this.fresh || this.stopped)
			return true;		// not yet used or is not playing
		return this.hasEnded();
	};
	C2AudioInstance.prototype.setPannerEnabled = function (enable_)
	{
		if (api !== API_WEBAUDIO)
			return;
		if (!this.pannerEnabled && enable_)
		{
			if (!this.pannerNode)
			{
				this.pannerNode = context["createPanner"]();
				if (typeof this.pannerNode["panningModel"] === "number")
					this.pannerNode["panningModel"] = panningModel;
				else
					this.pannerNode["panningModel"] = ["equalpower", "HRTF", "soundfield"][panningModel];
				if (typeof this.pannerNode["distanceModel"] === "number")
					this.pannerNode["distanceModel"] = distanceModel;
				else
					this.pannerNode["distanceModel"] = ["linear", "inverse", "exponential"][distanceModel];
				this.pannerNode["refDistance"] = refDistance;
				this.pannerNode["maxDistance"] = maxDistance;
				this.pannerNode["rolloffFactor"] = rolloffFactor;
			}
			this.gainNode["disconnect"]();
			this.gainNode["connect"](this.pannerNode);
			this.pannerNode["connect"](getDestinationForTag(this.tag));
			this.pannerEnabled = true;
		}
		else if (this.pannerEnabled && !enable_)
		{
			this.pannerNode["disconnect"]();
			this.gainNode["disconnect"]();
			this.gainNode["connect"](getDestinationForTag(this.tag));
			this.pannerEnabled = false;
		}
	};
	C2AudioInstance.prototype.setPan = function (x, y, angle, innerangle, outerangle, outergain)
	{
		if (!this.pannerEnabled || api !== API_WEBAUDIO)
			return;
		this.pannerNode["setPosition"](x, y, 0);
		this.pannerNode["setOrientation"](Math.cos(cr.to_radians(angle)), Math.sin(cr.to_radians(angle)), 0);
		this.pannerNode["coneInnerAngle"] = innerangle;
		this.pannerNode["coneOuterAngle"] = outerangle;
		this.pannerNode["coneOuterGain"] = outergain;
		this.panX = x;
		this.panY = y;
		this.panAngle = angle;
		this.panConeInner = innerangle;
		this.panConeOuter = outerangle;
		this.panConeOuterGain = outergain;
	};
	C2AudioInstance.prototype.setObject = function (o)
	{
		if (!this.pannerEnabled || api !== API_WEBAUDIO)
			return;
		if (!this.objectTracker)
			this.objectTracker = new ObjectTracker();
		this.objectTracker.setObject(o);
	};
	C2AudioInstance.prototype.tick = function (dt)
	{
		if (!this.pannerEnabled || api !== API_WEBAUDIO || !this.objectTracker || !this.objectTracker.hasObject() || !this.isPlaying())
		{
			return;
		}
		this.objectTracker.tick(dt);
		var inst = this.objectTracker.obj;
		var px = cr.rotatePtAround(inst.x, inst.y, -inst.layer.getAngle(), listenerX, listenerY, true);
		var py = cr.rotatePtAround(inst.x, inst.y, -inst.layer.getAngle(), listenerX, listenerY, false);
		this.pannerNode["setPosition"](px, py, 0);
		var a = 0;
		if (typeof this.objectTracker.obj.angle !== "undefined")
		{
			a = inst.angle - inst.layer.getAngle();
			this.pannerNode["setOrientation"](Math.cos(a), Math.sin(a), 0);
		}
		this.pannerNode["setVelocity"](this.objectTracker.getVelocityX(), this.objectTracker.getVelocityY(), 0);
	};
	C2AudioInstance.prototype.play = function (looping, vol, fromPosition)
	{
		var instobj = this.instanceObject;
		this.looping = looping;
		this.volume = vol;
		var seekPos = fromPosition || 0;
		switch (this.myapi) {
		case API_HTML5:
			if (instobj.playbackRate !== 1.0)
				instobj.playbackRate = 1.0;
			if (instobj.volume !== vol * masterVolume)
				instobj.volume = vol * masterVolume;
			if (instobj.loop !== looping)
				instobj.loop = looping;
			if (instobj.muted)
				instobj.muted = false;
			if (instobj.currentTime !== seekPos)
			{
				try {
					instobj.currentTime = seekPos;
				}
				catch (err)
				{
;
				}
			}
			this.instanceObject.play();
			break;
		case API_WEBAUDIO:
			this.muted = false;
			this.mutevol = 1;
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				if (!this.fresh)
				{
					this.instanceObject = context["createBufferSource"]();
					this.instanceObject["buffer"] = this.buffer.bufferObject;
					this.instanceObject["connect"](this.gainNode);
				}
				this.instanceObject.loop = looping;
				this.gainNode["gain"]["value"] = vol * masterVolume;
				if (seekPos === 0)
					startSource(this.instanceObject);
				else
					startSourceAt(this.instanceObject, seekPos, this.getDuration());
			}
			else
			{
				if (instobj.playbackRate !== 1.0)
					instobj.playbackRate = 1.0;
				if (instobj.loop !== looping)
					instobj.loop = looping;
				this.gainNode["gain"]["value"] = vol * masterVolume;
				if (instobj.currentTime !== seekPos)
				{
					try {
						instobj.currentTime = seekPos;
					}
					catch (err)
					{
;
					}
				}
				instobj.play();
			}
			break;
		case API_PHONEGAP:
			if ((!this.fresh && this.stopped) || seekPos !== 0)
				instobj["seekTo"](seekPos);
			instobj["play"]();
			this.pgended = false;
			break;
		case API_APPMOBI:
			if (audRuntime.isDirectCanvas)
				AppMobi["context"]["playSound"](this.src);
			else
				AppMobi["player"]["playSound"](this.src);
			break;
		}
		this.playbackRate = 1;
		this.startTime = audRuntime.kahanTime.sum - seekPos;
		this.fresh = false;
		this.stopped = false;
		this.is_paused = false;
	};
	C2AudioInstance.prototype.stop = function ()
	{
		switch (this.myapi) {
		case API_HTML5:
			if (!this.instanceObject.paused)
				this.instanceObject.pause();
			break;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
				stopSource(this.instanceObject);
			else
			{
				if (!this.instanceObject.paused)
					this.instanceObject.pause();
			}
			break;
		case API_PHONEGAP:
			this.instanceObject["stop"]();
			break;
		case API_APPMOBI:
			break;
		}
		this.stopped = true;
		this.is_paused = false;
	};
	C2AudioInstance.prototype.pause = function ()
	{
		if (this.fresh || this.stopped || this.hasEnded() || this.is_paused)
			return;
		switch (this.myapi) {
		case API_HTML5:
			if (!this.instanceObject.paused)
				this.instanceObject.pause();
			break;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				this.resume_position = this.getPlaybackTime();
				if (this.looping)
					this.resume_position = this.resume_position % this.getDuration();
				stopSource(this.instanceObject);
			}
			else
			{
				if (!this.instanceObject.paused)
					this.instanceObject.pause();
			}
			break;
		case API_PHONEGAP:
			this.instanceObject["pause"]();
			break;
		case API_APPMOBI:
			break;
		}
		this.is_paused = true;
	};
	C2AudioInstance.prototype.resume = function ()
	{
		if (this.fresh || this.stopped || this.hasEnded() || !this.is_paused)
			return;
		switch (this.myapi) {
		case API_HTML5:
			this.instanceObject.play();
			break;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				this.instanceObject = context["createBufferSource"]();
				this.instanceObject["buffer"] = this.buffer.bufferObject;
				this.instanceObject["connect"](this.gainNode);
				this.instanceObject.loop = this.looping;
				this.gainNode["gain"]["value"] = masterVolume * this.volume * this.mutevol;
				this.startTime = audRuntime.kahanTime.sum - this.resume_position;
				startSourceAt(this.instanceObject, this.resume_position, this.getDuration());
			}
			else
			{
				this.instanceObject.play();
			}
			break;
		case API_PHONEGAP:
			this.instanceObject["play"]();
			break;
		case API_APPMOBI:
			break;
		}
		this.is_paused = false;
	};
	C2AudioInstance.prototype.seek = function (pos)
	{
		if (this.fresh || this.stopped || this.hasEnded())
			return;
		switch (this.myapi) {
		case API_HTML5:
			try {
				this.instanceObject.currentTime = pos;
			}
			catch (e) {}
			break;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				if (this.is_paused)
					this.resume_position = pos;
				else
				{
					this.pause();
					this.resume_position = pos;
					this.resume();
				}
			}
			else
			{
				try {
					this.instanceObject.currentTime = pos;
				}
				catch (e) {}
			}
			break;
		case API_PHONEGAP:
			break;
		case API_APPMOBI:
			break;
		}
	};
	C2AudioInstance.prototype.reconnect = function (toNode)
	{
		if (this.myapi !== API_WEBAUDIO)
			return;
		if (this.pannerEnabled)
		{
			this.pannerNode["disconnect"]();
			this.pannerNode["connect"](toNode);
		}
		else
		{
			this.gainNode["disconnect"]();
			this.gainNode["connect"](toNode);
		}
	};
	C2AudioInstance.prototype.getDuration = function ()
	{
		switch (this.myapi) {
		case API_HTML5:
			if (typeof this.instanceObject.duration !== "undefined")
				return this.instanceObject.duration;
			else
				return 0;
		case API_WEBAUDIO:
			return this.buffer.bufferObject["duration"];
		case API_PHONEGAP:
			return this.instanceObject["getDuration"]();
		case API_APPMOBI:
			return 0;
		}
		return 0;
	};
	C2AudioInstance.prototype.getPlaybackTime = function ()
	{
		var duration = this.getDuration();
		var ret = 0;
		switch (this.myapi) {
		case API_HTML5:
			if (typeof this.instanceObject.currentTime !== "undefined")
				ret = this.instanceObject.currentTime;
			break;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				if (this.is_paused)
					return this.resume_position;
				else
					ret = audRuntime.kahanTime.sum - this.startTime;
			}
			else if (typeof this.instanceObject.currentTime !== "undefined")
				ret = this.instanceObject.currentTime;
			break;
		case API_PHONEGAP:
			break;
		case API_APPMOBI:
			break;
		}
		if (!this.looping && ret > duration)
			ret = duration;
		return ret;
	};
	C2AudioInstance.prototype.isPlaying = function ()
	{
		return !this.is_paused && !this.fresh && !this.stopped && !this.hasEnded();
	};
	C2AudioInstance.prototype.setVolume = function (v)
	{
		this.volume = v;
		this.updateVolume();
	};
	C2AudioInstance.prototype.updateVolume = function ()
	{
		var volToSet = this.volume * masterVolume;
		switch (this.myapi) {
		case API_HTML5:
			if (this.instanceObject.volume && this.instanceObject.volume !== volToSet)
				this.instanceObject.volume = volToSet;
			break;
		case API_WEBAUDIO:
			this.gainNode["gain"]["value"] = volToSet * this.mutevol;
			break;
		case API_PHONEGAP:
			break;
		case API_APPMOBI:
			break;
		}
	};
	C2AudioInstance.prototype.getVolume = function ()
	{
		return this.volume;
	};
	C2AudioInstance.prototype.doSetMuted = function (m)
	{
		switch (this.myapi) {
		case API_HTML5:
			if (this.instanceObject.muted !== !!m)
				this.instanceObject.muted = !!m;
			break;
		case API_WEBAUDIO:
			this.mutevol = (m ? 0 : 1);
			this.gainNode["gain"]["value"] = masterVolume * this.volume * this.mutevol;
			break;
		case API_PHONEGAP:
			break;
		case API_APPMOBI:
			break;
		}
	};
	C2AudioInstance.prototype.setMuted = function (m)
	{
		this.is_muted = !!m;
		this.doSetMuted(this.is_muted || this.is_silent);
	};
	C2AudioInstance.prototype.setSilent = function (m)
	{
		this.is_silent = !!m;
		this.doSetMuted(this.is_muted || this.is_silent);
	};
	C2AudioInstance.prototype.setLooping = function (l)
	{
		this.looping = l;
		switch (this.myapi) {
		case API_HTML5:
			if (this.instanceObject.loop !== !!l)
				this.instanceObject.loop = !!l;
			break;
		case API_WEBAUDIO:
			if (this.instanceObject.loop !== !!l)
				this.instanceObject.loop = !!l;
			break;
		case API_PHONEGAP:
			break;
		case API_APPMOBI:
			break;
		}
	};
	C2AudioInstance.prototype.setPlaybackRate = function (r)
	{
		this.playbackRate = r;
		this.updatePlaybackRate();
	};
	C2AudioInstance.prototype.updatePlaybackRate = function ()
	{
		var r = this.playbackRate;
		if ((timescale_mode === 1 && !this.is_music) || timescale_mode === 2)
			r *= audRuntime.timescale;
		switch (this.myapi) {
		case API_HTML5:
			if (this.instanceObject.playbackRate !== r)
				this.instanceObject.playbackRate = r;
			break;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				if (this.instanceObject["playbackRate"]["value"] !== r)
					this.instanceObject["playbackRate"]["value"] = r;
			}
			else
			{
				if (this.instanceObject.playbackRate !== r)
					this.instanceObject.playbackRate = r;
			}
			break;
		case API_PHONEGAP:
			break;
		case API_APPMOBI:
			break;
		}
	};
	C2AudioInstance.prototype.setSuspended = function (s)
	{
		switch (this.myapi) {
		case API_HTML5:
			if (s)
			{
				if (this.isPlaying())
				{
					this.instanceObject["pause"]();
					this.resume_me = true;
				}
				else
					this.resume_me = false;
			}
			else
			{
				if (this.resume_me)
					this.instanceObject["play"]();
			}
			break;
		case API_WEBAUDIO:
			if (s)
			{
				if (this.isPlaying())
				{
					if (this.buffer.myapi === API_WEBAUDIO)
					{
						this.resume_position = this.getPlaybackTime();
						if (this.looping)
							this.resume_position = this.resume_position % this.getDuration();
						stopSource(this.instanceObject);
					}
					else
						this.instanceObject["pause"]();
					this.resume_me = true;
				}
				else
					this.resume_me = false;
			}
			else
			{
				if (this.resume_me)
				{
					if (this.buffer.myapi === API_WEBAUDIO)
					{
						this.instanceObject = context["createBufferSource"]();
						this.instanceObject["buffer"] = this.buffer.bufferObject;
						this.instanceObject["connect"](this.gainNode);
						this.instanceObject.loop = this.looping;
						this.gainNode["gain"]["value"] = masterVolume * this.volume * this.mutevol;
						this.startTime = audRuntime.kahanTime.sum - this.resume_position;
						startSourceAt(this.instanceObject, this.resume_position, this.getDuration());
					}
					else
					{
						this.instanceObject["play"]();
					}
				}
			}
			break;
		case API_PHONEGAP:
			if (s)
			{
				if (this.isPlaying())
				{
					this.instanceObject["pause"]();
					this.resume_me = true;
				}
				else
					this.resume_me = false;
			}
			else
			{
				if (this.resume_me)
					this.instanceObject["play"]();
			}
			break;
		case API_APPMOBI:
			break;
		}
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
		audRuntime = this.runtime;
		audInst = this;
		this.listenerTracker = null;
		this.listenerZ = -600;
		context = null;
		if (typeof AudioContext !== "undefined")
		{
			api = API_WEBAUDIO;
			context = new AudioContext();
		}
		else if (typeof webkitAudioContext !== "undefined")
		{
			api = API_WEBAUDIO;
			context = new webkitAudioContext();
		}
		if (this.runtime.isiOS && api === API_WEBAUDIO)
		{
			document.addEventListener("touchstart", function () {
				if (iOShadtouch)
					return;
				var buffer = context["createBuffer"](1, 1, 22050);
				var source = context["createBufferSource"]();
				source["buffer"] = buffer;
				source["connect"](context["destination"]);
				startSource(source);
				iOShadtouch = true;
			}, true);
		}
		if (api !== API_WEBAUDIO)
		{
			if (this.runtime.isPhoneGap)
				api = API_PHONEGAP;
			else if (this.runtime.isAppMobi)
				api = API_APPMOBI;
		}
		if (api === API_PHONEGAP)
		{
			appPath = location.href;
			var i = appPath.lastIndexOf("/");
			if (i > -1)
				appPath = appPath.substr(0, i + 1);
			appPath = appPath.replace("file://", "");
		}
		if (this.runtime.isSafari && this.runtime.isWindows && typeof Audio === "undefined")
		{
			alert("It looks like you're using Safari for Windows without Quicktime.  Audio cannot be played until Quicktime is installed.");
			this.runtime.DestroyInstance(this);
		}
		else
		{
			if (this.runtime.isDirectCanvas)
				useOgg = this.runtime.isAndroid;		// AAC on iOS, OGG on Android
			else
			{
				try {
					useOgg = !!(new Audio().canPlayType('audio/ogg; codecs="vorbis"'));
				}
				catch (e)
				{
					useOgg = false;
				}
			}
			switch (api) {
			case API_HTML5:
;
				break;
			case API_WEBAUDIO:
;
				break;
			case API_PHONEGAP:
;
				break;
			case API_APPMOBI:
;
				break;
			default:
;
			}
			this.runtime.tickMe(this);
		}
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function ()
	{
		timescale_mode = this.properties[0];	// 0 = off, 1 = sounds only, 2 = all
		panningModel = this.properties[1];		// 0 = equalpower, 1 = hrtf, 3 = soundfield
		distanceModel = this.properties[2];		// 0 = linear, 1 = inverse, 2 = exponential
		this.listenerZ = -this.properties[3];
		refDistance = this.properties[4];
		maxDistance = this.properties[5];
		rolloffFactor = this.properties[6];
		this.listenerTracker = new ObjectTracker();
		if (api === API_WEBAUDIO)
		{
			context["listener"]["speedOfSound"] = this.properties[7];
			context["listener"]["dopplerFactor"] = this.properties[8];
			context["listener"]["setPosition"](this.runtime.width / 2, this.runtime.height / 2, this.listenerZ);
			context["listener"]["setOrientation"](0, 0, 1, 0, -1, 0);
			window["c2OnAudioMicStream"] = function (localMediaStream, tag)
			{
				if (micSource)
					micSource["disconnect"]();
				micTag = tag.toLowerCase();
				micSource = context["createMediaStreamSource"](localMediaStream);
				micSource["connect"](getDestinationForTag(micTag));
			};
		}
		this.runtime.addSuspendCallback(function(s)
		{
			audInst.onSuspend(s);
		});
		var self = this;
		this.runtime.addDestroyCallback(function (inst)
		{
			self.onInstanceDestroyed(inst);
		});
	};
	instanceProto.onInstanceDestroyed = function (inst)
	{
		var i, len, a;
		for (i = 0, len = audioInstances.length; i < len; i++)
		{
			a = audioInstances[i];
			if (a.objectTracker)
			{
				if (a.objectTracker.obj === inst)
				{
					a.objectTracker.obj = null;
					if (a.pannerEnabled && a.isPlaying() && a.looping)
						a.stop();
				}
			}
		}
		if (this.listenerTracker.obj === inst)
			this.listenerTracker.obj = null;
	};
	instanceProto.saveToJSON = function ()
	{
		var o = {
			"silent": silent,
			"masterVolume": masterVolume,
			"listenerZ": this.listenerZ,
			"listenerUid": this.listenerTracker.hasObject() ? this.listenerTracker.obj.uid : -1,
			"playing": [],
			"effects": {}
		};
		var playingarr = o["playing"];
		var i, len, a, d, p, panobj, playbackTime;
		for (i = 0, len = audioInstances.length; i < len; i++)
		{
			a = audioInstances[i];
			if (!a.isPlaying())
				continue;		// no need to save stopped sounds
			playbackTime = a.getPlaybackTime();
			if (a.looping)
				playbackTime = playbackTime % a.getDuration();
			d = {
				"tag": a.tag,
				"buffersrc": a.buffer.src,
				"is_music": a.is_music,
				"playbackTime": playbackTime,
				"volume": a.volume,
				"looping": a.looping,
				"muted": a.is_muted,
				"playbackRate": a.playbackRate,
				"paused": a.is_paused,
				"resume_position": a.resume_position
			};
			if (a.pannerEnabled)
			{
				d["pan"] = {};
				panobj = d["pan"];
				if (a.objectTracker && a.objectTracker.hasObject())
				{
					panobj["objUid"] = a.objectTracker.obj.uid;
				}
				else
				{
					panobj["x"] = a.panX;
					panobj["y"] = a.panY;
					panobj["a"] = a.panAngle;
				}
				panobj["ia"] = a.panConeInner;
				panobj["oa"] = a.panConeOuter;
				panobj["og"] = a.panConeOuterGain;
			}
			playingarr.push(d);
		}
		var fxobj = o["effects"];
		var fxarr;
		for (p in effects)
		{
			if (effects.hasOwnProperty(p))
			{
				fxarr = [];
				for (i = 0, len = effects[p].length; i < len; i++)
				{
					fxarr.push({ "type": effects[p][i].type, "params": effects[p][i].params });
				}
				fxobj[p] = fxarr;
			}
		}
		return o;
	};
	var objectTrackerUidsToLoad = [];
	instanceProto.loadFromJSON = function (o)
	{
		var setSilent = o["silent"];
		masterVolume = o["masterVolume"];
		this.listenerZ = o["listenerZ"];
		this.listenerTracker.setObject(null);
		var listenerUid = o["listenerUid"];
		if (listenerUid !== -1)
		{
			this.listenerTracker.loadUid = listenerUid;
			objectTrackerUidsToLoad.push(this.listenerTracker);
		}
		var playingarr = o["playing"];
		var i, len, d, src, is_music, tag, playbackTime, looping, vol, b, a, p, pan, panObjUid;
		for (i = 0, len = audioInstances.length; i < len; i++)
		{
			audioInstances[i].stop();
		}
		var fxarr, fxtype, fxparams, fx;
		for (p in effects)
		{
			if (effects.hasOwnProperty(p))
			{
				for (i = 0, len = effects[p].length; i < len; i++)
					effects[p][i].remove();
			}
		}
		cr.wipe(effects);
		for (p in o["effects"])
		{
			if (o["effects"].hasOwnProperty(p))
			{
				fxarr = o["effects"][p];
				for (i = 0, len = fxarr.length; i < len; i++)
				{
					fxtype = fxarr[i]["type"];
					fxparams = fxarr[i]["params"];
					switch (fxtype) {
					case "filter":
						addEffectForTag(p, new FilterEffect(fxparams[0], fxparams[1], fxparams[2], fxparams[3], fxparams[4], fxparams[5]));
						break;
					case "delay":
						addEffectForTag(p, new DelayEffect(fxparams[0], fxparams[1], fxparams[2]));
						break;
					case "convolve":
						src = fxparams[2];
						b = this.getAudioBuffer(src, false);
						if (b.bufferObject)
						{
							fx = new ConvolveEffect(b.bufferObject, fxparams[0], fxparams[1], src);
						}
						else
						{
							fx = new ConvolveEffect(null, fxparams[0], fxparams[1], src);
							b.normalizeWhenReady = fxparams[0];
							b.convolveWhenReady = fx;
						}
						addEffectForTag(p, fx);
						break;
					case "flanger":
						addEffectForTag(p, new FlangerEffect(fxparams[0], fxparams[1], fxparams[2], fxparams[3], fxparams[4]));
						break;
					case "phaser":
						addEffectForTag(p, new PhaserEffect(fxparams[0], fxparams[1], fxparams[2], fxparams[3], fxparams[4], fxparams[5]));
						break;
					case "gain":
						addEffectForTag(p, new GainEffect(fxparams[0]));
						break;
					case "tremolo":
						addEffectForTag(p, new TremoloEffect(fxparams[0], fxparams[1]));
						break;
					case "ringmod":
						addEffectForTag(p, new RingModulatorEffect(fxparams[0], fxparams[1]));
						break;
					case "distortion":
						addEffectForTag(p, new DistortionEffect(fxparams[0], fxparams[1], fxparams[2], fxparams[3], fxparams[4]));
						break;
					case "compressor":
						addEffectForTag(p, new CompressorEffect(fxparams[0], fxparams[1], fxparams[2], fxparams[3], fxparams[4]));
						break;
					case "analyser":
						addEffectForTag(p, new AnalyserEffect(fxparams[0], fxparams[1]));
						break;
					}
				}
			}
		}
		for (i = 0, len = playingarr.length; i < len; i++)
		{
			d = playingarr[i];
			src = d["buffersrc"];
			is_music = d["is_music"];
			tag = d["tag"];
			playbackTime = d["playbackTime"];
			looping = d["looping"];
			vol = d["volume"];
			pan = d["pan"];
			panObjUid = (pan && pan.hasOwnProperty("objUid")) ? pan["objUid"] : -1;
			a = this.getAudioInstance(src, tag, is_music, looping, vol);
			if (!a)
			{
				b = this.getAudioBuffer(src, is_music);
				b.seekWhenReady = playbackTime;
				b.pauseWhenReady = d["paused"];
				if (pan)
				{
					if (panObjUid !== -1)
					{
						b.panWhenReady.push({ objUid: panObjUid, ia: pan["ia"], oa: pan["oa"], og: pan["og"], thistag: tag });
					}
					else
					{
						b.panWhenReady.push({ x: pan["x"], y: pan["y"], a: pan["a"], ia: pan["ia"], oa: pan["oa"], og: pan["og"], thistag: tag });
					}
				}
				continue;
			}
			a.resume_position = d["resume_position"];
			a.setPannerEnabled(!!pan);
			a.play(looping, vol, playbackTime);
			a.updatePlaybackRate();
			a.updateVolume();
			a.doSetMuted(a.is_muted || a.is_silent);
			if (d["paused"])
				a.pause();
			if (d["muted"])
				a.mute();
			if (pan)
			{
				if (panObjUid !== -1)
				{
					a.objectTracker = a.objectTracker || new ObjectTracker();
					a.objectTracker.loadUid = panObjUid;
					objectTrackerUidsToLoad.push(a.objectTracker);
				}
				else
				{
					a.setPan(pan["x"], pan["y"], pan["a"], pan["ia"], pan["oa"], pan["og"]);
				}
			}
		}
		if (setSilent && !silent)			// setting silent
		{
			for (i = 0, len = audioInstances.length; i < len; i++)
				audioInstances[i].setSilent(true);
			silent = true;
		}
		else if (!setSilent && silent)		// setting not silent
		{
			for (i = 0, len = audioInstances.length; i < len; i++)
				audioInstances[i].setSilent(false);
			silent = false;
		}
	};
	instanceProto.afterLoad = function ()
	{
		var i, len, ot, inst;
		for (i = 0, len = objectTrackerUidsToLoad.length; i < len; i++)
		{
			ot = objectTrackerUidsToLoad[i];
			inst = this.runtime.getObjectByUID(ot.loadUid);
			ot.setObject(inst);
			ot.loadUid = -1;
			if (inst)
			{
				listenerX = inst.x;
				listenerY = inst.y;
			}
		}
		objectTrackerUidsToLoad.length = 0;
	};
	instanceProto.onSuspend = function (s)
	{
		var i, len;
		for (i = 0, len = audioInstances.length; i < len; i++)
			audioInstances[i].setSuspended(s);
	};
	instanceProto.tick = function ()
	{
		var dt = this.runtime.dt;
		var i, len, a;
		for (i = 0, len = audioInstances.length; i < len; i++)
		{
			a = audioInstances[i];
			a.tick(dt);
			if (a.myapi !== API_HTML5 && a.myapi !== API_APPMOBI)
			{
				if (!a.fresh && !a.stopped && a.hasEnded())
				{
					a.stopped = true;
					audTag = a.tag;
					audRuntime.trigger(cr.plugins_.Audio.prototype.cnds.OnEnded, audInst);
				}
			}
			if (timescale_mode !== 0)
				a.updatePlaybackRate();
		}
		var p, arr, f;
		for (p in effects)
		{
			if (effects.hasOwnProperty(p))
			{
				arr = effects[p];
				for (i = 0, len = arr.length; i < len; i++)
				{
					f = arr[i];
					if (f.tick)
						f.tick();
				}
			}
		}
		if (api === API_WEBAUDIO && this.listenerTracker.hasObject())
		{
			this.listenerTracker.tick(dt);
			listenerX = this.listenerTracker.obj.x;
			listenerY = this.listenerTracker.obj.y;
			context["listener"]["setPosition"](this.listenerTracker.obj.x, this.listenerTracker.obj.y, this.listenerZ);
			context["listener"]["setVelocity"](this.listenerTracker.getVelocityX(), this.listenerTracker.getVelocityY(), 0);
		}
	};
	instanceProto.getAudioBuffer = function (src_, is_music)
	{
		var i, len, a, ret = null, j, k, lenj, ai;
		for (i = 0, len = audioBuffers.length; i < len; i++)
		{
			a = audioBuffers[i];
			if (a.src === src_)
			{
				ret = a;
				break;
			}
		}
		if (!ret)
		{
			ret = new C2AudioBuffer(src_, is_music);
			audioBuffers.push(ret);
		}
		if (ret.is_music && audRuntime.isMobile)
		{
			for (i = 0, len = audioBuffers.length; i < len; ++i)
			{
				a = audioBuffers[i];
				if (a === ret || !a.is_music)
					continue;
				a.bufferObject = null;			// release Web Audio API buffer (decoded)
				for (j = 0, k = 0, lenj = audioInstances.length; j < lenj; ++j)
				{
					ai = audioInstances[j];
					audioInstances[k] = ai;
					if (ai.buffer === a && ai.myapi === API_WEBAUDIO)
					{
						ai.gainNode["disconnect"]();
						if (a.myapi === API_WEBAUDIO)
							ai.instanceObject["disconnect"]();
					}
					else
						++k;
				}
				audioInstances.length = k;
			}
			ret.decodeAudioBuffer();
		}
		return ret;
	};
	instanceProto.getAudioInstance = function (src_, tag, is_music, looping, vol)
	{
		var i, len, a;
		for (i = 0, len = audioInstances.length; i < len; i++)
		{
			a = audioInstances[i];
			if (a.src === src_ && (a.canBeRecycled() || is_music))
			{
				a.tag = tag;
				return a;
			}
		}
		var b = this.getAudioBuffer(src_, is_music);
		if (!b.bufferObject)
		{
			if (tag !== "<preload>")
			{
				b.playTagWhenReady = tag;
				b.loopWhenReady = looping;
				b.volumeWhenReady = vol;
			}
			return null;
		}
		a = new C2AudioInstance(b, tag);
		audioInstances.push(a);
		return a;
	};
	var taggedAudio = [];
	function getAudioByTag(tag)
	{
		taggedAudio.length = 0;
		if (!tag.length)
		{
			if (!lastAudio || lastAudio.hasEnded())
				return;
			else
			{
				taggedAudio.length = 1;
				taggedAudio[0] = lastAudio;
				return;
			}
		}
		var i, len, a;
		for (i = 0, len = audioInstances.length; i < len; i++)
		{
			a = audioInstances[i];
			if (cr.equals_nocase(tag, a.tag))
				taggedAudio.push(a);
		}
	};
	function reconnectEffects(tag)
	{
		var i, len, arr, n, toNode = context["destination"];
		if (effects.hasOwnProperty(tag))
		{
			arr = effects[tag];
			if (arr.length)
			{
				toNode = arr[0].getInputNode();
				for (i = 0, len = arr.length; i < len; i++)
				{
					n = arr[i];
					if (i + 1 === len)
						n.connectTo(context["destination"]);
					else
						n.connectTo(arr[i + 1].getInputNode());
				}
			}
		}
		getAudioByTag(tag);
		for (i = 0, len = taggedAudio.length; i < len; i++)
			taggedAudio[i].reconnect(toNode);
		if (micSource && micTag === tag)
		{
			micSource["disconnect"]();
			micSource["connect"](toNode);
		}
	};
	function addEffectForTag(tag, fx)
	{
		if (!effects.hasOwnProperty(tag))
			effects[tag] = [fx];
		else
			effects[tag].push(fx);
		reconnectEffects(tag);
	};
	function Cnds() {};
	Cnds.prototype.OnEnded = function (t)
	{
		return cr.equals_nocase(audTag, t);
	};
	Cnds.prototype.PreloadsComplete = function ()
	{
		var i, len;
		for (i = 0, len = audioBuffers.length; i < len; i++)
		{
			if (!audioBuffers[i].isLoaded())
				return false;
		}
		return true;
	};
	Cnds.prototype.AdvancedAudioSupported = function ()
	{
		return api === API_WEBAUDIO;
	};
	Cnds.prototype.IsSilent = function ()
	{
		return silent;
	};
	Cnds.prototype.IsAnyPlaying = function ()
	{
		var i, len;
		for (i = 0, len = audioInstances.length; i < len; i++)
		{
			if (audioInstances[i].isPlaying())
				return true;
		}
		return false;
	};
	Cnds.prototype.IsTagPlaying = function (tag)
	{
		getAudioByTag(tag);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
		{
			if (taggedAudio[i].isPlaying())
				return true;
		}
		return false;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.Play = function (file, looping, vol, tag)
	{
		if (silent)
			return;
		var v = dbToLinear(vol);
		var is_music = file[1];
		var src = this.runtime.files_subfolder + file[0] + (useOgg ? ".ogg" : ".m4a");
		lastAudio = this.getAudioInstance(src, tag, is_music, looping!==0, v);
		if (!lastAudio)
			return;
		lastAudio.setPannerEnabled(false);
		lastAudio.play(looping!==0, v);
	};
	Acts.prototype.PlayAtPosition = function (file, looping, vol, x_, y_, angle_, innerangle_, outerangle_, outergain_, tag)
	{
		if (silent)
			return;
		var v = dbToLinear(vol);
		var is_music = file[1];
		var src = this.runtime.files_subfolder + file[0] + (useOgg ? ".ogg" : ".m4a");
		lastAudio = this.getAudioInstance(src, tag, is_music, looping!==0, v);
		if (!lastAudio)
		{
			var b = this.getAudioBuffer(src, is_music);
			b.panWhenReady.push({ x: x_, y: y_, a: angle_, ia: innerangle_, oa: outerangle_, og: dbToLinear(outergain_), thistag: tag });
			return;
		}
		lastAudio.setPannerEnabled(true);
		lastAudio.setPan(x_, y_, angle_, innerangle_, outerangle_, dbToLinear(outergain_));
		lastAudio.play(looping!==0, v);
	};
	Acts.prototype.PlayAtObject = function (file, looping, vol, obj, innerangle, outerangle, outergain, tag)
	{
		if (silent || !obj)
			return;
		var inst = obj.getFirstPicked();
		if (!inst)
			return;
		var v = dbToLinear(vol);
		var is_music = file[1];
		var src = this.runtime.files_subfolder + file[0] + (useOgg ? ".ogg" : ".m4a");
		lastAudio = this.getAudioInstance(src, tag, is_music, looping!==0, v);
		if (!lastAudio)
		{
			var b = this.getAudioBuffer(src, is_music);
			b.panWhenReady.push({ obj: inst, ia: innerangle, oa: outerangle, og: dbToLinear(outergain), thistag: tag });
			return;
		}
		lastAudio.setPannerEnabled(true);
		var px = cr.rotatePtAround(inst.x, inst.y, -inst.layer.getAngle(), listenerX, listenerY, true);
		var py = cr.rotatePtAround(inst.x, inst.y, -inst.layer.getAngle(), listenerX, listenerY, false);
		lastAudio.setPan(px, py, cr.to_degrees(inst.angle - inst.layer.getAngle()), innerangle, outerangle, dbToLinear(outergain));
		lastAudio.setObject(inst);
		lastAudio.play(looping!==0, v);
	};
	Acts.prototype.PlayByName = function (folder, filename, looping, vol, tag)
	{
		if (silent)
			return;
		var v = dbToLinear(vol);
		var is_music = (folder === 1);
		var src = this.runtime.files_subfolder + filename.toLowerCase() + (useOgg ? ".ogg" : ".m4a");
		lastAudio = this.getAudioInstance(src, tag, is_music, looping!==0, v);
		if (!lastAudio)
			return;
		lastAudio.setPannerEnabled(false);
		lastAudio.play(looping!==0, v);
	};
	Acts.prototype.PlayAtPositionByName = function (folder, filename, looping, vol, x_, y_, angle_, innerangle_, outerangle_, outergain_, tag)
	{
		if (silent)
			return;
		var v = dbToLinear(vol);
		var is_music = (folder === 1);
		var src = this.runtime.files_subfolder + filename.toLowerCase() + (useOgg ? ".ogg" : ".m4a");
		lastAudio = this.getAudioInstance(src, tag, is_music, looping!==0, v);
		if (!lastAudio)
		{
			var b = this.getAudioBuffer(src, is_music);
			b.panWhenReady.push({ x: x_, y: y_, a: angle_, ia: innerangle_, oa: outerangle_, og: dbToLinear(outergain_), thistag: tag });
			return;
		}
		lastAudio.setPannerEnabled(true);
		lastAudio.setPan(x_, y_, angle_, innerangle_, outerangle_, dbToLinear(outergain_));
		lastAudio.play(looping!==0, v);
	};
	Acts.prototype.PlayAtObjectByName = function (folder, filename, looping, vol, obj, innerangle, outerangle, outergain, tag)
	{
		if (silent || !obj)
			return;
		var inst = obj.getFirstPicked();
		if (!inst)
			return;
		var v = dbToLinear(vol);
		var is_music = (folder === 1);
		var src = this.runtime.files_subfolder + filename.toLowerCase() + (useOgg ? ".ogg" : ".m4a");
		lastAudio = this.getAudioInstance(src, tag, is_music, looping!==0, v);
		if (!lastAudio)
		{
			var b = this.getAudioBuffer(src, is_music);
			b.panWhenReady.push({ obj: inst, ia: innerangle, oa: outerangle, og: dbToLinear(outergain), thistag: tag });
			return;
		}
		lastAudio.setPannerEnabled(true);
		var px = cr.rotatePtAround(inst.x, inst.y, -inst.layer.getAngle(), listenerX, listenerY, true);
		var py = cr.rotatePtAround(inst.x, inst.y, -inst.layer.getAngle(), listenerX, listenerY, false);
		lastAudio.setPan(px, py, cr.to_degrees(inst.angle - inst.layer.getAngle()), innerangle, outerangle, dbToLinear(outergain));
		lastAudio.setObject(inst);
		lastAudio.play(looping!==0, v);
	};
	Acts.prototype.SetLooping = function (tag, looping)
	{
		getAudioByTag(tag);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
			taggedAudio[i].setLooping(looping === 0);
	};
	Acts.prototype.SetMuted = function (tag, muted)
	{
		getAudioByTag(tag);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
			taggedAudio[i].setMuted(muted === 0);
	};
	Acts.prototype.SetVolume = function (tag, vol)
	{
		getAudioByTag(tag);
		var v = dbToLinear(vol);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
			taggedAudio[i].setVolume(v);
	};
	Acts.prototype.Preload = function (file)
	{
		if (silent)
			return;
		var is_music = file[1];
		var src = this.runtime.files_subfolder + file[0] + (useOgg ? ".ogg" : ".m4a");
		if (api === API_APPMOBI)
		{
			if (this.runtime.isDirectCanvas)
				AppMobi["context"]["loadSound"](src);
			else
				AppMobi["player"]["loadSound"](src);
			return;
		}
		else if (api === API_PHONEGAP)
		{
			return;
		}
		this.getAudioInstance(src, "<preload>", is_music, false);
	};
	Acts.prototype.PreloadByName = function (folder, filename)
	{
		if (silent)
			return;
		var is_music = (folder === 1);
		var src = this.runtime.files_subfolder + filename.toLowerCase() + (useOgg ? ".ogg" : ".m4a");
		if (api === API_APPMOBI)
		{
			if (this.runtime.isDirectCanvas)
				AppMobi["context"]["loadSound"](src);
			else
				AppMobi["player"]["loadSound"](src);
			return;
		}
		else if (api === API_PHONEGAP)
		{
			return;
		}
		this.getAudioInstance(src, "<preload>", is_music, false);
	};
	Acts.prototype.SetPlaybackRate = function (tag, rate)
	{
		getAudioByTag(tag);
		if (rate < 0.0)
			rate = 0;
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
			taggedAudio[i].setPlaybackRate(rate);
	};
	Acts.prototype.Stop = function (tag)
	{
		getAudioByTag(tag);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
			taggedAudio[i].stop();
	};
	Acts.prototype.StopAll = function ()
	{
		var i, len;
		for (i = 0, len = audioInstances.length; i < len; i++)
			audioInstances[i].stop();
	};
	Acts.prototype.SetPaused = function (tag, state)
	{
		getAudioByTag(tag);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
		{
			if (state === 0)
				taggedAudio[i].pause();
			else
				taggedAudio[i].resume();
		}
	};
	Acts.prototype.Seek = function (tag, pos)
	{
		getAudioByTag(tag);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
		{
			taggedAudio[i].seek(pos);
		}
	};
	Acts.prototype.SetSilent = function (s)
	{
		var i, len;
		if (s === 2)					// toggling
			s = (silent ? 1 : 0);		// choose opposite state
		if (s === 0 && !silent)			// setting silent
		{
			for (i = 0, len = audioInstances.length; i < len; i++)
				audioInstances[i].setSilent(true);
			silent = true;
		}
		else if (s === 1 && silent)		// setting not silent
		{
			for (i = 0, len = audioInstances.length; i < len; i++)
				audioInstances[i].setSilent(false);
			silent = false;
		}
	};
	Acts.prototype.SetMasterVolume = function (vol)
	{
		masterVolume = dbToLinear(vol);
		var i, len;
		for (i = 0, len = audioInstances.length; i < len; i++)
			audioInstances[i].updateVolume();
	};
	Acts.prototype.AddFilterEffect = function (tag, type, freq, detune, q, gain, mix)
	{
		if (api !== API_WEBAUDIO || type < 0 || type >= filterTypes.length)
			return;
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		addEffectForTag(tag, new FilterEffect(type, freq, detune, q, gain, mix));
	};
	Acts.prototype.AddDelayEffect = function (tag, delay, gain, mix)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		addEffectForTag(tag, new DelayEffect(delay, dbToLinear(gain), mix));
	};
	Acts.prototype.AddFlangerEffect = function (tag, delay, modulation, freq, feedback, mix)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		addEffectForTag(tag, new FlangerEffect(delay / 1000, modulation / 1000, freq, feedback / 100, mix));
	};
	Acts.prototype.AddPhaserEffect = function (tag, freq, detune, q, mod, modfreq, mix)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		addEffectForTag(tag, new PhaserEffect(freq, detune, q, mod, modfreq, mix));
	};
	Acts.prototype.AddConvolutionEffect = function (tag, file, norm, mix)
	{
		if (api !== API_WEBAUDIO)
			return;
		var doNormalize = (norm === 0);
		var src = this.runtime.files_subfolder + file[0] + (useOgg ? ".ogg" : ".m4a");
		var b = this.getAudioBuffer(src, false);
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		var fx;
		if (b.bufferObject)
		{
			fx = new ConvolveEffect(b.bufferObject, doNormalize, mix, src);
		}
		else
		{
			fx = new ConvolveEffect(null, doNormalize, mix, src);
			b.normalizeWhenReady = doNormalize;
			b.convolveWhenReady = fx;
		}
		addEffectForTag(tag, fx);
	};
	Acts.prototype.AddGainEffect = function (tag, g)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		addEffectForTag(tag, new GainEffect(dbToLinear(g)));
	};
	Acts.prototype.AddMuteEffect = function (tag)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		addEffectForTag(tag, new GainEffect(0));	// re-use gain effect with 0 gain
	};
	Acts.prototype.AddTremoloEffect = function (tag, freq, mix)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		addEffectForTag(tag, new TremoloEffect(freq, mix));
	};
	Acts.prototype.AddRingModEffect = function (tag, freq, mix)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		addEffectForTag(tag, new RingModulatorEffect(freq, mix));
	};
	Acts.prototype.AddDistortionEffect = function (tag, threshold, headroom, drive, makeupgain, mix)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		addEffectForTag(tag, new DistortionEffect(threshold, headroom, drive, makeupgain, mix));
	};
	Acts.prototype.AddCompressorEffect = function (tag, threshold, knee, ratio, attack, release)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		addEffectForTag(tag, new CompressorEffect(threshold, knee, ratio, attack / 1000, release / 1000));
	};
	Acts.prototype.AddAnalyserEffect = function (tag, fftSize, smoothing)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		addEffectForTag(tag, new AnalyserEffect(fftSize, smoothing));
	};
	Acts.prototype.RemoveEffects = function (tag)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		var i, len, arr;
		if (effects.hasOwnProperty(tag))
		{
			arr = effects[tag];
			if (arr.length)
			{
				for (i = 0, len = arr.length; i < len; i++)
					arr[i].remove();
				arr.length = 0;
				reconnectEffects(tag);
			}
		}
	};
	Acts.prototype.SetEffectParameter = function (tag, index, param, value, ramp, time)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		index = Math.floor(index);
		var arr;
		if (!effects.hasOwnProperty(tag))
			return;
		arr = effects[tag];
		if (index < 0 || index >= arr.length)
			return;
		arr[index].setParam(param, value, ramp, time);
	};
	Acts.prototype.SetListenerObject = function (obj_)
	{
		if (!obj_ || api !== API_WEBAUDIO)
			return;
		var inst = obj_.getFirstPicked();
		if (!inst)
			return;
		this.listenerTracker.setObject(inst);
		listenerX = inst.x;
		listenerY = inst.y;
	};
	Acts.prototype.SetListenerZ = function (z)
	{
		this.listenerZ = z;
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.Duration = function (ret, tag)
	{
		getAudioByTag(tag);
		if (taggedAudio.length)
			ret.set_float(taggedAudio[0].getDuration());
		else
			ret.set_float(0);
	};
	Exps.prototype.PlaybackTime = function (ret, tag)
	{
		getAudioByTag(tag);
		if (taggedAudio.length)
			ret.set_float(taggedAudio[0].getPlaybackTime());
		else
			ret.set_float(0);
	};
	Exps.prototype.Volume = function (ret, tag)
	{
		getAudioByTag(tag);
		if (taggedAudio.length)
		{
			var v = taggedAudio[0].getVolume();
			ret.set_float(linearToDb(v));
		}
		else
			ret.set_float(0);
	};
	Exps.prototype.MasterVolume = function (ret)
	{
		ret.set_float(masterVolume);
	};
	Exps.prototype.EffectCount = function (ret, tag)
	{
		tag = tag.toLowerCase();
		var arr = null;
		if (effects.hasOwnProperty(tag))
			arr = effects[tag];
		ret.set_int(arr ? arr.length : 0);
	};
	function getAnalyser(tag, index)
	{
		var arr = null;
		if (effects.hasOwnProperty(tag))
			arr = effects[tag];
		if (arr && index >= 0 && index < arr.length && arr[index].freqBins)
			return arr[index];
		else
			return null;
	};
	Exps.prototype.AnalyserFreqBinCount = function (ret, tag, index)
	{
		tag = tag.toLowerCase();
		index = Math.floor(index);
		var analyser = getAnalyser(tag, index);
		ret.set_int(analyser ? analyser.node["frequencyBinCount"] : 0);
	};
	Exps.prototype.AnalyserFreqBinAt = function (ret, tag, index, bin)
	{
		tag = tag.toLowerCase();
		index = Math.floor(index);
		bin = Math.floor(bin);
		var analyser = getAnalyser(tag, index);
		if (!analyser)
			ret.set_float(0);
		else if (bin < 0 || bin >= analyser.node["frequencyBinCount"])
			ret.set_float(0);
		else
			ret.set_float(analyser.freqBins[bin]);
	};
	Exps.prototype.AnalyserPeakLevel = function (ret, tag, index)
	{
		tag = tag.toLowerCase();
		index = Math.floor(index);
		var analyser = getAnalyser(tag, index);
		if (analyser)
			ret.set_float(analyser.peak);
		else
			ret.set_float(0);
	};
	Exps.prototype.AnalyserRMSLevel = function (ret, tag, index)
	{
		tag = tag.toLowerCase();
		index = Math.floor(index);
		var analyser = getAnalyser(tag, index);
		if (analyser)
			ret.set_float(analyser.rms);
		else
			ret.set_float(0);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Browser = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Browser.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		var self = this;
		window.addEventListener("resize", function () {
			self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnResize, self);
		});
		if (typeof navigator.onLine !== "undefined")
		{
			window.addEventListener("online", function() {
				self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnOnline, self);
			});
			window.addEventListener("offline", function() {
				self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnOffline, self);
			});
		}
		if (typeof window.applicationCache !== "undefined")
		{
			window.applicationCache.addEventListener('updateready', function() {
				self.runtime.loadingprogress = 1;
				self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnUpdateReady, self);
			});
			window.applicationCache.addEventListener('progress', function(e) {
				self.runtime.loadingprogress = e["loaded"] / e["total"];
			});
		}
		if (!this.runtime.isDirectCanvas)
		{
			document.addEventListener("appMobi.device.update.available", function() {
				self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnUpdateReady, self);
			});
			document.addEventListener("menubutton", function() {
				self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnMenuButton, self);
			});
			document.addEventListener("searchbutton", function() {
				self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnSearchButton, self);
			});
		}
		this.runtime.addSuspendCallback(function(s) {
			if (s)
			{
				self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnPageHidden, self);
			}
			else
			{
				self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnPageVisible, self);
			}
		});
		this.is_arcade = (typeof window["is_scirra_arcade"] !== "undefined");
		this.fullscreenOldMarginCss = "";
	};
	function Cnds() {};
	Cnds.prototype.CookiesEnabled = function()
	{
		return navigator ? navigator.cookieEnabled : false;
	};
	Cnds.prototype.IsOnline = function()
	{
		return navigator ? navigator.onLine : false;
	};
	Cnds.prototype.HasJava = function()
	{
		return navigator ? navigator.javaEnabled() : false;
	};
	Cnds.prototype.OnOnline = function()
	{
		return true;
	};
	Cnds.prototype.OnOffline = function()
	{
		return true;
	};
	Cnds.prototype.IsDownloadingUpdate = function ()
	{
		if (typeof window["applicationCache"] === "undefined")
			return false;
		else
			return window["applicationCache"]["status"] === window["applicationCache"]["DOWNLOADING"];
	};
	Cnds.prototype.OnUpdateReady = function ()
	{
		return true;
	};
	Cnds.prototype.PageVisible = function ()
	{
		return !this.runtime.isSuspended;
	};
	Cnds.prototype.OnPageVisible = function ()
	{
		return true;
	};
	Cnds.prototype.OnPageHidden = function ()
	{
		return true;
	};
	Cnds.prototype.OnResize = function ()
	{
		return true;
	};
	Cnds.prototype.IsFullscreen = function ()
	{
		return !!(document["mozFullScreen"] || document["webkitIsFullScreen"] || document["fullScreen"] || this.runtime.isNodeFullscreen);
	};
	Cnds.prototype.OnMenuButton = function ()
	{
		return true;
	};
	Cnds.prototype.OnSearchButton = function ()
	{
		return true;
	};
	Cnds.prototype.IsMetered = function ()
	{
		var connection = navigator["connection"] || navigator["mozConnection"] || navigator["webkitConnection"];
		if (!connection)
			return false;
		return connection["metered"];
	};
	Cnds.prototype.IsCharging = function ()
	{
		var battery = navigator["battery"] || navigator["mozBattery"] || navigator["webkitBattery"];
		if (!battery)
			return true;
		return battery["charging"];
	};
	Cnds.prototype.IsPortraitLandscape = function (p)
	{
		var current = (window.innerWidth <= window.innerHeight ? 0 : 1);
		return current === p;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.Alert = function (msg)
	{
		if (!this.runtime.isDomFree)
			alert(msg.toString());
	};
	Acts.prototype.Close = function ()
	{
		if (this.runtime.isCocoonJs)
			CocoonJS["App"]["forceToFinish"]();
		else if (!this.is_arcade && !this.runtime.isDomFree)
			window.close();
	};
	Acts.prototype.Focus = function ()
	{
		if (this.runtime.isNodeWebkit)
		{
			var win = window["nwgui"]["Window"]["get"]();
			win["focus"]();
		}
		else if (!this.is_arcade && !this.runtime.isDomFree)
			window.focus();
	};
	Acts.prototype.Blur = function ()
	{
		if (this.runtime.isNodeWebkit)
		{
			var win = window["nwgui"]["Window"]["get"]();
			win["blur"]();
		}
		else if (!this.is_arcade && !this.runtime.isDomFree)
			window.blur();
	};
	Acts.prototype.GoBack = function ()
	{
		if (!this.is_arcade && !this.runtime.isDomFree && window.back)
			window.back();
	};
	Acts.prototype.GoForward = function ()
	{
		if (!this.is_arcade && !this.runtime.isDomFree && window.forward)
			window.forward();
	};
	Acts.prototype.GoHome = function ()
	{
		if (!this.is_arcade && !this.runtime.isDomFree && window.home)
			window.home();
	};
	Acts.prototype.GoToURL = function (url)
	{
		if (this.runtime.isCocoonJs)
			CocoonJS["App"]["openURL"](url);
		else if (!this.is_arcade && !this.runtime.isDomFree)
			window.location = url;
	};
	Acts.prototype.GoToURLWindow = function (url, tag)
	{
		if (this.runtime.isCocoonJs)
			CocoonJS["App"]["openURL"](url);
		else if (!this.is_arcade && !this.runtime.isDomFree)
			window.open(url, tag);
	};
	Acts.prototype.Reload = function ()
	{
		if (!this.is_arcade && !this.runtime.isDomFree)
			window.location.reload();
	};
	var firstRequestFullscreen = true;
	var crruntime = null;
	function onFullscreenError()
	{
		if (typeof jQuery !== "undefined")
		{
			crruntime["setSize"](jQuery(window).width(), jQuery(window).height());
		}
	};
	Acts.prototype.RequestFullScreen = function (stretchmode)
	{
		if (this.runtime.isDomFree)
		{
			cr.logexport("[Construct 2] Requesting fullscreen is not supported on this platform - the request has been ignored");
			return;
		}
		if (stretchmode >= 2)
			stretchmode += 1;
		if (stretchmode === 6)
			stretchmode = 2;
		if (this.runtime.isNodeWebkit)
		{
			if (!this.runtime.isNodeFullscreen)
			{
				window["nwgui"]["Window"]["get"]()["enterFullscreen"]();
				this.runtime.isNodeFullscreen = true;
			}
		}
		else
		{
			if (document["mozFullScreen"] || document["webkitIsFullScreen"] || document["fullScreen"])
				return;
			this.fullscreenOldMarginCss = jQuery(this.runtime.canvasdiv).css("margin");
			jQuery(this.runtime.canvasdiv).css("margin", "0");
			window["c2resizestretchmode"] = (stretchmode > 0 ? 1 : 0);
			this.runtime.fullscreen_scaling = (stretchmode >= 2 ? stretchmode : 0);
			var elem = this.runtime.canvasdiv || this.runtime.canvas;
			if (firstRequestFullscreen)
			{
				firstRequestFullscreen = false;
				crruntime = this.runtime;
				elem.addEventListener("mozfullscreenerror", onFullscreenError);
				elem.addEventListener("webkitfullscreenerror", onFullscreenError);
				elem.addEventListener("msfullscreenerror", onFullscreenError);
				elem.addEventListener("fullscreenerror", onFullscreenError);
			}
			if (!cr.is_undefined(elem["webkitRequestFullScreen"]))
			{
				if (typeof Element !== "undefined" && typeof Element["ALLOW_KEYBOARD_INPUT"] !== "undefined")
					elem["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"]);
				else
					elem["webkitRequestFullScreen"]();
			}
			else if (!cr.is_undefined(elem["mozRequestFullScreen"]))
				elem["mozRequestFullScreen"]();
			else if (!cr.is_undefined(elem["requestFullscreen"]))
				elem["requestFullscreen"]();
		}
	};
	Acts.prototype.CancelFullScreen = function ()
	{
		if (this.runtime.isDomFree)
		{
			cr.logexport("[Construct 2] Exiting fullscreen is not supported on this platform - the request has been ignored");
			return;
		}
		if (this.runtime.isNodeWebkit)
		{
			if (this.runtime.isNodeFullscreen)
			{
				window["nwgui"]["Window"]["get"]()["leaveFullscreen"]();
				this.runtime.isNodeFullscreen = false;
			}
		}
		else
		{
			if (!cr.is_undefined(document["webkitCancelFullScreen"]))
				document["webkitCancelFullScreen"]();
			if (!cr.is_undefined(document["mozCancelFullScreen"]))
				document["mozCancelFullScreen"]();
			if (!cr.is_undefined(document["exitFullscreen"]))
				document["exitFullscreen"]();
			jQuery(this.runtime.canvasdiv).css("margin", this.fullscreenOldMarginCss);
		}
	};
	Acts.prototype.Vibrate = function (pattern_)
	{
		try {
			var arr = pattern_.split(",");
			var i, len;
			for (i = 0, len = arr.length; i < len; i++)
			{
				arr[i] = parseInt(arr[i], 10);
			}
			if (navigator["vibrate"])
				navigator["vibrate"](arr);
			else if (navigator["mozVibrate"])
				navigator["mozVibrate"](arr);
			else if (navigator["webkitVibrate"])
				navigator["webkitVibrate"](arr);
		}
		catch (e) {}
	};
	Acts.prototype.InvokeDownload = function (url_, filename_)
	{
		var a = document.createElement("a");
		if (typeof a.download === "undefined")
		{
			window.open(url_);
		}
		else
		{
			var body = document.getElementsByTagName("body")[0];
			a.textContent = filename_;
			a.href = url_;
			a.download = filename_;
			body.appendChild(a);
			var clickEvent = document.createEvent("MouseEvent");
			clickEvent.initMouseEvent("click", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
			a.dispatchEvent(clickEvent);
			body.removeChild(a);
		}
	};
	Acts.prototype.ConsoleLog = function (type_, msg_)
	{
		if (!console)
			return;
		if (type_ === 0 && console.log)
			console.log(msg_);
		if (type_ === 1 && console.warn)
			console.warn(msg_);
		if (type_ === 2 && console.error)
			console.error(msg_);
	};
	Acts.prototype.ConsoleGroup = function (name_)
	{
		if (console && console.group)
			console.group(name_);
	};
	Acts.prototype.ConsoleGroupEnd = function ()
	{
		if (console && console.groupEnd)
			console.groupEnd();
	};
	Acts.prototype.ExecJs = function (js_)
	{
		if (eval)
			eval(js_);
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.URL = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : window.location.toString());
	};
	Exps.prototype.Protocol = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : window.location.protocol);
	};
	Exps.prototype.Domain = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : window.location.hostname);
	};
	Exps.prototype.PathName = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : window.location.pathname);
	};
	Exps.prototype.Hash = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : window.location.hash);
	};
	Exps.prototype.Referrer = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : document.referrer);
	};
	Exps.prototype.Title = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : document.title);
	};
	Exps.prototype.Name = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : navigator.appName);
	};
	Exps.prototype.Version = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : navigator.appVersion);
	};
	Exps.prototype.Language = function (ret)
	{
		if (navigator && navigator.language)
			ret.set_string(navigator.language);
		else
			ret.set_string("");
	};
	Exps.prototype.Platform = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : navigator.platform);
	};
	Exps.prototype.Product = function (ret)
	{
		if (navigator && navigator.product)
			ret.set_string(navigator.product);
		else
			ret.set_string("");
	};
	Exps.prototype.Vendor = function (ret)
	{
		if (navigator && navigator.vendor)
			ret.set_string(navigator.vendor);
		else
			ret.set_string("");
	};
	Exps.prototype.UserAgent = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : navigator.userAgent);
	};
	Exps.prototype.QueryString = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : window.location.search);
	};
	Exps.prototype.QueryParam = function (ret, paramname)
	{
		if (this.runtime.isDomFree)
		{
			ret.set_string("");
			return;
		}
		var match = RegExp('[?&]' + paramname + '=([^&]*)').exec(window.location.search);
		if (match)
			ret.set_string(decodeURIComponent(match[1].replace(/\+/g, ' ')));
		else
			ret.set_string("");
	};
	Exps.prototype.Bandwidth = function (ret)
	{
		var connection = navigator["connection"] || navigator["mozConnection"] || navigator["webkitConnection"];
		if (!connection)
			ret.set_float(Number.POSITIVE_INFINITY);
		else
			ret.set_float(connection["bandwidth"]);
	};
	Exps.prototype.BatteryLevel = function (ret)
	{
		var battery = navigator["battery"] || navigator["mozBattery"] || navigator["webkitBattery"];
		if (!battery)
			ret.set_float(1);
		else
			ret.set_float(battery["level"]);
	};
	Exps.prototype.BatteryTimeLeft = function (ret)
	{
		var battery = navigator["battery"] || navigator["mozBattery"] || navigator["webkitBattery"];
		if (!battery)
			ret.set_float(Number.POSITIVE_INFINITY);
		else
			ret.set_float(battery["dischargingTime"]);
	};
	Exps.prototype.ExecJS = function (ret, js_)
	{
		if (!eval)
		{
			ret.set_any(0);
			return;
		}
		var result = eval(js_);
		if (typeof result === "number")
			ret.set_any(result);
		else if (typeof result === "string")
			ret.set_any(result);
		else if (typeof result === "boolean")
			ret.set_any(result ? 1 : 0);
		else
			ret.set_any(0);
	};
	Exps.prototype.ScreenWidth = function (ret)
	{
		ret.set_int(screen.width);
	};
	Exps.prototype.ScreenHeight = function (ret)
	{
		ret.set_int(screen.height);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Button = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Button.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		if (this.runtime.isDomFree)
		{
			cr.logexport("[Construct 2] Button plugin not supported on this platform - the object will not be created");
			return;
		}
		this.isCheckbox = (this.properties[0] === 1);
		this.inputElem = document.createElement("input");
		if (this.isCheckbox)
			this.elem = document.createElement("label");
		else
			this.elem = this.inputElem;
		this.labelText = null;
		this.inputElem.type = (this.isCheckbox ? "checkbox" : "button");
		this.inputElem.id = this.properties[6];
		jQuery(this.elem).appendTo(this.runtime.canvasdiv ? this.runtime.canvasdiv : "body");
		if (this.isCheckbox)
		{
			jQuery(this.inputElem).appendTo(this.elem);
			this.labelText = document.createTextNode(this.properties[1]);
			jQuery(this.elem).append(this.labelText);
			this.inputElem.checked = (this.properties[7] !== 0);
			jQuery(this.elem).css("font-family", "sans-serif");
			jQuery(this.elem).css("display", "inline-block");
			jQuery(this.elem).css("color", "black");
		}
		else
			this.inputElem.value = this.properties[1];
		this.elem.title = this.properties[2];
		this.inputElem.disabled = (this.properties[4] === 0);
		this.autoFontSize = (this.properties[5] !== 0);
		if (this.properties[3] === 0)
		{
			jQuery(this.elem).hide();
			this.visible = false;
		}
		this.inputElem.onclick = (function (self) {
			return function(e) {
				e.stopPropagation();
				self.runtime.trigger(cr.plugins_.Button.prototype.cnds.OnClicked, self);
			};
		})(this);
		this.elem.addEventListener("touchstart", function (e) {
			e.stopPropagation();
		}, false);
		this.elem.addEventListener("touchmove", function (e) {
			e.stopPropagation();
		}, false);
		this.elem.addEventListener("touchend", function (e) {
			e.stopPropagation();
		}, false);
		jQuery(this.elem).mousedown(function (e) {
			e.stopPropagation();
		});
		jQuery(this.elem).mouseup(function (e) {
			e.stopPropagation();
		});
		jQuery(this.elem).keydown(function (e) {
			e.stopPropagation();
		});
		jQuery(this.elem).keyup(function (e) {
			e.stopPropagation();
		});
		this.updatePosition();
		this.runtime.tickMe(this);
	};
	instanceProto.saveToJSON = function ()
	{
		var o = {
			"tooltip": this.elem.title,
			"disabled": !!this.inputElem.disabled
		};
		if (this.isCheckbox)
		{
			o["checked"] = !!this.inputElem.checked;
			o["text"] = this.labelText.nodeValue;
		}
		else
		{
			o["text"] = this.elem.value;
		}
		return o;
	};
	instanceProto.loadFromJSON = function (o)
	{
		this.elem.title = o["tooltip"];
		this.inputElem.disabled = o["disabled"];
		if (this.isCheckbox)
		{
			this.inputElem.checked = o["checked"];
			this.labelText.nodeValue = o["text"];
		}
		else
		{
			this.elem.value = o["text"];
		}
	};
	instanceProto.onDestroy = function ()
	{
		if (this.runtime.isDomFree)
			return;
		jQuery(this.elem).remove();
		this.elem = null;
	};
	instanceProto.tick = function ()
	{
		this.updatePosition();
	};
	instanceProto.updatePosition = function ()
	{
		if (this.runtime.isDomFree)
			return;
		var left = this.layer.layerToCanvas(this.x, this.y, true);
		var top = this.layer.layerToCanvas(this.x, this.y, false);
		var right = this.layer.layerToCanvas(this.x + this.width, this.y + this.height, true);
		var bottom = this.layer.layerToCanvas(this.x + this.width, this.y + this.height, false);
		if (!this.visible || !this.layer.visible || right <= 0 || bottom <= 0 || left >= this.runtime.width || top >= this.runtime.height)
		{
			jQuery(this.elem).hide();
			return;
		}
		if (left < 1)
			left = 1;
		if (top < 1)
			top = 1;
		if (right >= this.runtime.width)
			right = this.runtime.width - 1;
		if (bottom >= this.runtime.height)
			bottom = this.runtime.height - 1;
		jQuery(this.elem).show();
		var offx = Math.round(left) + jQuery(this.runtime.canvas).offset().left;
		var offy = Math.round(top) + jQuery(this.runtime.canvas).offset().top;
		jQuery(this.elem).offset({left: offx, top: offy});
		jQuery(this.elem).width(Math.round(right - left));
		jQuery(this.elem).height(Math.round(bottom - top));
		if (this.autoFontSize)
			jQuery(this.elem).css("font-size", ((this.layer.getScale() / this.runtime.devicePixelRatio) - 0.2) + "em");
	};
	instanceProto.draw = function(ctx)
	{
	};
	instanceProto.drawGL = function(glw)
	{
	};
	function Cnds() {};
	Cnds.prototype.OnClicked = function ()
	{
		return true;
	};
	Cnds.prototype.IsChecked = function ()
	{
		return this.isCheckbox && this.inputElem.checked;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetText = function (text)
	{
		if (this.runtime.isDomFree)
			return;
		if (this.isCheckbox)
			this.labelText.nodeValue = text;
		else
			this.elem.value = text;
	};
	Acts.prototype.SetTooltip = function (text)
	{
		if (this.runtime.isDomFree)
			return;
		this.elem.title = text;
	};
	Acts.prototype.SetVisible = function (vis)
	{
		if (this.runtime.isDomFree)
			return;
		this.visible = (vis !== 0);
	};
	Acts.prototype.SetEnabled = function (en)
	{
		if (this.runtime.isDomFree)
			return;
		this.inputElem.disabled = (en === 0);
	};
	Acts.prototype.SetFocus = function ()
	{
		if (this.runtime.isDomFree)
			return;
		this.inputElem.focus();
	};
	Acts.prototype.SetBlur = function ()
	{
		if (this.runtime.isDomFree)
			return;
		this.inputElem.blur();
	};
	Acts.prototype.SetCSSStyle = function (p, v)
	{
		if (this.runtime.isDomFree)
			return;
		jQuery(this.elem).css(p, v);
	};
	Acts.prototype.SetChecked = function (c)
	{
		if (this.runtime.isDomFree || !this.isCheckbox)
			return;
		this.inputElem.checked = (c === 1);
	};
	Acts.prototype.ToggleChecked = function ()
	{
		if (this.runtime.isDomFree || !this.isCheckbox)
			return;
		this.inputElem.checked = !this.inputElem.checked;
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.CJSAds = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var input_text = "";
	var products_list = [];
	var requested_score = 0;
	var bannerPosition = 0;
	var preloadingBanner = false;
	var bannerReady = false;
	var preloadingFullscreen = false;
	var fullscreenReady = false;
	var pluginProto = cr.plugins_.CJSAds.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		this.isShowingBanner = false;
		this.isShowingFullscreen = false;
		this.triggerProduct = "";
		this.socialService = null;
		this.socialServiceAvailable = false;
		this.storeServiceAvailable = (this.runtime.isCocoonJs && typeof CocoonJS["Store"]["nativeExtensionObjectAvailable"] !== "undefined");
		this.storeManaged = (this.properties[1] !== 1);
		this.storeSandboxed = (this.properties[2] !== 0);
		this.onConsumePurchaseFailedTransactionId = "";
		this.onConsumePurchaseCompleted = "";
		var self = this;
		if (this.runtime.isCocoonJs)
		{
			CocoonJS["App"]["onTextDialogFinished"].addEventListener(function(text) {
				input_text = text;
				self.runtime.trigger(cr.plugins_.CJSAds.prototype.cnds.OnKeyboardOK, self);
			});
			CocoonJS["App"]["onTextDialogCancelled"].addEventListener(function() {
					self.runtime.trigger(cr.plugins_.CJSAds.prototype.cnds.OnKeyboardCancelled, self);
			});
			CocoonJS["Ad"]["onBannerShown"].addEventListener(function ()
			{
				self.isShowingBanner = true;
				self.runtime.trigger(cr.plugins_.CJSAds.prototype.cnds.OnBannerShown, self);
			});
			CocoonJS["Ad"]["onBannerReady"].addEventListener(function ()
			{
				bannerReady = true;
				if (!preloadingBanner)
				{
					CocoonJS["Ad"]["setBannerLayout"](bannerPosition);
					CocoonJS["Ad"]["showBanner"]();
				}
			});
			CocoonJS["Ad"]["onFullScreenShown"].addEventListener(function ()
			{
				self.isShowingFullscreen = true;
				self.runtime.trigger(cr.plugins_.CJSAds.prototype.cnds.OnFullscreenShown, self);
			});
			CocoonJS["Ad"]["onFullScreenHidden"].addEventListener(function ()
			{
				self.isShowingFullscreen = false;
				self.runtime.trigger(cr.plugins_.CJSAds.prototype.cnds.OnFullscreenHidden, self);
			});
			CocoonJS["Ad"]["onFullScreenReady"].addEventListener(function ()
			{
				fullscreenReady = true;
				if (!preloadFullScreen)
				CocoonJS["Ad"]["showFullScreen"]();
			});
			if (this.storeServiceAvailable)
			{
				CocoonJS["Store"]["onProductPurchaseCompleted"].addEventListener(function (purchase)
				{
					self.triggerProduct = purchase["productId"];
					self.runtime.trigger(cr.plugins_.CJSAds.prototype.cnds.OnPurchaseComplete, self);
					CocoonJS["Store"]["addPurchase"](purchase);
					CocoonJS["Store"]["consumePurchase"](purchase["transactionId"], purchase["productId"]);
					CocoonJS["Store"]["finishPurchase"](purchase["transactionId"]);
				});
				CocoonJS["Store"]["onConsumePurchaseFailed"].addEventListener(function(transactionId, errorMessage)
				{
					this.onConsumePurchaseFailedTransactionId = transactionId;
					self.runtime.trigger(cr.plugins_.CJSAds.prototype.cnds.onConsumePurchaseFailed, self);
				});
				CocoonJS["Store"]["onConsumePurchaseCompleted"].addEventListener(function(transactionId)
				{
					this.onConsumePurchaseCompleted = transactionId;
					self.runtime.trigger(cr.plugins_.CJSAds.prototype.cnds.onConsumePurchaseCompleted, self);
				});
				CocoonJS["Store"]["onProductPurchaseFailed"].addEventListener(function (productId, errorMsg)
				{
					self.triggerProduct = productId;
					self.runtime.trigger(cr.plugins_.CJSAds.prototype.cnds.OnPurchaseFail, self);
				});
				CocoonJS["Store"]["onProductPurchaseStarted"].addEventListener(function (productinfo)
				{
					self.triggerProduct = productinfo["productId"];
					self.runtime.trigger(cr.plugins_.CJSAds.prototype.cnds.OnPurchaseStart, self);
				});
				CocoonJS["Store"]["onProductsFetchStarted"].addEventListener(function ()
				{
					self.runtime.trigger(cr.plugins_.CJSAds.prototype.cnds.onProductsFetchStarted, self);
				});
				CocoonJS["Store"]["onProductsFetchFailed"].addEventListener(function ()
				{
					self.runtime.trigger(cr.plugins_.CJSAds.prototype.cnds.onProductsFetchFailed, self);
				});
				CocoonJS["Store"]["onProductsFetchCompleted"].addEventListener(function (products)
				{
					self.runtime.trigger(cr.plugins_.CJSAds.prototype.cnds.onProductsFetchCompleted, self);
				});
				CocoonJS["Store"]["requestInitialization"]({
					"managed": this.storeManaged,
					"sandbox": this.storeSandboxed
				});
				CocoonJS["Store"]["start"]();
			}
			this.socialService = CocoonJS["SocialGaming"]["GameCenter"];
			this.socialServiceAvailable = !!this.socialService["nativeExtensionObjectAvailable"];
			this.socialService["onRequestLoginSucceed"].addEventListener(function () {
				self.runtime.trigger(cr.plugins_.CJSAds.prototype.cnds.OnGCLoginSuccess, self);
			});
			this.socialService["onRequestLoginFailed"].addEventListener(function () {
				self.runtime.trigger(cr.plugins_.CJSAds.prototype.cnds.OnGCLoginFail, self);
			});
			this.socialService["onLogout"].addEventListener(function () {
				self.runtime.trigger(cr.plugins_.CJSAds.prototype.cnds.OnGCLogout, self);
			});
			this.socialService["onRequestUserScoreSucceed"].addEventListener(function (userInfo) {
				requested_score = userInfo["score"] || 0;
				self.runtime.trigger(cr.plugins_.CJSAds.prototype.cnds.OnGCScoreReceived, self);
			});
			this.socialService["onRequestUserScoreFailed"].addEventListener(function () {
				self.runtime.trigger(cr.plugins_.CJSAds.prototype.cnds.OnGCScoreUnavailable, self);
			});
			this.socialService["onSubmitUserScoreSucceed"].addEventListener(function () {
				self.runtime.trigger(cr.plugins_.CJSAds.prototype.cnds.OnGCScoreSubmitSuccess, self);
			});
			this.socialService["onSubmitUserScoreFailed"].addEventListener(function () {
				self.runtime.trigger(cr.plugins_.CJSAds.prototype.cnds.OnGCScoreSubmitFail, self);
			});
			this.socialService["onLeaderboardViewSucceed"].addEventListener(function () {
				self.runtime.trigger(cr.plugins_.CJSAds.prototype.cnds.OnGCLeaderboardOpen, self);
			});
			this.socialService["onLeaderboardViewClosed"].addEventListener(function () {
				self.runtime.trigger(cr.plugins_.CJSAds.prototype.cnds.OnGCLeaderboardClose, self);
			});
		}
	};
	function Cnds() {};
	Cnds.prototype.IsShowingBanner = function ()
	{
		return this.isShowingBanner;
	};
	Cnds.prototype.IsCocoonJS = function ()
	{
		return this.runtime.isCocoonJs;
	};
	Cnds.prototype.OnBannerShown = function ()
	{
		return true;
	};
	Cnds.prototype.OnFullscreenShown = function ()
	{
		return true;
	};
	Cnds.prototype.OnFullscreenHidden = function ()
	{
		return true;
	};
	Cnds.prototype.IsShowingFullscreen = function ()
	{
		return this.isShowingFullscreen;
	};
	Cnds.prototype.IsStoreAvailable = function ()
	{
		if (this.runtime.isCocoonJs)
			return this.storeServiceAvailable && CocoonJS["Store"]["canPurchase"]();
		else
			return false;
	};
	Cnds.prototype.OnPurchaseStart = function (productid)
	{
		return this.triggerProduct === productid;
	};
	Cnds.prototype.OnPurchaseComplete = function (productid)
	{
		return this.triggerProduct === productid;
	};
	Cnds.prototype.OnPurchaseFail = function (productid)
	{
		return this.triggerProduct === productid;
	};
	Cnds.prototype.onProductsFetchStarted = function(){
		return true;
	}
	Cnds.prototype.onConsumePurchaseFailed = function(){
		return true;
	}
	Cnds.prototype.onProductsFetchCompleted = function(){
		return true;
	}
	Cnds.prototype.onProductsFetchFailed = function(){
		return true;
	}
	Cnds.prototype.IsProductPurchased = function (productid)
	{
		if (this.runtime.isCocoonJs)
			return CocoonJS["Store"]["isProductPurchased"](productid);
		else
			return false;
	};
	Cnds.prototype.OnKeyboardCancelled = function ()
	{
		return true;
	};
	Cnds.prototype.OnKeyboardOK = function ()
	{
		return true;
	};
	Cnds.prototype.IsGCAvailable = function ()
	{
		return this.socialServiceAvailable;
	};
	Cnds.prototype.IsGCLoggedIn = function ()
	{
		if (!this.socialServiceAvailable)
			return false;
		return this.socialService["isLoggedIn"]();
	};
	Cnds.prototype.OnGCLoginSuccess = function ()
	{
		return true;
	};
	Cnds.prototype.OnGCLoginFail = function ()
	{
		return true;
	};
	Cnds.prototype.OnGCLogout = function ()
	{
		return true;
	};
	Cnds.prototype.OnGCScoreReceived = function ()
	{
		return true;
	};
	Cnds.prototype.OnGCScoreUnavailable = function ()
	{
		return true;
	};
	Cnds.prototype.OnGCScoreSubmitSuccess = function ()
	{
		return true;
	};
	Cnds.prototype.OnGCScoreSubmitFail = function ()
	{
		return true;
	};
	Cnds.prototype.OnGCLeaderboardOpen = function ()
	{
		return true;
	};
	Cnds.prototype.OnGCLeaderboardClose = function ()
	{
		return true;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.ShowBanner = function (layout_)
	{
		if (!this.runtime.isCocoonJs)
			return;
		bannerPosition = (layout_ === 0 ? CocoonJS["Ad"]["BannerLayout"]["TOP_CENTER"] : CocoonJS["Ad"]["BannerLayout"]["BOTTOM_CENTER"]);
		preloadingBanner = false;
		if (bannerReady)
		{
			CocoonJS["Ad"]["setBannerLayout"](bannerPosition);
			CocoonJS["Ad"]["showBanner"]();
		}
		else
		{
			CocoonJS["Ad"]["preloadBanner"]();
		}
	};
	Acts.prototype.ShowFullscreen = function ()
	{
		if (!this.runtime.isCocoonJs)
			return;
		preloadingFullscreen = false;
		if (fullscreenReady)
			CocoonJS["Ad"]["showFullScreen"]();
		else
			CocoonJS["Ad"]["preloadFullScreen"]();
	};
	Acts.prototype.HideBanner = function ()
	{
		if (!this.runtime.isCocoonJs)
			return;
		CocoonJS["Ad"]["hideBanner"]();
		this.isShowingBanner = false;
	};
	Acts.prototype.PreloadBanner = function ()
	{
		if (!this.runtime.isCocoonJs)
			return;
		preloadingBanner = true;
		CocoonJS["Ad"]["preloadBanner"]();
	};
	Acts.prototype.PreloadFullscreen = function ()
	{
		if (!this.runtime.isCocoonJs)
			return;
		preloadingFullscreen = true;
		CocoonJS["Ad"]["preloadFullScreen"]();
	};
	Acts.prototype.RefreshBanner = function ()
	{
		if (!this.runtime.isCocoonJs)
			return;
		CocoonJS["Ad"]["refreshBanner"]();
	};
	Acts.prototype.RefreshFullScreen = function ()
	{
		if (!this.runtime.isCocoonJs)
			return;
		CocoonJS["Ad"]["refreshFullScreen"]();
	};
	Acts.prototype.Purchase = function (productid)
	{
		if (!this.runtime.isCocoonJs)
			return;
		CocoonJS["Store"]["purchaseProduct"](productid);
	};
	Acts.prototype.fetchProductsFromStore = function (products)
	{
		if (!this.runtime.isCocoonJs)
			return;
		CocoonJS["Store"]["fetchProductsFromStore"](products.split(","));
	};
	Acts.prototype.restorePurchases = function ()
	{
		if (this.runtime.isCocoonJs)
			return CocoonJS["Store"]["restorePurchases"]();
	};
	Acts.prototype.PurchasePreview = function (productid)
	{
		if (!this.runtime.isCocoonJs)
			return;
		CocoonJS["Store"]["purchaseProductModalWithPreview"](productid);
	};
	Acts.prototype.RestorePurchases = function ()
	{
		if (!this.runtime.isCocoonJs)
			return;
		CocoonJS["Store"]["restorePurchases"]();
	};
	Acts.prototype.PromptKeyboard = function (title_, message_, initial_, type_, canceltext_, oktext_)
	{
		if (!this.runtime.isCocoonJs)
			return;
		var typestr = ["text", "num", "phone", "email", "url"][type_];
		CocoonJS["App"]["showTextDialog"](title_, message_, initial_, typestr, canceltext_, oktext_);
	};
	Acts.prototype.UpdateProductsList = function ()
	{
		if (!this.runtime.isCocoonJs)
			return;
		if (!CocoonJS["Store"]["canPurchase"]())
			return;
		products_list = CocoonJS["Store"]["getProducts"]();
	};
	Acts.prototype.GCLogin = function ()
	{
		if (!this.socialServiceAvailable || this.socialService["isLoggedIn"]())
			return;
		this.socialService["requestLogin"]();
	};
	Acts.prototype.GCLogout = function ()
	{
		if (!this.socialServiceAvailable || !this.socialService["isLoggedIn"]())
			return;
		this.socialService["requestLogout"]();
	};
	Acts.prototype.GCSubmitScore = function (score_, leaderboard_)
	{
		if (!this.socialServiceAvailable || !this.socialService["isLoggedIn"]())
			return;
		this.socialService["submitUserScore"](score_, leaderboard_);
	};
	Acts.prototype.GCRequestScore = function (leaderboard_)
	{
		if (!this.socialServiceAvailable || !this.socialService["isLoggedIn"]())
			return;
		this.socialService["requestUserScore"](leaderboard_);
	};
	Acts.prototype.GCOpenLeaderboard = function (leaderboard_)
	{
		if (!this.socialServiceAvailable || !this.socialService["isLoggedIn"]())
			return;
		this.socialService["showLeaderboardView"](leaderboard_);
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.InputText = function (ret)
	{
		ret.set_string(input_text);
	};
	Exps.prototype.ProductCount = function (ret)
	{
		ret.set_int(products_list.length);
	};
	Exps.prototype.ProductDescription = function (ret, index)
	{
		index = Math.floor(index);
		if (index < 0 || index >= products_list.length)
		{
			ret.set_string("");
			return;
		}
		ret.set_string(products_list[index]["description"]);
	};
	Exps.prototype.ProductLocalizedPrice = function (ret, index)
	{
		index = Math.floor(index);
		if (index < 0 || index >= products_list.length)
		{
			ret.set_string("");
			return;
		}
		ret.set_string(products_list[index]["localizedPrice"]);
	};
	Exps.prototype.ProductPrice = function (ret, index)
	{
		index = Math.floor(index);
		if (index < 0 || index >= products_list.length)
		{
			ret.set_string("");
			return;
		}
		ret.set_string(products_list[index]["price"]);
	};
	Exps.prototype.ProductAlias = function (ret, index)
	{
		index = Math.floor(index);
		if (index < 0 || index >= products_list.length)
		{
			ret.set_string("");
			return;
		}
		ret.set_string(products_list[index]["productAlias"]);
	};
	Exps.prototype.ProductID = function (ret, index)
	{
		index = Math.floor(index);
		if (index < 0 || index >= products_list.length)
		{
			ret.set_string("");
			return;
		}
		ret.set_string(products_list[index]["productId"]);
	};
	Exps.prototype.ProductTitle = function (ret, index)
	{
		index = Math.floor(index);
		if (index < 0 || index >= products_list.length)
		{
			ret.set_string("");
			return;
		}
		ret.set_string(products_list[index]["title"]);
	};
	Exps.prototype.GameCenterScore = function (ret)
	{
		ret.set_float(requested_score);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Function = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Function.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	var funcStack = [];
	var funcStackPtr = -1;
	var isInPreview = false;	// set in onCreate
	function FuncStackEntry()
	{
		this.name = "";
		this.retVal = 0;
		this.params = [];
	};
	function pushFuncStack()
	{
		funcStackPtr++;
		if (funcStackPtr === funcStack.length)
			funcStack.push(new FuncStackEntry());
		return funcStack[funcStackPtr];
	};
	function getCurrentFuncStack()
	{
		if (funcStackPtr < 0)
			return null;
		return funcStack[funcStackPtr];
	};
	function getOneAboveFuncStack()
	{
		if (!funcStack.length)
			return null;
		var i = funcStackPtr + 1;
		if (i >= funcStack.length)
			i = funcStack.length - 1;
		return funcStack[i];
	};
	function popFuncStack()
	{
;
		funcStackPtr--;
	};
	instanceProto.onCreate = function()
	{
		isInPreview = (typeof cr_is_preview !== "undefined");
	};
	function Cnds() {};
	Cnds.prototype.OnFunction = function (name_)
	{
		var fs = getCurrentFuncStack();
		if (!fs)
			return false;
		return cr.equals_nocase(name_, fs.name);
	};
	Cnds.prototype.CompareParam = function (index_, cmp_, value_)
	{
		var fs = getCurrentFuncStack();
		if (!fs)
			return false;
		index_ = cr.floor(index_);
		if (index_ < 0 || index_ >= fs.params.length)
			return false;
		return cr.do_cmp(fs.params[index_], cmp_, value_);
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.CallFunction = function (name_, params_)
	{
		var fs = pushFuncStack();
		fs.name = name_.toLowerCase();
		fs.retVal = 0;
		cr.shallowAssignArray(fs.params, params_);
		var ran = this.runtime.trigger(cr.plugins_.Function.prototype.cnds.OnFunction, this, fs.name);
		if (isInPreview && !ran)
		{
;
		}
		popFuncStack();
	};
	Acts.prototype.SetReturnValue = function (value_)
	{
		var fs = getCurrentFuncStack();
		if (fs)
			fs.retVal = value_;
		else
;
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.ReturnValue = function (ret)
	{
		var fs = getOneAboveFuncStack();
		if (fs)
			ret.set_any(fs.retVal);
		else
			ret.set_int(0);
	};
	Exps.prototype.ParamCount = function (ret)
	{
		var fs = getCurrentFuncStack();
		if (fs)
			ret.set_int(fs.params.length);
		else
		{
;
			ret.set_int(0);
		}
	};
	Exps.prototype.Param = function (ret, index_)
	{
		index_ = cr.floor(index_);
		var fs = getCurrentFuncStack();
		if (fs)
		{
			if (index_ >= 0 && index_ < fs.params.length)
			{
				ret.set_any(fs.params[index_]);
			}
			else
			{
;
				ret.set_int(0);
			}
		}
		else
		{
;
			ret.set_int(0);
		}
	};
	Exps.prototype.Call = function (ret, name_)
	{
		var fs = pushFuncStack();
		fs.name = name_.toLowerCase();
		fs.retVal = 0;
		fs.params.length = 0;
		var i, len;
		for (i = 2, len = arguments.length; i < len; i++)
			fs.params.push(arguments[i]);
		var ran = this.runtime.trigger(cr.plugins_.Function.prototype.cnds.OnFunction, this, fs.name);
		if (isInPreview && !ran)
		{
;
		}
		popFuncStack();
		ret.set_any(fs.retVal);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Keyboard = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Keyboard.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
		this.keyMap = new Array(256);	// stores key up/down state
		this.usedKeys = new Array(256);
		this.triggerKey = 0;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		var self = this;
		if (!this.runtime.isDomFree)
		{
			jQuery(document).keydown(
				function(info) {
					self.onKeyDown(info);
				}
			);
			jQuery(document).keyup(
				function(info) {
					self.onKeyUp(info);
				}
			);
		}
	};
	var keysToBlockWhenFramed = [32, 33, 34, 35, 36, 37, 38, 39, 40, 44];
	instanceProto.onKeyDown = function (info)
	{
		var alreadyPreventedDefault = false;
		if (window != window.top && keysToBlockWhenFramed.indexOf(info.which) > -1)
		{
			info.preventDefault();
			alreadyPreventedDefault = true;
			info.stopPropagation();
		}
		if (this.keyMap[info.which])
		{
			if (this.usedKeys[info.which] && !alreadyPreventedDefault)
				info.preventDefault();
			return;
		}
		this.keyMap[info.which] = true;
		this.triggerKey = info.which;
		this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnAnyKey, this);
		var eventRan = this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnKey, this);
		var eventRan2 = this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnKeyCode, this);
		if (eventRan || eventRan2)
		{
			this.usedKeys[info.which] = true;
			if (!alreadyPreventedDefault)
				info.preventDefault();
		}
	};
	instanceProto.onKeyUp = function (info)
	{
		this.keyMap[info.which] = false;
		this.triggerKey = info.which;
		this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnAnyKeyReleased, this);
		var eventRan = this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnKeyReleased, this);
		var eventRan2 = this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnKeyCodeReleased, this);
		if (eventRan || eventRan2 || this.usedKeys[info.which])
		{
			this.usedKeys[info.which] = true;
			info.preventDefault();
		}
	};
	instanceProto.saveToJSON = function ()
	{
		return { "triggerKey": this.triggerKey };
	};
	instanceProto.loadFromJSON = function (o)
	{
		this.triggerKey = o["triggerKey"];
	};
	function Cnds() {};
	Cnds.prototype.IsKeyDown = function(key)
	{
		return this.keyMap[key];
	};
	Cnds.prototype.OnKey = function(key)
	{
		return (key === this.triggerKey);
	};
	Cnds.prototype.OnAnyKey = function(key)
	{
		return true;
	};
	Cnds.prototype.OnAnyKeyReleased = function(key)
	{
		return true;
	};
	Cnds.prototype.OnKeyReleased = function(key)
	{
		return (key === this.triggerKey);
	};
	Cnds.prototype.IsKeyCodeDown = function(key)
	{
		key = Math.floor(key);
		if (key < 0 || key >= this.keyMap.length)
			return false;
		return this.keyMap[key];
	};
	Cnds.prototype.OnKeyCode = function(key)
	{
		return (key === this.triggerKey);
	};
	Cnds.prototype.OnKeyCodeReleased = function(key)
	{
		return (key === this.triggerKey);
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.LastKeyCode = function (ret)
	{
		ret.set_int(this.triggerKey);
	};
	function fixedStringFromCharCode(kc)
	{
		kc = Math.floor(kc);
		switch (kc) {
		case 8:		return "backspace";
		case 9:		return "tab";
		case 13:	return "enter";
		case 16:	return "shift";
		case 17:	return "control";
		case 18:	return "alt";
		case 19:	return "pause";
		case 20:	return "capslock";
		case 27:	return "esc";
		case 33:	return "pageup";
		case 34:	return "pagedown";
		case 35:	return "end";
		case 36:	return "home";
		case 37:	return "←";
		case 38:	return "↑";
		case 39:	return "→";
		case 40:	return "↓";
		case 45:	return "insert";
		case 46:	return "del";
		case 91:	return "left window key";
		case 92:	return "right window key";
		case 93:	return "select";
		case 96:	return "numpad 0";
		case 97:	return "numpad 1";
		case 98:	return "numpad 2";
		case 99:	return "numpad 3";
		case 100:	return "numpad 4";
		case 101:	return "numpad 5";
		case 102:	return "numpad 6";
		case 103:	return "numpad 7";
		case 104:	return "numpad 8";
		case 105:	return "numpad 9";
		case 106:	return "numpad *";
		case 107:	return "numpad +";
		case 109:	return "numpad -";
		case 110:	return "numpad .";
		case 111:	return "numpad /";
		case 112:	return "F1";
		case 113:	return "F2";
		case 114:	return "F3";
		case 115:	return "F4";
		case 116:	return "F5";
		case 117:	return "F6";
		case 118:	return "F7";
		case 119:	return "F8";
		case 120:	return "F9";
		case 121:	return "F10";
		case 122:	return "F11";
		case 123:	return "F12";
		case 144:	return "numlock";
		case 145:	return "scroll lock";
		case 186:	return ";";
		case 187:	return "=";
		case 188:	return ",";
		case 189:	return "-";
		case 190:	return ".";
		case 191:	return "/";
		case 192:	return "'";
		case 219:	return "[";
		case 220:	return "\\";
		case 221:	return "]";
		case 222:	return "#";
		case 223:	return "`";
		default:	return String.fromCharCode(kc);
		}
	};
	Exps.prototype.StringFromKeyCode = function (ret, kc)
	{
		ret.set_string(fixedStringFromCharCode(kc));
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Mouse = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Mouse.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
		this.buttonMap = new Array(4);		// mouse down states
		this.mouseXcanvas = 0;				// mouse position relative to canvas
		this.mouseYcanvas = 0;
		this.triggerButton = 0;
		this.triggerType = 0;
		this.triggerDir = 0;
		this.handled = false;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		var self = this;
		if (!this.runtime.isDomFree)
		{
			jQuery(document).mousemove(
				function(info) {
					self.onMouseMove(info);
				}
			);
			jQuery(document).mousedown(
				function(info) {
					self.onMouseDown(info);
				}
			);
			jQuery(document).mouseup(
				function(info) {
					self.onMouseUp(info);
				}
			);
			jQuery(document).dblclick(
				function(info) {
					self.onDoubleClick(info);
				}
			);
			var wheelevent = function(info) {
								self.onWheel(info);
							};
			document.addEventListener("mousewheel", wheelevent, false);
			document.addEventListener("DOMMouseScroll", wheelevent, false);
		}
	};
	var dummyoffset = {left: 0, top: 0};
	instanceProto.onMouseMove = function(info)
	{
		var offset = this.runtime.isDomFree ? dummyoffset : jQuery(this.runtime.canvas).offset();
		this.mouseXcanvas = info.pageX - offset.left;
		this.mouseYcanvas = info.pageY - offset.top;
	};
	instanceProto.mouseInGame = function ()
	{
		if (this.runtime.fullscreen_mode > 0)
			return true;
		return this.mouseXcanvas >= 0 && this.mouseYcanvas >= 0
		    && this.mouseXcanvas < this.runtime.width && this.mouseYcanvas < this.runtime.height;
	};
	instanceProto.onMouseDown = function(info)
	{
		if (!this.mouseInGame())
			return;
		if (this.runtime.had_a_click)
			info.preventDefault();
		this.buttonMap[info.which] = true;
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnAnyClick, this);
		this.triggerButton = info.which - 1;	// 1-based
		this.triggerType = 0;					// single click
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnClick, this);
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnObjectClicked, this);
	};
	instanceProto.onMouseUp = function(info)
	{
		if (!this.buttonMap[info.which])
			return;
		if (this.runtime.had_a_click)
			info.preventDefault();
		this.runtime.had_a_click = true;
		this.buttonMap[info.which] = false;
		this.triggerButton = info.which - 1;	// 1-based
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnRelease, this);
	};
	instanceProto.onDoubleClick = function(info)
	{
		if (!this.mouseInGame())
			return;
		info.preventDefault();
		this.triggerButton = info.which - 1;	// 1-based
		this.triggerType = 1;					// double click
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnClick, this);
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnObjectClicked, this);
	};
	instanceProto.onWheel = function (info)
	{
		var delta = info.wheelDelta ? info.wheelDelta : info.detail ? -info.detail : 0;
		this.triggerDir = (delta < 0 ? 0 : 1);
		this.handled = false;
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnWheel, this);
		if (this.handled)
			info.preventDefault();
	};
	function Cnds() {};
	Cnds.prototype.OnClick = function (button, type)
	{
		return button === this.triggerButton && type === this.triggerType;
	};
	Cnds.prototype.OnAnyClick = function ()
	{
		return true;
	};
	Cnds.prototype.IsButtonDown = function (button)
	{
		return this.buttonMap[button + 1];	// jQuery uses 1-based buttons for some reason
	};
	Cnds.prototype.OnRelease = function (button)
	{
		return button === this.triggerButton;
	};
	Cnds.prototype.IsOverObject = function (obj)
	{
		var cnd = this.runtime.getCurrentCondition();
		var mx = this.mouseXcanvas;
		var my = this.mouseYcanvas;
		return cr.xor(this.runtime.testAndSelectCanvasPointOverlap(obj, mx, my, cnd.inverted), cnd.inverted);
	};
	Cnds.prototype.OnObjectClicked = function (button, type, obj)
	{
		if (button !== this.triggerButton || type !== this.triggerType)
			return false;	// wrong click type
		return this.runtime.testAndSelectCanvasPointOverlap(obj, this.mouseXcanvas, this.mouseYcanvas, false);
	};
	Cnds.prototype.OnWheel = function (dir)
	{
		this.handled = true;
		return dir === this.triggerDir;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetCursor = function (c)
	{
		var cursor_style = ["auto", "pointer", "text", "crosshair", "move", "help", "wait", "none"][c];
		if (this.runtime.canvas && this.runtime.canvas.style)
			this.runtime.canvas.style.cursor = cursor_style;
	};
	Acts.prototype.SetCursorSprite = function (obj)
	{
		if (this.runtime.isDomFree || this.runtime.isMobile || !obj)
			return;
		var inst = obj.getFirstPicked();
		if (!inst || !inst.curFrame)
			return;
		var frame = inst.curFrame;
		var datauri = frame.getDataUri();
		var cursor_style = "url(" + datauri + ") " + Math.round(frame.hotspotX * frame.width) + " " + Math.round(frame.hotspotY * frame.height) + ", auto";
		jQuery(this.runtime.canvas).css("cursor", cursor_style);
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.X = function (ret, layerparam)
	{
		var layer, oldScale, oldZoomRate, oldParallaxX, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxX = layer.parallaxX;
			oldAngle = layer.angle;
			layer.scale = this.runtime.running_layout.scale;
			layer.zoomRate = 1.0;
			layer.parallaxX = 1.0;
			layer.angle = this.runtime.running_layout.angle;
			ret.set_float(layer.canvasToLayer(this.mouseXcanvas, this.mouseYcanvas, true));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxX = oldParallaxX;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(this.mouseXcanvas, this.mouseYcanvas, true));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.Y = function (ret, layerparam)
	{
		var layer, oldScale, oldZoomRate, oldParallaxY, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxY = layer.parallaxY;
			oldAngle = layer.angle;
			layer.scale = this.runtime.running_layout.scale;
			layer.zoomRate = 1.0;
			layer.parallaxY = 1.0;
			layer.angle = this.runtime.running_layout.angle;
			ret.set_float(layer.canvasToLayer(this.mouseXcanvas, this.mouseYcanvas, false));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxY = oldParallaxY;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(this.mouseXcanvas, this.mouseYcanvas, false));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.AbsoluteX = function (ret)
	{
		ret.set_float(this.mouseXcanvas);
	};
	Exps.prototype.AbsoluteY = function (ret)
	{
		ret.set_float(this.mouseYcanvas);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Particles = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Particles.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
		if (this.is_family)
			return;
		this.texture_img = new Image();
		this.texture_img["idtkLoadDisposed"] = true;
		this.texture_img.src = this.texture_file;
		this.texture_img.cr_filesize = this.texture_filesize;
		this.webGL_texture = null;
		this.runtime.wait_for_textures.push(this.texture_img);
	};
	typeProto.onLostWebGLContext = function ()
	{
		if (this.is_family)
			return;
		this.webGL_texture = null;
	};
	typeProto.onRestoreWebGLContext = function ()
	{
		if (this.is_family || !this.instances.length)
			return;
		if (!this.webGL_texture)
		{
			this.webGL_texture = this.runtime.glwrap.loadTexture(this.texture_img, true, this.runtime.linearSampling, this.texture_pixelformat);
		}
	};
	typeProto.loadTextures = function ()
	{
		if (this.is_family || this.webGL_texture || !this.runtime.glwrap)
			return;
		this.webGL_texture = this.runtime.glwrap.loadTexture(this.texture_img, true, this.runtime.linearSampling, this.texture_pixelformat);
	};
	typeProto.unloadTextures = function ()
	{
		if (this.is_family || this.instances.length || !this.webGL_texture)
			return;
		this.runtime.glwrap.deleteTexture(this.webGL_texture);
		this.webGL_texture = null;
	};
	typeProto.preloadCanvas2D = function (ctx)
	{
		ctx.drawImage(this.texture_img, 0, 0);
	};
	function Particle(owner)
	{
		this.owner = owner;
		this.active = false;
		this.x = 0;
		this.y = 0;
		this.speed = 0;
		this.angle = 0;
		this.opacity = 1;
		this.grow = 0;
		this.size = 0;
		this.gs = 0;			// gravity speed
		this.age = 0;
		cr.seal(this);
	};
	Particle.prototype.init = function ()
	{
		var owner = this.owner;
		this.x = owner.x - (owner.xrandom / 2) + (Math.random() * owner.xrandom);
		this.y = owner.y - (owner.yrandom / 2) + (Math.random() * owner.yrandom);
		this.speed = owner.initspeed - (owner.speedrandom / 2) + (Math.random() * owner.speedrandom);
		this.angle = owner.angle - (owner.spraycone / 2) + (Math.random() * owner.spraycone);
		this.opacity = owner.initopacity;
		this.size = owner.initsize - (owner.sizerandom / 2) + (Math.random() * owner.sizerandom);
		this.grow = owner.growrate - (owner.growrandom / 2) + (Math.random() * owner.growrandom);
		this.gs = 0;
		this.age = 0;
	};
	Particle.prototype.tick = function (dt)
	{
		var owner = this.owner;
		this.x += Math.cos(this.angle) * this.speed * dt;
		this.y += Math.sin(this.angle) * this.speed * dt;
		this.y += this.gs * dt;
		this.speed += owner.acc * dt;
		this.size += this.grow * dt;
		this.gs += owner.g * dt;
		this.age += dt;
		if (this.size < 1)
		{
			this.active = false;
			return;
		}
		if (owner.lifeanglerandom !== 0)
			this.angle += (Math.random() * owner.lifeanglerandom * dt) - (owner.lifeanglerandom * dt / 2);
		if (owner.lifespeedrandom !== 0)
			this.speed += (Math.random() * owner.lifespeedrandom * dt) - (owner.lifespeedrandom * dt / 2);
		if (owner.lifeopacityrandom !== 0)
		{
			this.opacity += (Math.random() * owner.lifeopacityrandom * dt) - (owner.lifeopacityrandom * dt / 2);
			if (this.opacity < 0)
				this.opacity = 0;
			else if (this.opacity > 1)
				this.opacity = 1;
		}
		if (owner.destroymode <= 1 && this.age >= owner.timeout)
		{
			this.active = false;
		}
		if (owner.destroymode === 2 && this.speed <= 0)
		{
			this.active = false;
		}
	};
	Particle.prototype.draw = function (ctx)
	{
		var curopacity = this.owner.opacity * this.opacity;
		if (curopacity === 0)
			return;
		if (this.owner.destroymode === 0)
			curopacity *= 1 - (this.age / this.owner.timeout);
		ctx.globalAlpha = curopacity;
		var drawx = this.x - this.size / 2;
		var drawy = this.y - this.size / 2;
		if (this.owner.runtime.pixel_rounding)
		{
			drawx = (drawx + 0.5) | 0;
			drawy = (drawy + 0.5) | 0;
		}
		ctx.drawImage(this.owner.type.texture_img, drawx, drawy, this.size, this.size);
	};
	Particle.prototype.drawGL = function (glw)
	{
		var curopacity = this.owner.opacity * this.opacity;
		if (this.owner.destroymode === 0)
			curopacity *= 1 - (this.age / this.owner.timeout);
		var drawsize = this.size;
		var scaleddrawsize = drawsize * this.owner.particlescale;
		var drawx = this.x - drawsize / 2;
		var drawy = this.y - drawsize / 2;
		if (this.owner.runtime.pixel_rounding)
		{
			drawx = (drawx + 0.5) | 0;
			drawy = (drawy + 0.5) | 0;
		}
		if (scaleddrawsize < 1 || curopacity === 0)
			return;
		if (scaleddrawsize < glw.minPointSize || scaleddrawsize > glw.maxPointSize)
		{
			glw.setOpacity(curopacity);
			glw.quad(drawx, drawy, drawx + drawsize, drawy, drawx + drawsize, drawy + drawsize, drawx, drawy + drawsize);
		}
		else
			glw.point(this.x, this.y, scaleddrawsize, curopacity);
	};
	Particle.prototype.left = function ()
	{
		return this.x - this.size / 2;
	};
	Particle.prototype.right = function ()
	{
		return this.x + this.size / 2;
	};
	Particle.prototype.top = function ()
	{
		return this.y - this.size / 2;
	};
	Particle.prototype.bottom = function ()
	{
		return this.y + this.size / 2;
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	var deadparticles = [];
	instanceProto.onCreate = function()
	{
		var props = this.properties;
		this.rate = props[0];
		this.spraycone = cr.to_radians(props[1]);
		this.spraytype = props[2];			// 0 = continuous, 1 = one-shot
		this.spraying = true;				// for continuous mode only
		this.initspeed = props[3];
		this.initsize = props[4];
		this.initopacity = props[5] / 100.0;
		this.growrate = props[6];
		this.xrandom = props[7];
		this.yrandom = props[8];
		this.speedrandom = props[9];
		this.sizerandom = props[10];
		this.growrandom = props[11];
		this.acc = props[12];
		this.g = props[13];
		this.lifeanglerandom = props[14];
		this.lifespeedrandom = props[15];
		this.lifeopacityrandom = props[16];
		this.destroymode = props[17];		// 0 = fade, 1 = timeout, 2 = stopped
		this.timeout = props[18];
		this.particleCreateCounter = 0;
		this.particlescale = 1;
		this.particleBoxLeft = this.x;
		this.particleBoxTop = this.y;
		this.particleBoxRight = this.x;
		this.particleBoxBottom = this.y;
		this.add_bbox_changed_callback(function (self) {
			self.bbox.set(self.particleBoxLeft, self.particleBoxTop, self.particleBoxRight, self.particleBoxBottom);
			self.bquad.set_from_rect(self.bbox);
			self.bbox_changed = false;
		});
		if (!this.recycled)
			this.particles = [];
		this.runtime.tickMe(this);
		this.type.loadTextures();
		if (this.spraytype === 1)
		{
			for (var i = 0; i < this.rate; i++)
				this.allocateParticle().opacity = 0;
		}
		this.first_tick = true;		// for re-init'ing one-shot particles on first tick so they assume any new angle/position
	};
	instanceProto.saveToJSON = function ()
	{
		var o = {
			"r": this.rate,
			"sc": this.spraycone,
			"st": this.spraytype,
			"s": this.spraying,
			"isp": this.initspeed,
			"isz": this.initsize,
			"io": this.initopacity,
			"gr": this.growrate,
			"xr": this.xrandom,
			"yr": this.yrandom,
			"spr": this.speedrandom,
			"szr": this.sizerandom,
			"grnd": this.growrandom,
			"acc": this.acc,
			"g": this.g,
			"lar": this.lifeanglerandom,
			"lsr": this.lifespeedrandom,
			"lor": this.lifeopacityrandom,
			"dm": this.destroymode,
			"to": this.timeout,
			"pcc": this.particleCreateCounter,
			"ft": this.first_tick,
			"p": []
		};
		var i, len, p;
		var arr = o["p"];
		for (i = 0, len = this.particles.length; i < len; i++)
		{
			p = this.particles[i];
			arr.push([p.x, p.y, p.speed, p.angle, p.opacity, p.grow, p.size, p.gs, p.age]);
		}
		return o;
	};
	instanceProto.loadFromJSON = function (o)
	{
		this.rate = o["r"];
		this.spraycone = o["sc"];
		this.spraytype = o["st"];
		this.spraying = o["s"];
		this.initspeed = o["isp"];
		this.initsize = o["isz"];
		this.initopacity = o["io"];
		this.growrate = o["gr"];
		this.xrandom = o["xr"];
		this.yrandom = o["yr"];
		this.speedrandom = o["spr"];
		this.sizerandom = o["szr"];
		this.growrandom = o["grnd"];
		this.acc = o["acc"];
		this.g = o["g"];
		this.lifeanglerandom = o["lar"];
		this.lifespeedrandom = o["lsr"];
		this.lifeopacityrandom = o["lor"];
		this.destroymode = o["dm"];
		this.timeout = o["to"];
		this.particleCreateCounter = o["pcc"];
		this.first_tick = o["ft"];
		deadparticles.push.apply(deadparticles, this.particles);
		this.particles.length = 0;
		var i, len, p, d;
		var arr = o["p"];
		for (i = 0, len = arr.length; i < len; i++)
		{
			p = this.allocateParticle();
			d = arr[i];
			p.x = d[0];
			p.y = d[1];
			p.speed = d[2];
			p.angle = d[3];
			p.opacity = d[4];
			p.grow = d[5];
			p.size = d[6];
			p.gs = d[7];
			p.age = d[8];
		}
	};
	instanceProto.onDestroy = function ()
	{
		deadparticles.push.apply(deadparticles, this.particles);
		this.particles.length = 0;
	};
	instanceProto.allocateParticle = function ()
	{
		var p;
		if (deadparticles.length)
		{
			p = deadparticles.pop();
			p.owner = this;
		}
		else
			p = new Particle(this);
		this.particles.push(p);
		p.active = true;
		return p;
	};
	instanceProto.tick = function()
	{
		var dt = this.runtime.getDt(this);
		var i, len, p, n, j;
		if (this.spraytype === 0 && this.spraying)
		{
			this.particleCreateCounter += dt * this.rate;
			n = cr.floor(this.particleCreateCounter);
			this.particleCreateCounter -= n;
			for (i = 0; i < n; i++)
			{
				p = this.allocateParticle();
				p.init();
			}
		}
		this.particleBoxLeft = this.x;
		this.particleBoxTop = this.y;
		this.particleBoxRight = this.x;
		this.particleBoxBottom = this.y;
		for (i = 0, j = 0, len = this.particles.length; i < len; i++)
		{
			p = this.particles[i];
			this.particles[j] = p;
			this.runtime.redraw = true;
			if (this.spraytype === 1 && this.first_tick)
				p.init();
			p.tick(dt);
			if (!p.active)
			{
				deadparticles.push(p);
				continue;
			}
			if (p.left() < this.particleBoxLeft)
				this.particleBoxLeft = p.left();
			if (p.right() > this.particleBoxRight)
				this.particleBoxRight = p.right();
			if (p.top() < this.particleBoxTop)
				this.particleBoxTop = p.top();
			if (p.bottom() > this.particleBoxBottom)
				this.particleBoxBottom = p.bottom();
			j++;
		}
		this.particles.length = j;
		this.set_bbox_changed();
		this.first_tick = false;
		if (this.spraytype === 1 && this.particles.length === 0)
			this.runtime.DestroyInstance(this);
	};
	instanceProto.draw = function (ctx)
	{
		var i, len, p, layer = this.layer;
		for (i = 0, len = this.particles.length; i < len; i++)
		{
			p = this.particles[i];
			if (p.right() >= layer.viewLeft && p.bottom() >= layer.viewTop && p.left() <= layer.viewRight && p.top() <= layer.viewBottom)
			{
				p.draw(ctx);
			}
		}
	};
	instanceProto.drawGL = function (glw)
	{
		this.particlescale = this.layer.getScale();
		glw.setTexture(this.type.webGL_texture);
		var i, len, p, layer = this.layer;
		for (i = 0, len = this.particles.length; i < len; i++)
		{
			p = this.particles[i];
			if (p.right() >= layer.viewLeft && p.bottom() >= layer.viewTop && p.left() <= layer.viewRight && p.top() <= layer.viewBottom)
			{
				p.drawGL(glw);
			}
		}
	};
	function Cnds() {};
	Cnds.prototype.IsSpraying = function ()
	{
		return this.spraying;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetSpraying = function (set_)
	{
		this.spraying = (set_ !== 0);
	};
	Acts.prototype.SetEffect = function (effect)
	{
		this.compositeOp = cr.effectToCompositeOp(effect);
		cr.setGLBlend(this, effect, this.runtime.gl);
		this.runtime.redraw = true;
	};
	Acts.prototype.SetRate = function (x)
	{
		this.rate = x;
		var diff, i;
		if (this.spraytype === 1 && this.first_tick)
		{
			if (x < this.particles.length)
			{
				diff = this.particles.length - x;
				for (i = 0; i < diff; i++)
					deadparticles.push(this.particles.pop());
			}
			else if (x > this.particles.length)
			{
				diff = x - this.particles.length;
				for (i = 0; i < diff; i++)
					this.allocateParticle().opacity = 0;
			}
		}
	};
	Acts.prototype.SetSprayCone = function (x)
	{
		this.spraycone = cr.to_radians(x);
	};
	Acts.prototype.SetInitSpeed = function (x)
	{
		this.initspeed = x;
	};
	Acts.prototype.SetInitSize = function (x)
	{
		this.initsize = x;
	};
	Acts.prototype.SetInitOpacity = function (x)
	{
		this.initopacity = x / 100;
	};
	Acts.prototype.SetGrowRate = function (x)
	{
		this.growrate = x;
	};
	Acts.prototype.SetXRandomiser = function (x)
	{
		this.xrandom = x;
	};
	Acts.prototype.SetYRandomiser = function (x)
	{
		this.yrandom = x;
	};
	Acts.prototype.SetSpeedRandomiser = function (x)
	{
		this.speedrandom = x;
	};
	Acts.prototype.SetSizeRandomiser = function (x)
	{
		this.sizerandom = x;
	};
	Acts.prototype.SetGrowRateRandomiser = function (x)
	{
		this.growrandom = x;
	};
	Acts.prototype.SetParticleAcc = function (x)
	{
		this.acc = x;
	};
	Acts.prototype.SetGravity = function (x)
	{
		this.g = x;
	};
	Acts.prototype.SetAngleRandomiser = function (x)
	{
		this.lifeanglerandom = x;
	};
	Acts.prototype.SetSpeedRandomiser = function (x)
	{
		this.lifespeedrandom = x;
	};
	Acts.prototype.SetOpacityRandomiser = function (x)
	{
		this.lifeopacityrandom = x;
	};
	Acts.prototype.SetTimeout = function (x)
	{
		this.timeout = x;
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.ParticleCount = function (ret)
	{
		ret.set_int(this.particles.length);
	};
	Exps.prototype.Rate = function (ret)
	{
		ret.set_float(this.rate);
	};
	Exps.prototype.SprayCone = function (ret)
	{
		ret.set_float(cr.to_degrees(this.spraycone));
	};
	Exps.prototype.InitSpeed = function (ret)
	{
		ret.set_float(this.initspeed);
	};
	Exps.prototype.InitSize = function (ret)
	{
		ret.set_float(this.initsize);
	};
	Exps.prototype.InitOpacity = function (ret)
	{
		ret.set_float(this.initopacity * 100);
	};
	Exps.prototype.InitGrowRate = function (ret)
	{
		ret.set_float(this.growrate);
	};
	Exps.prototype.XRandom = function (ret)
	{
		ret.set_float(this.xrandom);
	};
	Exps.prototype.YRandom = function (ret)
	{
		ret.set_float(this.yrandom);
	};
	Exps.prototype.InitSpeedRandom = function (ret)
	{
		ret.set_float(this.speedrandom);
	};
	Exps.prototype.InitSizeRandom = function (ret)
	{
		ret.set_float(this.sizerandom);
	};
	Exps.prototype.InitGrowRandom = function (ret)
	{
		ret.set_float(this.growrandom);
	};
	Exps.prototype.ParticleAcceleration = function (ret)
	{
		ret.set_float(this.acc);
	};
	Exps.prototype.Gravity = function (ret)
	{
		ret.set_float(this.g);
	};
	Exps.prototype.ParticleAngleRandom = function (ret)
	{
		ret.set_float(this.lifeanglerandom);
	};
	Exps.prototype.ParticleSpeedRandom = function (ret)
	{
		ret.set_float(this.lifespeedrandom);
	};
	Exps.prototype.ParticleOpacityRandom = function (ret)
	{
		ret.set_float(this.lifeopacityrandom);
	};
	Exps.prototype.Timeout = function (ret)
	{
		ret.set_float(this.timeout);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Sprite = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Sprite.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	function frame_getDataUri()
	{
		if (this.datauri.length === 0)
		{
			var tmpcanvas = document.createElement("canvas");
			tmpcanvas.width = this.width;
			tmpcanvas.height = this.height;
			var tmpctx = tmpcanvas.getContext("2d");
			if (this.spritesheeted)
			{
				tmpctx.drawImage(this.texture_img, this.offx, this.offy, this.width, this.height,
										 0, 0, this.width, this.height);
			}
			else
			{
				tmpctx.drawImage(this.texture_img, 0, 0, this.width, this.height);
			}
			this.datauri = tmpcanvas.toDataURL("image/png");
		}
		return this.datauri;
	};
	typeProto.onCreate = function()
	{
		if (this.is_family)
			return;
		var i, leni, j, lenj;
		var anim, frame, animobj, frameobj, wt, uv;
		this.all_frames = [];
		this.has_loaded_textures = false;
		for (i = 0, leni = this.animations.length; i < leni; i++)
		{
			anim = this.animations[i];
			animobj = {};
			animobj.name = anim[0];
			animobj.speed = anim[1];
			animobj.loop = anim[2];
			animobj.repeatcount = anim[3];
			animobj.repeatto = anim[4];
			animobj.pingpong = anim[5];
			animobj.sid = anim[6];
			animobj.frames = [];
			for (j = 0, lenj = anim[7].length; j < lenj; j++)
			{
				frame = anim[7][j];
				frameobj = {};
				frameobj.texture_file = frame[0];
				frameobj.texture_filesize = frame[1];
				frameobj.offx = frame[2];
				frameobj.offy = frame[3];
				frameobj.width = frame[4];
				frameobj.height = frame[5];
				frameobj.duration = frame[6];
				frameobj.hotspotX = frame[7];
				frameobj.hotspotY = frame[8];
				frameobj.image_points = frame[9];
				frameobj.poly_pts = frame[10];
				frameobj.pixelformat = frame[11];
				frameobj.spritesheeted = (frameobj.width !== 0);
				frameobj.datauri = "";		// generated on demand and cached
				frameobj.getDataUri = frame_getDataUri;
				uv = {};
				uv.left = 0;
				uv.top = 0;
				uv.right = 1;
				uv.bottom = 1;
				frameobj.sheetTex = uv;
				frameobj.webGL_texture = null;
				wt = this.runtime.findWaitingTexture(frame[0]);
				if (wt)
				{
					frameobj.texture_img = wt;
				}
				else
				{
					frameobj.texture_img = new Image();
					frameobj.texture_img["idtkLoadDisposed"] = true;
					frameobj.texture_img.src = frame[0];
					frameobj.texture_img.cr_src = frame[0];
					frameobj.texture_img.cr_filesize = frame[1];
					frameobj.texture_img.c2webGL_texture = null;
					this.runtime.wait_for_textures.push(frameobj.texture_img);
				}
				cr.seal(frameobj);
				animobj.frames.push(frameobj);
				this.all_frames.push(frameobj);
			}
			cr.seal(animobj);
			this.animations[i] = animobj;		// swap array data for object
		}
	};
	typeProto.updateAllCurrentTexture = function ()
	{
		var i, len, inst;
		for (i = 0, len = this.instances.length; i < len; i++)
		{
			inst = this.instances[i];
			inst.curWebGLTexture = inst.curFrame.webGL_texture;
		}
	};
	typeProto.onLostWebGLContext = function ()
	{
		if (this.is_family)
			return;
		var i, len, frame;
		for (i = 0, len = this.all_frames.length; i < len; ++i)
		{
			frame = this.all_frames[i];
			frame.texture_img.c2webGL_texture = null;
			frame.webGL_texture = null;
		}
	};
	typeProto.onRestoreWebGLContext = function ()
	{
		if (this.is_family || !this.instances.length)
			return;
		var i, len, frame;
		for (i = 0, len = this.all_frames.length; i < len; ++i)
		{
			frame = this.all_frames[i];
			frame.webGL_texture = this.runtime.glwrap.loadTexture(frame.texture_img, false, this.runtime.linearSampling, frame.pixelformat);
		}
		this.updateAllCurrentTexture();
	};
	typeProto.loadTextures = function ()
	{
		if (this.is_family || this.has_loaded_textures || !this.runtime.glwrap)
			return;
		var i, len, frame;
		for (i = 0, len = this.all_frames.length; i < len; ++i)
		{
			frame = this.all_frames[i];
			frame.webGL_texture = this.runtime.glwrap.loadTexture(frame.texture_img, false, this.runtime.linearSampling, frame.pixelformat);
		}
		this.has_loaded_textures = true;
	};
	typeProto.unloadTextures = function ()
	{
		if (this.is_family || this.instances.length || !this.has_loaded_textures)
			return;
		var i, len, frame;
		for (i = 0, len = this.all_frames.length; i < len; ++i)
		{
			frame = this.all_frames[i];
			this.runtime.glwrap.deleteTexture(frame.webGL_texture);
		}
		this.has_loaded_textures = false;
	};
	var already_drawn_images = [];
	typeProto.preloadCanvas2D = function (ctx)
	{
		var i, len, frameimg;
		already_drawn_images.length = 0;
		for (i = 0, len = this.all_frames.length; i < len; ++i)
		{
			frameimg = this.all_frames[i].texture_img;
			if (already_drawn_images.indexOf(frameimg) !== -1)
					continue;
			ctx.drawImage(frameimg, 0, 0);
			already_drawn_images.push(frameimg);
		}
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
		var poly_pts = this.type.animations[0].frames[0].poly_pts;
		if (this.recycled)
			this.collision_poly.set_pts(poly_pts);
		else
			this.collision_poly = new cr.CollisionPoly(poly_pts);
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		this.visible = (this.properties[0] === 0);	// 0=visible, 1=invisible
		this.isTicking = false;
		this.inAnimTrigger = false;
		this.collisionsEnabled = (this.properties[3] !== 0);
		if (!(this.type.animations.length === 1 && this.type.animations[0].frames.length === 1) && this.type.animations[0].speed !== 0)
		{
			this.runtime.tickMe(this);
			this.isTicking = true;
		}
		this.cur_animation = this.getAnimationByName(this.properties[1]) || this.type.animations[0];
		this.cur_frame = this.properties[2];
		if (this.cur_frame < 0)
			this.cur_frame = 0;
		if (this.cur_frame >= this.cur_animation.frames.length)
			this.cur_frame = this.cur_animation.frames.length - 1;
		var curanimframe = this.cur_animation.frames[this.cur_frame];
		this.collision_poly.set_pts(curanimframe.poly_pts);
		this.hotspotX = curanimframe.hotspotX;
		this.hotspotY = curanimframe.hotspotY;
		this.cur_anim_speed = this.cur_animation.speed;
		if (this.recycled)
			this.animTimer.reset();
		else
			this.animTimer = new cr.KahanAdder();
		this.frameStart = this.getNowTime();
		this.animPlaying = true;
		this.animRepeats = 0;
		this.animForwards = true;
		this.animTriggerName = "";
		this.changeAnimName = "";
		this.changeAnimFrom = 0;
		this.changeAnimFrame = -1;
		this.type.loadTextures();
		var i, leni, j, lenj;
		var anim, frame, uv, maintex;
		for (i = 0, leni = this.type.animations.length; i < leni; i++)
		{
			anim = this.type.animations[i];
			for (j = 0, lenj = anim.frames.length; j < lenj; j++)
			{
				frame = anim.frames[j];
				if (frame.width === 0)
				{
					frame.width = frame.texture_img.width;
					frame.height = frame.texture_img.height;
				}
				if (frame.spritesheeted)
				{
					maintex = frame.texture_img;
					uv = frame.sheetTex;
					uv.left = frame.offx / maintex.width;
					uv.top = frame.offy / maintex.height;
					uv.right = (frame.offx + frame.width) / maintex.width;
					uv.bottom = (frame.offy + frame.height) / maintex.height;
					if (frame.offx === 0 && frame.offy === 0 && frame.width === maintex.width && frame.height === maintex.height)
					{
						frame.spritesheeted = false;
					}
				}
			}
		}
		this.curFrame = this.cur_animation.frames[this.cur_frame];
		this.curWebGLTexture = this.curFrame.webGL_texture;
	};
	instanceProto.saveToJSON = function ()
	{
		var o = {
			"a": this.cur_animation.sid,
			"f": this.cur_frame,
			"cas": this.cur_anim_speed,
			"fs": this.frameStart,
			"ar": this.animRepeats,
			"at": this.animTimer.sum
		};
		if (!this.animPlaying)
			o["ap"] = this.animPlaying;
		if (!this.animForwards)
			o["af"] = this.animForwards;
		return o;
	};
	instanceProto.loadFromJSON = function (o)
	{
		var anim = this.getAnimationBySid(o["a"]);
		if (anim)
			this.cur_animation = anim;
		this.cur_frame = o["f"];
		if (this.cur_frame < 0)
			this.cur_frame = 0;
		if (this.cur_frame >= this.cur_animation.frames.length)
			this.cur_frame = this.cur_animation.frames.length - 1;
		this.cur_anim_speed = o["cas"];
		this.frameStart = o["fs"];
		this.animRepeats = o["ar"];
		this.animTimer.reset();
		this.animTimer.sum = o["at"];
		this.animPlaying = o.hasOwnProperty("ap") ? o["ap"] : true;
		this.animForwards = o.hasOwnProperty("af") ? o["af"] : true;
		this.curFrame = this.cur_animation.frames[this.cur_frame];
		this.curWebGLTexture = this.curFrame.webGL_texture;
		this.collision_poly.set_pts(this.curFrame.poly_pts);
		this.hotspotX = this.curFrame.hotspotX;
		this.hotspotY = this.curFrame.hotspotY;
	};
	instanceProto.animationFinish = function (reverse)
	{
		this.cur_frame = reverse ? 0 : this.cur_animation.frames.length - 1;
		this.animPlaying = false;
		this.animTriggerName = this.cur_animation.name;
		this.inAnimTrigger = true;
		this.runtime.trigger(cr.plugins_.Sprite.prototype.cnds.OnAnyAnimFinished, this);
		this.runtime.trigger(cr.plugins_.Sprite.prototype.cnds.OnAnimFinished, this);
		this.inAnimTrigger = false;
		this.animRepeats = 0;
	};
	instanceProto.getNowTime = function()
	{
		return this.animTimer.sum;
	};
	instanceProto.tick = function()
	{
		this.animTimer.add(this.runtime.getDt(this));
		if (this.changeAnimName.length)
			this.doChangeAnim();
		if (this.changeAnimFrame >= 0)
			this.doChangeAnimFrame();
		var now = this.getNowTime();
		var cur_animation = this.cur_animation;
		var prev_frame = cur_animation.frames[this.cur_frame];
		var next_frame;
		var cur_frame_time = prev_frame.duration / this.cur_anim_speed;
		if (this.animPlaying && now >= this.frameStart + cur_frame_time)
		{
			if (this.animForwards)
			{
				this.cur_frame++;
			}
			else
			{
				this.cur_frame--;
			}
			this.frameStart += cur_frame_time;
			if (this.cur_frame >= cur_animation.frames.length)
			{
				if (cur_animation.pingpong)
				{
					this.animForwards = false;
					this.cur_frame = cur_animation.frames.length - 2;
				}
				else if (cur_animation.loop)
				{
					this.cur_frame = cur_animation.repeatto;
				}
				else
				{
					this.animRepeats++;
					if (this.animRepeats >= cur_animation.repeatcount)
					{
						this.animationFinish(false);
					}
					else
					{
						this.cur_frame = cur_animation.repeatto;
					}
				}
			}
			if (this.cur_frame < 0)
			{
				if (cur_animation.pingpong)
				{
					this.cur_frame = 1;
					this.animForwards = true;
					if (!cur_animation.loop)
					{
						this.animRepeats++;
						if (this.animRepeats >= cur_animation.repeatcount)
						{
							this.animationFinish(true);
						}
					}
				}
				else
				{
					if (cur_animation.loop)
					{
						this.cur_frame = cur_animation.repeatto;
					}
					else
					{
						this.animRepeats++;
						if (this.animRepeats >= cur_animation.repeatcount)
						{
							this.animationFinish(true);
						}
						else
						{
							this.cur_frame = cur_animation.repeatto;
						}
					}
				}
			}
			if (this.cur_frame < 0)
				this.cur_frame = 0;
			else if (this.cur_frame >= cur_animation.frames.length)
				this.cur_frame = cur_animation.frames.length - 1;
			if (now > this.frameStart + (cur_animation.frames[this.cur_frame].duration / this.cur_anim_speed))
			{
				this.frameStart = now;
			}
			next_frame = cur_animation.frames[this.cur_frame];
			this.OnFrameChanged(prev_frame, next_frame);
			this.runtime.redraw = true;
		}
	};
	instanceProto.getAnimationByName = function (name_)
	{
		var i, len, a;
		for (i = 0, len = this.type.animations.length; i < len; i++)
		{
			a = this.type.animations[i];
			if (cr.equals_nocase(a.name, name_))
				return a;
		}
		return null;
	};
	instanceProto.getAnimationBySid = function (sid_)
	{
		var i, len, a;
		for (i = 0, len = this.type.animations.length; i < len; i++)
		{
			a = this.type.animations[i];
			if (a.sid === sid_)
				return a;
		}
		return null;
	};
	instanceProto.doChangeAnim = function ()
	{
		var prev_frame = this.cur_animation.frames[this.cur_frame];
		var anim = this.getAnimationByName(this.changeAnimName);
		this.changeAnimName = "";
		if (!anim)
			return;
		if (cr.equals_nocase(anim.name, this.cur_animation.name) && this.animPlaying)
			return;
		this.cur_animation = anim;
		this.cur_anim_speed = anim.speed;
		if (this.cur_frame < 0)
			this.cur_frame = 0;
		if (this.cur_frame >= this.cur_animation.frames.length)
			this.cur_frame = this.cur_animation.frames.length - 1;
		if (this.changeAnimFrom === 1)
			this.cur_frame = 0;
		this.animPlaying = true;
		this.frameStart = this.getNowTime();
		this.animForwards = true;
		this.OnFrameChanged(prev_frame, this.cur_animation.frames[this.cur_frame]);
		this.runtime.redraw = true;
	};
	instanceProto.doChangeAnimFrame = function ()
	{
		var prev_frame = this.cur_animation.frames[this.cur_frame];
		var prev_frame_number = this.cur_frame;
		this.cur_frame = cr.floor(this.changeAnimFrame);
		if (this.cur_frame < 0)
			this.cur_frame = 0;
		if (this.cur_frame >= this.cur_animation.frames.length)
			this.cur_frame = this.cur_animation.frames.length - 1;
		if (prev_frame_number !== this.cur_frame)
		{
			this.OnFrameChanged(prev_frame, this.cur_animation.frames[this.cur_frame]);
			this.frameStart = this.getNowTime();
			this.runtime.redraw = true;
		}
		this.changeAnimFrame = -1;
	};
	instanceProto.OnFrameChanged = function (prev_frame, next_frame)
	{
		var oldw = prev_frame.width;
		var oldh = prev_frame.height;
		var neww = next_frame.width;
		var newh = next_frame.height;
		if (oldw != neww)
			this.width *= (neww / oldw);
		if (oldh != newh)
			this.height *= (newh / oldh);
		this.hotspotX = next_frame.hotspotX;
		this.hotspotY = next_frame.hotspotY;
		this.collision_poly.set_pts(next_frame.poly_pts);
		this.set_bbox_changed();
		this.curFrame = next_frame;
		this.curWebGLTexture = next_frame.webGL_texture;
		var i, len, b;
		for (i = 0, len = this.behavior_insts.length; i < len; i++)
		{
			b = this.behavior_insts[i];
			if (b.onSpriteFrameChanged)
				b.onSpriteFrameChanged(prev_frame, next_frame);
		}
		this.runtime.trigger(cr.plugins_.Sprite.prototype.cnds.OnFrameChanged, this);
	};
	instanceProto.draw = function(ctx)
	{
		ctx.globalAlpha = this.opacity;
		var cur_frame = this.curFrame;
		var spritesheeted = cur_frame.spritesheeted;
		var cur_image = cur_frame.texture_img;
		var myx = this.x;
		var myy = this.y;
		var w = this.width;
		var h = this.height;
		if (this.angle === 0 && w >= 0 && h >= 0)
		{
			myx -= this.hotspotX * w;
			myy -= this.hotspotY * h;
			if (this.runtime.pixel_rounding)
			{
				myx = (myx + 0.5) | 0;
				myy = (myy + 0.5) | 0;
			}
			if (spritesheeted)
			{
				ctx.drawImage(cur_image, cur_frame.offx, cur_frame.offy, cur_frame.width, cur_frame.height,
										 myx, myy, w, h);
			}
			else
			{
				ctx.drawImage(cur_image, myx, myy, w, h);
			}
		}
		else
		{
			if (this.runtime.pixel_rounding)
			{
				myx = (myx + 0.5) | 0;
				myy = (myy + 0.5) | 0;
			}
			ctx.save();
			var widthfactor = w > 0 ? 1 : -1;
			var heightfactor = h > 0 ? 1 : -1;
			ctx.translate(myx, myy);
			if (widthfactor !== 1 || heightfactor !== 1)
				ctx.scale(widthfactor, heightfactor);
			ctx.rotate(this.angle * widthfactor * heightfactor);
			var drawx = 0 - (this.hotspotX * cr.abs(w))
			var drawy = 0 - (this.hotspotY * cr.abs(h));
			if (spritesheeted)
			{
				ctx.drawImage(cur_image, cur_frame.offx, cur_frame.offy, cur_frame.width, cur_frame.height,
										 drawx, drawy, cr.abs(w), cr.abs(h));
			}
			else
			{
				ctx.drawImage(cur_image, drawx, drawy, cr.abs(w), cr.abs(h));
			}
			ctx.restore();
		}
		/*
		ctx.strokeStyle = "#f00";
		ctx.lineWidth = 3;
		ctx.beginPath();
		this.collision_poly.cache_poly(this.width, this.height, this.angle);
		var i, len, ax, ay, bx, by;
		for (i = 0, len = this.collision_poly.pts_count; i < len; i++)
		{
			ax = this.collision_poly.pts_cache[i*2] + this.x;
			ay = this.collision_poly.pts_cache[i*2+1] + this.y;
			bx = this.collision_poly.pts_cache[((i+1)%len)*2] + this.x;
			by = this.collision_poly.pts_cache[((i+1)%len)*2+1] + this.y;
			ctx.moveTo(ax, ay);
			ctx.lineTo(bx, by);
		}
		ctx.stroke();
		ctx.closePath();
		*/
		/*
		if (this.behavior_insts.length >= 1 && this.behavior_insts[0].draw)
		{
			this.behavior_insts[0].draw(ctx);
		}
		*/
	};
	instanceProto.drawGL = function(glw)
	{
		glw.setTexture(this.curWebGLTexture);
		glw.setOpacity(this.opacity);
		var cur_frame = this.curFrame;
		var q = this.bquad;
		if (this.runtime.pixel_rounding)
		{
			var ox = ((this.x + 0.5) | 0) - this.x;
			var oy = ((this.y + 0.5) | 0) - this.y;
			if (cur_frame.spritesheeted)
				glw.quadTex(q.tlx + ox, q.tly + oy, q.trx + ox, q.try_ + oy, q.brx + ox, q.bry + oy, q.blx + ox, q.bly + oy, cur_frame.sheetTex);
			else
				glw.quad(q.tlx + ox, q.tly + oy, q.trx + ox, q.try_ + oy, q.brx + ox, q.bry + oy, q.blx + ox, q.bly + oy);
		}
		else
		{
			if (cur_frame.spritesheeted)
				glw.quadTex(q.tlx, q.tly, q.trx, q.try_, q.brx, q.bry, q.blx, q.bly, cur_frame.sheetTex);
			else
				glw.quad(q.tlx, q.tly, q.trx, q.try_, q.brx, q.bry, q.blx, q.bly);
		}
	};
	instanceProto.getImagePointIndexByName = function(name_)
	{
		var cur_frame = this.curFrame;
		var i, len;
		for (i = 0, len = cur_frame.image_points.length; i < len; i++)
		{
			if (cr.equals_nocase(name_, cur_frame.image_points[i][0]))
				return i;
		}
		return -1;
	};
	instanceProto.getImagePoint = function(imgpt, getX)
	{
		var cur_frame = this.curFrame;
		var image_points = cur_frame.image_points;
		var index;
		if (cr.is_string(imgpt))
			index = this.getImagePointIndexByName(imgpt);
		else
			index = imgpt - 1;	// 0 is origin
		index = cr.floor(index);
		if (index < 0 || index >= image_points.length)
			return getX ? this.x : this.y;	// return origin
		var x = (image_points[index][1] - cur_frame.hotspotX) * this.width;
		var y = image_points[index][2];
		y = (y - cur_frame.hotspotY) * this.height;
		var cosa = Math.cos(this.angle);
		var sina = Math.sin(this.angle);
		var x_temp = (x * cosa) - (y * sina);
		y = (y * cosa) + (x * sina);
		x = x_temp;
		x += this.x;
		y += this.y;
		return getX ? x : y;
	};
	function Cnds() {};
	var arrCache = [];
	function allocArr()
	{
		if (arrCache.length)
			return arrCache.pop();
		else
			return [0, 0];
	};
	function freeArr(a)
	{
		a[0] = 0;
		a[1] = 0;
		arrCache.push(a);
	};
	function collmemory_add(collmemory, a, b)
	{
		var arr = allocArr();
		arr[0] = a.uid;
		arr[1] = b.uid;
		collmemory.push(arr);
	};
	function collmemory_remove(collmemory, a, b)
	{
;
		var a_uid = a.uid;
		var b_uid = b.uid;
		var i, j = 0, len, entry;
		for (i = 0, len = collmemory.length; i < len; i++)
		{
			entry = collmemory[i];
			if (!((entry[0] === a_uid && entry[1] === b_uid) || (entry[0] === b_uid && entry[1] === a_uid)))
			{
				collmemory[j][0] = collmemory[i][0];
				collmemory[j][1] = collmemory[i][1];
				j++;
			}
		}
		for (i = j; i < len; i++)
			freeArr(collmemory[i]);
		collmemory.length = j;
	};
	function collmemory_removeInstance(collmemory, inst)
	{
;
		var i, j = 0, len, entry, uid = inst.uid;
		for (i = 0, len = collmemory.length; i < len; i++)
		{
			entry = collmemory[i];
			if (entry[0] !== uid && entry[1] !== uid)
			{
				collmemory[j][0] = collmemory[i][0];
				collmemory[j][1] = collmemory[i][1];
				j++;
			}
		}
		for (i = j; i < len; i++)
			freeArr(collmemory[i]);
		collmemory.length = j;
	};
	function collmemory_has(collmemory, a, b)
	{
		var a_uid = a.uid;
		var b_uid = b.uid;
		var i, len, entry;
		for (i = 0, len = collmemory.length; i < len; i++)
		{
			entry = collmemory[i];
			if ((entry[0] === a_uid && entry[1] === b_uid) || (entry[0] === b_uid && entry[1] === a_uid))
				return true;
		}
		return false;
	};
	Cnds.prototype.OnCollision = function (rtype)
	{
		if (!rtype)
			return false;
		var runtime = this.runtime;
		var cnd = runtime.getCurrentCondition();
		var ltype = cnd.type;
		if (!cnd.extra.collmemory)
		{
			cnd.extra.collmemory = [];
			runtime.addDestroyCallback((function (collmemory) {
				return function(inst) {
					collmemory_removeInstance(collmemory, inst);
				};
			})(cnd.extra.collmemory));
		}
		var lsol = ltype.getCurrentSol();
		var rsol = rtype.getCurrentSol();
		var linstances = lsol.getObjects();
		var rinstances = rsol.getObjects();
		var l, linst, r, rinst;
		var curlsol, currsol;
		var current_event = runtime.getCurrentEventStack().current_event;
		var orblock = current_event.orblock;
		for (l = 0; l < linstances.length; l++)
		{
			linst = linstances[l];
			for (r = 0; r < rinstances.length; r++)
			{
				rinst = rinstances[r];
				if (runtime.testOverlap(linst, rinst) || runtime.checkRegisteredCollision(linst, rinst))
				{
					if (!collmemory_has(cnd.extra.collmemory, linst, rinst))
					{
						collmemory_add(cnd.extra.collmemory, linst, rinst);
						runtime.pushCopySol(current_event.solModifiers);
						curlsol = ltype.getCurrentSol();
						currsol = rtype.getCurrentSol();
						curlsol.select_all = false;
						currsol.select_all = false;
						if (ltype === rtype)
						{
							curlsol.instances.length = 2;	// just use lsol, is same reference as rsol
							curlsol.instances[0] = linst;
							curlsol.instances[1] = rinst;
							ltype.applySolToContainer();
						}
						else
						{
							curlsol.instances.length = 1;
							currsol.instances.length = 1;
							curlsol.instances[0] = linst;
							currsol.instances[0] = rinst;
							ltype.applySolToContainer();
							rtype.applySolToContainer();
						}
						current_event.retrigger();
						runtime.popSol(current_event.solModifiers);
					}
				}
				else
				{
					collmemory_remove(cnd.extra.collmemory, linst, rinst);
				}
			}
		}
		return false;
	};
	var rpicktype = null;
	var rtopick = new cr.ObjectSet();
	var needscollisionfinish = false;
	function DoOverlapCondition(rtype, offx, offy)
	{
		if (!rtype)
			return false;
		var do_offset = (offx !== 0 || offy !== 0);
		var oldx, oldy, ret = false, r, lenr, rinst;
		var cnd = this.runtime.getCurrentCondition();
		var ltype = cnd.type;
		var inverted = cnd.inverted;
		var rsol = rtype.getCurrentSol();
		var orblock = this.runtime.getCurrentEventStack().current_event.orblock;
		var rinstances;
		if (rsol.select_all)
			rinstances = rsol.type.instances;
		else if (orblock)
			rinstances = rsol.else_instances;
		else
			rinstances = rsol.instances;
		rpicktype = rtype;
		needscollisionfinish = (ltype !== rtype && !inverted);
		if (do_offset)
		{
			oldx = this.x;
			oldy = this.y;
			this.x += offx;
			this.y += offy;
			this.set_bbox_changed();
		}
		for (r = 0, lenr = rinstances.length; r < lenr; r++)
		{
			rinst = rinstances[r];
			if (this.runtime.testOverlap(this, rinst))
			{
				ret = true;
				if (inverted)
					break;
				if (ltype !== rtype)
					rtopick.add(rinst);
			}
		}
		if (do_offset)
		{
			this.x = oldx;
			this.y = oldy;
			this.set_bbox_changed();
		}
		return ret;
	};
	typeProto.finish = function (do_pick)
	{
		if (!needscollisionfinish)
			return;
		if (do_pick)
		{
			var orblock = this.runtime.getCurrentEventStack().current_event.orblock;
			var sol = rpicktype.getCurrentSol();
			var topick = rtopick.valuesRef();
			var i, len, inst;
			if (sol.select_all)
			{
				sol.select_all = false;
				sol.instances.length = topick.length;
				for (i = 0, len = topick.length; i < len; i++)
				{
					sol.instances[i] = topick[i];
				}
				if (orblock)
				{
					sol.else_instances.length = 0;
					for (i = 0, len = rpicktype.instances.length; i < len; i++)
					{
						inst = rpicktype.instances[i];
						if (!rtopick.contains(inst))
							sol.else_instances.push(inst);
					}
				}
			}
			else
			{
				var initsize = sol.instances.length;
				sol.instances.length = initsize + topick.length;
				for (i = 0, len = topick.length; i < len; i++)
				{
					sol.instances[initsize + i] = topick[i];
					if (orblock)
						cr.arrayFindRemove(sol.else_instances, topick[i]);
				}
			}
			rpicktype.applySolToContainer();
		}
		rtopick.clear();
		needscollisionfinish = false;
	};
	Cnds.prototype.IsOverlapping = function (rtype)
	{
		return DoOverlapCondition.call(this, rtype, 0, 0);
	};
	Cnds.prototype.IsOverlappingOffset = function (rtype, offx, offy)
	{
		return DoOverlapCondition.call(this, rtype, offx, offy);
	};
	Cnds.prototype.IsAnimPlaying = function (animname)
	{
		if (this.changeAnimName.length)
			return cr.equals_nocase(this.changeAnimName, animname);
		else
			return cr.equals_nocase(this.cur_animation.name, animname);
	};
	Cnds.prototype.CompareFrame = function (cmp, framenum)
	{
		return cr.do_cmp(this.cur_frame, cmp, framenum);
	};
	Cnds.prototype.OnAnimFinished = function (animname)
	{
		return cr.equals_nocase(this.animTriggerName, animname);
	};
	Cnds.prototype.OnAnyAnimFinished = function ()
	{
		return true;
	};
	Cnds.prototype.OnFrameChanged = function ()
	{
		return true;
	};
	Cnds.prototype.IsMirrored = function ()
	{
		return this.width < 0;
	};
	Cnds.prototype.IsFlipped = function ()
	{
		return this.height < 0;
	};
	Cnds.prototype.OnURLLoaded = function ()
	{
		return true;
	};
	Cnds.prototype.IsCollisionEnabled = function ()
	{
		return this.collisionsEnabled;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.Spawn = function (obj, layer, imgpt)
	{
		if (!obj || !layer)
			return;
		var inst = this.runtime.createInstance(obj, layer, this.getImagePoint(imgpt, true), this.getImagePoint(imgpt, false));
		if (!inst)
			return;
		if (typeof inst.angle !== "undefined")
		{
			inst.angle = this.angle;
			inst.set_bbox_changed();
		}
		this.runtime.isInOnDestroy++;
		var i, len, s;
		this.runtime.trigger(Object.getPrototypeOf(obj.plugin).cnds.OnCreated, inst);
		if (inst.is_contained)
		{
			for (i = 0, len = inst.siblings.length; i < len; i++)
			{
				s = inst.siblings[i];
				this.runtime.trigger(Object.getPrototypeOf(s.type.plugin).cnds.OnCreated, s);
			}
		}
		this.runtime.isInOnDestroy--;
		var cur_act = this.runtime.getCurrentAction();
		var reset_sol = false;
		if (cr.is_undefined(cur_act.extra.Spawn_LastExec) || cur_act.extra.Spawn_LastExec < this.runtime.execcount)
		{
			reset_sol = true;
			cur_act.extra.Spawn_LastExec = this.runtime.execcount;
		}
		var sol;
		if (obj != this.type)
		{
			sol = obj.getCurrentSol();
			sol.select_all = false;
			if (reset_sol)
			{
				sol.instances.length = 1;
				sol.instances[0] = inst;
			}
			else
				sol.instances.push(inst);
			if (inst.is_contained)
			{
				for (i = 0, len = inst.siblings.length; i < len; i++)
				{
					s = inst.siblings[i];
					sol = s.type.getCurrentSol();
					sol.select_all = false;
					if (reset_sol)
					{
						sol.instances.length = 1;
						sol.instances[0] = s;
					}
					else
						sol.instances.push(s);
				}
			}
		}
	};
	Acts.prototype.SetEffect = function (effect)
	{
		this.compositeOp = cr.effectToCompositeOp(effect);
		cr.setGLBlend(this, effect, this.runtime.gl);
		this.runtime.redraw = true;
	};
	Acts.prototype.StopAnim = function ()
	{
		this.animPlaying = false;
	};
	Acts.prototype.StartAnim = function (from)
	{
		this.animPlaying = true;
		this.frameStart = this.getNowTime();
		if (from === 1 && this.cur_frame !== 0)
		{
			this.changeAnimFrame = 0;
			if (!this.inAnimTrigger)
				this.doChangeAnimFrame();
		}
		if (!this.isTicking)
		{
			this.runtime.tickMe(this);
			this.isTicking = true;
		}
	};
	Acts.prototype.SetAnim = function (animname, from)
	{
		this.changeAnimName = animname;
		this.changeAnimFrom = from;
		if (!this.isTicking)
		{
			this.runtime.tickMe(this);
			this.isTicking = true;
		}
		if (!this.inAnimTrigger)
			this.doChangeAnim();
	};
	Acts.prototype.SetAnimFrame = function (framenumber)
	{
		this.changeAnimFrame = framenumber;
		if (!this.isTicking)
		{
			this.runtime.tickMe(this);
			this.isTicking = true;
		}
		if (!this.inAnimTrigger)
			this.doChangeAnimFrame();
	};
	Acts.prototype.SetAnimSpeed = function (s)
	{
		this.cur_anim_speed = cr.abs(s);
		this.animForwards = (s >= 0);
		if (!this.isTicking)
		{
			this.runtime.tickMe(this);
			this.isTicking = true;
		}
	};
	Acts.prototype.SetMirrored = function (m)
	{
		var neww = cr.abs(this.width) * (m === 0 ? -1 : 1);
		if (this.width === neww)
			return;
		this.width = neww;
		this.set_bbox_changed();
	};
	Acts.prototype.SetFlipped = function (f)
	{
		var newh = cr.abs(this.height) * (f === 0 ? -1 : 1);
		if (this.height === newh)
			return;
		this.height = newh;
		this.set_bbox_changed();
	};
	Acts.prototype.SetScale = function (s)
	{
		var cur_frame = this.curFrame;
		var mirror_factor = (this.width < 0 ? -1 : 1);
		var flip_factor = (this.height < 0 ? -1 : 1);
		var new_width = cur_frame.width * s * mirror_factor;
		var new_height = cur_frame.height * s * flip_factor;
		if (this.width !== new_width || this.height !== new_height)
		{
			this.width = new_width;
			this.height = new_height;
			this.set_bbox_changed();
		}
	};
	Acts.prototype.LoadURL = function (url_, resize_)
	{
		var img = new Image();
		var self = this;
		var curFrame_ = this.curFrame;
		img.onload = function ()
		{
			if (curFrame_.texture_img.src === img.src)
			{
				if (self.runtime.glwrap && self.curFrame === curFrame_)
					self.curWebGLTexture = curFrame_.webGL_texture;
				self.runtime.redraw = true;
				self.runtime.trigger(cr.plugins_.Sprite.prototype.cnds.OnURLLoaded, self);
				return;
			}
			curFrame_.texture_img = img;
			curFrame_.offx = 0;
			curFrame_.offy = 0;
			curFrame_.width = img.width;
			curFrame_.height = img.height;
			curFrame_.spritesheeted = false;
			curFrame_.datauri = "";
			if (self.runtime.glwrap)
			{
				if (curFrame_.webGL_texture)
					self.runtime.glwrap.deleteTexture(curFrame_.webGL_texture);
				curFrame_.webGL_texture = self.runtime.glwrap.loadTexture(img, false, self.runtime.linearSampling);
				if (self.curFrame === curFrame_)
					self.curWebGLTexture = curFrame_.webGL_texture;
				self.type.updateAllCurrentTexture();
			}
			if (resize_ === 0)		// resize to image size
			{
				self.width = img.width;
				self.height = img.height;
				self.set_bbox_changed();
			}
			self.runtime.redraw = true;
			self.runtime.trigger(cr.plugins_.Sprite.prototype.cnds.OnURLLoaded, self);
		};
		if (url_.substr(0, 5) !== "data:")
			img.crossOrigin = 'anonymous';
		img.src = url_;
	};
	Acts.prototype.SetCollisions = function (set_)
	{
		this.collisionsEnabled = (set_ !== 0);
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.AnimationFrame = function (ret)
	{
		ret.set_int(this.cur_frame);
	};
	Exps.prototype.AnimationFrameCount = function (ret)
	{
		ret.set_int(this.cur_animation.frames.length);
	};
	Exps.prototype.AnimationName = function (ret)
	{
		ret.set_string(this.cur_animation.name);
	};
	Exps.prototype.AnimationSpeed = function (ret)
	{
		ret.set_float(this.cur_anim_speed);
	};
	Exps.prototype.ImagePointX = function (ret, imgpt)
	{
		ret.set_float(this.getImagePoint(imgpt, true));
	};
	Exps.prototype.ImagePointY = function (ret, imgpt)
	{
		ret.set_float(this.getImagePoint(imgpt, false));
	};
	Exps.prototype.ImagePointCount = function (ret)
	{
		ret.set_int(this.curFrame.image_points.length);
	};
	Exps.prototype.ImageWidth = function (ret)
	{
		ret.set_float(this.curFrame.width);
	};
	Exps.prototype.ImageHeight = function (ret)
	{
		ret.set_float(this.curFrame.height);
	};
	pluginProto.exps = new Exps();
}());
/* global cr,log,assert2 */
/* jshint globalstrict: true */
/* jshint strict: true */
;
;
cr.plugins_.Spritefont2 = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Spritefont2.prototype;
	pluginProto.onCreate = function ()
	{
	};
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
		if (this.is_family)
			return;
		this.texture_img = new Image();
		this.texture_img["idtkLoadDisposed"] = true;
		this.texture_img.src = this.texture_file;
		this.runtime.wait_for_textures.push(this.texture_img);
		this.webGL_texture = null;
	};
	typeProto.onLostWebGLContext = function ()
	{
		if (this.is_family)
			return;
		this.webGL_texture = null;
	};
	typeProto.onRestoreWebGLContext = function ()
	{
		if (this.is_family || !this.instances.length)
			return;
		if (!this.webGL_texture)
		{
			this.webGL_texture = this.runtime.glwrap.loadTexture(this.texture_img, false, this.runtime.linearSampling, this.texture_pixelformat);
		}
		var i, len;
		for (i = 0, len = this.instances.length; i < len; i++)
			this.instances[i].webGL_texture = this.webGL_texture;
	};
	typeProto.unloadTextures = function ()
	{
		if (this.is_family || this.instances.length || !this.webGL_texture)
			return;
		this.runtime.glwrap.deleteTexture(this.webGL_texture);
		this.webGL_texture = null;
	};
	typeProto.preloadCanvas2D = function (ctx)
	{
		ctx.drawImage(this.texture_img, 0, 0);
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onDestroy = function()
	{
		freeAllLines (this.lines);
		freeAllClip  (this.clipList);
		freeAllClipUV(this.clipUV);
		cr.wipe(this.characterWidthList);
	};
	instanceProto.onCreate = function()
	{
		this.texture_img      = this.type.texture_img;
		this.characterWidth   = this.properties[0];
		this.characterHeight  = this.properties[1];
		this.characterSet     = this.properties[2];
		this.text             = this.properties[3];
		this.characterScale   = this.properties[4];
		this.visible          = (this.properties[5] === 0);	// 0=visible, 1=invisible
		this.halign           = this.properties[6]/2.0;			// 0=left, 1=center, 2=right
		this.valign           = this.properties[7]/2.0;			// 0=top, 1=center, 2=bottom
		this.wrapbyword       = (this.properties[9] === 0);	// 0=word, 1=character
		this.characterSpacing = this.properties[10];
		this.lineHeight       = this.properties[11];
		this.textWidth  = 0;
		this.textHeight = 0;
		if (this.recycled)
		{
			this.lines.length = 0;
			cr.wipe(this.clipList);
			cr.wipe(this.clipUV);
			cr.wipe(this.characterWidthList);
		}
		else
		{
			this.lines = [];
			this.clipList = {};
			this.clipUV = {};
			this.characterWidthList = {};
		}
		this.text_changed = true;
		this.lastwrapwidth = this.width;
		if (this.runtime.glwrap)
		{
			if (!this.type.webGL_texture)
			{
				this.type.webGL_texture = this.runtime.glwrap.loadTexture(this.type.texture_img, false, this.runtime.linearSampling, this.type.texture_pixelformat);
			}
			this.webGL_texture = this.type.webGL_texture;
		}
		this.SplitSheet();
	};
	instanceProto.saveToJSON = function ()
	{
		var save = {
			"t": this.text,
			"csc": this.characterScale,
			"csp": this.characterSpacing,
			"lh": this.lineHeight,
			"tw": this.textWidth,
			"th": this.textHeight,
			"lrt": this.last_render_tick,
			"cw": {}
		};
		for (var ch in this.characterWidthList)
			save["cw"][ch] = this.characterWidthList[ch];
		return save;
	};
	instanceProto.loadFromJSON = function (o)
	{
		this.text = o["t"];
		this.characterScale = o["csc"];
		this.characterSpacing = o["csp"];
		this.lineHeight = o["lh"];
		this.textWidth = o["tw"];
		this.textHeight = o["th"];
		this.last_render_tick = o["lrt"];
		for(var ch in o["cw"])
			this.characterWidthList[ch] = o["cw"][ch];
		this.text_changed = true;
		this.lastwrapwidth = this.width;
	};
	function trimRight(text)
	{
		return text.replace(/\s\s*$/, '');
	}
	var MAX_CACHE_SIZE = 1000;
	function alloc(cache,Constructor)
	{
		if (cache.length)
			return cache.pop();
		else
			return new Constructor();
	}
	function free(cache,data)
	{
		if (cache.length < MAX_CACHE_SIZE)
		{
			cache.push(data);
		}
	}
	function freeAll(cache,dataList,isArray)
	{
		if (isArray) {
			var i, len;
			for (i = 0, len = dataList.length; i < len; i++)
			{
				free(cache,dataList[i]);
			}
			dataList.length = 0;
		} else {
			var prop;
			for(prop in dataList) {
				if(Object.prototype.hasOwnProperty.call(dataList,prop)) {
					free(cache,dataList[prop]);
					delete dataList[prop];
				}
			}
		}
	}
	function addLine(inst,lineIndex,cur_line) {
		var lines = inst.lines;
		var line;
		cur_line = trimRight(cur_line);
		if (lineIndex >= lines.length)
			lines.push(allocLine());
		line = lines[lineIndex];
		line.text = cur_line;
		line.width = inst.measureWidth(cur_line);
		inst.textWidth = cr.max(inst.textWidth,line.width);
	}
	var linesCache = [];
	function allocLine()       { return alloc(linesCache,Object); }
	function freeLine(l)       { free(linesCache,l); }
	function freeAllLines(arr) { freeAll(linesCache,arr,true); }
	function addClip(obj,property,x,y,w,h) {
		if (obj[property] === undefined) {
			obj[property] = alloc(clipCache,Object);
		}
		obj[property].x = x;
		obj[property].y = y;
		obj[property].w = w;
		obj[property].h = h;
	}
	var clipCache = [];
	function allocClip()      { return alloc(clipCache,Object); }
	function freeAllClip(obj) { freeAll(clipCache,obj,false);}
	function addClipUV(obj,property,left,top,right,bottom) {
		if (obj[property] === undefined) {
			obj[property] = alloc(clipUVCache,cr.rect);
		}
		obj[property].left   = left;
		obj[property].top    = top;
		obj[property].right  = right;
		obj[property].bottom = bottom;
	}
	var clipUVCache = [];
	function allocClipUV()      { return alloc(clipUVCache,cr.rect);}
	function freeAllClipUV(obj) { freeAll(clipUVCache,obj,false);}
	instanceProto.SplitSheet = function() {
		var texture      = this.texture_img;
		var texWidth     = texture.width;
		var texHeight    = texture.height;
		var charWidth    = this.characterWidth;
		var charHeight   = this.characterHeight;
		var charU        = charWidth /texWidth;
		var charV        = charHeight/texHeight;
		var charSet      = this.characterSet ;
		var cols = Math.floor(texWidth/charWidth);
		var rows = Math.floor(texHeight/charHeight);
		for ( var c = 0; c < charSet.length; c++) {
			if  (c >= cols * rows) break;
			var x = c%cols;
			var y = Math.floor(c/cols);
			var letter = charSet.charAt(c);
			if (this.runtime.glwrap) {
				addClipUV(
					this.clipUV, letter,
					x * charU ,
					y * charV ,
					(x+1) * charU ,
					(y+1) * charV
				);
			} else {
				addClip(
					this.clipList, letter,
					x * charWidth,
					y * charHeight,
					charWidth,
					charHeight
				);
			}
		}
	};
	/*
     *	Word-Wrapping
     */
	var wordsCache = [];
	pluginProto.TokeniseWords = function (text)
	{
		wordsCache.length = 0;
		var cur_word = "";
		var ch;
		var i = 0;
		while (i < text.length)
		{
			ch = text.charAt(i);
			if (ch === "\n")
			{
				if (cur_word.length)
				{
					wordsCache.push(cur_word);
					cur_word = "";
				}
				wordsCache.push("\n");
				++i;
			}
			else if (ch === " " || ch === "\t" || ch === "-")
			{
				do {
					cur_word += text.charAt(i);
					i++;
				}
				while (i < text.length && (text.charAt(i) === " " || text.charAt(i) === "\t"));
				wordsCache.push(cur_word);
				cur_word = "";
			}
			else if (i < text.length)
			{
				cur_word += ch;
				i++;
			}
		}
		if (cur_word.length)
			wordsCache.push(cur_word);
	};
	pluginProto.WordWrap = function (inst)
	{
		var text = inst.text;
		var lines = inst.lines;
		if (!text || !text.length)
		{
			freeAllLines(lines);
			return;
		}
		var width = inst.width;
		if (width <= 2.0)
		{
			freeAllLines(lines);
			return;
		}
		var charWidth = inst.characterWidth;
		var charScale = inst.characterScale;
		var charSpacing = inst.characterSpacing;
		if ( (text.length * (charWidth * charScale + charSpacing) - charSpacing) <= width && text.indexOf("\n") === -1)
		{
			var all_width = inst.measureWidth(text);
			if (all_width <= width)
			{
				freeAllLines(lines);
				lines.push(allocLine());
				lines[0].text = text;
				lines[0].width = all_width;
				inst.textWidth  = all_width;
				inst.textHeight = inst.characterHeight * charScale + inst.lineHeight;
				return;
			}
		}
		var wrapbyword = inst.wrapbyword;
		this.WrapText(inst);
		inst.textHeight = lines.length * (inst.characterHeight * charScale + inst.lineHeight);
	};
	pluginProto.WrapText = function (inst)
	{
		var wrapbyword = inst.wrapbyword;
		var text       = inst.text;
		var lines      = inst.lines;
		var width      = inst.width;
		var wordArray;
		if (wrapbyword) {
			this.TokeniseWords(text);	// writes to wordsCache
			wordArray = wordsCache;
		} else {
			wordArray = text;
		}
		var cur_line = "";
		var prev_line;
		var line_width;
		var i;
		var lineIndex = 0;
		var line;
		var ignore_newline = false;
		for (i = 0; i < wordArray.length; i++)
		{
			if (wordArray[i] === "\n")
			{
				if (ignore_newline === true) {
					ignore_newline = false;
				} else {
					addLine(inst,lineIndex,cur_line);
					lineIndex++;
				}
				cur_line = "";
				continue;
			}
			ignore_newline = false;
			prev_line = cur_line;
			cur_line += wordArray[i];
			line_width = inst.measureWidth(trimRight(cur_line));
			if (line_width > width)
			{
				if (prev_line === "") {
					addLine(inst,lineIndex,cur_line);
					cur_line = "";
					ignore_newline = true;
				} else {
					addLine(inst,lineIndex,prev_line);
					cur_line = wordArray[i];
				}
				lineIndex++;
				if (!wrapbyword && cur_line === " ")
					cur_line = "";
			}
		}
		if (trimRight(cur_line).length)
		{
			addLine(inst,lineIndex,cur_line);
			lineIndex++;
		}
		for (i = lineIndex; i < lines.length; i++)
			freeLine(lines[i]);
		lines.length = lineIndex;
	};
	instanceProto.measureWidth = function(text) {
		var spacing = this.characterSpacing;
		var len     = text.length;
		var width   = 0;
		for (var i = 0; i < len; i++) {
			width += this.getCharacterWidth(text.charAt(i)) * this.characterScale + spacing;
		}
		width -= (width > 0) ? spacing : 0;
		return width;
	};
	/***/
	instanceProto.getCharacterWidth = function(character) {
		var widthList = this.characterWidthList;
		if (widthList[character] !== undefined) {
			return widthList[character];
		} else {
			return this.characterWidth;
		}
	};
	instanceProto.rebuildText = function() {
		if (this.text_changed || this.width !== this.lastwrapwidth) {
			this.textWidth = 0;
			this.textHeight = 0;
			this.type.plugin.WordWrap(this);
			this.text_changed = false;
			this.lastwrapwidth = this.width;
		}
	};
	var EPSILON = 0.00001;
	instanceProto.draw = function(ctx, glmode)
	{
		var texture = this.texture_img;
		if (this.text !== "" && texture != null) {
			this.rebuildText();
			if (this.height < this.characterHeight*this.characterScale + this.lineHeight) {
				return;
			}
			ctx.globalAlpha = this.opacity;
			var myx = this.x;
			var myy = this.y;
			if (this.runtime.pixel_rounding)
			{
				myx = (myx + 0.5) | 0;
				myy = (myy + 0.5) | 0;
			}
			ctx.save();
			ctx.translate(myx, myy);
			ctx.rotate(this.angle);
			var ha         = this.halign;
			var va         = this.valign;
			var scale      = this.characterScale;
			var charHeight = this.characterHeight * scale;
			var lineHeight = this.lineHeight;
			var charSpace  = this.characterSpacing;
			var lines = this.lines;
			var textHeight = this.textHeight;
			var halign;
			var valign = va * cr.max(0,(this.height - textHeight));
			var offx = -(this.hotspotX * this.width);
			var offy = -(this.hotspotY * this.height);
			offy += valign;
			var drawX ;
			var drawY = offy;
			for(var i = 0; i < lines.length; i++) {
				var line = lines[i].text;
				var len  = lines[i].width;
				halign = ha * cr.max(0,this.width - len);
				drawX = offx + halign;
				drawY += lineHeight;
				for(var j = 0; j < line.length; j++) {
					var letter = line.charAt(j);
					var clip = this.clipList[letter];
					if ( drawX + this.getCharacterWidth(letter) * scale > this.width + EPSILON ) {
						break;
					}
					if (clip !== undefined) {
						ctx.drawImage( this.texture_img,
									 clip.x, clip.y, clip.w, clip.h,
									 Math.round(drawX),Math.round(drawY),clip.w*scale,clip.h*scale);
					}
					drawX  += this.getCharacterWidth(letter) * scale + charSpace;
				}
				drawY += charHeight;
				if ( drawY + charHeight + lineHeight > this.height) {
					break;
				}
			}
			ctx.restore();
		}
	};
	var dQuad = new cr.quad();
	function rotateQuad(quad,cosa,sina) {
		var x_temp;
		x_temp   = (quad.tlx * cosa) - (quad.tly * sina);
		quad.tly = (quad.tly * cosa) + (quad.tlx * sina);
		quad.tlx = x_temp;
		x_temp    = (quad.trx * cosa) - (quad.try_ * sina);
		quad.try_ = (quad.try_ * cosa) + (quad.trx * sina);
		quad.trx  = x_temp;
		x_temp   = (quad.blx * cosa) - (quad.bly * sina);
		quad.bly = (quad.bly * cosa) + (quad.blx * sina);
		quad.blx = x_temp;
		x_temp    = (quad.brx * cosa) - (quad.bry * sina);
		quad.bry = (quad.bry * cosa) + (quad.brx * sina);
		quad.brx  = x_temp;
	}
	instanceProto.drawGL = function(glw)
	{
		glw.setTexture(this.webGL_texture);
		glw.setOpacity(this.opacity);
		if (this.text !== "") {
			this.rebuildText();
			if (this.height < this.characterHeight*this.characterScale + this.lineHeight) {
				return;
			}
			this.update_bbox();
			var q = this.bquad;
			var ox = 0;
			var oy = 0;
			if (this.runtime.pixel_rounding)
			{
				ox = ((this.x + 0.5) | 0) - this.x;
				oy = ((this.y + 0.5) | 0) - this.y;
			}
			var angle      = this.angle;
			var ha         = this.halign;
			var va         = this.valign;
			var scale      = this.characterScale;
			var charHeight = this.characterHeight * scale;   // to precalculate in onCreate or on change
			var lineHeight = this.lineHeight;
			var charSpace  = this.characterSpacing;
			var lines = this.lines;
			var textHeight = this.textHeight;
			var cosa,sina;
			if (angle !== 0)
			{
				cosa = Math.cos(angle);
				sina = Math.sin(angle);
			}
			var halign;
			var valign = va * cr.max(0,(this.height - textHeight));
			var offx = q.tlx + ox;
			var offy = q.tly + oy;
			var drawX ;
			var drawY = valign;
			for(var i = 0; i < lines.length; i++) {
				var line       = lines[i].text;
				var lineWidth  = lines[i].width;
				halign = ha * cr.max(0,this.width - lineWidth);
				drawX = halign;
				drawY += lineHeight;
				for(var j = 0; j < line.length; j++) {
					var letter = line.charAt(j);
					var clipUV = this.clipUV[letter];
					if ( drawX + this.getCharacterWidth(letter) * scale  > this.width + EPSILON) {
						break;
					}
					if (clipUV !== undefined) {
						var clipWidth  = this.characterWidth*scale;
						var clipHeight = this.characterHeight*scale;
						dQuad.tlx  = drawX;
						dQuad.tly  = drawY;
						dQuad.trx  = drawX + clipWidth;
						dQuad.try_ = drawY ;
						dQuad.blx  = drawX;
						dQuad.bly  = drawY + clipHeight;
						dQuad.brx  = drawX + clipWidth;
						dQuad.bry  = drawY + clipHeight;
						if(angle !== 0)
						{
							rotateQuad(dQuad,cosa,sina);
						}
						dQuad.offset(offx,offy);
						glw.quadTex(
							dQuad.tlx, dQuad.tly,
							dQuad.trx, dQuad.try_,
							dQuad.brx, dQuad.bry,
							dQuad.blx, dQuad.bly,
							clipUV
						);
					}
					drawX  += this.getCharacterWidth(letter) * scale + charSpace;
				}
				drawY += charHeight;
				if ( drawY + charHeight + lineHeight > this.height) {
					break;
				}
			}
		}
	};
	function Cnds() {}
	Cnds.prototype.CompareText = function(text_to_compare, case_sensitive)
	{
		if (case_sensitive)
			return this.text == text_to_compare;
		else
			return cr.equals_nocase(this.text, text_to_compare);
	};
	pluginProto.cnds = new Cnds();
	function Acts() {}
	Acts.prototype.SetText = function(param)
	{
		if (cr.is_number(param) && param < 1e9)
			param = Math.round(param * 1e10) / 1e10;	// round to nearest ten billionth - hides floating point errors
		var text_to_set = param.toString();
		if (this.text !== text_to_set)
		{
			this.text = text_to_set;
			this.text_changed = true;
			this.runtime.redraw = true;
		}
	};
	Acts.prototype.AppendText = function(param)
	{
		if (cr.is_number(param))
			param = Math.round(param * 1e10) / 1e10;	// round to nearest ten billionth - hides floating point errors
		var text_to_append = param.toString();
		if (text_to_append)	// not empty
		{
			this.text += text_to_append;
			this.text_changed = true;
			this.runtime.redraw = true;
		}
	};
	Acts.prototype.SetScale = function(param)
	{
		if (param !== this.characterScale) {
			this.characterScale = param;
			this.text_changed = true;
			this.runtime.redraw = true;
		}
	};
	Acts.prototype.SetCharacterSpacing = function(param)
	{
		if (param !== this.CharacterSpacing) {
			this.characterSpacing = param;
			this.text_changed = true;
			this.runtime.redraw = true;
		}
	};
	Acts.prototype.SetLineHeight = function(param)
	{
		if (param !== this.lineHeight) {
			this.lineHeight = param;
			this.text_changed = true;
			this.runtime.redraw = true;
		}
	};
	instanceProto.SetCharWidth = function(character,width) {
		var w = parseInt(width,10);
		if (this.characterWidthList[character] !== w) {
			this.characterWidthList[character] = w;
			this.text_changed = true;
			this.runtime.redraw = true;
		}
	};
	Acts.prototype.SetCharacterWidth = function(characterSet,width)
	{
		if (characterSet !== "") {
			for(var c = 0; c < characterSet.length; c++) {
				this.SetCharWidth(characterSet.charAt(c),width);
			}
		}
	};
	pluginProto.acts = new Acts();
	function Exps() {}
	Exps.prototype.CharacterWidth = function(ret,character)
	{
		ret.set_int(this.getCharacterWidth(character));
	};
	Exps.prototype.CharacterHeight = function(ret)
	{
		ret.set_int(this.characterHeight);
	};
	Exps.prototype.CharacterScale = function(ret)
	{
		ret.set_float(this.characterScale);
	};
	Exps.prototype.CharacterSpacing = function(ret)
	{
		ret.set_int(this.characterSpacing);
	};
	Exps.prototype.LineHeight = function(ret)
	{
		ret.set_int(this.lineHeight);
	};
	Exps.prototype.Text = function(ret)
	{
		ret.set_string(this.text);
	};
	Exps.prototype.TextWidth = function (ret)
	{
		this.rebuildText();
		ret.set_float(this.textWidth);
	};
	Exps.prototype.TextHeight = function (ret)
	{
		this.rebuildText();
		ret.set_float(this.textHeight);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.TiledBg = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.TiledBg.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
		if (this.is_family)
			return;
		this.texture_img = new Image();
		this.texture_img["idtkLoadDisposed"] = true;
		this.texture_img.src = this.texture_file;
		this.texture_img.cr_filesize = this.texture_filesize;
		this.runtime.wait_for_textures.push(this.texture_img);
		this.pattern = null;
		this.webGL_texture = null;
	};
	typeProto.onLostWebGLContext = function ()
	{
		if (this.is_family)
			return;
		this.webGL_texture = null;
	};
	typeProto.onRestoreWebGLContext = function ()
	{
		if (this.is_family || !this.instances.length)
			return;
		if (!this.webGL_texture)
		{
			this.webGL_texture = this.runtime.glwrap.loadTexture(this.texture_img, true, this.runtime.linearSampling, this.texture_pixelformat);
		}
		var i, len;
		for (i = 0, len = this.instances.length; i < len; i++)
			this.instances[i].webGL_texture = this.webGL_texture;
	};
	typeProto.loadTextures = function ()
	{
		if (this.is_family || this.webGL_texture || !this.runtime.glwrap)
			return;
		this.webGL_texture = this.runtime.glwrap.loadTexture(this.texture_img, true, this.runtime.linearSampling, this.texture_pixelformat);
	};
	typeProto.unloadTextures = function ()
	{
		if (this.is_family || this.instances.length || !this.webGL_texture)
			return;
		this.runtime.glwrap.deleteTexture(this.webGL_texture);
		this.webGL_texture = null;
	};
	typeProto.preloadCanvas2D = function (ctx)
	{
		ctx.drawImage(this.texture_img, 0, 0);
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		this.visible = (this.properties[0] === 0);							// 0=visible, 1=invisible
		this.rcTex = new cr.rect(0, 0, 0, 0);
		this.has_own_texture = false;										// true if a texture loaded in from URL
		this.texture_img = this.type.texture_img;
		if (this.runtime.glwrap)
		{
			this.type.loadTextures();
			this.webGL_texture = this.type.webGL_texture;
		}
		else
		{
			if (!this.type.pattern)
				this.type.pattern = this.runtime.ctx.createPattern(this.type.texture_img, "repeat");
			this.pattern = this.type.pattern;
		}
	};
	instanceProto.afterLoad = function ()
	{
		this.has_own_texture = false;
		this.texture_img = this.type.texture_img;
	};
	instanceProto.onDestroy = function ()
	{
		if (this.runtime.glwrap && this.has_own_texture && this.webGL_texture)
		{
			this.runtime.glwrap.deleteTexture(this.webGL_texture);
			this.webGL_texture = null;
		}
	};
	instanceProto.draw = function(ctx)
	{
		ctx.globalAlpha = this.opacity;
		ctx.save();
		ctx.fillStyle = this.pattern;
		var myx = this.x;
		var myy = this.y;
		if (this.runtime.pixel_rounding)
		{
			myx = (myx + 0.5) | 0;
			myy = (myy + 0.5) | 0;
		}
		var drawX = -(this.hotspotX * this.width);
		var drawY = -(this.hotspotY * this.height);
		var offX = drawX % this.texture_img.width;
		var offY = drawY % this.texture_img.height;
		if (offX < 0)
			offX += this.texture_img.width;
		if (offY < 0)
			offY += this.texture_img.height;
		ctx.translate(myx, myy);
		ctx.rotate(this.angle);
		ctx.translate(offX, offY);
		ctx.fillRect(drawX - offX,
					 drawY - offY,
					 this.width,
					 this.height);
		ctx.restore();
	};
	instanceProto.drawGL = function(glw)
	{
		glw.setTexture(this.webGL_texture);
		glw.setOpacity(this.opacity);
		var rcTex = this.rcTex;
		rcTex.right = this.width / this.texture_img.width;
		rcTex.bottom = this.height / this.texture_img.height;
		var q = this.bquad;
		if (this.runtime.pixel_rounding)
		{
			var ox = ((this.x + 0.5) | 0) - this.x;
			var oy = ((this.y + 0.5) | 0) - this.y;
			glw.quadTex(q.tlx + ox, q.tly + oy, q.trx + ox, q.try_ + oy, q.brx + ox, q.bry + oy, q.blx + ox, q.bly + oy, rcTex);
		}
		else
			glw.quadTex(q.tlx, q.tly, q.trx, q.try_, q.brx, q.bry, q.blx, q.bly, rcTex);
	};
	function Cnds() {};
	Cnds.prototype.OnURLLoaded = function ()
	{
		return true;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetEffect = function (effect)
	{
		this.compositeOp = cr.effectToCompositeOp(effect);
		cr.setGLBlend(this, effect, this.runtime.gl);
		this.runtime.redraw = true;
	};
	Acts.prototype.LoadURL = function (url_)
	{
		var img = new Image();
		var self = this;
		img.onload = function ()
		{
			self.texture_img = img;
			if (self.runtime.glwrap)
			{
				if (self.has_own_texture && self.webGL_texture)
					self.runtime.glwrap.deleteTexture(self.webGL_texture);
				self.webGL_texture = self.runtime.glwrap.loadTexture(img, true, self.runtime.linearSampling);
			}
			else
			{
				self.pattern = self.runtime.ctx.createPattern(img, "repeat");
			}
			self.has_own_texture = true;
			self.runtime.redraw = true;
			self.runtime.trigger(cr.plugins_.TiledBg.prototype.cnds.OnURLLoaded, self);
		};
		if (url_.substr(0, 5) !== "data:")
			img.crossOrigin = 'anonymous';
		img.src = url_;
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Touch = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Touch.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
		this.touches = [];
		this.mouseDown = false;
	};
	var instanceProto = pluginProto.Instance.prototype;
	var dummyoffset = {left: 0, top: 0};
	instanceProto.findTouch = function (id)
	{
		var i, len;
		for (i = 0, len = this.touches.length; i < len; i++)
		{
			if (this.touches[i]["id"] === id)
				return i;
		}
		return -1;
	};
	var appmobi_accx = 0;
	var appmobi_accy = 0;
	var appmobi_accz = 0;
	function AppMobiGetAcceleration(evt)
	{
		appmobi_accx = evt.x;
		appmobi_accy = evt.y;
		appmobi_accz = evt.z;
	};
	var pg_accx = 0;
	var pg_accy = 0;
	var pg_accz = 0;
	function PhoneGapGetAcceleration(evt)
	{
		pg_accx = evt.x;
		pg_accy = evt.y;
		pg_accz = evt.z;
	};
	var theInstance = null;
	instanceProto.onCreate = function()
	{
		theInstance = this;
		this.isWindows8 = !!(typeof window["c2isWindows8"] !== "undefined" && window["c2isWindows8"]);
		this.orient_alpha = 0;
		this.orient_beta = 0;
		this.orient_gamma = 0;
		this.acc_g_x = 0;
		this.acc_g_y = 0;
		this.acc_g_z = 0;
		this.acc_x = 0;
		this.acc_y = 0;
		this.acc_z = 0;
		this.curTouchX = 0;
		this.curTouchY = 0;
		this.trigger_index = 0;
		this.trigger_id = 0;
		this.useMouseInput = (this.properties[0] !== 0);
		var elem = (this.runtime.fullscreen_mode > 0) ? document : this.runtime.canvas;
		var elem2 = document;
		if (this.runtime.isDirectCanvas)
			elem2 = elem = window["Canvas"];
		else if (this.runtime.isCocoonJs)
			elem2 = elem = window;
		var self = this;
		if (window.navigator["msPointerEnabled"])
		{
			elem.addEventListener("MSPointerDown",
				function(info) {
					self.onPointerStart(info);
				},
				false
			);
			elem.addEventListener("MSPointerMove",
				function(info) {
					self.onPointerMove(info);
				},
				false
			);
			elem2.addEventListener("MSPointerUp",
				function(info) {
					self.onPointerEnd(info);
				},
				false
			);
			elem2.addEventListener("MSPointerCancel",
				function(info) {
					self.onPointerEnd(info);
				},
				false
			);
			if (this.runtime.canvas)
			{
				this.runtime.canvas.addEventListener("MSGestureHold", function(e) {
					e.preventDefault();
				}, false);
				document.addEventListener("MSGestureHold", function(e) {
					e.preventDefault();
				}, false);
			}
		}
		else
		{
			elem.addEventListener("touchstart",
				function(info) {
					self.onTouchStart(info);
				},
				false
			);
			elem.addEventListener("touchmove",
				function(info) {
					self.onTouchMove(info);
				},
				false
			);
			elem2.addEventListener("touchend",
				function(info) {
					self.onTouchEnd(info);
				},
				false
			);
			elem2.addEventListener("touchcancel",
				function(info) {
					self.onTouchEnd(info);
				},
				false
			);
		}
		if (this.isWindows8)
		{
			var win8accelerometerFn = function(e) {
					var reading = e["reading"];
					self.acc_x = reading["accelerationX"];
					self.acc_y = reading["accelerationY"];
					self.acc_z = reading["accelerationZ"];
				};
			var win8inclinometerFn = function(e) {
					var reading = e["reading"];
					self.orient_alpha = reading["yawDegrees"];
					self.orient_beta = reading["pitchDegrees"];
					self.orient_gamma = reading["rollDegrees"];
				};
			var accelerometer = Windows["Devices"]["Sensors"]["Accelerometer"]["getDefault"]();
            if (accelerometer)
			{
                accelerometer["reportInterval"] = Math.max(accelerometer["minimumReportInterval"], 16);
				accelerometer.addEventListener("readingchanged", win8accelerometerFn);
            }
			var inclinometer = Windows["Devices"]["Sensors"]["Inclinometer"]["getDefault"]();
			if (inclinometer)
			{
				inclinometer["reportInterval"] = Math.max(inclinometer["minimumReportInterval"], 16);
				inclinometer.addEventListener("readingchanged", win8inclinometerFn);
			}
			document.addEventListener("visibilitychange", function(e) {
				if (document["hidden"] || document["msHidden"])
				{
					if (accelerometer)
						accelerometer.removeEventListener("readingchanged", win8accelerometerFn);
					if (inclinometer)
						inclinometer.removeEventListener("readingchanged", win8inclinometerFn);
				}
				else
				{
					if (accelerometer)
						accelerometer.addEventListener("readingchanged", win8accelerometerFn);
					if (inclinometer)
						inclinometer.addEventListener("readingchanged", win8inclinometerFn);
				}
			}, false);
		}
		else
		{
			window.addEventListener("deviceorientation", function (eventData) {
				self.orient_alpha = eventData["alpha"] || 0;
				self.orient_beta = eventData["beta"] || 0;
				self.orient_gamma = eventData["gamma"] || 0;
			}, false);
			window.addEventListener("devicemotion", function (eventData) {
				if (eventData["accelerationIncludingGravity"])
				{
					self.acc_g_x = eventData["accelerationIncludingGravity"]["x"];
					self.acc_g_y = eventData["accelerationIncludingGravity"]["y"];
					self.acc_g_z = eventData["accelerationIncludingGravity"]["z"];
				}
				if (eventData["acceleration"])
				{
					self.acc_x = eventData["acceleration"]["x"];
					self.acc_y = eventData["acceleration"]["y"];
					self.acc_z = eventData["acceleration"]["z"];
				}
			}, false);
		}
		if (this.useMouseInput && !this.runtime.isDomFree)
		{
			jQuery(document).mousemove(
				function(info) {
					self.onMouseMove(info);
				}
			);
			jQuery(document).mousedown(
				function(info) {
					self.onMouseDown(info);
				}
			);
			jQuery(document).mouseup(
				function(info) {
					self.onMouseUp(info);
				}
			);
		}
		if (this.runtime.isAppMobi && !this.runtime.isDirectCanvas)
		{
			AppMobi["accelerometer"]["watchAcceleration"](AppMobiGetAcceleration, { "frequency": 40, "adjustForRotation": true });
		}
		if (this.runtime.isPhoneGap)
		{
			navigator["accelerometer"]["watchAcceleration"](PhoneGapGetAcceleration, null, { "frequency": 40 });
		}
		this.runtime.tick2Me(this);
	};
	instanceProto.onPointerMove = function (info)
	{
		if (info["pointerType"] === info["MSPOINTER_TYPE_MOUSE"])
			return;
		if (info.preventDefault)
			info.preventDefault();
		var i = this.findTouch(info["pointerId"]);
		var nowtime = cr.performance_now();
		if (i >= 0)
		{
			var offset = this.runtime.isDomFree ? dummyoffset : jQuery(this.runtime.canvas).offset();
			var t = this.touches[i];
			if (nowtime - t.time < 2)
				return;
			t.lasttime = t.time;
			t.lastx = t.x;
			t.lasty = t.y;
			t.time = nowtime;
			t.x = info.pageX - offset.left;
			t.y = info.pageY - offset.top;
		}
	};
	instanceProto.onPointerStart = function (info)
	{
		if (info["pointerType"] === info["MSPOINTER_TYPE_MOUSE"])
			return;
		if (info.preventDefault)
			info.preventDefault();
		var offset = this.runtime.isDomFree ? dummyoffset : jQuery(this.runtime.canvas).offset();
		var touchx = info.pageX - offset.left;
		var touchy = info.pageY - offset.top;
		var nowtime = cr.performance_now();
		this.trigger_index = this.touches.length;
		this.trigger_id = info["pointerId"];
		this.touches.push({ time: nowtime,
							x: touchx,
							y: touchy,
							lasttime: nowtime,
							lastx: touchx,
							lasty: touchy,
							"id": info["pointerId"],
							startindex: this.trigger_index
						});
		this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnNthTouchStart, this);
		this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnTouchStart, this);
		this.curTouchX = touchx;
		this.curTouchY = touchy;
		this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnTouchObject, this);
	};
	instanceProto.onPointerEnd = function (info)
	{
		if (info["pointerType"] === info["MSPOINTER_TYPE_MOUSE"])
			return;
		if (info.preventDefault)
			info.preventDefault();
		var i = this.findTouch(info["pointerId"]);
		this.trigger_index = (i >= 0 ? this.touches[i].startindex : -1);
		this.trigger_id = (i >= 0 ? this.touches[i]["id"] : -1);
		this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnNthTouchEnd, this);
		this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnTouchEnd, this);
		if (i >= 0)
		{
			this.touches.splice(i, 1);
		}
	};
	instanceProto.onTouchMove = function (info)
	{
		if (info.preventDefault)
			info.preventDefault();
		var nowtime = cr.performance_now();
		var i, len, t, u;
		for (i = 0, len = info.changedTouches.length; i < len; i++)
		{
			t = info.changedTouches[i];
			var j = this.findTouch(t["identifier"]);
			if (j >= 0)
			{
				var offset = this.runtime.isDomFree ? dummyoffset : jQuery(this.runtime.canvas).offset();
				u = this.touches[j];
				if (nowtime - u.time < 2)
					continue;
				u.lasttime = u.time;
				u.lastx = u.x;
				u.lasty = u.y;
				u.time = nowtime;
				u.x = t.pageX - offset.left;
				u.y = t.pageY - offset.top;
			}
		}
	};
	instanceProto.onTouchStart = function (info)
	{
		if (info.preventDefault)
			info.preventDefault();
		var offset = this.runtime.isDomFree ? dummyoffset : jQuery(this.runtime.canvas).offset();
		var nowtime = cr.performance_now();
		var i, len, t, j;
		for (i = 0, len = info.changedTouches.length; i < len; i++)
		{
			t = info.changedTouches[i];
			j = this.findTouch(t["identifier"]);
			if (j !== -1)
				continue;
			var touchx = t.pageX - offset.left;
			var touchy = t.pageY - offset.top;
			this.trigger_index = this.touches.length;
			this.trigger_id = t["identifier"];
			this.touches.push({ time: nowtime,
								x: touchx,
								y: touchy,
								lasttime: nowtime,
								lastx: touchx,
								lasty: touchy,
								"id": t["identifier"],
								startindex: this.trigger_index
							});
			this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnNthTouchStart, this);
			this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnTouchStart, this);
			this.curTouchX = touchx;
			this.curTouchY = touchy;
			this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnTouchObject, this);
		}
	};
	instanceProto.onTouchEnd = function (info)
	{
		if (info.preventDefault)
			info.preventDefault();
		var i, len, t, j;
		for (i = 0, len = info.changedTouches.length; i < len; i++)
		{
			t = info.changedTouches[i];
			j = this.findTouch(t["identifier"]);
			if (j >= 0)
			{
				this.trigger_index = this.touches[j].startindex;
				this.trigger_id = this.touches[j]["id"];
				this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnNthTouchEnd, this);
				this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnTouchEnd, this);
				this.touches.splice(j, 1);
			}
		}
	};
	instanceProto.getAlpha = function ()
	{
		if (this.runtime.isAppMobi && this.orient_alpha === 0 && appmobi_accz !== 0)
			return appmobi_accz * 90;
		else if (this.runtime.isPhoneGap  && this.orient_alpha === 0 && pg_accz !== 0)
			return pg_accz * 90;
		else
			return this.orient_alpha;
	};
	instanceProto.getBeta = function ()
	{
		if (this.runtime.isAppMobi && this.orient_beta === 0 && appmobi_accy !== 0)
			return appmobi_accy * -90;
		else if (this.runtime.isPhoneGap  && this.orient_beta === 0 && pg_accy !== 0)
			return pg_accy * -90;
		else
			return this.orient_beta;
	};
	instanceProto.getGamma = function ()
	{
		if (this.runtime.isAppMobi && this.orient_gamma === 0 && appmobi_accx !== 0)
			return appmobi_accx * 90;
		else if (this.runtime.isPhoneGap  && this.orient_gamma === 0 && pg_accx !== 0)
			return pg_accx * 90;
		else
			return this.orient_gamma;
	};
	var noop_func = function(){};
	instanceProto.onMouseDown = function(info)
	{
		if (info.preventDefault && this.runtime.had_a_click)
			info.preventDefault();
		var t = { pageX: info.pageX, pageY: info.pageY, "identifier": 0 };
		var fakeinfo = { changedTouches: [t] };
		this.onTouchStart(fakeinfo);
		this.mouseDown = true;
	};
	instanceProto.onMouseMove = function(info)
	{
		if (info.preventDefault && this.runtime.had_a_click)
			info.preventDefault();
		if (!this.mouseDown)
			return;
		var t = { pageX: info.pageX, pageY: info.pageY, "identifier": 0 };
		var fakeinfo = { changedTouches: [t] };
		this.onTouchMove(fakeinfo);
	};
	instanceProto.onMouseUp = function(info)
	{
		if (info.preventDefault && this.runtime.had_a_click)
			info.preventDefault();
		this.runtime.had_a_click = true;
		var t = { pageX: info.pageX, pageY: info.pageY, "identifier": 0 };
		var fakeinfo = { changedTouches: [t] };
		this.onTouchEnd(fakeinfo);
		this.mouseDown = false;
	};
	instanceProto.tick2 = function()
	{
		var i, len, t;
		var nowtime = cr.performance_now();
		for (i = 0, len = this.touches.length; i < len; i++)
		{
			t = this.touches[i];
			if (t.time <= nowtime - 50)
				t.lasttime = nowtime;
		}
	};
	function Cnds() {};
	Cnds.prototype.OnTouchStart = function ()
	{
		return true;
	};
	Cnds.prototype.OnTouchEnd = function ()
	{
		return true;
	};
	Cnds.prototype.IsInTouch = function ()
	{
		return this.touches.length;
	};
	Cnds.prototype.OnTouchObject = function (type)
	{
		if (!type)
			return false;
		return this.runtime.testAndSelectCanvasPointOverlap(type, this.curTouchX, this.curTouchY, false);
	};
	Cnds.prototype.IsTouchingObject = function (type)
	{
		if (!type)
			return false;
		var sol = type.getCurrentSol();
		var instances = sol.getObjects();
		var px, py;
		var touching = [];
		var i, leni, j, lenj;
		for (i = 0, leni = instances.length; i < leni; i++)
		{
			var inst = instances[i];
			inst.update_bbox();
			for (j = 0, lenj = this.touches.length; j < lenj; j++)
			{
				var touch = this.touches[j];
				px = inst.layer.canvasToLayer(touch.x, touch.y, true);
				py = inst.layer.canvasToLayer(touch.x, touch.y, false);
				if (inst.contains_pt(px, py))
				{
					touching.push(inst);
					break;
				}
			}
		}
		if (touching.length)
		{
			sol.select_all = false;
			sol.instances = touching;
			return true;
		}
		else
			return false;
	};
	Cnds.prototype.CompareTouchSpeed = function (index, cmp, s)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
			return false;
		var t = this.touches[index];
		var dist = cr.distanceTo(t.x, t.y, t.lastx, t.lasty);
		var timediff = (t.time - t.lasttime) / 1000;
		var speed = 0;
		if (timediff > 0)
			speed = dist / timediff;
		return cr.do_cmp(speed, cmp, s);
	};
	Cnds.prototype.OrientationSupported = function ()
	{
		return typeof window["DeviceOrientationEvent"] !== "undefined";
	};
	Cnds.prototype.MotionSupported = function ()
	{
		return typeof window["DeviceMotionEvent"] !== "undefined";
	};
	Cnds.prototype.CompareOrientation = function (orientation_, cmp_, angle_)
	{
		var v = 0;
		if (orientation_ === 0)
			v = this.getAlpha();
		else if (orientation_ === 1)
			v = this.getBeta();
		else
			v = this.getGamma();
		return cr.do_cmp(v, cmp_, angle_);
	};
	Cnds.prototype.CompareAcceleration = function (acceleration_, cmp_, angle_)
	{
		var v = 0;
		if (acceleration_ === 0)
			v = this.acc_g_x;
		else if (acceleration_ === 1)
			v = this.acc_g_y;
		else if (acceleration_ === 2)
			v = this.acc_g_z;
		else if (acceleration_ === 3)
			v = this.acc_x;
		else if (acceleration_ === 4)
			v = this.acc_y;
		else if (acceleration_ === 5)
			v = this.acc_z;
		return cr.do_cmp(v, cmp_, angle_);
	};
	Cnds.prototype.OnNthTouchStart = function (touch_)
	{
		touch_ = Math.floor(touch_);
		return touch_ === this.trigger_index;
	};
	Cnds.prototype.OnNthTouchEnd = function (touch_)
	{
		touch_ = Math.floor(touch_);
		return touch_ === this.trigger_index;
	};
	Cnds.prototype.HasNthTouch = function (touch_)
	{
		touch_ = Math.floor(touch_);
		return this.touches.length >= touch_ + 1;
	};
	pluginProto.cnds = new Cnds();
	function Exps() {};
	Exps.prototype.TouchCount = function (ret)
	{
		ret.set_int(this.touches.length);
	};
	Exps.prototype.X = function (ret, layerparam)
	{
		if (this.touches.length)
		{
			var layer, oldScale, oldZoomRate, oldParallaxX, oldAngle;
			if (cr.is_undefined(layerparam))
			{
				layer = this.runtime.getLayerByNumber(0);
				oldScale = layer.scale;
				oldZoomRate = layer.zoomRate;
				oldParallaxX = layer.parallaxX;
				oldAngle = layer.angle;
				layer.scale = this.runtime.running_layout.scale;
				layer.zoomRate = 1.0;
				layer.parallaxX = 1.0;
				layer.angle = this.runtime.running_layout.angle;
				ret.set_float(layer.canvasToLayer(this.touches[0].x, this.touches[0].y, true));
				layer.scale = oldScale;
				layer.zoomRate = oldZoomRate;
				layer.parallaxX = oldParallaxX;
				layer.angle = oldAngle;
			}
			else
			{
				if (cr.is_number(layerparam))
					layer = this.runtime.getLayerByNumber(layerparam);
				else
					layer = this.runtime.getLayerByName(layerparam);
				if (layer)
					ret.set_float(layer.canvasToLayer(this.touches[0].x, this.touches[0].y, true));
				else
					ret.set_float(0);
			}
		}
		else
			ret.set_float(0);
	};
	Exps.prototype.XAt = function (ret, index, layerparam)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		var layer, oldScale, oldZoomRate, oldParallaxX, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxX = layer.parallaxX;
			oldAngle = layer.angle;
			layer.scale = this.runtime.running_layout.scale;
			layer.zoomRate = 1.0;
			layer.parallaxX = 1.0;
			layer.angle = this.runtime.running_layout.angle;
			ret.set_float(layer.canvasToLayer(this.touches[index].x, this.touches[index].y, true));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxX = oldParallaxX;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(this.touches[index].x, this.touches[index].y, true));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.XForID = function (ret, id, layerparam)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		var layer, oldScale, oldZoomRate, oldParallaxX, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxX = layer.parallaxX;
			oldAngle = layer.angle;
			layer.scale = this.runtime.running_layout.scale;
			layer.zoomRate = 1.0;
			layer.parallaxX = 1.0;
			layer.angle = this.runtime.running_layout.angle;
			ret.set_float(layer.canvasToLayer(touch.x, touch.y, true));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxX = oldParallaxX;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(touch.x, touch.y, true));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.Y = function (ret, layerparam)
	{
		if (this.touches.length)
		{
			var layer, oldScale, oldZoomRate, oldParallaxY, oldAngle;
			if (cr.is_undefined(layerparam))
			{
				layer = this.runtime.getLayerByNumber(0);
				oldScale = layer.scale;
				oldZoomRate = layer.zoomRate;
				oldParallaxY = layer.parallaxY;
				oldAngle = layer.angle;
				layer.scale = this.runtime.running_layout.scale;
				layer.zoomRate = 1.0;
				layer.parallaxY = 1.0;
				layer.angle = this.runtime.running_layout.angle;
				ret.set_float(layer.canvasToLayer(this.touches[0].x, this.touches[0].y, false));
				layer.scale = oldScale;
				layer.zoomRate = oldZoomRate;
				layer.parallaxY = oldParallaxY;
				layer.angle = oldAngle;
			}
			else
			{
				if (cr.is_number(layerparam))
					layer = this.runtime.getLayerByNumber(layerparam);
				else
					layer = this.runtime.getLayerByName(layerparam);
				if (layer)
					ret.set_float(layer.canvasToLayer(this.touches[0].x, this.touches[0].y, false));
				else
					ret.set_float(0);
			}
		}
		else
			ret.set_float(0);
	};
	Exps.prototype.YAt = function (ret, index, layerparam)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		var layer, oldScale, oldZoomRate, oldParallaxY, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxY = layer.parallaxY;
			oldAngle = layer.angle;
			layer.scale = this.runtime.running_layout.scale;
			layer.zoomRate = 1.0;
			layer.parallaxY = 1.0;
			layer.angle = this.runtime.running_layout.angle;
			ret.set_float(layer.canvasToLayer(this.touches[index].x, this.touches[index].y, false));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxY = oldParallaxY;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(this.touches[index].x, this.touches[index].y, false));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.YForID = function (ret, id, layerparam)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		var layer, oldScale, oldZoomRate, oldParallaxY, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxY = layer.parallaxY;
			oldAngle = layer.angle;
			layer.scale = this.runtime.running_layout.scale;
			layer.zoomRate = 1.0;
			layer.parallaxY = 1.0;
			layer.angle = this.runtime.running_layout.angle;
			ret.set_float(layer.canvasToLayer(touch.x, touch.y, false));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxY = oldParallaxY;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(touch.x, touch.y, false));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.AbsoluteX = function (ret)
	{
		if (this.touches.length)
			ret.set_float(this.touches[0].x);
		else
			ret.set_float(0);
	};
	Exps.prototype.AbsoluteXAt = function (ret, index)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		ret.set_float(this.touches[index].x);
	};
	Exps.prototype.AbsoluteXForID = function (ret, id)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		ret.set_float(touch.x);
	};
	Exps.prototype.AbsoluteY = function (ret)
	{
		if (this.touches.length)
			ret.set_float(this.touches[0].y);
		else
			ret.set_float(0);
	};
	Exps.prototype.AbsoluteYAt = function (ret, index)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		ret.set_float(this.touches[index].y);
	};
	Exps.prototype.AbsoluteYForID = function (ret, id)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		ret.set_float(touch.y);
	};
	Exps.prototype.SpeedAt = function (ret, index)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		var t = this.touches[index];
		var dist = cr.distanceTo(t.x, t.y, t.lastx, t.lasty);
		var timediff = (t.time - t.lasttime) / 1000;
		if (timediff === 0)
			ret.set_float(0);
		else
			ret.set_float(dist / timediff);
	};
	Exps.prototype.SpeedForID = function (ret, id)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		var dist = cr.distanceTo(touch.x, touch.y, touch.lastx, touch.lasty);
		var timediff = (touch.time - touch.lasttime) / 1000;
		if (timediff === 0)
			ret.set_float(0);
		else
			ret.set_float(dist / timediff);
	};
	Exps.prototype.AngleAt = function (ret, index)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		var t = this.touches[index];
		ret.set_float(cr.to_degrees(cr.angleTo(t.lastx, t.lasty, t.x, t.y)));
	};
	Exps.prototype.AngleForID = function (ret, id)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		ret.set_float(cr.to_degrees(cr.angleTo(touch.lastx, touch.lasty, touch.x, touch.y)));
	};
	Exps.prototype.Alpha = function (ret)
	{
		ret.set_float(this.getAlpha());
	};
	Exps.prototype.Beta = function (ret)
	{
		ret.set_float(this.getBeta());
	};
	Exps.prototype.Gamma = function (ret)
	{
		ret.set_float(this.getGamma());
	};
	Exps.prototype.AccelerationXWithG = function (ret)
	{
		ret.set_float(this.acc_g_x);
	};
	Exps.prototype.AccelerationYWithG = function (ret)
	{
		ret.set_float(this.acc_g_y);
	};
	Exps.prototype.AccelerationZWithG = function (ret)
	{
		ret.set_float(this.acc_g_z);
	};
	Exps.prototype.AccelerationX = function (ret)
	{
		ret.set_float(this.acc_x);
	};
	Exps.prototype.AccelerationY = function (ret)
	{
		ret.set_float(this.acc_y);
	};
	Exps.prototype.AccelerationZ = function (ret)
	{
		ret.set_float(this.acc_z);
	};
	Exps.prototype.TouchIndex = function (ret)
	{
		ret.set_int(this.trigger_index);
	};
	Exps.prototype.TouchID = function (ret)
	{
		ret.set_float(this.trigger_id);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.WebStorage = function(runtime)
{
	this.runtime = runtime;
};
(function()
{
	var pluginProto = cr.plugins_.WebStorage.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	var prefix = "";
	var is_arcade = (typeof window["is_scirra_arcade"] !== "undefined");
	if (is_arcade)
		prefix = "arcade" + window["scirra_arcade_id"];
	var logged_sessionnotsupported = false;
	function LogSessionNotSupported()
	{
		if (logged_sessionnotsupported)
			return;
		cr.logexport("[Construct 2] Webstorage plugin: session storage is not supported on this platform. Try using local storage or global variables instead.");
		logged_sessionnotsupported = true;
	};
	instanceProto.onCreate = function()
	{
	};
	function Cnds() {};
	Cnds.prototype.LocalStorageEnabled = function()
	{
		return true;
	};
	Cnds.prototype.SessionStorageEnabled = function()
	{
		return true;
	};
	Cnds.prototype.LocalStorageExists = function(key)
	{
		return localStorage.getItem(prefix + key) != null;
	};
	Cnds.prototype.SessionStorageExists = function(key)
	{
		if (this.runtime.isCocoonJs || !sessionStorage)
		{
			LogSessionNotSupported();
			return false;
		}
		return sessionStorage.getItem(prefix + key) != null;
	};
	Cnds.prototype.OnQuotaExceeded = function ()
	{
		return true;
	};
	Cnds.prototype.CompareKeyText = function (key, text_to_compare, case_sensitive)
	{
		var value = localStorage.getItem(prefix + key) || "";
		if (case_sensitive)
			return value == text_to_compare;
		else
			return cr.equals_nocase(value, text_to_compare);
	};
	Cnds.prototype.CompareKeyNumber = function (key, cmp, x)
	{
		var value = localStorage.getItem(prefix + key) || "";
		return cr.do_cmp(parseFloat(value), cmp, x);
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.StoreLocal = function(key, data)
	{
		try {
			localStorage.setItem(prefix + key, data);
		}
		catch (e)
		{
			this.runtime.trigger(cr.plugins_.WebStorage.prototype.cnds.OnQuotaExceeded, this);
		}
	};
	Acts.prototype.StoreSession = function(key,data)
	{
		if (this.runtime.isCocoonJs || !sessionStorage)
		{
			LogSessionNotSupported();
			return;
		}
		try {
			sessionStorage.setItem(prefix + key, data);
		}
		catch (e)
		{
			this.runtime.trigger(cr.plugins_.WebStorage.prototype.cnds.OnQuotaExceeded, this);
		}
	};
	Acts.prototype.RemoveLocal = function(key)
	{
		localStorage.removeItem(prefix + key);
	};
	Acts.prototype.RemoveSession = function(key)
	{
		if (this.runtime.isCocoonJs || !sessionStorage)
		{
			LogSessionNotSupported();
			return;
		}
		sessionStorage.removeItem(prefix + key);
	};
	Acts.prototype.ClearLocal = function()
	{
		if (!is_arcade)
			localStorage.clear();
	};
	Acts.prototype.ClearSession = function()
	{
		if (this.runtime.isCocoonJs || !sessionStorage)
		{
			LogSessionNotSupported();
			return;
		}
		if (!is_arcade)
			sessionStorage.clear();
	};
	Acts.prototype.JSONLoad = function (json_, mode_)
	{
		var d;
		try {
			d = JSON.parse(json_);
		}
		catch(e) { return; }
		if (!d["c2dictionary"])			// presumably not a c2dictionary object
			return;
		var o = d["data"];
		if (mode_ === 0 && !is_arcade)	// 'set' mode: must clear webstorage first
			localStorage.clear();
		var p;
		for (p in o)
		{
			if (o.hasOwnProperty(p))
			{
				try {
					localStorage.setItem(prefix + p, o[p]);
				}
				catch (e)
				{
					this.runtime.trigger(cr.plugins_.WebStorage.prototype.cnds.OnQuotaExceeded, this);
					return;
				}
			}
		}
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.LocalValue = function(ret,key)
	{
		ret.set_string(localStorage.getItem(prefix + key) || "");
	};
	Exps.prototype.SessionValue = function(ret,key)
	{
		if (this.runtime.isCocoonJs || !sessionStorage)
		{
			LogSessionNotSupported();
			ret.set_string("");
			return;
		}
		ret.set_string(sessionStorage.getItem(prefix + key) || "");
	};
	Exps.prototype.LocalCount = function(ret)
	{
		ret.set_int(is_arcade ? 0 : localStorage.length);
	};
	Exps.prototype.SessionCount = function(ret)
	{
		if (this.runtime.isCocoonJs || !sessionStorage)
		{
			LogSessionNotSupported();
			ret.set_int(0);
			return;
		}
		ret.set_int(is_arcade ? 0 : sessionStorage.length);
	};
	Exps.prototype.LocalAt = function(ret,n)
	{
		if (is_arcade)
			ret.set_string("");
		else
			ret.set_string(localStorage.getItem(localStorage.key(n)) || "");
	};
	Exps.prototype.SessionAt = function(ret,n)
	{
		if (this.runtime.isCocoonJs || !sessionStorage)
		{
			LogSessionNotSupported();
			ret.set_string("");
			return;
		}
		if (is_arcade)
			ret.set_string("");
		else
			ret.set_string(sessionStorage.getItem(sessionStorage.key(n)) || "");
	};
	Exps.prototype.LocalKeyAt = function(ret,n)
	{
		if (is_arcade)
			ret.set_string("");
		else
			ret.set_string(localStorage.key(n) || "");
	};
	Exps.prototype.SessionKeyAt = function(ret,n)
	{
		if (this.runtime.isCocoonJs || !sessionStorage)
		{
			LogSessionNotSupported();
			ret.set_string("");
			return;
		}
		if (is_arcade)
			ret.set_string("");
		else
			ret.set_string(sessionStorage.key(n) || "");
	};
	Exps.prototype.AsJSON = function (ret)
	{
		var o = {}, i, len, k;
		for (i = 0, len = localStorage.length; i < len; i++)
		{
			k = localStorage.key(i);
			if (is_arcade)
			{
				if (k.substr(0, prefix.length) === prefix)
				{
					o[k.substr(prefix.length)] = localStorage.getItem(k);
				}
			}
			else
				o[k] = localStorage.getItem(k);
		}
		ret.set_string(JSON.stringify({
			"c2dictionary": true,
			"data": o
		}));
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.behaviors.Flash = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Flash.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
		this.ontime = 0;
		this.offtime = 0;
		this.stage = 0;			// 0 = on, 1 = off
		this.stagetimeleft = 0;
		this.timeleft = 0;
	};
	behinstProto.saveToJSON = function ()
	{
		return {
			"ontime": this.ontime,
			"offtime": this.offtime,
			"stage": this.stage,
			"stagetimeleft": this.stagetimeleft,
			"timeleft": this.timeleft
		};
	};
	behinstProto.loadFromJSON = function (o)
	{
		this.ontime = o["ontime"];
		this.offtime = o["offtime"];
		this.stage = o["stage"];
		this.stagetimeleft = o["stagetimeleft"];
		this.timeleft = o["timeleft"];
	};
	behinstProto.tick = function ()
	{
		if (this.timeleft <= 0)
			return;		// not flashing
		var dt = this.runtime.getDt(this.inst);
		this.timeleft -= dt;
		if (this.timeleft <= 0)
		{
			this.timeleft = 0;
			this.inst.visible = true;
			this.runtime.redraw = true;
			this.runtime.trigger(cr.behaviors.Flash.prototype.cnds.OnFlashEnded, this.inst);
			return;
		}
		this.stagetimeleft -= dt;
		if (this.stagetimeleft <= 0)
		{
			if (this.stage === 0)
			{
				this.inst.visible = false;
				this.stage = 1;
				this.stagetimeleft += this.offtime;
			}
			else
			{
				this.inst.visible = true;
				this.stage = 0;
				this.stagetimeleft += this.ontime;
			}
			this.runtime.redraw = true;
		}
	};
	function Cnds() {};
	Cnds.prototype.IsFlashing = function ()
	{
		return this.timeleft > 0;
	};
	Cnds.prototype.OnFlashEnded = function ()
	{
		return true;
	};
	behaviorProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.Flash = function (on_, off_, dur_)
	{
		this.ontime = on_;
		this.offtime = off_;
		this.stage = 1;		// always start off
		this.stagetimeleft = off_;
		this.timeleft = dur_;
		this.inst.visible = false;
		this.runtime.redraw = true;
	};
	Acts.prototype.StopFlashing = function ()
	{
		this.timeleft = 0;
		this.inst.visible = true;
		this.runtime.redraw = true;
		return;
	};
	behaviorProto.acts = new Acts();
	function Exps() {};
	behaviorProto.exps = new Exps();
}());
;
;
cr.behaviors.Pin = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Pin.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
		this.pinObject = null;
		this.pinObjectUid = -1;		// for loading
		this.pinAngle = 0;
		this.pinDist = 0;
		this.myStartAngle = 0;
		this.theirStartAngle = 0;
		this.lastKnownAngle = 0;
		this.mode = 0;				// 0 = position & angle; 1 = position; 2 = angle; 3 = rope; 4 = bar
		var self = this;
		if (!this.recycled)
		{
			this.myDestroyCallback = (function(inst) {
													self.onInstanceDestroyed(inst);
												});
		}
		this.runtime.addDestroyCallback(this.myDestroyCallback);
	};
	behinstProto.saveToJSON = function ()
	{
		return {
			"uid": this.pinObject ? this.pinObject.uid : -1,
			"pa": this.pinAngle,
			"pd": this.pinDist,
			"msa": this.myStartAngle,
			"tsa": this.theirStartAngle,
			"lka": this.lastKnownAngle,
			"m": this.mode
		};
	};
	behinstProto.loadFromJSON = function (o)
	{
		this.pinObjectUid = o["uid"];		// wait until afterLoad to look up
		this.pinAngle = o["pa"];
		this.pinDist = o["pd"];
		this.myStartAngle = o["msa"];
		this.theirStartAngle = o["tsa"];
		this.lastKnownAngle = o["lka"];
		this.mode = o["m"];
	};
	behinstProto.afterLoad = function ()
	{
		if (this.pinObjectUid === -1)
			this.pinObject = null;
		else
		{
			this.pinObject = this.runtime.getObjectByUID(this.pinObjectUid);
;
		}
		this.pinObjectUid = -1;
	};
	behinstProto.onInstanceDestroyed = function (inst)
	{
		if (this.pinObject == inst)
			this.pinObject = null;
	};
	behinstProto.onDestroy = function()
	{
		this.pinObject = null;
		this.runtime.removeDestroyCallback(this.myDestroyCallback);
	};
	behinstProto.tick = function ()
	{
	};
	behinstProto.tick2 = function ()
	{
		if (!this.pinObject)
			return;
		if (this.lastKnownAngle !== this.inst.angle)
			this.myStartAngle = cr.clamp_angle(this.myStartAngle + (this.inst.angle - this.lastKnownAngle));
		var newx = this.inst.x;
		var newy = this.inst.y;
		if (this.mode === 3 || this.mode === 4)		// rope mode or bar mode
		{
			var dist = cr.distanceTo(this.inst.x, this.inst.y, this.pinObject.x, this.pinObject.y);
			if ((dist > this.pinDist) || (this.mode === 4 && dist < this.pinDist))
			{
				var a = cr.angleTo(this.pinObject.x, this.pinObject.y, this.inst.x, this.inst.y);
				newx = this.pinObject.x + Math.cos(a) * this.pinDist;
				newy = this.pinObject.y + Math.sin(a) * this.pinDist;
			}
		}
		else
		{
			newx = this.pinObject.x + Math.cos(this.pinObject.angle + this.pinAngle) * this.pinDist;
			newy = this.pinObject.y + Math.sin(this.pinObject.angle + this.pinAngle) * this.pinDist;
		}
		var newangle = cr.clamp_angle(this.myStartAngle + (this.pinObject.angle - this.theirStartAngle));
		this.lastKnownAngle = newangle;
		if ((this.mode === 0 || this.mode === 1 || this.mode === 3 || this.mode === 4)
			&& (this.inst.x !== newx || this.inst.y !== newy))
		{
			this.inst.x = newx;
			this.inst.y = newy;
			this.inst.set_bbox_changed();
		}
		if ((this.mode === 0 || this.mode === 2) && (this.inst.angle !== newangle))
		{
			this.inst.angle = newangle;
			this.inst.set_bbox_changed();
		}
	};
	function Cnds() {};
	Cnds.prototype.IsPinned = function ()
	{
		return !!this.pinObject;
	};
	behaviorProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.Pin = function (obj, mode_)
	{
		if (!obj)
			return;
		var otherinst = obj.getFirstPicked(this.inst);
		if (!otherinst)
			return;
		this.pinObject = otherinst;
		this.pinAngle = cr.angleTo(otherinst.x, otherinst.y, this.inst.x, this.inst.y) - otherinst.angle;
		this.pinDist = cr.distanceTo(otherinst.x, otherinst.y, this.inst.x, this.inst.y);
		this.myStartAngle = this.inst.angle;
		this.lastKnownAngle = this.inst.angle;
		this.theirStartAngle = otherinst.angle;
		this.mode = mode_;
	};
	Acts.prototype.Unpin = function ()
	{
		this.pinObject = null;
	};
	behaviorProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.PinnedUID = function (ret)
	{
		ret.set_int(this.pinObject ? this.pinObject.uid : -1);
	};
	behaviorProto.exps = new Exps();
}());
;
;
cr.behaviors.Platform = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Platform.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	var ANIMMODE_STOPPED = 0;
	var ANIMMODE_MOVING = 1;
	var ANIMMODE_JUMPING = 2;
	var ANIMMODE_FALLING = 3;
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
		this.leftkey = false;
		this.rightkey = false;
		this.jumpkey = false;
		this.jumped = false;			// prevent bunnyhopping
		this.ignoreInput = false;
		this.simleft = false;
		this.simright = false;
		this.simjump = false;
		this.lastFloorObject = null;
		this.loadFloorObject = -1;
		this.lastFloorX = 0;
		this.lastFloorY = 0;
		this.floorIsJumpthru = false;
		this.animMode = ANIMMODE_STOPPED;
		this.fallthrough = 0;			// fall through jump-thru.  >0 to disable, lasts a few ticks
		this.firstTick = true;
		this.dx = 0;
		this.dy = 0;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.updateGravity = function()
	{
		this.downx = Math.cos(this.ga);
		this.downy = Math.sin(this.ga);
		this.rightx = Math.cos(this.ga - Math.PI / 2);
		this.righty = Math.sin(this.ga - Math.PI / 2);
		this.downx = cr.round6dp(this.downx);
		this.downy = cr.round6dp(this.downy);
		this.rightx = cr.round6dp(this.rightx);
		this.righty = cr.round6dp(this.righty);
		this.g1 = this.g;
		if (this.g < 0)
		{
			this.downx *= -1;
			this.downy *= -1;
			this.g = Math.abs(this.g);
		}
	};
	behinstProto.onCreate = function()
	{
		this.maxspeed = this.properties[0];
		this.acc = this.properties[1];
		this.dec = this.properties[2];
		this.jumpStrength = this.properties[3];
		this.g = this.properties[4];
		this.g1 = this.g;
		this.maxFall = this.properties[5];
		this.defaultControls = (this.properties[6] === 1);	// 0=no, 1=yes
		this.enabled = (this.properties[7] !== 0);
		this.wasOnFloor = false;
		this.wasOverJumpthru = this.runtime.testOverlapJumpThru(this.inst);
		this.ga = cr.to_radians(90);
		this.updateGravity();
		var self = this;
		if (this.defaultControls && !this.runtime.isDomFree)
		{
			jQuery(document).keydown(function(info) {
						self.onKeyDown(info);
					});
			jQuery(document).keyup(function(info) {
						self.onKeyUp(info);
					});
		}
		if (!this.recycled)
		{
			this.myDestroyCallback = function(inst) {
										self.onInstanceDestroyed(inst);
									};
		}
		this.runtime.addDestroyCallback(this.myDestroyCallback);
	};
	behinstProto.saveToJSON = function ()
	{
		return {
			"ii": this.ignoreInput,
			"lfx": this.lastFloorX,
			"lfy": this.lastFloorY,
			"lfo": (this.lastFloorObject ? this.lastFloorObject.uid : -1),
			"am": this.animMode,
			"en": this.enabled,
			"fall": this.fallthrough,
			"ft": this.firstTick,
			"dx": this.dx,
			"dy": this.dy,
			"ms": this.maxspeed,
			"acc": this.acc,
			"dec": this.dec,
			"js": this.jumpStrength,
			"g": this.g,
			"g1": this.g1,
			"mf": this.maxFall,
			"wof": this.wasOnFloor,
			"woj": this.wasOverJumpthru,
			"ga": this.ga
		};
	};
	behinstProto.loadFromJSON = function (o)
	{
		this.ignoreInput = o["ii"];
		this.lastFloorX = o["lfx"];
		this.lastFloorY = o["lfy"];
		this.loadFloorObject = o["lfo"];
		this.animMode = o["am"];
		this.enabled = o["en"];
		this.fallthrough = o["fall"];
		this.firstTick = o["ft"];
		this.dx = o["dx"];
		this.dy = o["dy"];
		this.maxspeed = o["ms"];
		this.acc = o["acc"];
		this.dec = o["dec"];
		this.jumpStrength = o["js"];
		this.g = o["g"];
		this.g1 = o["g1"];
		this.maxFall = o["mf"];
		this.wasOnFloor = o["wof"];
		this.wasOverJumpthru = o["woj"];
		this.ga = o["ga"];
		this.leftkey = false;
		this.rightkey = false;
		this.jumpkey = false;
		this.jumped = false;
		this.simleft = false;
		this.simright = false;
		this.simjump = false;
		this.updateGravity();
	};
	behinstProto.afterLoad = function ()
	{
		if (this.loadFloorObject === -1)
			this.lastFloorObject = null;
		else
			this.lastFloorObject = this.runtime.getObjectByUID(this.loadFloorObject);
	};
	behinstProto.onInstanceDestroyed = function (inst)
	{
		if (this.lastFloorObject == inst)
			this.lastFloorObject = null;
	};
	behinstProto.onDestroy = function ()
	{
		this.lastFloorObject = null;
		this.runtime.removeDestroyCallback(this.myDestroyCallback);
	};
	behinstProto.onKeyDown = function (info)
	{
		switch (info.which) {
		case 38:	// up
			info.preventDefault();
			this.jumpkey = true;
			break;
		case 37:	// left
			info.preventDefault();
			this.leftkey = true;
			break;
		case 39:	// right
			info.preventDefault();
			this.rightkey = true;
			break;
		}
	};
	behinstProto.onKeyUp = function (info)
	{
		switch (info.which) {
		case 38:	// up
			info.preventDefault();
			this.jumpkey = false;
			this.jumped = false;
			break;
		case 37:	// left
			info.preventDefault();
			this.leftkey = false;
			break;
		case 39:	// right
			info.preventDefault();
			this.rightkey = false;
			break;
		}
	};
	behinstProto.getGDir = function ()
	{
		if (this.g < 0)
			return -1;
		else
			return 1;
	};
	behinstProto.isOnFloor = function ()
	{
		var ret = null;
		var ret2 = null;
		var i, len, j;
		var oldx = this.inst.x;
		var oldy = this.inst.y;
		this.inst.x += this.downx;
		this.inst.y += this.downy;
		this.inst.set_bbox_changed();
		if (this.lastFloorObject && this.runtime.testOverlap(this.inst, this.lastFloorObject))
		{
			this.inst.x = oldx;
			this.inst.y = oldy;
			this.inst.set_bbox_changed();
			return this.lastFloorObject;
		}
		else
		{
			ret = this.runtime.testOverlapSolid(this.inst);
			if (!ret && this.fallthrough === 0)
				ret2 = this.runtime.testOverlapJumpThru(this.inst, true);
			this.inst.x = oldx;
			this.inst.y = oldy;
			this.inst.set_bbox_changed();
			if (ret)		// was overlapping solid
			{
				if (this.runtime.testOverlap(this.inst, ret))
					return null;
				else
				{
					this.floorIsJumpthru = false;
					return ret;
				}
			}
			if (ret2 && ret2.length)
			{
				for (i = 0, j = 0, len = ret2.length; i < len; i++)
				{
					ret2[j] = ret2[i];
					if (!this.runtime.testOverlap(this.inst, ret2[i]))
						j++;
				}
				if (j >= 1)
				{
					this.floorIsJumpthru = true;
					return ret2[0];
				}
			}
			return null;
		}
	};
	behinstProto.tick = function ()
	{
	};
	behinstProto.posttick = function ()
	{
		var dt = this.runtime.getDt(this.inst);
		var mx, my, obstacle, mag, allover, i, len, j, oldx, oldy;
		if (!this.jumpkey && !this.simjump)
			this.jumped = false;
		var left = this.leftkey || this.simleft;
		var right = this.rightkey || this.simright;
		var jump = (this.jumpkey || this.simjump) && !this.jumped;
		this.simleft = false;
		this.simright = false;
		this.simjump = false;
		if (!this.enabled)
			return;
		if (this.ignoreInput)
		{
			left = false;
			right = false;
			jump = false;
		}
		var lastFloor = this.lastFloorObject;
		var floor_moved = false;
		if (this.firstTick)
		{
			if (this.runtime.testOverlapSolid(this.inst) || this.runtime.testOverlapJumpThru(this.inst))
			{
				this.runtime.pushOutSolid(this.inst, -this.downx, -this.downy, 4, true);
			}
			this.firstTick = false;
		}
		if (lastFloor && this.dy === 0 && (lastFloor.y !== this.lastFloorY || lastFloor.x !== this.lastFloorX))
		{
			mx = (lastFloor.x - this.lastFloorX);
			my = (lastFloor.y - this.lastFloorY);
			this.inst.x += mx;
			this.inst.y += my;
			this.inst.set_bbox_changed();
			this.lastFloorX = lastFloor.x;
			this.lastFloorY = lastFloor.y;
			floor_moved = true;
			if (this.runtime.testOverlapSolid(this.inst))
			{
				this.runtime.pushOutSolid(this.inst, -mx, -my, Math.sqrt(mx * mx + my * my) * 2.5);
			}
		}
		var floor_ = this.isOnFloor();
		var collobj = this.runtime.testOverlapSolid(this.inst);
		if (collobj)
		{
			if (this.runtime.pushOutSolidNearest(this.inst, Math.max(this.inst.width, this.inst.height) / 2))
				this.runtime.registerCollision(this.inst, collobj);
			else
				return;
		}
		if (floor_)
		{
			if (this.dy > 0)
			{
				if (!this.wasOnFloor)
				{
					this.runtime.pushInFractional(this.inst, -this.downx, -this.downy, floor_, 16);
					this.wasOnFloor = true;
				}
				this.dy = 0;
			}
			if (lastFloor != floor_)
			{
				this.lastFloorObject = floor_;
				this.lastFloorX = floor_.x;
				this.lastFloorY = floor_.y;
				this.runtime.registerCollision(this.inst, floor_);
			}
			else if (floor_moved)
			{
				collobj = this.runtime.testOverlapSolid(this.inst);
				if (collobj)
				{
					this.runtime.registerCollision(this.inst, collobj);
					if (mx !== 0)
					{
						if (mx > 0)
							this.runtime.pushOutSolid(this.inst, -this.rightx, -this.righty);
						else
							this.runtime.pushOutSolid(this.inst, this.rightx, this.righty);
					}
					this.runtime.pushOutSolid(this.inst, -this.downx, -this.downy);
				}
			}
			if (jump)
			{
				oldx = this.inst.x;
				oldy = this.inst.y;
				this.inst.x -= this.downx;
				this.inst.y -= this.downy;
				this.inst.set_bbox_changed();
				if (!this.runtime.testOverlapSolid(this.inst))
				{
					this.runtime.trigger(cr.behaviors.Platform.prototype.cnds.OnJump, this.inst);
					this.animMode = ANIMMODE_JUMPING;
					this.dy = -this.jumpStrength;
					this.jumped = true;
				}
				else
					jump = false;
				this.inst.x = oldx;
				this.inst.y = oldy;
				this.inst.set_bbox_changed();
			}
		}
		else
		{
			this.lastFloorObject = null;
			this.dy += this.g * dt;
			if (this.dy > this.maxFall)
				this.dy = this.maxFall;
			if (jump)
				this.jumped = true;
		}
		this.wasOnFloor = !!floor_;
		if (left == right)	// both up or both down
		{
			if (this.dx < 0)
			{
				this.dx += this.dec * dt;
				if (this.dx > 0)
					this.dx = 0;
			}
			else if (this.dx > 0)
			{
				this.dx -= this.dec * dt;
				if (this.dx < 0)
					this.dx = 0;
			}
		}
		if (left && !right)
		{
			if (this.dx > 0)
				this.dx -= (this.acc + this.dec) * dt;
			else
				this.dx -= this.acc * dt;
		}
		if (right && !left)
		{
			if (this.dx < 0)
				this.dx += (this.acc + this.dec) * dt;
			else
				this.dx += this.acc * dt;
		}
		if (this.dx > this.maxspeed)
			this.dx = this.maxspeed;
		else if (this.dx < -this.maxspeed)
			this.dx = -this.maxspeed;
		var landed = false;
		if (this.dx !== 0)
		{
			oldx = this.inst.x;
			oldy = this.inst.y;
			mx = this.dx * dt * this.rightx;
			my = this.dx * dt * this.righty;
			this.inst.x += this.rightx * (this.dx > 1 ? 1 : -1) - this.downx;
			this.inst.y += this.righty * (this.dx > 1 ? 1 : -1) - this.downy;
			this.inst.set_bbox_changed();
			var is_jumpthru = false;
			var slope_too_steep = this.runtime.testOverlapSolid(this.inst);
			/*
			if (!slope_too_steep && floor_)
			{
				slope_too_steep = this.runtime.testOverlapJumpThru(this.inst);
				is_jumpthru = true;
				if (slope_too_steep)
				{
					this.inst.x = oldx;
					this.inst.y = oldy;
					this.inst.set_bbox_changed();
					if (this.runtime.testOverlap(this.inst, slope_too_steep))
					{
						slope_too_steep = null;
						is_jumpthru = false;
					}
				}
			}
			*/
			this.inst.x = oldx + mx;
			this.inst.y = oldy + my;
			this.inst.set_bbox_changed();
			obstacle = this.runtime.testOverlapSolid(this.inst);
			if (!obstacle && floor_)
			{
				obstacle = this.runtime.testOverlapJumpThru(this.inst);
				if (obstacle)
				{
					this.inst.x = oldx;
					this.inst.y = oldy;
					this.inst.set_bbox_changed();
					if (this.runtime.testOverlap(this.inst, obstacle))
					{
						obstacle = null;
						is_jumpthru = false;
					}
					else
						is_jumpthru = true;
					this.inst.x = oldx + mx;
					this.inst.y = oldy + my;
					this.inst.set_bbox_changed();
				}
			}
			if (obstacle)
			{
				var push_dist = Math.abs(this.dx * dt) + 2;
				if (slope_too_steep || !this.runtime.pushOutSolid(this.inst, -this.downx, -this.downy, push_dist, is_jumpthru, obstacle))
				{
					this.runtime.registerCollision(this.inst, obstacle);
					push_dist = Math.max(Math.abs(this.dx * dt * 2.5), 30);
					if (!this.runtime.pushOutSolid(this.inst, this.rightx * (this.dx < 0 ? 1 : -1), this.righty * (this.dx < 0 ? 1 : -1), push_dist, false))
					{
						this.inst.x = oldx;
						this.inst.y = oldy;
						this.inst.set_bbox_changed();
					}
					else if (floor_ && !is_jumpthru && !this.floorIsJumpthru)
					{
						oldx = this.inst.x;
						oldy = this.inst.y;
						this.inst.x += this.downx;
						this.inst.y += this.downy;
						if (this.runtime.testOverlapSolid(this.inst))
						{
							if (!this.runtime.pushOutSolid(this.inst, -this.downx, -this.downy, 3, false))
							{
								this.inst.x = oldx;
								this.inst.y = oldy;
								this.inst.set_bbox_changed();
							}
						}
						else
						{
							this.inst.x = oldx;
							this.inst.y = oldy;
							this.inst.set_bbox_changed();
						}
					}
					if (!is_jumpthru)
						this.dx = 0;	// stop
				}
				else if (!slope_too_steep && Math.abs(this.dy) < 15)
				{
					this.dy = 0;
					if (!floor_)
						landed = true;
				}
			}
			else
			{
				var newfloor = this.isOnFloor();
				if (floor_ && !newfloor)
				{
					mag = Math.ceil(Math.abs(this.dx * dt)) + 2;
					oldx = this.inst.x;
					oldy = this.inst.y;
					this.inst.x += this.downx * mag;
					this.inst.y += this.downy * mag;
					this.inst.set_bbox_changed();
					if (this.runtime.testOverlapSolid(this.inst) || this.runtime.testOverlapJumpThru(this.inst))
						this.runtime.pushOutSolid(this.inst, -this.downx, -this.downy, mag + 2, true);
					else
					{
						this.inst.x = oldx;
						this.inst.y = oldy;
						this.inst.set_bbox_changed();
					}
				}
				else if (newfloor && this.dy === 0)
				{
					this.runtime.pushInFractional(this.inst, -this.downx, -this.downy, newfloor, 16);
				}
			}
		}
		if (this.dy !== 0)
		{
			oldx = this.inst.x;
			oldy = this.inst.y;
			this.inst.x += this.dy * dt * this.downx;
			this.inst.y += this.dy * dt * this.downy;
			var newx = this.inst.x;
			var newy = this.inst.y;
			this.inst.set_bbox_changed();
			collobj = this.runtime.testOverlapSolid(this.inst);
			var fell_on_jumpthru = false;
			if (!collobj && (this.dy > 0) && !floor_)
			{
				allover = this.fallthrough > 0 ? null : this.runtime.testOverlapJumpThru(this.inst, true);
				if (allover && allover.length)
				{
					if (this.wasOverJumpthru)
					{
						this.inst.x = oldx;
						this.inst.y = oldy;
						this.inst.set_bbox_changed();
						for (i = 0, j = 0, len = allover.length; i < len; i++)
						{
							allover[j] = allover[i];
							if (!this.runtime.testOverlap(this.inst, allover[i]))
								j++;
						}
						allover.length = j;
						this.inst.x = newx;
						this.inst.y = newy;
						this.inst.set_bbox_changed();
					}
					if (allover.length >= 1)
						collobj = allover[0];
				}
				fell_on_jumpthru = !!collobj;
			}
			if (collobj)
			{
				this.runtime.registerCollision(this.inst, collobj);
				var push_dist = (fell_on_jumpthru ? Math.abs(this.dy * dt * 2.5 + 10) : Math.max(Math.abs(this.dy * dt * 2.5 + 10), 30));
				if (!this.runtime.pushOutSolid(this.inst, this.downx * (this.dy < 0 ? 1 : -1), this.downy * (this.dy < 0 ? 1 : -1), push_dist, fell_on_jumpthru, collobj))
				{
					this.inst.x = oldx;
					this.inst.y = oldy;
					this.inst.set_bbox_changed();
					this.wasOnFloor = true;		// prevent adjustment for unexpected floor landings
					if (!fell_on_jumpthru)
						this.dy = 0;	// stop
				}
				else
				{
					this.lastFloorObject = collobj;
					this.lastFloorX = collobj.x;
					this.lastFloorY = collobj.y;
					this.floorIsJumpthru = fell_on_jumpthru;
					if (fell_on_jumpthru)
						landed = true;
					this.dy = 0;	// stop
				}
			}
		}
		if (this.animMode !== ANIMMODE_FALLING && this.dy > 0 && !floor_)
		{
			this.runtime.trigger(cr.behaviors.Platform.prototype.cnds.OnFall, this.inst);
			this.animMode = ANIMMODE_FALLING;
		}
		if (floor_ || landed)
		{
			if (this.animMode === ANIMMODE_FALLING || landed || (jump && this.dy === 0))
			{
				this.runtime.trigger(cr.behaviors.Platform.prototype.cnds.OnLand, this.inst);
				if (this.dx === 0 && this.dy === 0)
					this.animMode = ANIMMODE_STOPPED;
				else
					this.animMode = ANIMMODE_MOVING;
			}
			else
			{
				if (this.animMode !== ANIMMODE_STOPPED && this.dx === 0 && this.dy === 0)
				{
					this.runtime.trigger(cr.behaviors.Platform.prototype.cnds.OnStop, this.inst);
					this.animMode = ANIMMODE_STOPPED;
				}
				if (this.animMode !== ANIMMODE_MOVING && (this.dx !== 0 || this.dy !== 0) && !jump)
				{
					this.runtime.trigger(cr.behaviors.Platform.prototype.cnds.OnMove, this.inst);
					this.animMode = ANIMMODE_MOVING;
				}
			}
		}
		if (this.fallthrough > 0)
			this.fallthrough--;
		this.wasOverJumpthru = this.runtime.testOverlapJumpThru(this.inst);
	};
	function Cnds() {};
	Cnds.prototype.IsMoving = function ()
	{
		return this.dx !== 0 || this.dy !== 0;
	};
	Cnds.prototype.CompareSpeed = function (cmp, s)
	{
		var speed = Math.sqrt(this.dx * this.dx + this.dy * this.dy);
		return cr.do_cmp(speed, cmp, s);
	};
	Cnds.prototype.IsOnFloor = function ()
	{
		if (this.dy !== 0)
			return false;
		var ret = null;
		var ret2 = null;
		var i, len, j;
		var oldx = this.inst.x;
		var oldy = this.inst.y;
		this.inst.x += this.downx;
		this.inst.y += this.downy;
		this.inst.set_bbox_changed();
		ret = this.runtime.testOverlapSolid(this.inst);
		if (!ret && this.fallthrough === 0)
			ret2 = this.runtime.testOverlapJumpThru(this.inst, true);
		this.inst.x = oldx;
		this.inst.y = oldy;
		this.inst.set_bbox_changed();
		if (ret)		// was overlapping solid
		{
			return !this.runtime.testOverlap(this.inst, ret);
		}
		if (ret2 && ret2.length)
		{
			for (i = 0, j = 0, len = ret2.length; i < len; i++)
			{
				ret2[j] = ret2[i];
				if (!this.runtime.testOverlap(this.inst, ret2[i]))
					j++;
			}
			if (j >= 1)
				return true;
		}
		return false;
	};
	Cnds.prototype.IsByWall = function (side)
	{
		var ret = false;
		var oldx = this.inst.x;
		var oldy = this.inst.y;
		this.inst.x -= this.downx * 3;
		this.inst.y -= this.downy * 3;
		this.inst.set_bbox_changed();
		if (this.runtime.testOverlapSolid(this.inst))
		{
			this.inst.x = oldx;
			this.inst.y = oldy;
			this.inst.set_bbox_changed();
			return false;
		}
		if (side === 0)		// left
		{
			this.inst.x -= this.rightx * 2;
			this.inst.y -= this.righty * 2;
		}
		else
		{
			this.inst.x += this.rightx * 2;
			this.inst.y += this.righty * 2;
		}
		this.inst.set_bbox_changed();
		ret = this.runtime.testOverlapSolid(this.inst);
		this.inst.x = oldx;
		this.inst.y = oldy;
		this.inst.set_bbox_changed();
		return ret;
	};
	Cnds.prototype.IsJumping = function ()
	{
		return this.dy < 0;
	};
	Cnds.prototype.IsFalling = function ()
	{
		return this.dy > 0;
	};
	Cnds.prototype.OnJump = function ()
	{
		return true;
	};
	Cnds.prototype.OnFall = function ()
	{
		return true;
	};
	Cnds.prototype.OnStop = function ()
	{
		return true;
	};
	Cnds.prototype.OnMove = function ()
	{
		return true;
	};
	Cnds.prototype.OnLand = function ()
	{
		return true;
	};
	behaviorProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetIgnoreInput = function (ignoring)
	{
		this.ignoreInput = ignoring;
	};
	Acts.prototype.SetMaxSpeed = function (maxspeed)
	{
		this.maxspeed = maxspeed;
		if (this.maxspeed < 0)
			this.maxspeed = 0;
	};
	Acts.prototype.SetAcceleration = function (acc)
	{
		this.acc = acc;
		if (this.acc < 0)
			this.acc = 0;
	};
	Acts.prototype.SetDeceleration = function (dec)
	{
		this.dec = dec;
		if (this.dec < 0)
			this.dec = 0;
	};
	Acts.prototype.SetJumpStrength = function (js)
	{
		this.jumpStrength = js;
		if (this.jumpStrength < 0)
			this.jumpStrength = 0;
	};
	Acts.prototype.SetGravity = function (grav)
	{
		if (this.g1 === grav)
			return;		// no change
		this.g = grav;
		this.updateGravity();
		if (this.runtime.testOverlapSolid(this.inst))
		{
			this.runtime.pushOutSolid(this.inst, this.downx, this.downy, 10);
			this.inst.x += this.downx * 2;
			this.inst.y += this.downy * 2;
			this.inst.set_bbox_changed();
		}
		this.lastFloorObject = null;
	};
	Acts.prototype.SetMaxFallSpeed = function (mfs)
	{
		this.maxFall = mfs;
		if (this.maxFall < 0)
			this.maxFall = 0;
	};
	Acts.prototype.SimulateControl = function (ctrl)
	{
		switch (ctrl) {
		case 0:		this.simleft = true;	break;
		case 1:		this.simright = true;	break;
		case 2:		this.simjump = true;	break;
		}
	};
	Acts.prototype.SetVectorX = function (vx)
	{
		this.dx = vx;
	};
	Acts.prototype.SetVectorY = function (vy)
	{
		this.dy = vy;
	};
	Acts.prototype.SetGravityAngle = function (a)
	{
		a = cr.to_radians(a);
		a = cr.clamp_angle(a);
		if (this.ga === a)
			return;		// no change
		this.ga = a;
		this.updateGravity();
		this.lastFloorObject = null;
	};
	Acts.prototype.SetEnabled = function (en)
	{
		this.enabled = (en === 1);
	};
	Acts.prototype.FallThrough = function ()
	{
		var oldx = this.inst.x;
		var oldy = this.inst.y;
		this.inst.x += this.downx;
		this.inst.y += this.downy;
		this.inst.set_bbox_changed();
		var overlaps = this.runtime.testOverlapJumpThru(this.inst, false);
		this.inst.x = oldx;
		this.inst.y = oldy;
		this.inst.set_bbox_changed();
		if (!overlaps)
			return;
		this.fallthrough = 3;			// disable jumpthrus for 3 ticks (1 doesn't do it, 2 does, 3 to be on safe side)
		this.lastFloorObject = null;
	};
	behaviorProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.Speed = function (ret)
	{
		ret.set_float(Math.sqrt(this.dx * this.dx + this.dy * this.dy));
	};
	Exps.prototype.MaxSpeed = function (ret)
	{
		ret.set_float(this.maxspeed);
	};
	Exps.prototype.Acceleration = function (ret)
	{
		ret.set_float(this.acc);
	};
	Exps.prototype.Deceleration = function (ret)
	{
		ret.set_float(this.dec);
	};
	Exps.prototype.JumpStrength = function (ret)
	{
		ret.set_float(this.jumpStrength);
	};
	Exps.prototype.Gravity = function (ret)
	{
		ret.set_float(this.g);
	};
	Exps.prototype.GravityAngle = function (ret)
	{
		ret.set_float(cr.to_degrees(this.ga));
	};
	Exps.prototype.MaxFallSpeed = function (ret)
	{
		ret.set_float(this.maxFall);
	};
	Exps.prototype.MovingAngle = function (ret)
	{
		ret.set_float(cr.to_degrees(Math.atan2(this.dy, this.dx)));
	};
	Exps.prototype.VectorX = function (ret)
	{
		ret.set_float(this.dx);
	};
	Exps.prototype.VectorY = function (ret)
	{
		ret.set_float(this.dy);
	};
	behaviorProto.exps = new Exps();
}());
;
;
cr.behaviors.Rotate = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Rotate.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
		this.speed = cr.to_radians(this.properties[0]);
		this.acc = cr.to_radians(this.properties[1]);
	};
	behinstProto.saveToJSON = function ()
	{
		return {
			"speed": this.speed,
			"acc": this.acc
		};
	};
	behinstProto.loadFromJSON = function (o)
	{
		this.speed = o["speed"];
		this.acc = o["acc"];
	};
	behinstProto.tick = function ()
	{
		var dt = this.runtime.getDt(this.inst);
		if (dt === 0)
			return;
		if (this.acc !== 0)
			this.speed += this.acc * dt;
		if (this.speed !== 0)
		{
			this.inst.angle = cr.clamp_angle(this.inst.angle + this.speed * dt);
			this.inst.set_bbox_changed();
		}
	};
	function Cnds() {};
	behaviorProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetSpeed = function (s)
	{
		this.speed = cr.to_radians(s);
	};
	Acts.prototype.SetAcceleration = function (a)
	{
		this.acc = cr.to_radians(a);
	};
	behaviorProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.Speed = function (ret)
	{
		ret.set_float(cr.to_degrees(this.speed));
	};
	Exps.prototype.Acceleration = function (ret)
	{
		ret.set_float(cr.to_degrees(this.acc));
	};
	behaviorProto.exps = new Exps();
}());
;
;
cr.behaviors.Sin = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Sin.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
		this.i = 0;		// period offset (radians)
	};
	var behinstProto = behaviorProto.Instance.prototype;
	var _2pi = 2 * Math.PI;
	var _pi_2 = Math.PI / 2;
	var _3pi_2 = (3 * Math.PI) / 2;
	behinstProto.onCreate = function()
	{
		this.active = (this.properties[0] === 1);
		this.movement = this.properties[1]; // 0=Horizontal|1=Vertical|2=Size|3=Width|4=Height|5=Angle|6=Opacity|7=Value only
		this.wave = this.properties[2];		// 0=Sine|1=Triangle|2=Sawtooth|3=Reverse sawtooth|4=Square
		this.period = this.properties[3];
		this.period += Math.random() * this.properties[4];								// period random
		if (this.period === 0)
			this.i = 0;
		else
		{
			this.i = (this.properties[5] / this.period) * _2pi;								// period offset
			this.i += ((Math.random() * this.properties[6]) / this.period) * _2pi;			// period offset random
		}
		this.mag = this.properties[7];													// magnitude
		this.mag += Math.random() * this.properties[8];									// magnitude random
		this.initialValue = 0;
		this.initialValue2 = 0;
		this.ratio = 0;
		this.init();
	};
	behinstProto.saveToJSON = function ()
	{
		return {
			"i": this.i,
			"a": this.active,
			"mv": this.movement,
			"w": this.wave,
			"p": this.period,
			"mag": this.mag,
			"iv": this.initialValue,
			"iv2": this.initialValue2,
			"r": this.ratio,
			"lkv": this.lastKnownValue,
			"lkv2": this.lastKnownValue2
		};
	};
	behinstProto.loadFromJSON = function (o)
	{
		this.i = o["i"];
		this.active = o["a"];
		this.movement = o["mv"];
		this.wave = o["w"];
		this.period = o["p"];
		this.mag = o["mag"];
		this.initialValue = o["iv"];
		this.initialValue2 = o["iv2"] || 0;
		this.ratio = o["r"];
		this.lastKnownValue = o["lkv"];
		this.lastKnownValue2 = o["lkv2"] || 0;
	};
	behinstProto.init = function ()
	{
		switch (this.movement) {
		case 0:		// horizontal
			this.initialValue = this.inst.x;
			break;
		case 1:		// vertical
			this.initialValue = this.inst.y;
			break;
		case 2:		// size
			this.initialValue = this.inst.width;
			this.ratio = this.inst.height / this.inst.width;
			break;
		case 3:		// width
			this.initialValue = this.inst.width;
			break;
		case 4:		// height
			this.initialValue = this.inst.height;
			break;
		case 5:		// angle
			this.initialValue = this.inst.angle;
			this.mag = cr.to_radians(this.mag);		// convert magnitude from degrees to radians
			break;
		case 6:		// opacity
			this.initialValue = this.inst.opacity;
			break;
		case 7:
			this.initialValue = 0;
			break;
		case 8:		// forwards/backwards
			this.initialValue = this.inst.x;
			this.initialValue2 = this.inst.y;
			break;
		default:
;
		}
		this.lastKnownValue = this.initialValue;
		this.lastKnownValue2 = this.initialValue2;
	};
	behinstProto.waveFunc = function (x)
	{
		x = x % _2pi;
		switch (this.wave) {
		case 0:		// sine
			return Math.sin(x);
		case 1:		// triangle
			if (x <= _pi_2)
				return x / _pi_2;
			else if (x <= _3pi_2)
				return 1 - (2 * (x - _pi_2) / Math.PI);
			else
				return (x - _3pi_2) / _pi_2 - 1;
		case 2:		// sawtooth
			return 2 * x / _2pi - 1;
		case 3:		// reverse sawtooth
			return -2 * x / _2pi + 1;
		case 4:		// square
			return x < Math.PI ? -1 : 1;
		};
		return 0;
	};
	behinstProto.tick = function ()
	{
		var dt = this.runtime.getDt(this.inst);
		if (!this.active || dt === 0)
			return;
		if (this.period === 0)
			this.i = 0;
		else
		{
			this.i += (dt / this.period) * _2pi;
			this.i = this.i % _2pi;
		}
		switch (this.movement) {
		case 0:		// horizontal
			if (this.inst.x !== this.lastKnownValue)
				this.initialValue += this.inst.x - this.lastKnownValue;
			this.inst.x = this.initialValue + this.waveFunc(this.i) * this.mag;
			this.lastKnownValue = this.inst.x;
			break;
		case 1:		// vertical
			if (this.inst.y !== this.lastKnownValue)
				this.initialValue += this.inst.y - this.lastKnownValue;
			this.inst.y = this.initialValue + this.waveFunc(this.i) * this.mag;
			this.lastKnownValue = this.inst.y;
			break;
		case 2:		// size
			this.inst.width = this.initialValue + this.waveFunc(this.i) * this.mag;
			this.inst.height = this.inst.width * this.ratio;
			break;
		case 3:		// width
			this.inst.width = this.initialValue + this.waveFunc(this.i) * this.mag;
			break;
		case 4:		// height
			this.inst.height = this.initialValue + this.waveFunc(this.i) * this.mag;
			break;
		case 5:		// angle
			if (this.inst.angle !== this.lastKnownValue)
				this.initialValue = cr.clamp_angle(this.initialValue + (this.inst.angle - this.lastKnownValue));
			this.inst.angle = cr.clamp_angle(this.initialValue + this.waveFunc(this.i) * this.mag);
			this.lastKnownValue = this.inst.angle;
			break;
		case 6:		// opacity
			this.inst.opacity = this.initialValue + (this.waveFunc(this.i) * this.mag) / 100;
			if (this.inst.opacity < 0)
				this.inst.opacity = 0;
			else if (this.inst.opacity > 1)
				this.inst.opacity = 1;
			break;
		case 8:		// forwards/backwards
			if (this.inst.x !== this.lastKnownValue)
				this.initialValue += this.inst.x - this.lastKnownValue;
			if (this.inst.y !== this.lastKnownValue2)
				this.initialValue2 += this.inst.y - this.lastKnownValue2;
			this.inst.x = this.initialValue + Math.cos(this.inst.angle) * this.waveFunc(this.i) * this.mag;
			this.inst.y = this.initialValue2 + Math.sin(this.inst.angle) * this.waveFunc(this.i) * this.mag;
			this.lastKnownValue = this.inst.x;
			this.lastKnownValue2 = this.inst.y;
			break;
		}
		this.inst.set_bbox_changed();
	};
	behinstProto.onSpriteFrameChanged = function (prev_frame, next_frame)
	{
		switch (this.movement) {
		case 2:	// size
			this.initialValue *= (next_frame.width / prev_frame.width);
			this.ratio = next_frame.height / next_frame.width;
			break;
		case 3:	// width
			this.initialValue *= (next_frame.width / prev_frame.width);
			break;
		case 4:	// height
			this.initialValue *= (next_frame.height / prev_frame.height);
			break;
		}
	};
	function Cnds() {};
	Cnds.prototype.IsActive = function ()
	{
		return this.active;
	};
	Cnds.prototype.CompareMovement = function (m)
	{
		return this.movement === m;
	};
	Cnds.prototype.ComparePeriod = function (cmp, v)
	{
		return cr.do_cmp(this.period, cmp, v);
	};
	Cnds.prototype.CompareMagnitude = function (cmp, v)
	{
		if (this.movement === 5)
			return cr.do_cmp(this.mag, cmp, cr.to_radians(v));
		else
			return cr.do_cmp(this.mag, cmp, v);
	};
	Cnds.prototype.CompareWave = function (w)
	{
		return this.wave === w;
	};
	behaviorProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetActive = function (a)
	{
		this.active = (a === 1);
	};
	Acts.prototype.SetPeriod = function (x)
	{
		this.period = x;
	};
	Acts.prototype.SetMagnitude = function (x)
	{
		this.mag = x;
		if (this.movement === 5)	// angle
			this.mag = cr.to_radians(this.mag);
	};
	Acts.prototype.SetMovement = function (m)
	{
		if (this.movement === 5)
			this.mag = cr.to_degrees(this.mag);
		this.movement = m;
		this.init();
	};
	Acts.prototype.SetWave = function (w)
	{
		this.wave = w;
	};
	behaviorProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.CyclePosition = function (ret)
	{
		ret.set_float(this.i / _2pi);
	};
	Exps.prototype.Period = function (ret)
	{
		ret.set_float(this.period);
	};
	Exps.prototype.Magnitude = function (ret)
	{
		if (this.movement === 5)	// angle
			ret.set_float(cr.to_degrees(this.mag));
		else
			ret.set_float(this.mag);
	};
	Exps.prototype.Value = function (ret)
	{
		ret.set_float(this.waveFunc(this.i) * this.mag);
	};
	behaviorProto.exps = new Exps();
}());
;
;
function trim (str) {
    return str.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
}
cr.behaviors.lunarray_Tween = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.lunarray_Tween.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
		this.i = 0;		// progress
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.groupUpdateProgress = function(v)
	{
		if (v > 1) v = 1;
		if (cr.lunarray_tweenProgress[this.group] = -1) cr.lunarray_tweenProgress[this.group] = v;
		if (cr.lunarray_tweenProgress[this.group] >= v) cr.lunarray_tweenProgress[this.group] = v;
	}
	behinstProto.groupSync = function()
	{
		if (this.group != "") {
			if (typeof cr.lunarray_tweenGroup === "undefined") {
				cr.lunarray_tweenGroup = {};
				cr.lunarray_tweenProgress = {};
			}
			if (typeof cr.lunarray_tweenGroup[this.group] === "undefined") {
				cr.lunarray_tweenGroup[this.group] = [];
				cr.lunarray_tweenProgress[this.group] = -1;
			}
			if (cr.lunarray_tweenGroup[this.group].indexOf(this) == -1) {
				cr.lunarray_tweenGroup[this.group].push(this);
			}
		}
	}
	behinstProto.saveState = function()
	{
		this.tweenSaveWidth = this.inst.width;
		this.tweenSaveHeight = this.inst.height;
		this.tweenSaveAngle = this.inst.angle;
		this.tweenSaveOpacity = this.inst.opacity;
		this.tweenSaveX = this.inst.x;
		this.tweenSaveY = this.inst.y;
		this.tweenSaveValue = this.value;
	}
	behinstProto.onCreate = function()
	{
		this.active = (this.properties[0] === 1);
		this.tweened = this.properties[1]; // 0=Position|1=Size|2=Width|3=Height|4=Angle|5=Opacity|6=Value only|7=Pixel Size
		this.easing = this.properties[2];
		this.initial = this.properties[3];
		this.target = this.properties[4];
		this.duration = this.properties[5];
		this.wait = this.properties[6];
		this.playmode = this.properties[7]; //0=Play Once|1=Repeat|2=Ping Pong|3=Play once and destroy|4=Loop|5=Ping Pong Stop|6=Play and stop
		this.value = this.properties[8];
		this.coord_mode = this.properties[9]; //0=Absolute|1=Relative
		this.forceInit = (this.properties[10] === 1);
		this.group = this.properties[11];
		this.targetObject = null;
		this.pingpongCounter = 0;
		if (this.playmode == 5) this.pingpongCounter = 1;
		this.groupSync();
		this.isPaused = false;
		this.initialX = this.inst.x;
		this.initialY = this.inst.y;
		this.targetX = parseFloat(this.target.split(",")[0]);
		this.targetY = parseFloat(this.target.split(",")[1]);
		this.tweenSaveWidth = this.inst.width;
		this.tweenSaveHeight = this.inst.height;
		this.tweenSaveAngle = this.inst.angle;
		this.tweenSaveOpacity = this.inst.opacity;
		this.tweenSaveX = this.inst.x;
		this.tweenSaveY = this.inst.y;
		this.tweenSaveValue = this.value;
		this.tweenInitialX = 0;
		this.tweenInitialY = 0;
		this.tweenTargetX = 0;
		this.tweenTargetY = 0;
		this.tweenTargetAngle = 0;
		this.ratio = this.inst.height / this.inst.width;
		this.reverse = false;
		this.rewindMode = false;
		this.doTweenX = true;
		this.doTweenY = true;
		this.loop = false;
		this.initiating = 0;
		this.cooldown = 0;
		this.lastPlayMode = this.playmode;
		this.lastKnownValue = this.tweenInitialX;
		this.lastKnownX = this.tweenInitialX;
		this.lastKnownY = this.tweenInitialY;
		if (this.forceInit) this.init();
		if (this.initial == "") this.initial = "current";
		this.onStarted = false;
		this.onStartedDone = false;
		this.onWaitEnd = false;
		this.onWaitEndDone = false;
		this.onEnd = false;
		this.onEndDone = false;
		this.onCooldown = false;
		this.onCooldownDone = false;
		if (this.active) {
			this.init();
		}
	};
	behinstProto.init = function ()
	{
		this.onStarted = false;
		if (this.initial === "") this.initial = "current";
		if (this.target === "") this.target = "current";
		var isCurrent = (this.initial === "current");
		var targetIsCurrent = (this.target === "current");
		var isTargettingObject = (this.target === "OBJ");
		if (this.target === "OBJ") {
			if (this.targetObject != null) {
				if (this.tweened == 0) {
					if (this.coord_mode == 1) //relative mode
						this.target = (this.targetObject.x-this.inst.x) + "," + (this.targetObject.y-this.inst.y);
					else //absolute mode
						this.target = (this.targetObject.x) + "," + (this.targetObject.y);
				} else if ((this.tweened == 1) || (this.tweened == 2) || (this.tweened == 3) || (this.tweened == 7)) {
					if (this.coord_mode == 1) { //relative mode
						this.target = ((this.tweened==2)?1:(this.targetObject.width)) + "," + ((this.tweened==3)?1:(this.targetObject.height));
					} else {
						this.target = ((this.tweened==2)?1:(this.targetObject.width/this.tweenSaveWidth)) + "," + ((this.tweened==3)?1:(this.targetObject.height/this.tweenSaveHeight));
					}
				} else if (this.tweened == 4) {
					if (this.coord_mode == 1) //relative mode
						this.target = cr.to_degrees(this.targetObject.angle-this.inst.angle) + "";
					else //absolute mode
						this.target = cr.to_degrees(this.targetObject.angle) + "";
				} else if (this.tweened == 5) {
					if (this.coord_mode == 1) //relative mode
						this.target = ((this.targetObject.opacity-this.inst.opacity)*100) + "";
					else //absolute mode
						this.target = (this.targetObject.opacity*100) + "";
				}
			}
		}
		if (this.tweened == 0) {
			if (targetIsCurrent) this.target = this.inst.x + "," + this.inst.y;
			if (!isCurrent) {
				if (!this.reverse) {
					if (this.playmode != 1) {
						this.inst.x = parseFloat(this.initial.split(",")[0]);
						this.inst.y = parseFloat(this.initial.split(",")[1]);
					}
				}
			} else {
				if (this.coord_mode == 1) {
					this.initial = this.inst.x + "," + this.inst.y;
				} else {
					this.initial = this.tweenSaveX + "," + this.tweenSaveY;
				}
			}
			if (this.coord_mode == 1) {
				if (this.loop) {
					this.inst.x = this.tweenSaveX;
					this.inst.y = this.tweenSaveY;
				}
				this.initialX = this.inst.x;
				this.initialY = this.inst.y;
				if (!this.reverse) {
					this.targetX = parseFloat(this.target.split(",")[0]);
					this.targetY = parseFloat(this.target.split(",")[1]);
				} else {
					this.targetX = -parseFloat(this.target.split(",")[0]);
					this.targetY = -parseFloat(this.target.split(",")[1]);
				}
				this.tweenInitialX = this.initialX;
				this.tweenInitialY = this.initialY;
				this.tweenTargetX = this.tweenInitialX + this.targetX;
				this.tweenTargetY = this.tweenInitialY + this.targetY;
			} else {
				if (!this.reverse) {
					this.inst.x = this.tweenSaveX;
					this.inst.y = this.tweenSaveY;
					this.targetX = parseFloat(this.target.split(",")[0]);
					this.targetY = parseFloat(this.target.split(",")[1]);
				} else {
					this.inst.x = parseFloat(this.target.split(",")[0]);
					this.inst.y = parseFloat(this.target.split(",")[1]);
					this.targetX = this.tweenSaveX;
					this.targetY = this.tweenSaveY;
				}
				this.initialX = this.inst.x;
				this.initialY = this.inst.y;
				this.tweenInitialX = this.initialX;
				this.tweenInitialY = this.initialY;
				this.tweenTargetX = this.targetX;
				this.tweenTargetY = this.targetY;
				if (this.playmode == -6) {
					this.tweenTargetX = this.tweenSaveX;
					this.tweenTargetY = this.tweenSaveY;
				}
			}
		} else if ((this.tweened == 1) || (this.tweened == 2) || (this.tweened == 3)) {
			if (targetIsCurrent) this.target = "1,1";
			if (this.initial == "current") this.initial = "1,1";
			this.initial = "" + this.initial;
			this.target = "" + this.target;
			if (this.tweened == 2) {
				if (this.initial.indexOf(',') == -1) this.initial = parseFloat(this.initial) + ",1";
				if (this.target.indexOf(',') == -1) this.target = parseFloat(this.target) + ",1";
			} else if (this.tweened == 3) {
				if (this.initial.indexOf(',') == -1) this.initial = "1," + parseFloat(this.initial);
				if (this.target.indexOf(',') == -1) this.target = "1," + parseFloat(this.target);
			} else {
				if (this.initial.indexOf(',') == -1) this.initial = parseFloat(this.initial) + "," + parseFloat(this.initial);
				if (this.target.indexOf(',') == -1) this.target = parseFloat(this.target) + "," + parseFloat(this.target);
			}
			var ix = parseFloat(this.initial.split(",")[0]);
			var iy = parseFloat(this.initial.split(",")[1]);
			this.doTweenX = true;
			var tx = parseFloat(this.target.split(",")[0]);
			if ((tx == 0) || (isNaN(tx)))	this.doTweenX = false;
			if (this.tweened == 3) this.doTweenX = false;
			this.doTweenY = true;
			var ty = parseFloat(this.target.split(",")[1]);
			if ((ty == 0) || (isNaN(ty)))	this.doTweenY = false;
			if (this.tweened == 2) this.doTweenY = false;
			if (this.coord_mode == 1) {
				if (this.loop) {
					this.inst.width = this.tweenSaveWidth;
					this.inst.height = this.tweenSaveHeight;
				}
				if (!isCurrent) {
					if (!this.reverse) {
						this.inst.width = this.inst.width * ix;
						this.inst.height = this.inst.height * iy;
					} else {
						this.inst.width = this.inst.width * tx;
						this.inst.height = this.inst.height * ty;
					}
				}
				this.initialX = this.inst.width;
				this.initialY = this.inst.height;
				this.tweenInitialX = this.initialX;
				this.tweenInitialY = this.initialY;
				if (!this.reverse) {
					this.targetX = this.initialX * tx;
					this.targetY = this.initialY * ty;
				} else {
					this.targetX = this.initialX * ix/tx;
					this.targetY = this.initialY * iy/ty;
				}
				this.tweenTargetX = this.targetX;
				this.tweenTargetY = this.targetY;
			} else {
				if (!isCurrent) {
					if (!this.reverse) {
						this.inst.width = this.tweenSaveWidth * ix;
						this.inst.height = this.tweenSaveHeight * iy;
					} else {
						this.inst.width = this.tweenSaveWidth * tx;
						this.inst.height = this.tweenSaveHeight * ty;
					}
				}
				this.initialX = this.inst.width;
				this.initialY = this.inst.height;
				this.tweenInitialX = this.initialX;
				this.tweenInitialY = this.initialY;
				if (!this.reverse) {
					this.targetX = this.tweenSaveWidth * tx;
					this.targetY = this.tweenSaveHeight * ty;
				} else {
					this.targetX = this.tweenSaveWidth * ix;
					this.targetY = this.tweenSaveHeight * iy;
				}
				this.tweenTargetX = this.targetX;
				this.tweenTargetY = this.targetY;
			}
			if (this.playmode == -6) {
				this.tweenTargetX = this.tweenSaveWidth * ix;
				this.tweenTargetY = this.tweenSaveHeight * iy;
			}
		} else if (this.tweened == 4) {
			if (targetIsCurrent) this.target = cr.to_degrees(this.inst.angle);
			if (this.initial != "current") {
				if (!this.reverse) {
					if (this.playmode != 1) { //if repeat, don't initialize
						this.inst.angle = cr.to_radians(parseFloat(this.initial.split(",")[0]));
					}
				}
			}
			if (this.coord_mode == 1) {
				if (this.loop) {
					this.inst.angle = this.tweenSaveAngle;
				}
				this.initialX = this.inst.angle;
				if (this.reverse) {
					this.targetX = this.inst.angle - cr.to_radians(parseFloat(this.target.split(",")[0]));
				} else {
					this.targetX = this.inst.angle + cr.to_radians(parseFloat(this.target.split(",")[0]));
				}
				this.tweenInitialX = this.initialX;
				this.tweenTargetX = cr.to_degrees(this.targetX);
			} else {
				if (this.reverse) {
					this.inst.angle = cr.to_radians(parseFloat(this.target.split(",")[0]));;
					this.initialX = this.inst.angle;
					this.targetX = this.tweenSaveAngle;
					this.tweenInitialX = this.initialX;
					this.tweenTargetX = cr.to_degrees(this.targetX);
				} else {
					this.inst.angle = this.tweenSaveAngle;
					this.initialX = this.inst.angle;
					this.targetX = cr.to_radians(parseFloat(this.target.split(",")[0]));
					this.tweenInitialX = this.initialX;
					this.tweenTargetX = cr.to_degrees(this.targetX);
				}
			}
			if (this.playmode == -6) {
				this.tweenTargetX = cr.to_degrees(this.tweenSaveAngle);
			}
			this.tweenTargetAngle = cr.to_radians(this.tweenTargetX);
		} else if (this.tweened == 5) {
			if (this.initial == "current") this.initial = this.inst.opacity;
			if (targetIsCurrent) this.target = ""+this.inst.opacity;
			if (!isCurrent) {
				if (!this.reverse) {
					if (this.playmode != 1) { //if repeat, don't initialize
						this.inst.opacity = parseFloat(this.initial.split(",")[0]) / 100;
					}
				}
			}
			if (this.coord_mode == 1) {
				if (this.loop) {
					this.inst.opacity = this.tweenSaveOpacity;
				}
				this.initialX = this.inst.opacity;
				this.tweenInitialX = this.initialX;
				if (!this.reverse) {
					this.targetX = parseFloat(this.target.split(",")[0]) / 100;
				} else {
					this.targetX = -parseFloat(this.target.split(",")[0]) / 100;
				}
				this.tweenTargetX = this.tweenInitialX + this.targetX;
			} else {
				this.initialX = this.inst.opacity;
				if (!this.reverse) {
					this.tweenInitialX = this.initialX;
					this.targetX = parseFloat(this.target.split(",")[0]) / 100;
				} else {
					this.tweenInitialX = parseFloat(this.target.split(",")[0]) / 100;
					this.targetX = parseFloat(this.initial.split(",")[0]) / 100;
				}
				this.tweenTargetX = this.targetX;
			}
			if (this.playmode == -6) {
				this.tweenTargetX = this.tweenSaveOpacity;
			}
		} else if (this.tweened == 6) {
			if (isNaN(this.value)) this.value = 0;
			if (this.initial == "current") this.initial = ""+this.value;
			if (targetIsCurrent) this.target = ""+this.value;
			if (!isCurrent) {
				if (!this.reverse) {
					if (this.playmode != 1) { //if repeat, don't initialize
						this.value = parseFloat(this.initial.split(",")[0]);
					}
				}
			}
			if (this.coord_mode == 1) {
				if (this.loop) {
					this.value = this.tweenSaveValue;
				}
				if (!isCurrent) {
					if (!this.reverse) {
						this.value = parseFloat(this.initial.split(",")[0]);
					} else {
						this.value = parseFloat(this.target.split(",")[0]);
					}
				}
				this.initialX = this.value;
				if (!this.reverse) {
					this.targetX = this.initialX + parseFloat(this.target.split(",")[0]);
				} else {
					this.targetX = this.initialX - parseFloat(this.target.split(",")[0]);
				}
				this.tweenInitialX = this.initialX;
				this.tweenTargetX = this.targetX;
			} else {
				if (!isCurrent) {
					if (!this.reverse) {
						this.value = parseFloat(this.initial.split(",")[0]);
					} else {
						this.value = parseFloat(this.target.split(",")[0]);
					}
				}
				this.initialX = this.value;
				if (!this.reverse) {
					this.targetX = parseFloat(this.target.split(",")[0]);
				} else {
					this.targetX = parseFloat(this.initial.split(",")[0]);
				}
				this.tweenInitialX = this.initialX;
				this.tweenTargetX = this.targetX;
			}
			if (this.playmode == -6) {
				this.tweenTargetX = this.tweenSaveValue;
			}
		} else if (this.tweened == 7) {
			if (targetIsCurrent) this.target = this.inst.width + "," + this.inst.height;
			if (this.initial != "current") {
				if (!this.reverse) {
					if (this.playmode != 1) { //if repeat, don't initialize
						this.inst.width = parseFloat(this.initial.split(",")[0]);
						this.inst.height = parseFloat(this.initial.split(",")[1]);
					}
				}
			}
			this.doTweenX = true;
			var tx = parseFloat(this.target.split(",")[0]);
			if ((tx < 0) || (isNaN(tx)))	this.doTweenX = false;
			this.doTweenY = true;
			var ty = parseFloat(this.target.split(",")[1]);
			if ((ty < 0) || (isNaN(ty)))	this.doTweenY = false;
			if (this.coord_mode == 1) {
				if (this.loop) {
					this.inst.width = this.tweenSaveWidth;
					this.inst.height = this.tweenSaveHeight;
				}
				this.initialX = this.inst.width;
				this.initialY = this.inst.height;
				if (!this.reverse) {
					this.targetX = this.initialX + parseFloat(this.target.split(",")[0]);
					this.targetY = this.initialY + parseFloat(this.target.split(",")[1]);
				} else {
					this.targetX = this.initialX - parseFloat(this.target.split(",")[0]);
					this.targetY = this.initialY - parseFloat(this.target.split(",")[1]);
				}
				this.tweenInitialX = this.initialX;
				this.tweenInitialY = this.initialY;
				this.tweenTargetX = this.targetX;
				this.tweenTargetY = this.targetY;
			} else {
				if (!isCurrent) {
					if (!this.reverse) {
						this.inst.width = this.tweenSaveWidth;
						this.inst.height = this.tweenSaveHeight;
					} else {
						this.inst.width = parseFloat(this.target.split(",")[0]);
						this.inst.height = parseFloat(this.target.split(",")[1]);
					}
				}
				this.initialX = this.inst.width;
				this.initialY = this.inst.height;
				if (!this.reverse) {
					this.targetX = parseFloat(this.target.split(",")[0]);
					this.targetY = parseFloat(this.target.split(",")[1]);
				} else {
					this.targetX = this.tweenSaveWidth;
					this.targetY = this.tweenSaveHeight;
				}
				this.tweenInitialX = this.initialX;
				this.tweenInitialY = this.initialY;
				this.tweenTargetX = this.targetX;
				this.tweenTargetY = this.targetY;
			}
			if (this.playmode == -6) {
				this.tweenTargetX = this.tweenSaveWidth;
				this.tweenTargetY = this.tweenSaveHeight;
			}
		} else {
;
		}
		this.lastKnownValue = this.tweenInitialX;
		this.lastKnownX = this.tweenInitialX;
		this.lastKnownY = this.tweenInitialY;
		this.initiating = parseFloat(this.wait.split(",")[0]);
		this.cooldown = parseFloat(this.wait.split(",")[1]);
		if ((this.initiating < 0) || (isNaN(this.initiating)))	this.initiating = 0;
		if ((this.cooldown < 0) || (isNaN(this.cooldown)))	this.cooldown = 0;
		if (isCurrent) this.initial = "current";
		if (targetIsCurrent) this.target = "current";
		if (isTargettingObject) this.target = "OBJ";
	};
	function easeOutBounce(t,b,c,d) {
		if ((t/=d) < (1/2.75)) {
			return c*(7.5625*t*t) + b;
		} else if (t < (2/2.75)) {
			return c*(7.5625*(t-=(1.5/2.75))*t + .75) + b;
		} else if (t < (2.5/2.75)) {
			return c*(7.5625*(t-=(2.25/2.75))*t + .9375) + b;
		} else {
			return c*(7.5625*(t-=(2.625/2.75))*t + .984375) + b;
		}
	}
	behinstProto.easeFunc = function (t, b, c, d)
	{
		switch (this.easing) {
		case 0:		// linear
			return c*t/d + b;
		case 1:		// easeInQuad
			return c*(t/=d)*t + b;
		case 2:		// easeOutQuad
			return -c *(t/=d)*(t-2) + b;
		case 3:		// easeInOutQuad
			if ((t/=d/2) < 1) return c/2*t*t + b;
			return -c/2 * ((--t)*(t-2) - 1) + b;
		case 4:		// easeInCubic
			return c*(t/=d)*t*t + b;
		case 5:		// easeOutCubic
			return c*((t=t/d-1)*t*t + 1) + b;
		case 6:		// easeInOutCubic
			if ((t/=d/2) < 1)
				return c/2*t*t*t + b;
			return c/2*((t-=2)*t*t + 2) + b;
		case 7:		// easeInQuart
			return c*(t/=d)*t*t*t + b;
		case 8:		// easeOutQuart
			return -c * ((t=t/d-1)*t*t*t - 1) + b;
		case 9:		// easeInOutQuart
			if ((t/=d/2) < 1) return c/2*t*t*t*t + b;
			return -c/2 * ((t-=2)*t*t*t - 2) + b;
		case 10:		// easeInQuint
			return c*(t/=d)*t*t*t*t + b;
		case 11:		// easeOutQuint
			return c*((t=t/d-1)*t*t*t*t + 1) + b;
		case 12:		// easeInOutQuint
			if ((t/=d/2) < 1) return c/2*t*t*t*t*t + b;
			return c/2*((t-=2)*t*t*t*t + 2) + b;
		case 13:		// easeInCircle
			return -c * (Math.sqrt(1 - (t/=d)*t) - 1) + b;
		case 14:		// easeOutCircle
			return c * Math.sqrt(1 - (t=t/d-1)*t) + b;
		case 15:		// easeInOutCircle
			if ((t/=d/2) < 1) return -c/2 * (Math.sqrt(1 - t*t) - 1) + b;
			return c/2 * (Math.sqrt(1 - (t-=2)*t) + 1) + b;
		case 16:		// easeInBack
			var s = 0;
			if (s==0) s = 1.70158;
			return c*(t/=d)*t*((s+1)*t - s) + b;
		case 17:		// easeOutBack
			var s = 0;
			if (s==0) s = 1.70158;
			return c*((t=t/d-1)*t*((s+1)*t + s) + 1) + b;
		case 18:		// easeInOutBack
			var s = 0;
			if (s==0) s = 1.70158;
			if ((t/=d/2) < 1) return c/2*(t*t*(((s*=(1.525))+1)*t - s)) + b;
			return c/2*((t-=2)*t*(((s*=(1.525))+1)*t + s) + 2) + b;
		case 19:	//easeInElastic
			var a = 0;
			var p = 0;
			if (t==0) return b;  if ((t/=d)==1) return b+c; if (p==0) p=d*.3;
			if (a==0 || a < Math.abs(c)) { a=c; var s=p/4; }
			else var s = p/(2*Math.PI) * Math.asin (c/a);
			return -(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b;
		case 20:	//easeOutElastic
			var a = 0;
			var p = 0;
			if (t==0) return b;  if ((t/=d)==1) return b+c;  if (p == 0) p=d*.3;
			if (a==0 || a < Math.abs(c)) { a=c; var s=p/4; }
			else var s = p/(2*Math.PI) * Math.asin (c/a);
			return (a*Math.pow(2,-10*t) * Math.sin( (t*d-s)*(2*Math.PI)/p ) + c + b);
		case 21:	//easeInOutElastic
			var a = 0;
			var p = 0;
			if (t==0) return b;
			if ((t/=d/2)==2) return b+c;
			if (p==0) p=d*(.3*1.5);
			if (a==0 || a < Math.abs(c)) { a=c; var s=p/4; }
			else var s = p/(2*Math.PI) * Math.asin (c/a);
			if (t < 1) return -.5*(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b;
			return a*Math.pow(2,-10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )*.5 + c + b;
		case 22:	//easeInBounce
			return c - easeOutBounce(d-t, 0, c, d) + b;
		case 23:	//easeOutBounce
			return easeOutBounce(t,b,c,d);
		case 24:	//easeInOutBounce
			if (t < d/2) return (c - easeOutBounce(d-(t*2), 0, c, d) + b) * 0.5 +b;
			else return easeOutBounce(t*2-d, 0, c, d) * .5 + c*.5 + b;
		case 25:	//easeInSmoothstep
			var mt = (t/d) / 2;
			return (2*(mt * mt * (3 - 2*mt)));
		case 26:	//easeOutSmoothstep
			var mt = ((t/d) + 1) / 2;
			return ((2*(mt * mt * (3 - 2*mt))) - 1);
		case 27:	//easeInOutSmoothstep
			var mt = (t / d);
			return (mt * mt * (3 - 2*mt));
		};
		return 0;
	};
	behinstProto.tick = function ()
	{
		var dt = this.runtime.getDt(this.inst);
		var isForceStop = (this.i == -1);
		if (!this.active || dt === 0)
			return;
		if (this.i == 0) {
			if (!this.onStarted) {
				this.onStarted = true;
				this.onStartedDone = false;
				this.onWaitEnd = false;
				this.onWaitEndDone = false;
				this.onEnd = false;
				this.onEndDone = false;
				this.onCooldown = false;
				this.onCooldownDone = false;
				this.runtime.trigger(cr.behaviors.lunarray_Tween.prototype.cnds.OnStart, this.inst);
				this.onStartedDone = true;
			}
		}
		if (this.i == -1) {
			this.i = this.initiating + this.duration + this.cooldown;
		} else {
			this.i += dt;
		}
		if (this.i <= this.initiating) {
			return;
		} else {
			if (this.onWaitEnd == false) {
				this.onWaitEnd = true;
				this.runtime.trigger(cr.behaviors.lunarray_Tween.prototype.cnds.OnWaitEnd, this.inst);
				this.onWaitEndDone = true;
			}
		}
		if (this.i <= (this.duration + this.initiating)) {
			var factor = this.easeFunc(this.i-this.initiating, 0, 1, this.duration);
			if (this.tweened == 0) {
				if (this.coord_mode == 1) {
					if (this.inst.x !== this.lastKnownX) {
						this.tweenInitialX += (this.inst.x - this.lastKnownX);
						this.tweenTargetX += (this.inst.x - this.lastKnownX);
					}
					if (this.inst.y !== this.lastKnownY) {
						this.tweenInitialY += (this.inst.y - this.lastKnownY);
						this.tweenTargetY += (this.inst.y - this.lastKnownY);
					}
				} else {
					if (this.inst.x !== this.lastKnownX)
						this.tweenInitialX += (this.inst.x - this.lastKnownX);
					if (this.inst.y !== this.lastKnownY)
						this.tweenInitialY += (this.inst.y - this.lastKnownY);
				}
				this.inst.x = this.tweenInitialX + (this.tweenTargetX - this.tweenInitialX) * factor;
				this.inst.y = this.tweenInitialY + (this.tweenTargetY - this.tweenInitialY) * factor;
				this.lastKnownX = this.inst.x;
				this.lastKnownY = this.inst.y;
			} else if ((this.tweened == 1) || (this.tweened == 2) || (this.tweened == 3)) {
				if (this.inst.width !== this.lastKnownX)
					this.tweenInitialX = this.inst.width;
				if (this.inst.height !== this.lastKnownY)
					this.tweenInitialY = this.inst.height;
				if (this.doTweenX) {
					this.inst.width = this.tweenInitialX + (this.tweenTargetX - this.tweenInitialX) * factor;
				}
				if (this.doTweenY) {
					this.inst.height = this.tweenInitialY + (this.tweenTargetY - this.tweenInitialY) * factor;
				} else {
					if (this.tweened == 1) {
						this.inst.height = this.inst.width * this.ratio;
					}
				}
				this.lastKnownX = this.inst.width;
				this.lastKnownY = this.inst.height;
			} else if (this.tweened == 4) {
				var tangle = this.tweenInitialX + (this.tweenTargetAngle - this.tweenInitialX) * factor;
				if (this.i >= (this.duration + this.initiating))
					tangle = this.tweenTargetAngle;
				this.inst.angle = cr.clamp_angle(tangle);
			} else if (this.tweened == 5) {
				if (this.coord_mode == 1) {
					if (this.inst.opacity !== this.lastKnownX)
						this.tweenInitialX = this.inst.opacity;
				}
				this.inst.opacity = this.tweenInitialX + (this.tweenTargetX - this.tweenInitialX) * factor;
				this.lastKnownX = this.inst.opacity;
			} else if (this.tweened == 6) {
				this.value = this.tweenInitialX + (this.tweenTargetX - this.tweenInitialX) * factor;
			} else if (this.tweened == 7) {
				if (this.coord_mode == 1) {
					if (this.inst.width !== this.lastKnownX)
						this.tweenInitialX = this.inst.width;
					if (this.inst.height !== this.lastKnownY)
						this.tweenInitialY = this.inst.height;
				}
				if (this.doTweenX) this.inst.width = this.tweenInitialX + (this.tweenTargetX - this.tweenInitialX) * factor;
				if (this.doTweenY) this.inst.height = this.tweenInitialY + (this.tweenTargetY - this.tweenInitialY) * factor;
				this.lastKnownX = this.inst.width;
				this.lastKnownY = this.inst.height;
			}
			this.inst.set_bbox_changed();
		}
		if (this.i >= this.duration + this.initiating) {
			this.doEndFrame(isForceStop);
			this.inst.set_bbox_changed();
			if (this.onEnd == false) {
				this.onEnd = true;
				this.runtime.trigger(cr.behaviors.lunarray_Tween.prototype.cnds.OnEnd, this.inst);
				this.onEndDone = true;
			}
		};
	};
	behinstProto.doEndFrame = function (isForceStop)
	{
		switch (this.tweened) {
		case 0:		// position
			this.inst.x = this.tweenTargetX;
			this.inst.y = this.tweenTargetY;
			break;
		case 1:		// size
			if (this.doTweenX) this.inst.width = this.tweenTargetX;
			if (this.doTweenY) {
				this.inst.height = this.tweenTargetY;
			} else {
				this.inst.height = this.inst.width * this.ratio;
			}
			break;
		case 2:		// width
			this.inst.width = this.tweenTargetX;
			break;
		case 3:		// height
			this.inst.height = this.tweenTargetY;
			break;
		case 4:		// angle
			var tangle = this.tweenTargetAngle;
			this.inst.angle = cr.clamp_angle(tangle);
			this.lastKnownValue = this.inst.angle;
			break;
		case 5:		// opacity
			this.inst.opacity = this.tweenTargetX;
			break;
		case 6:		// value
			this.value = this.tweenTargetX;
			break;
		case 7:		// size
			if (this.doTweenX) this.inst.width = this.tweenTargetX;
			if (this.doTweenY) this.inst.height = this.tweenTargetY;
			break;
		}
		if (this.i >= this.duration + this.initiating + this.cooldown) {
			if (this.playmode == 0) {
				this.active = false;
				this.reverse = false;
				this.i = this.duration + this.initiating + this.cooldown;
			} else if (this.playmode == 1) {
				this.i = 0;
				this.init();
				this.active = true;
			} else if (this.playmode == 2) {
				if (isForceStop) {
					this.reverse = false;
					this.init();
				} else {
					this.reverse = !this.reverse;
					this.i = 0;
					this.init();
					this.active = true;
				}
			} else if (this.playmode == 3) {
				this.runtime.DestroyInstance(this.inst);
			} else if (this.playmode == 4) {
				this.loop = true;
				this.i = 0;
				this.init();
				this.active = true;
			} else if (this.playmode == 5) {
				if (isForceStop) {
					this.reverse = false;
					this.init();
				} else {
					if (this.pingpongCounter <= 0) {
						this.i = this.duration + this.initiating + this.cooldown;
						this.active = false;
					} else {
						if (!this.reverse) {
							this.pingpongCounter -= 1;
							this.reverse = true;
							this.i = 0;
							this.init();
							this.active = true;
						} else {
							this.pingpongCounter -= 1;
							this.reverse = false;
							this.i = 0;
							this.init();
							this.active = true;
						}
					}
				}
			} else if (this.playmode == -6) {
				this.playmode = this.lastPlayMode;
				this.reverse = false;
				this.i = 0;
				this.active = false;
			} else if (this.playmode == 6) {
				this.reverse = false;
				this.i = this.duration + this.initiating + this.cooldown;
				this.active = false;
			}
		}
		if (this.onCooldown == false) {
			this.onCooldown = true;
			this.runtime.trigger(cr.behaviors.lunarray_Tween.prototype.cnds.OnCooldownEnd, this.inst);
			this.onCooldownDone = true;
		}
	}
	behaviorProto.cnds = {};
	var cnds = behaviorProto.cnds;
	cnds.IsActive = function ()
	{
		return this.active;
	};
	cnds.CompareGroupProgress = function (cmp, v)
	{
		var x = [];
		cr.lunarray_tweenGroup[this.group].forEach(function (value) {
			x.push((value.i / (value.duration + value.initiating + value.cooldown)));
		} );
		return cr.do_cmp(	Math.min.apply(null, x), cmp, v );
	}
	cnds.CompareProgress = function (cmp, v)
	{
		return cr.do_cmp((this.i / (this.duration + this.initiating + this.cooldown)), cmp, v);
	};
	cnds.OnStart = function ()
	{
		if (this.onStartedDone === false) {
			return this.onStarted;
		}
	};
    cnds.OnWaitEnd = function ()
	{
		if (this.onWaitEndDone === false) {
			return this.onWaitEnd;
		}
	};
    cnds.OnEnd = function (a, b, c)
	{
		if (this.onEndDone === false) {
			return this.onEnd;
		}
	};
    cnds.OnCooldownEnd = function ()
	{
		if (this.onCooldownDone === false) {
			return this.onCooldown;
		}
	};
	behaviorProto.acts = {};
	var acts = behaviorProto.acts;
	acts.SetActive = function (a)
	{
		this.active = (a === 1);
	};
	acts.StartGroup = function (force, sgroup)
	{
		if (sgroup === "") sgroup = this.group;
		var groupReady = (force === 1) || cr.lunarray_tweenGroup[sgroup].every(function(value2) { return !value2.active; } );
		if ( groupReady ) {
			cr.lunarray_tweenGroup[sgroup].forEach(
				function(value) {
					if (force === 1) {
						acts.Force.apply(value);
					} else {
						acts.Start.apply(value);
					}
				}
			);
		}
	}
	acts.StopGroup = function (stopmode, sgroup)
	{
		if (sgroup === "") sgroup = this.group;
		cr.lunarray_tweenGroup[sgroup].forEach( function(value) {
			acts.Stop.apply(value, [stopmode]);
		} );
	}
	acts.ReverseGroup = function (force, rewindMode, sgroup)
	{
		if (sgroup === "") sgroup = this.group;
		var groupReady = (force === 1) || cr.lunarray_tweenGroup[sgroup].every(function(value2) { return !value2.active; } );
		if ( groupReady ) {
			cr.lunarray_tweenGroup[sgroup].forEach(
				function(value) {
					if (force === 1) {
						acts.ForceReverse.apply(value, [rewindMode]);
					} else {
						acts.Reverse.apply(value, [rewindMode]);
					}
				}
			);
		}
	}
	acts.Force = function ()
	{
		this.loop = (this.playmode === 4);
		if (this.playmode == 5) this.pingpongCounter = 1;
		if ((this.playmode == 6) || (this.playmode == -6)) {
			if (this.i < this.duration + this.cooldown + this.initiating) {
				this.reverse = false;
				this.init();
				this.active = true;
			}
		} else {
			this.saveState();
			this.reverse = false;
			this.i = 0;
			this.init();
			this.active = true;
		}
	};
	acts.ForceReverse = function (rewindMode)
	{
		this.rewindMode = (rewindMode == 1);
		this.loop = (this.playmode === 4);
		if (this.playmode == 5) this.pingpongCounter = 1;
		if ((this.playmode == 6) || (this.playmode == -6)) {
			if (this.i < this.duration + this.cooldown + this.initiating) {
				this.reverse = true;
				this.init();
				this.active = true;
			}
		} else {
			if (rewindMode) {
				if (this.pingpongCounter == 1) {
					if (this.i >= this.duration + this.cooldown + this.initiating) {
						this.reverse = true;
						this.i = 0;
						this.pingpongCounter = 2;
						this.init();
						this.active = true;
					}
				}
			} else {
				this.reverse = true;
				this.i = 0;
				this.init();
				this.active = true;
			}
		}
	};
	acts.Start = function ()
	{
		if (!this.active) {
			this.loop = (this.playmode === 4);
			if (this.playmode == 5) this.pingpongCounter = 1;
			if ((this.playmode == 6) || (this.playmode == -6)) {
				if (this.i < this.duration + this.cooldown + this.initiating) {
					this.reverse = false;
					this.init();
					this.active = true;
				}
			} else {
				this.pingpongCounter = 1;
				this.saveState();
				this.reverse = false;
				this.i = 0;
				this.init();
				this.active = true;
			}
		}
	};
	acts.Stop = function (stopmode)
	{
		if (this.active) {
			if ((this.playmode == 2) || (this.playmode == 4)) {
				if (this.reverse) {
					this.i = 0;
				} else {
					this.i = -1;
				}
			} else {
				if (stopmode == 1) {
					this.saveState();
				} else if (stopmode == 0) {
					this.i = this.initiating + this.cooldown + this.duration;
				} else {
					this.i = 0;
				}
			}
			this.tick();
			this.active = false;
		}
	};
	acts.Pause = function () {
		if (this.active) {
			this.isPaused = true;
			this.active = false;
		}
	}
	acts.Resume = function () {
		if (this.isPaused) {
			this.active = true;
			this.isPaused = false;
		} else {
			if (!this.active) {
				this.reverse = false;
				this.i = 0;
				this.init();
				this.active = true;
			}
		}
	}
	acts.Reverse = function (rewindMode)
	{
		this.rewindMode = (rewindMode == 1);
		if (!this.active) {
			this.loop = (this.playmode === 4);
			if (this.playmode == 5) this.pingpongCounter = 1;
			if ((this.playmode == 6) || (this.playmode == -6)) {
				if (this.i < this.duration + this.cooldown + this.initiating) {
					this.reverse = true;
					this.init();
					this.active = true;
				}
			} else {
				if (rewindMode) {
					if (this.pingpongCounter == 1) {
						if (this.i >= this.duration + this.cooldown + this.initiating) {
							this.reverse = true;
							this.i = 0;
							this.pingpongCounter = 2;
							this.init();
							this.active = true;
						}
					}
				} else {
					this.reverse = true;
					this.i = 0;
					this.init();
					this.active = true;
				}
			}
		}
	};
	acts.SetDuration = function (x)
	{
		this.duration = x;
	};
	acts.SetWait = function (x)
	{
		this.wait = x;
		this.initiating = parseFloat(this.wait.split(",")[0]);
		this.cooldown = parseFloat(this.wait.split(",")[1]);
		if ((this.initiating < 0) || (isNaN(this.initiating)))	this.initiating = 0;
		if ((this.cooldown < 0) || (isNaN(this.cooldown)))	this.cooldown = 0;
	};
	acts.SetTarget = function (x)
	{
		if (typeof(x) == "string") {
			this.target = x;
			this.targetX = parseFloat(x.split(",")[0]);
			this.targetY = parseFloat(x.split(",")[1]);
		} else {
			this.target = x;
			this.targetX = x;
		}
		if (!this.active) {
			this.init();
		} else {
		}
	};
	acts.SetTargetObject = function (obj)
	{
		if (!obj)
			return;
		var otherinst = obj.getFirstPicked();
		if (!otherinst)
			return;
		this.targetObject = otherinst;
		this.target = "OBJ";
	};
	acts.SetTargetX = function (x)
	{
		if ((this.tweened == 2) || (this.tweened == 3) || (this.tweened == 4) || (this.tweened == 5) || (this.tweened == 6)) {
			if (typeof(x) == "string") {
				this.target = parseFloat(x.split(",")[0]);
			} else {
				this.target = ""+x+","+this.targetY;
			}
			this.targetX = this.target;
		} else {
			var currY = this.target.split(",")[1];
			this.target = String(x) + "," + currY;
			this.targetX = parseFloat(this.target.split(",")[0]);
			this.targetY = parseFloat(this.target.split(",")[1]);
		}
		if (!this.active) {
			this.saveState();
			this.init();
		} else {
		}
	};
	acts.SetTargetY = function (x)
	{
		if ((this.tweened == 2) || (this.tweened == 3) || (this.tweened == 4) || (this.tweened == 5) || (this.tweened == 6)) {
			if (typeof(x) == "string") {
				this.target = parseFloat(x)+"";
			} else {
				this.target = this.targetX+","+x;
			}
			this.targetX = this.target;
		} else {
			var currX = this.target.split(",")[0];
			this.target = currX + "," + String(x);
			this.targetX = parseFloat(this.target.split(",")[0]);
			this.targetY = parseFloat(this.target.split(",")[1]);
		}
		if (!this.active) {
			this.saveState();
			this.init();
		} else {
		}
	};
	acts.SetInitial = function (x)
	{
		if (typeof(x) == "string") {
			this.initial = x;
			this.initialX = parseFloat(x.split(",")[0]);
			this.initialY = parseFloat(x.split(",")[1]);
		} else {
			this.initial = ""+x;
			this.initialX = x;
		}
		if (this.tweened == 6) {
			this.value = this.initialX;
		}
		if (!this.active) {
			this.saveState();
			this.init();
		} else {
		}
	};
	acts.SetInitialX = function (x)
	{
		if ((this.tweened == 2) || (this.tweened == 3) || (this.tweened == 4) || (this.tweened == 5) || (this.tweened == 6)) {
			if (typeof(x) == "string") {
				this.initial = parseFloat(x);
			} else {
				this.initial = ""+x+","+this.initialY;
			}
			this.initialX = this.initial;
		} else {
			if (this.initial == "") this.initial = "current";
			if (this.initial == "current") {
				var currY = this.tweenSaveY;
			} else {
				var currY = this.initial.split(",")[1];
			}
			this.initial = String(x) + "," + currY;
			this.initialX = parseFloat(this.initial.split(",")[0]);
			this.initialY = parseFloat(this.initial.split(",")[1]);
		}
		if (this.tweened == 6) {
			this.value = this.initialX;
		}
		if (!this.active) {
			this.saveState();
			this.init();
		} else {
		}
	};
	acts.SetInitialY = function (x)
	{
		if ((this.tweened == 2) || (this.tweened == 3) || (this.tweened == 4) || (this.tweened == 5) || (this.tweened == 6)) {
			if (typeof(x) == "string") {
				this.initial = parseFloat(x);
			} else {
				this.initial = ""+this.initialX+","+x;
			}
			this.initialX = this.initial;
		} else {
			if (this.initial == "") this.initial = "current";
			if (this.initial == "current") {
				var currX = this.tweenSaveX;
			} else {
				var currX = this.initial.split(",")[0];
			}
			this.initial = currX + "," + String(x);
			this.initialX = parseFloat(this.initial.split(",")[0]);
			this.initialY = parseFloat(this.initial.split(",")[1]);
		}
		if (!this.active) {
			this.saveState();
			this.init();
		} else {
		}
	};
	acts.SetValue = function (x)
	{
		this.value = x;
	};
	acts.SetTweenedProperty = function (m)
	{
		this.tweened = m;
	};
	acts.SetEasing = function (w)
	{
		this.easing = w;
	};
	acts.SetPlayback = function (x)
	{
		this.playmode = x;
	};
	acts.SetParameter = function (tweened, playmode, easefunction, initial, target, duration, wait, cmode)
	{
		this.tweened = tweened;
		this.playmode = playmode;
		this.easing = easefunction;
		acts.SetInitial.apply(this, [initial]);
		acts.SetTarget.apply(this, [target]);
		acts.SetDuration.apply(this, [duration]);
		acts.SetWait.apply(this, [wait]);
		this.coord_mode = cmode;
		this.saveState();
	};
	behaviorProto.exps = {};
	var exps = behaviorProto.exps;
	exps.Progress = function (ret)
	{
		ret.set_float(this.i / (this.duration + this.initiating + this.cooldown));
	};
	exps.ProgressTime = function (ret)
	{
		ret.set_float(this.i);
	};
	exps.Duration = function (ret)
	{
		ret.set_float(this.duration);
	};
	exps.Initiating = function (ret)
	{
		ret.set_float(this.initiating);
	};
	exps.Cooldown = function (ret)
	{
		ret.set_float(this.cooldown);
	};
	exps.Target = function (ret)
	{
		ret.set_string(this.target);
	};
	exps.Value = function (ret)
	{
		ret.set_float(this.value);
	};
	exps.isPaused = function (ret)
	{
		ret.set_int(this.isPaused ? 1: 0);
	};
}());
;
;
cr.behaviors.solid = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.solid.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
		this.inst.extra.solidEnabled = (this.properties[0] !== 0);
	};
	behinstProto.tick = function ()
	{
	};
	function Cnds() {};
	Cnds.prototype.IsEnabled = function ()
	{
		return this.inst.extra.solidEnabled;
	};
	behaviorProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetEnabled = function (e)
	{
		this.inst.extra.solidEnabled = !!e;
	};
	behaviorProto.acts = new Acts();
}());
cr.getProjectModel = function() { return [
	null,
	"SplashScreen",
	[
	[
		cr.plugins_.Function,
		true,
		false,
		false,
		false,
		false,
		false,
		false,
		false,
		false
	]
,	[
		cr.plugins_.Keyboard,
		true,
		false,
		false,
		false,
		false,
		false,
		false,
		false,
		false
	]
,	[
		cr.plugins_.Spritefont2,
		false,
		true,
		true,
		true,
		true,
		true,
		true,
		true,
		true
	]
,	[
		cr.plugins_.Mouse,
		true,
		false,
		false,
		false,
		false,
		false,
		false,
		false,
		false
	]
,	[
		cr.plugins_.Particles,
		false,
		true,
		true,
		false,
		true,
		true,
		true,
		true,
		true
	]
,	[
		cr.plugins_.Sprite,
		false,
		true,
		true,
		true,
		true,
		true,
		true,
		true,
		false
	]
,	[
		cr.plugins_.Audio,
		true,
		false,
		false,
		false,
		false,
		false,
		false,
		false,
		false
	]
,	[
		cr.plugins_.Arr,
		false,
		false,
		false,
		false,
		false,
		false,
		false,
		false,
		false
	]
,	[
		cr.plugins_.Browser,
		true,
		false,
		false,
		false,
		false,
		false,
		false,
		false,
		false
	]
,	[
		cr.plugins_.Button,
		false,
		true,
		true,
		true,
		false,
		false,
		false,
		false,
		false
	]
,	[
		cr.plugins_.CJSAds,
		true,
		false,
		false,
		false,
		false,
		false,
		false,
		false,
		false
	]
,	[
		cr.plugins_.Touch,
		true,
		false,
		false,
		false,
		false,
		false,
		false,
		false,
		false
	]
,	[
		cr.plugins_.WebStorage,
		true,
		false,
		false,
		false,
		false,
		false,
		false,
		false,
		false
	]
,	[
		cr.plugins_.TiledBg,
		false,
		true,
		true,
		true,
		true,
		true,
		true,
		true,
		true
	]
	],
	[
	[
		"t0",
		cr.plugins_.Sprite,
		false,
		[8516814691150662,1743021117264248,8097206776676888,7733057071512602],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			8805759650621929,
			[
				["l1_s1-sheet0.png", 17212, 0, 0, 1280, 721, 1, 0, 0.499307,[],[0,-0.499307,1,-0.499307,0.999219,0.499306,0.00078125,0.499306],0]
			]
			]
		],
		[
		],
		false,
		false,
		9222602248917894,
		[]
	]
,	[
		"t1",
		cr.plugins_.Sprite,
		false,
		[8516814691150662,1743021117264248,8097206776676888,7733057071512602],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			4623670087011909,
			[
				["l1_s2-sheet0.png", 15370, 0, 0, 1280, 720, 1, 0, 0.5,[],[],1]
			]
			]
		],
		[
		],
		false,
		false,
		161126586753918,
		[]
	]
,	[
		"t2",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,1663437692107267],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			9450460853529937,
			[
				["g_s1-sheet0.png", 9573, 0, 0, 640, 215, 1, 0, 1,[],[0,-0.767442,1,-0.767442,1,0,0,0],0]
			]
			]
		],
		[
		[
			"Solid",
			cr.behaviors.solid,
			7642780154536696
		]
		],
		false,
		false,
		5385999084830611,
		[]
	]
,	[
		"t3",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,1663437692107267],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			2670920631619243,
			[
				["g_s2-sheet0.png", 8283, 0, 0, 640, 187, 1, 0, 1,[],[1,-0.882353,1,0,0,0,0,-0.882353],0]
			]
			]
		],
		[
		[
			"Solid",
			cr.behaviors.solid,
			9529308947310567
		]
		],
		false,
		false,
		3989030077891297,
		[]
	]
,	[
		"t4",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,1663437692107267],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			1083589598941247,
			[
				["g_s3-sheet0.png", 7877, 0, 0, 640, 195, 1, 0, 1,[],[0,-0.846154,1,-0.846154,1,0,0,0],0]
			]
			]
		],
		[
		[
			"Solid",
			cr.behaviors.solid,
			8696530063591564
		]
		],
		false,
		false,
		4945879506166343,
		[]
	]
,	[
		"t5",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,5384722272299964],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			2665591082127387,
			[
				["l2_s1-sheet0.png", 36404, 0, 0, 1280, 272, 1, 0, 1,[],[0.0359375,-0.830882,0.9625,-0.823529,1,-0.5,1,0,0,0,0,-0.5],0]
			]
			]
		],
		[
		],
		false,
		false,
		2557124951625415,
		[]
	]
,	[
		"t6",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,5384722272299964],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			8307104159538967,
			[
				["l2_s2-sheet0.png", 35179, 0, 0, 1280, 296, 1, 0, 1,[],[0.0585938,-0.746622,0.935156,-0.719595,0.999219,-0.5,1,0,0,0,0,-0.5],0]
			]
			]
		],
		[
		],
		false,
		false,
		7433323346633169,
		[]
	]
,	[
		"t7",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,6252805433968067],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			7423756047653418,
			[
				["l3_s1-sheet0.png", 3633, 0, 0, 512, 218, 1, 0, 1,[],[0.199219,-0.53211,0.5,-0.495413,0.802734,-0.536697,1,-0.5,0.998047,-0.00458699,0.00195313,-0.00458699,0.046875,-0.5],0]
			]
			]
		],
		[
		],
		false,
		false,
		4806911838890288,
		[]
	]
,	[
		"t8",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,6252805433968067],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			9449351084852742,
			[
				["l3_s2-sheet0.png", 3410, 0, 0, 512, 220, 1, 0, 1,[],[0.5,-0.6,0.794922,-0.522727,0.998047,-0.5,0.998047,-0.00454497,0,0,0,-0.5],0]
			]
			]
		],
		[
		],
		false,
		false,
		2691161930798414,
		[]
	]
,	[
		"t9",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,6252805433968067],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			7653704032894758,
			[
				["l3_s3-sheet0.png", 3125, 0, 0, 513, 220, 1, 0, 1,[],[0.175439,-0.590909,0.499025,-0.595455,0.807018,-0.55,1,-0.5,0.998051,-0.00454497,0,0,0,-0.5],0]
			]
			]
		],
		[
		],
		false,
		false,
		7064093733005588,
		[]
	]
,	[
		"t10",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,5836504645218812],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			9438681996535155,
			[
				["l4_s1-sheet0.png", 19421, 0, 0, 1280, 308, 1, 0, 1,[],[0.105469,-0.561688,0.5,-0.62987,0.871875,-0.467532,0.840625,-0.5,0.964844,-0.146104,0,0,0.0289063,-0.5],0]
			]
			]
		],
		[
		],
		false,
		false,
		1756163665951409,
		[]
	]
,	[
		"t11",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,5836504645218812],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			1559948562271564,
			[
				["l4_s2-sheet0.png", 23554, 0, 0, 1280, 310, 1, 0, 1,[],[0.103906,-0.570968,0.886719,-0.532258,0.926562,-0.5,0.996875,-0.012903,0.5,-0.035484,0.003125,-0.012903,0.0257812,-0.5],0]
			]
			]
		],
		[
		],
		false,
		false,
		739480517731778,
		[]
	]
,	[
		"t12",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,5836504645218812],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			4785667826928352,
			[
				["l4_s3-sheet0.png", 27269, 0, 0, 1280, 465, 1, 0, 1,[],[0.211719,-0.417204,0.5,-0.976344,0.780469,-0.395699,0.519531,-0.501075,0.989062,-0.030107,0.5,-0.092473,0.0179687,-0.049462,0.133594,-0.501075],0]
			]
			]
		],
		[
		],
		false,
		false,
		162304599378814,
		[]
	]
,	[
		"t13",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,7719003541241144],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			8680781935653471,
			[
				["l5_b1-sheet0.png", 1841, 0, 0, 148, 86, 1, 0.00675676, 0.72093,[],[0.141892,-0.465116,0.493243,-0.697674,0.824324,-0.430232,0.952702,-0.22093,0.925675,0.162791,0.493243,0.27907,0.101351,0.0930228,3.25963e-009,-0.22093],0]
			]
			]
		],
		[
		],
		false,
		false,
		3887854384908809,
		[]
	]
,	[
		"t14",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,7719003541241144],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			2758105169038955,
			[
				["l5_b2-sheet0.png", 1753, 0, 0, 157, 114, 1, 0.00636943, 0.736842,[],[0.140128,-0.535088,0.490446,-0.736842,0.840765,-0.526316,0.974523,-0.236842,0.866242,0.0877189,0.490446,0.22807,0.12102,0.0877189,0.0127389,-0.236842],0]
			]
			]
		],
		[
		],
		false,
		false,
		174565860745604,
		[]
	]
,	[
		"t15",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,7719003541241144],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			4779533809566514,
			[
				["l5_b3-sheet0.png", 1534, 0, 0, 167, 101, 1, 0.00598802, 0.673267,[],[0.0898204,-0.514851,0.491018,-0.594059,0.796407,-0.346534,0.916168,-0.178217,0.904192,0.178218,0.491018,0.316832,0.0658683,0.207921,0.0239521,-0.178217],0]
			]
			]
		],
		[
		],
		false,
		false,
		6962679822701258,
		[]
	]
,	[
		"t16",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,7719003541241144],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			7311886150625868,
			[
				["l5_s1-sheet0.png", 866, 0, 0, 33, 125, 1, 0.030303, 0.928,[],[0.242424,-0.856,0.454545,-0.92,0.878788,-0.904,0.636364,-0.016,0.454545,0.072,-3.1665e-008,0.064,0.181818,-0.432],0]
			]
			]
		],
		[
		],
		false,
		false,
		2852256052216498,
		[]
	]
,	[
		"t17",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,7719003541241144],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			4632026429760294,
			[
				["l5_s2-sheet0.png", 2650, 0, 0, 196, 377, 1, 0.459184, 0.976127,[],[-0.183674,-0.832891,0.0408163,-0.976127,0.27551,-0.838196,0.0612243,-0.477453,0.0408163,0.0238727,-0.0561227,-0.185676,-0.0408167,-0.477453],0]
			]
			]
		],
		[
		],
		false,
		false,
		3988765133043261,
		[]
	]
,	[
		"t18",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,7719003541241144],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			6197115181300912,
			[
				["l5_s3-sheet0.png", 1109, 0, 0, 75, 125, 1, 0.0266667, 0.936,[],[0.24,-0.776,0.466666,-0.928,0.76,-0.808,0.52,-0.44,0.466666,0.056,0.2,-0.072,0.266666,-0.44],0]
			]
			]
		],
		[
		],
		false,
		false,
		1736095366782715,
		[]
	]
,	[
		"t19",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,7719003541241144],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			4347947248621671,
			[
				["l5_b4-sheet0.png", 1275, 0, 0, 164, 89, 1, -0.00609756, 0.786517,[],[0.103659,-0.606742,0.506098,-0.606742,0.731708,-0.280899,0.707317,-0.292135,0.963415,0.134831,0.506098,0.157303,0.0853659,0.0674161,0.00609756,-0.292135],0]
			]
			]
		],
		[
		],
		false,
		false,
		3040674138894373,
		[]
	]
,	[
		"t20",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,2663989748644787],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			1213154536477098,
			[
				["l7_s1-sheet0.png", 56519, 0, 0, 1295, 196, 1, 0, 1,[],[0.0741313,-0.510204,0.907336,-0.387755,0.911969,-0.5,0.953668,-0.306122,0.00849421,-0.056122],0]
			]
			]
		],
		[
		],
		false,
		false,
		3217388741736392,
		[]
	]
,	[
		"t21",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,2663989748644787],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			2800698159452267,
			[
				["l7_s2-sheet0.png", 59167, 0, 0, 1277, 175, 1, 0, 1,[],[0.0743931,-0.457143,0.499608,-0.371429,0.884886,-0.16,0.972592,-0.502857,0.978857,-0.154286,0.499608,-0.051429,0.0806578,-0.588571],0]
			]
			]
		],
		[
		],
		false,
		false,
		3877449569767594,
		[]
	]
,	[
		"t22",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			1269101428354908,
			[
				["sprite-sheet0.png", 8945, 0, 0, 294, 720, 1, 0, 0,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		1464470822488996,
		[]
	]
,	[
		"t23",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			5336994890306017,
			[
				["pausegfx-sheet0.png", 2779, 0, 0, 143, 156, 1, 0.503497, 0.5,[],[-0.468532,-0.467949,0.447552,-0.455128,0.440559,0.448718,-0.447552,0.448718,-0.475525,0],0]
			]
			]
		],
		[
		],
		false,
		false,
		9130398624773948,
		[]
	]
,	[
		"t24",
		cr.plugins_.Sprite,
		false,
		[74250495477444],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			2260526401898428,
			[
				["playp-sheet0.png", 9118, 0, 0, 107, 107, 1, 0.504673, 0.504673,[],[-0.336449,-0.336449,-0.00934589,-0.429906,0.242991,-0.252337,0.308411,-0.00934589,0.205607,0.205607,-0.00934589,0.317757,-0.280374,0.271028,-0.46729,-0.00934589],0],
				["playp-sheet1.png", 9568, 0, 0, 107, 107, 1, 0.504673, 0.504673,[],[],0],
				["playp-sheet2.png", 9134, 0, 0, 107, 107, 1, 0.504673, 0.504673,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		2102133361098588,
		[]
	]
,	[
		"t25",
		cr.plugins_.Sprite,
		false,
		[74250495477444],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			6366494426975297,
			[
				["howtop-sheet0.png", 8850, 0, 0, 107, 107, 1, 0.504673, 0.504673,[],[],0],
				["howtop-sheet1.png", 9098, 0, 0, 107, 107, 1, 0.504673, 0.504673,[],[],0],
				["howtop-sheet2.png", 8554, 0, 0, 107, 107, 1, 0.504673, 0.504673,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		9979885477771441,
		[]
	]
,	[
		"t26",
		cr.plugins_.Sprite,
		false,
		[74250495477444],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			5426421770487031,
			[
				["backp-sheet0.png", 8588, 0, 0, 107, 107, 1, 0.504673, 0.504673,[],[-0.336449,-0.336449,-0.00934589,-0.429906,0.242991,-0.252337,0.308411,-0.00934589,0.205607,0.205607,-0.00934589,0.317757,-0.280374,0.271028,-0.46729,-0.00934589],0],
				["backp-sheet1.png", 9000, 0, 0, 107, 107, 1, 0.504673, 0.504673,[],[],0],
				["backp-sheet2.png", 8149, 0, 0, 107, 107, 1, 0.504673, 0.504673,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		8546203511268591,
		[]
	]
,	[
		"t27",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			9627536825046935,
			[
				["overlay-sheet0.png", 362, 0, 0, 322, 180, 1, 0, 0,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		5333402536042484,
		[]
	]
,	[
		"t28",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			827923377182705,
			[
				["endbackp-sheet0.png", 102813, 0, 0, 829, 511, 1, 0.500603, 0.500978,[],[-0.465621,-0.444227,0.464415,-0.444227,0.465621,0.444227,-0.468034,0.446184],0]
			]
			]
		],
		[
		],
		false,
		false,
		3208543810276902,
		[]
	]
,	[
		"t29",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			4633833108088852,
			[
				["overlay-sheet0.png", 362, 0, 0, 322, 180, 1, 0, 0,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		6802283339616065,
		[]
	]
,	[
		"t30",
		cr.plugins_.Sprite,
		false,
		[74250495477444],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			8788907535782031,
			[
				["backp-sheet0.png", 8588, 0, 0, 107, 107, 1, 0.504673, 0.504673,[],[-0.336449,-0.336449,-0.00934589,-0.429906,0.242991,-0.252337,0.308411,-0.00934589,0.205607,0.205607,-0.00934589,0.317757,-0.280374,0.271028,-0.46729,-0.00934589],0],
				["backp-sheet1.png", 9000, 0, 0, 107, 107, 1, 0.504673, 0.504673,[],[],0],
				["backp-sheet2.png", 8149, 0, 0, 107, 107, 1, 0.504673, 0.504673,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		7003584000252799,
		[]
	]
,	[
		"t31",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			6915018316288295,
			[
				["overlay-sheet0.png", 362, 0, 0, 322, 180, 1, 0, 0,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		7362418179023477,
		[]
	]
,	[
		"t32",
		cr.plugins_.Sprite,
		false,
		[74250495477444],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			5799657751392373,
			[
				["replayend-sheet0.png", 9472, 0, 0, 107, 107, 1, 0.504673, 0.504673,[],[-0.345794,-0.345794,-0.00934589,-0.429906,0.242991,-0.252337,0.299065,-0.00934589,0.205607,0.205607,-0.00934589,0.308411,-0.280374,0.271028,-0.476635,-0.00934589],0],
				["replayend-sheet1.png", 10051, 0, 0, 107, 107, 1, 0.504673, 0.504673,[],[],0],
				["replayend-sheet2.png", 9407, 0, 0, 107, 107, 1, 0.504673, 0.504673,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		3937926998131,
		[]
	]
,	[
		"t33",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			2145240976005874,
			[
				["chickenend-sheet0.png", 28957, 0, 0, 331, 193, 1, 0.501511, 0.502591,[],[-0.404834,-0.336788,-0.00302157,-0.0466317,0.138972,0.113989,4.17233e-007,-0.00518167,0.444108,0.404145,-0.00302157,0.435233,-0.39275,0.31088],0]
			]
			]
		],
		[
		],
		false,
		false,
		8711087417076587,
		[]
	]
,	[
		"t34",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			4585173301156746,
			[
				["endbackp-sheet0.png", 102813, 0, 0, 829, 511, 1, 0.500603, 0.500978,[],[-0.465621,-0.444227,0.464415,-0.444227,0.465621,0.444227,-0.468034,0.446184],0]
			]
			]
		],
		[
		],
		false,
		false,
		4109914043379335,
		[]
	]
,	[
		"t35",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			291426376107088,
			[
				["kelchend-sheet0.png", 2820, 0, 0, 47, 55, 1, 0.510638, 0.509091,[],[-0.446808,-0.454545,-0.0212763,-0.472727,0.382979,-0.418182,0.19149,-0.0181819,0.319149,0.345454,-0.0212763,0.363636,-0.340425,0.345454,-0.234042,-0.0181819],0]
			]
			]
		],
		[
		],
		false,
		false,
		1623376801269034,
		[]
	]
,	[
		"t36",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			9454585810136782,
			[
				["newrecord-sheet0.png", 11439, 0, 0, 132, 131, 1, 0.5, 0.503817,[],[-0.325758,-0.328244,0,-0.412214,0.272727,-0.274809,0.386364,-0.00763378,0.280303,0.274809,0,0.40458,-0.318182,0.312977,-0.477273,-0.00763378],0]
			]
			]
		],
		[
		],
		false,
		false,
		1899691570554377,
		[]
	]
,	[
		"t37",
		cr.plugins_.Spritefont2,
		false,
		[],
		0,
		0,
		["spritefonthighscoreend.png", 11411, 0],
		null,
		[
		],
		false,
		false,
		2091780682062886,
		[]
	]
,	[
		"t38",
		cr.plugins_.Spritefont2,
		false,
		[],
		0,
		0,
		["spritefonthighscoreend.png", 11411, 0],
		null,
		[
		],
		false,
		false,
		6829418837279185,
		[]
	]
,	[
		"t39",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			4216437327165959,
			[
				["main_back-sheet0.png", 19664, 0, 0, 1280, 720, 1, 0, 0,[],[],1]
			]
			]
		],
		[
		],
		false,
		false,
		5892141104244825,
		[]
	]
,	[
		"t40",
		cr.plugins_.Sprite,
		false,
		[74250495477444],
		1,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			4717403549310823,
			[
				["play_main-sheet0.png", 24015, 0, 0, 235, 235, 1, 0.502128, 0.502128,[],[-0.344681,-0.344681,-0.00425565,-0.476596,0.297872,-0.302128,0.370212,-0.00425565,0.246808,0.246808,-0.00425565,0.353191,-0.276596,0.27234,-0.446809,-0.00425565],0],
				["play_main-sheet1.png", 25267, 0, 0, 235, 235, 1, 0.502128, 0.502128,[],[],0],
				["play_main-sheet2.png", 23952, 0, 0, 235, 235, 1, 0.502128, 0.502128,[],[],0]
			]
			]
		],
		[
		[
			"EaseTween",
			cr.behaviors.lunarray_Tween,
			8457961858018834
		]
		],
		false,
		false,
		5307820208977152,
		[]
	]
,	[
		"t41",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			6763937941418787,
			[
				["headless_logo-sheet0.png", 66757, 0, 0, 619, 185, 1, 0.500808, 0.502703,[],[-0.478191,-0.427027,-0.00161576,-0.275676,0.452342,-0.345946,0.437803,0.291892,-0.00161576,0.345946,-0.432956,0.27027,-0.471729,-0.00540572],0]
			]
			]
		],
		[
		[
			"EaseTween",
			cr.behaviors.lunarray_Tween,
			6337450627954028
		]
		],
		false,
		false,
		3825836041810518,
		[]
	]
,	[
		"t42",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			3126677731487766,
			[
				["dslogo-sheet0.png", 1054, 0, 0, 66, 66, 1, 0.5, 0.5,[],[-0.454545,-0.454545,0,-0.5,0.454545,-0.454545,0.5,0,0.454545,0.454545,0,0.5,-0.454545,0.454545,-0.5,0],0]
			]
			]
		],
		[
		],
		false,
		false,
		4564647417740513,
		[]
	]
,	[
		"t43",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			9282094150794085,
			[
				["instructions-sheet0.png", 8688, 0, 0, 174, 125, 1, 0.5, 0.504,[],[-0.304598,-0.232,0,-0.288,0.350575,-0.296,0.241379,-0.00800002,0.385057,0.336,0,0.24,-0.373563,0.32,-0.304598,-0.00800002],0]
			]
			]
		],
		[
		],
		false,
		false,
		8496344356200695,
		[]
	]
,	[
		"t44",
		cr.plugins_.Sprite,
		false,
		[74250495477444],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			759189472030978,
			[
				["options-sheet0.png", 9166, 0, 0, 111, 111, 1, 0.504505, 0.504505,[],[-0.342342,-0.342342,-0.00900951,-0.468468,0.270271,-0.27928,0.324324,-0.00900951,0.216217,0.216217,-0.00900951,0.315315,-0.261262,0.252253,-0.432432,-0.00900951],0],
				["options-sheet1.png", 9852, 0, 0, 111, 111, 1, 0.504505, 0.504505,[],[],0],
				["options-sheet2.png", 9475, 0, 0, 111, 111, 1, 0.504505, 0.504505,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		9677189613207281,
		[]
	]
,	[
		"t45",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			9276982262779747,
			[
				["headless_logo-sheet0.png", 66757, 0, 0, 619, 185, 1, 0.500808, 0.502703,[],[-0.478191,-0.427027,-0.00161576,-0.275676,0.452342,-0.345946,0.437803,0.291892,-0.00161576,0.345946,-0.432956,0.27027,-0.471729,-0.00540572],0]
			]
			]
		],
		[
		],
		false,
		false,
		1221950328332884,
		[]
	]
,	[
		"t46",
		cr.plugins_.Sprite,
		false,
		[74250495477444],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			3744136439344729,
			[
				["audiooff-sheet0.png", 9601, 0, 0, 111, 111, 1, 0.504505, 0.504505,[],[],0],
				["audiooff-sheet1.png", 9871, 0, 0, 111, 111, 1, 0.504505, 0.504505,[],[],0],
				["audiooff-sheet2.png", 9549, 0, 0, 111, 111, 1, 0.504505, 0.504505,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		196298559384544,
		[]
	]
,	[
		"t47",
		cr.plugins_.Sprite,
		false,
		[74250495477444],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			8147691469348018,
			[
				["audioon-sheet0.png", 9938, 0, 0, 111, 111, 1, 0.504505, 0.504505,[],[-0.342342,-0.342342,-0.00900951,-0.468468,0.270271,-0.27928,0.324324,-0.00900951,0.216217,0.216217,-0.00900951,0.315315,-0.261262,0.252253,-0.432432,-0.00900951],0],
				["audioon-sheet1.png", 10680, 0, 0, 111, 111, 1, 0.504505, 0.504505,[],[],0],
				["audioon-sheet2.png", 10182, 0, 0, 111, 111, 1, 0.504505, 0.504505,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		2964824460882283,
		[]
	]
,	[
		"t48",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			360827904115132,
			[
				["sprite3-sheet0.png", 5241, 0, 0, 527, 65, 1, 0.500949, 0.507692,[],[-0.0208728,0.138462,0.489563,0.415385,-0.491461,0.415385],0]
			]
			]
		],
		[
		],
		false,
		false,
		1161599339744359,
		[]
	]
,	[
		"t49",
		cr.plugins_.Sprite,
		false,
		[74250495477444],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			3712620672164166,
			[
				["facebookbutton-sheet0.png", 2436, 0, 0, 53, 56, 1, 0.509434, 0.5,[],[],0],
				["facebookbutton-sheet1.png", 2436, 0, 0, 53, 56, 1, 0.509434, 0.5,[],[],0],
				["facebookbutton-sheet2.png", 2436, 0, 0, 53, 56, 1, 0.509434, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		3092526980589428,
		[]
	]
,	[
		"t50",
		cr.plugins_.Sprite,
		false,
		[74250495477444],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			2467469683592349,
			[
				["googleplusbutton-sheet0.png", 3361, 0, 0, 54, 56, 1, 0.5, 0.517857,[],[-0.407407,-0.428571,0,-0.482143,0.388889,-0.410714,0.425926,-0.0178571,0.351852,0.339286,0,0.375,-0.37037,0.357143,-0.462963,-0.0178571],0],
				["googleplusbutton-sheet1.png", 3361, 0, 0, 54, 56, 1, 0.5, 0.517857,[],[-0.407407,-0.428571,0,-0.482143,0.388889,-0.410714,0.425926,-0.0178571,0.351852,0.339286,0,0.375,-0.37037,0.357143,-0.462963,-0.0178571],0],
				["googleplusbutton-sheet2.png", 3361, 0, 0, 54, 56, 1, 0.5, 0.517857,[],[-0.407407,-0.428571,0,-0.482143,0.388889,-0.410714,0.425926,-0.0178571,0.351852,0.339286,0,0.375,-0.37037,0.357143,-0.462963,-0.0178571],0]
			]
			]
		],
		[
		],
		false,
		false,
		1542386089506125,
		[]
	]
,	[
		"t51",
		cr.plugins_.Sprite,
		false,
		[74250495477444],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			7170661488980881,
			[
				["twitterbutton-sheet0.png", 3527, 0, 0, 55, 55, 1, 0.509091, 0.509091,[],[-0.4,-0.4,-0.0181819,-0.472727,0.381818,-0.4,0.418182,-0.0181819,0.363636,0.363636,-0.0181819,0.4,-0.381818,0.363636,-0.454545,-0.0181819],0],
				["twitterbutton-sheet1.png", 3527, 0, 0, 55, 55, 1, 0.509091, 0.509091,[],[-0.4,-0.4,-0.0181819,-0.472727,0.381818,-0.4,0.418182,-0.0181819,0.363636,0.363636,-0.0181819,0.4,-0.381818,0.363636,-0.454545,-0.0181819],0],
				["twitterbutton-sheet2.png", 3527, 0, 0, 55, 55, 1, 0.509091, 0.509091,[],[-0.4,-0.4,-0.0181819,-0.472727,0.381818,-0.4,0.418182,-0.0181819,0.363636,0.363636,-0.0181819,0.4,-0.381818,0.363636,-0.454545,-0.0181819],0]
			]
			]
		],
		[
		],
		false,
		false,
		8640303117890048,
		[]
	]
,	[
		"t52",
		cr.plugins_.Sprite,
		false,
		[74250495477444],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			4657968762448748,
			[
				["youtubebutton-sheet0.png", 3174, 0, 0, 54, 55, 1, 0.5, 0.509091,[],[-0.407407,-0.418182,0,-0.454545,0.388889,-0.4,0.407407,-0.0181819,0.351852,0.345454,0,0.4,-0.37037,0.363636,-0.462963,-0.0181819],0],
				["youtubebutton-sheet1.png", 3174, 0, 0, 54, 55, 1, 0.5, 0.509091,[],[-0.407407,-0.418182,0,-0.454545,0.388889,-0.4,0.407407,-0.0181819,0.351852,0.345454,0,0.4,-0.37037,0.363636,-0.462963,-0.0181819],0],
				["youtubebutton-sheet2.png", 3174, 0, 0, 54, 55, 1, 0.5, 0.509091,[],[-0.407407,-0.418182,0,-0.454545,0.388889,-0.4,0.407407,-0.0181819,0.351852,0.345454,0,0.4,-0.37037,0.363636,-0.462963,-0.0181819],0]
			]
			]
		],
		[
		],
		false,
		false,
		5379688534094415,
		[]
	]
,	[
		"t53",
		cr.plugins_.Sprite,
		false,
		[74250495477444],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			7093834533059788,
			[
				["moregamesbutton-sheet0.png", 15876, 1, 1, 142, 91, 1, 0.507042, 0.505495,[],[-0.443662,-0.406593,-0.00704223,-0.472528,0.408451,-0.373627,0.415493,-0.0109895,0.366197,0.296703,-0.00704223,0.318681,-0.387324,0.307692,-0.471831,-0.0109895],0],
				["moregamesbutton-sheet0.png", 15876, 1, 93, 142, 91, 1, 0.5, 0.505495,[],[],0],
				["moregamesbutton-sheet1.png", 6798, 0, 0, 142, 91, 1, 0.5, 0.505495,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		3143292544670104,
		[]
	]
,	[
		"t54",
		cr.plugins_.Sprite,
		false,
		[74250495477444],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			4501846412093685,
			[
				["buybutton-sheet0.png", 15961, 1, 1, 145, 93, 1, 0.510345, 0.505376,[],[-0.441379,-0.397849,-0.0137928,-0.451613,0.393103,-0.354838,0.4,-0.0107524,0.358621,0.290323,-0.0137928,0.322581,-0.393104,0.311828,-0.468966,-0.0107524],0],
				["buybutton-sheet0.png", 15961, 1, 95, 145, 93, 1, 0.503448, 0.505376,[],[-0.455172,-0.430108,-0.00689626,-0.473118,0.413793,-0.376344,0.42069,-0.0107524,0.372414,0.301076,-0.00689626,0.333334,-0.4,0.333334,-0.489655,-0.0107524],0],
				["buybutton-sheet1.png", 6851, 0, 0, 145, 93, 1, 0.503448, 0.505376,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		9534409379152097,
		[]
	]
,	[
		"t55",
		cr.plugins_.Sprite,
		false,
		[8171715965114957],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			5354077171176407,
			[
				["a1-sheet0.png", 2181, 0, 0, 123, 80, 1, 0.504065, 0.5,[],[],0],
				["a1-sheet1.png", 3784, 0, 0, 123, 80, 1, 0.504065, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		5175290784377156,
		[]
	]
,	[
		"t56",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			5216895065693029,
			[
				["a1-sheet0.png", 2181, 0, 0, 123, 80, 1, 0.504065, 0.5,[],[],0],
				["a1-sheet1.png", 3784, 0, 0, 123, 80, 1, 0.504065, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		4505161400762213,
		[]
	]
,	[
		"t57",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			2788338460616182,
			[
				["a1-sheet0.png", 2181, 0, 0, 123, 80, 1, 0.504065, 0.5,[],[],0],
				["a1-sheet1.png", 3784, 0, 0, 123, 80, 1, 0.504065, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		8115528280301717,
		[]
	]
,	[
		"t58",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			3900045364501351,
			[
				["arrow-sheet0.png", 1200, 0, 0, 36, 41, 1, 0.5, 0.512195,[],[-0.25,-0.292683,0,-0.317073,0.138889,-0.195122,0.277778,-0.0243901,0.138889,0.170732,0,0.243903,-0.222222,0.243903,-0.444444,-0.0243901],0]
			]
			]
		],
		[
		],
		false,
		false,
		4196430471647838,
		[]
	]
,	[
		"t59",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			5809768489803486,
			[
				["r1-sheet0.png", 26635, 178, 1, 71, 43, 1, 0.507042, 0.511628,[],[],0],
				["r1-sheet0.png", 26635, 167, 115, 85, 32, 1, 0.505882, 0.5,[],[],0],
				["r1-sheet0.png", 26635, 83, 81, 83, 34, 1, 0.506024, 0.5,[],[],0],
				["r1-sheet0.png", 26635, 1, 116, 85, 32, 1, 0.505882, 0.5,[],[],0],
				["r1-sheet0.png", 26635, 87, 1, 90, 39, 1, 0.5, 0.512821,[],[],0],
				["r1-sheet0.png", 26635, 178, 45, 72, 34, 1, 0.5, 0.5,[],[],0],
				["r1-sheet0.png", 26635, 87, 41, 90, 39, 1, 0.5, 0.512821,[],[],0],
				["r1-sheet0.png", 26635, 173, 148, 81, 33, 1, 0.506173, 0.515152,[],[],0],
				["r1-sheet0.png", 26635, 167, 81, 83, 33, 1, 0.506024, 0.515152,[],[],0],
				["r1-sheet0.png", 26635, 1, 1, 85, 45, 1, 0.505882, 0.511111,[],[],0],
				["r1-sheet0.png", 26635, 1, 47, 81, 42, 1, 0.506173, 0.5,[],[],0],
				["r1-sheet0.png", 26635, 87, 148, 85, 32, 1, 0.505882, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		7507654919986287,
		[]
	]
,	[
		"t60",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			794376797376053,
			[
				["r2-sheet0.png", 23029, 172, 45, 75, 39, 1, 0.506667, 0.512821,[],[-0.386667,-0.282052,-0.0133336,-0.0769235,0.373333,-0.282052,0.48,-0.0256415,0.293333,0.102564,-0.0133336,0.102564,-0.426667,0.333333,-0.453333,-0.0256415],0],
				["r2-sheet0.png", 23029, 1, 47, 75, 39, 1, 0.506667, 0.512821,[],[],0],
				["r2-sheet0.png", 23029, 178, 1, 71, 43, 1, 0.507042, 0.511628,[],[],0],
				["r2-sheet0.png", 23029, 87, 1, 90, 39, 1, 0.5, 0.512821,[],[],0],
				["r2-sheet0.png", 23029, 168, 118, 84, 27, 1, 0.5, 0.518519,[],[],0],
				["r2-sheet0.png", 23029, 87, 118, 80, 29, 1, 0.5, 0.517241,[],[],0],
				["r2-sheet0.png", 23029, 161, 85, 85, 32, 1, 0.505882, 0.5,[],[],0],
				["r2-sheet0.png", 23029, 1, 1, 85, 45, 1, 0.505882, 0.511111,[],[],0],
				["r2-sheet0.png", 23029, 77, 77, 83, 34, 1, 0.506024, 0.5,[],[],0],
				["r2-sheet0.png", 23029, 87, 41, 84, 35, 1, 0.5, 0.514286,[],[],0],
				["r2-sheet0.png", 23029, 1, 112, 85, 32, 1, 0.505882, 0.5,[],[],0],
				["r2-sheet0.png", 23029, 1, 145, 84, 27, 1, 0.5, 0.518519,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		3226950982305751,
		[]
	]
,	[
		"t61",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			8733602263467129,
			[
				["r3-sheet1.png", 8459, 1, 1, 82, 42, 1, 0.5, 0.5,[],[],0],
				["r3-sheet2.png", 3579, 1, 62, 82, 27, 1, 0.5, 0.518519,[],[],0],
				["r3-sheet2.png", 3579, 1, 34, 84, 27, 1, 0.5, 0.518519,[],[],0],
				["r2-sheet0.png", 23029, 1, 47, 75, 39, 1, 0.506667, 0.512821,[],[],0],
				["r3-sheet1.png", 8459, 1, 80, 85, 32, 1, 0.505882, 0.5,[],[],0],
				["r2-sheet0.png", 23029, 178, 1, 71, 43, 1, 0.507042, 0.511628,[],[],0],
				["r3-sheet2.png", 3579, 1, 90, 82, 27, 1, 0.5, 0.518519,[],[],0],
				["r3-sheet0.png", 9118, 1, 1, 89, 47, 1, 0.505618, 0.510638,[],[],0],
				["r3-sheet0.png", 9118, 1, 49, 90, 39, 1, 0.5, 0.512821,[],[],0],
				["r3-sheet2.png", 3579, 1, 1, 85, 32, 1, 0.505882, 0.5,[],[],0],
				["r3-sheet0.png", 9118, 1, 89, 84, 35, 1, 0.5, 0.514286,[],[],0],
				["r3-sheet1.png", 8459, 1, 44, 84, 35, 1, 0.5, 0.514286,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		3582310977887493,
		[]
	]
,	[
		"t62",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			4194990122914994,
			[
				["unlocks-sheet0.png", 20195, 1, 1, 96, 84, 1, 0.5, 0.5,[],[],0],
				["unlocks-sheet0.png", 20195, 98, 1, 96, 84, 1, 0.5, 0.5,[],[],0],
				["unlocks-sheet0.png", 20195, 1, 86, 96, 84, 1, 0.5, 0.5,[],[],0],
				["unlocks-sheet0.png", 20195, 98, 86, 96, 84, 1, 0.5, 0.5,[],[],0],
				["unlocks-sheet0.png", 20195, 1, 171, 96, 84, 1, 0.510417, 0.5,[],[-0.15625,-0.095238,-0.0104167,-0.333333,-0.197917,0.285714,0.0416663,0,0.28125,0.261905,-0.0104167,0.380952,-0.322917,0.285714,-0.125,0],0],
				["unlocks-sheet0.png", 20195, 98, 171, 96, 84, 1, 0.5, 0.5,[],[],0],
				["unlocks-sheet1.png", 20478, 1, 1, 96, 84, 1, 0.5, 0.5,[],[],0],
				["unlocks-sheet1.png", 20478, 98, 1, 96, 84, 1, 0.5, 0.5,[],[],0],
				["unlocks-sheet1.png", 20478, 1, 86, 96, 84, 1, 0.5, 0.5,[],[],0],
				["unlocks-sheet1.png", 20478, 98, 86, 96, 84, 1, 0.5, 0.5,[],[],0],
				["unlocks-sheet1.png", 20478, 1, 171, 96, 84, 1, 0.5, 0.5,[],[],0],
				["unlocks-sheet1.png", 20478, 98, 171, 96, 84, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		9045363061820321,
		[]
	]
,	[
		"t63",
		cr.plugins_.Arr,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		true,
		false,
		9120867561416452,
		[]
	]
,	[
		"t64",
		cr.plugins_.Spritefont2,
		false,
		[],
		0,
		0,
		["spritefonta1.png", 887, 2],
		null,
		[
		],
		false,
		false,
		4619790437251598,
		[]
	]
,	[
		"t65",
		cr.plugins_.Spritefont2,
		false,
		[],
		0,
		0,
		["spritefonta1.png", 887, 2],
		null,
		[
		],
		false,
		false,
		835256810986643,
		[]
	]
,	[
		"t66",
		cr.plugins_.Spritefont2,
		false,
		[],
		0,
		0,
		["spritefonta1.png", 887, 2],
		null,
		[
		],
		false,
		false,
		2310185573673359,
		[]
	]
,	[
		"t67",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			8767764718939809,
			[
				["unlocks-sheet0.png", 20195, 1, 1, 96, 84, 1, 0.5, 0.5,[],[],0],
				["unlocks-sheet0.png", 20195, 98, 1, 96, 84, 1, 0.5, 0.5,[],[],0],
				["unlocks-sheet0.png", 20195, 1, 86, 96, 84, 1, 0.5, 0.5,[],[],0],
				["unlocks-sheet0.png", 20195, 98, 86, 96, 84, 1, 0.5, 0.5,[],[],0],
				["unlocks-sheet0.png", 20195, 1, 171, 96, 84, 1, 0.510417, 0.5,[],[-0.15625,-0.095238,-0.0104167,-0.333333,-0.197917,0.285714,0.0416663,0,0.28125,0.261905,-0.0104167,0.380952,-0.322917,0.285714,-0.125,0],0],
				["unlocks-sheet0.png", 20195, 98, 171, 96, 84, 1, 0.5, 0.5,[],[],0],
				["unlocks-sheet1.png", 20478, 1, 1, 96, 84, 1, 0.5, 0.5,[],[],0],
				["unlocks-sheet1.png", 20478, 98, 1, 96, 84, 1, 0.5, 0.5,[],[],0],
				["unlocks-sheet1.png", 20478, 1, 86, 96, 84, 1, 0.5, 0.5,[],[],0],
				["unlocks-sheet1.png", 20478, 98, 86, 96, 84, 1, 0.5, 0.5,[],[],0],
				["unlocks-sheet1.png", 20478, 1, 171, 96, 84, 1, 0.5, 0.5,[],[],0],
				["unlocks-sheet1.png", 20478, 98, 171, 96, 84, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		9421909756069058,
		[]
	]
,	[
		"t68",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			4969086763663907,
			[
				["ribbon-sheet0.png", 6294, 0, 0, 96, 84, 1, 0.5, 0.5,[],[-0.270833,-0.238095,0,-0.404762,0.208333,-0.166667,0.1875,0,0.135417,0.083333,0,0.380952,-0.177083,0.130952,-0.21875,0],0]
			]
			]
		],
		[
		],
		false,
		false,
		1799157572330109,
		[]
	]
,	[
		"t69",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			1240988136780978,
			[
				["overlay-sheet0.png", 362, 0, 0, 322, 180, 1, 0, 0,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		6719110746733865,
		[]
	]
,	[
		"t70",
		cr.plugins_.Sprite,
		false,
		[74250495477444],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			3908127402142294,
			[
				["playp-sheet0.png", 9118, 0, 0, 107, 107, 1, 0.504673, 0.504673,[],[-0.336449,-0.336449,-0.00934589,-0.429906,0.242991,-0.252337,0.308411,-0.00934589,0.205607,0.205607,-0.00934589,0.317757,-0.280374,0.271028,-0.46729,-0.00934589],0],
				["playp-sheet1.png", 9568, 0, 0, 107, 107, 1, 0.504673, 0.504673,[],[],0],
				["playp-sheet2.png", 9134, 0, 0, 107, 107, 1, 0.504673, 0.504673,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		5459511695583236,
		[]
	]
,	[
		"t71",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			3077448416577114,
			[
				["screen1backtut-sheet0.png", 150630, 0, 0, 794, 476, 1, 0.5, 0.5,[],[-0.489924,-0.483193,0.486146,-0.476891,0.483627,0.472689,-0.487406,0.478992],0]
			]
			]
		],
		[
		],
		false,
		false,
		8318501198608428,
		[]
	]
,	[
		"t72",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			6700009595680762,
			[
				["mobilejump-sheet0.png", 4462, 0, 0, 102, 85, 1, 0.5, 0.505882,[],[-0.431372,-0.423529,0,-0.164706,0.205882,-0.152941,0.313725,-0.0117644,0.303922,0.258824,0,0.317647,-0.235294,0.176471,-0.137255,-0.0117644],0]
			]
			]
		],
		[
		],
		false,
		false,
		4214880388485712,
		[]
	]
,	[
		"t73",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			1066002108728748,
			[
				["pcup-sheet0.png", 3880, 0, 0, 109, 76, 1, 0.504587, 0.5,[],[-0.155963,0,-0.00917417,-0.447368,0.165138,-0.026316,0.394496,0,0.385321,0.342105,-0.00917417,0.381579,-0.422018,0.381579,-0.46789,0],0]
			]
			]
		],
		[
		],
		false,
		false,
		5079092687883656,
		[]
	]
,	[
		"t74",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			495255348460016,
			[
				["screen2backtut-sheet0.png", 120194, 0, 0, 794, 476, 1, 0.5, 0.5,[],[-0.489924,-0.483193,0.486146,-0.476891,0.483627,0.472689,-0.487406,0.478992],0]
			]
			]
		],
		[
		],
		false,
		false,
		1753340944637333,
		[]
	]
,	[
		"t75",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			5717411943518766,
			[
				["pcleft-sheet0.png", 3997, 0, 0, 109, 76, 1, 0.504587, 0.5,[],[-0.155963,0,-0.00917417,-0.447368,0.165138,-0.026316,0.394496,0,0.385321,0.342105,-0.00917417,0.381579,-0.422018,0.381579,-0.46789,0],0]
			]
			]
		],
		[
		],
		false,
		false,
		5186861134506403,
		[]
	]
,	[
		"t76",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			5046316629463502,
			[
				["pcright-sheet0.png", 4039, 0, 0, 109, 76, 1, 0.504587, 0.5,[],[-0.155963,0,-0.00917417,-0.447368,0.165138,-0.026316,0.394496,0,0.385321,0.342105,-0.00917417,0.381579,-0.422018,0.381579,-0.46789,0],0]
			]
			]
		],
		[
		],
		false,
		false,
		3883838438644695,
		[]
	]
,	[
		"t77",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			154571398328049,
			[
				["mobile_left-sheet0.png", 6728, 0, 0, 136, 106, 1, 0.507353, 0.5,[],[-0.433824,-0.40566,-0.00735295,-0.330189,0.360294,-0.330189,0.404412,0,0.286765,0.235849,-0.00735295,0.301887,-0.279412,0.207547,-0.308824,0],0]
			]
			]
		],
		[
		],
		false,
		false,
		3465404987967743,
		[]
	]
,	[
		"t78",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			4199626344535951,
			[
				["mobile_right-sheet0.png", 7077, 0, 0, 150, 108, 1, 0.506667, 0.5,[],[-0.333334,-0.259259,-0.00666666,-0.351852,0.4,-0.37037,0.273333,0,0.24,0.148148,-0.00666666,0.277778,-0.266667,0.166667,-0.393334,0],0]
			]
			]
		],
		[
		],
		false,
		false,
		4580585561471918,
		[]
	]
,	[
		"t79",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			3993286051090904,
			[
				["healthbar-sheet0.png", 2812, 0, 0, 710, 45, 1, 0.505634, 0.488889,[],[-0.491549,-0.266667,-0.00563383,-0.333333,0.476056,-0.2,0.474648,0.2,-0.00563383,0.288889,-0.488732,0.244444,-0.497183,1.19209e-007],0]
			]
			]
		],
		[
		[
			"Flash",
			cr.behaviors.Flash,
			207406369522186
		]
		],
		false,
		false,
		4713530389565338,
		[]
	]
,	[
		"t80",
		cr.plugins_.TiledBg,
		false,
		[],
		1,
		0,
		["healthdisplay.png", 176, 1],
		null,
		[
		[
			"Flash",
			cr.behaviors.Flash,
			4272135176819579
		]
		],
		false,
		false,
		7986186480255381,
		[]
	]
,	[
		"t81",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			6404807573508671,
			[
				["topbar-sheet0.png", 33395, 0, 0, 1286, 188, 1, 0, 0,[],[0.000777605,0.00531915,0.999222,0.00531915,1,0.56383,0,0.569149],0]
			]
			]
		],
		[
		[
			"Solid",
			cr.behaviors.solid,
			1310502431261847
		]
		],
		false,
		false,
		4330647065326823,
		[]
	]
,	[
		"t82",
		cr.plugins_.Sprite,
		false,
		[74250495477444],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			4196738014102847,
			[
				["pausebutton-sheet0.png", 6776, 0, 0, 95, 95, 1, 0.505263, 0.505263,[],[],0],
				["pausebutton-sheet1.png", 7389, 0, 0, 95, 95, 1, 0.505263, 0.505263,[],[],0],
				["pausebutton-sheet2.png", 6828, 0, 0, 95, 95, 1, 0.505263, 0.505263,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		9493117646759026,
		[]
	]
,	[
		"t83",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			8370781764786885,
			[
				["kelchend-sheet0.png", 2820, 0, 0, 47, 55, 1, 0.510638, 0.509091,[],[-0.446808,-0.454545,-0.0212763,-0.472727,0.382979,-0.418182,0.19149,-0.0181819,0.319149,0.345454,-0.0212763,0.363636,-0.340425,0.345454,-0.234042,-0.0181819],0]
			]
			]
		],
		[
		],
		false,
		false,
		1032638738844453,
		[]
	]
,	[
		"t84",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			4397605617604137,
			[
				["timer-sheet0.png", 2591, 0, 0, 46, 54, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		570334413137731,
		[]
	]
,	[
		"t85",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			221424181160945,
			[
				["multiply2-sheet0.png", 10546, 0, 0, 132, 131, 1, 0.5, 0.503817,[],[-0.325758,-0.328244,0,-0.412214,0.272727,-0.274809,0.386364,-0.00763378,0.280303,0.274809,0,0.40458,-0.318182,0.312977,-0.477273,-0.00763378],0]
			]
			]
		],
		[
		[
			"EaseTween",
			cr.behaviors.lunarray_Tween,
			1289327060194067
		]
		],
		false,
		false,
		9913805160795078,
		[]
	]
,	[
		"t86",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			948947665811925,
			[
				["attention-sheet0.png", 1549, 0, 0, 34, 70, 1, 0.5, 0.5,[],[-0.294118,-0.4,0,-0.457143,0.294118,-0.4,0.147059,0,0.147059,0.328571,0,0.414286,-0.323529,0.414286,-0.323529,0],0]
			]
			]
		],
		[
		[
			"EaseTween",
			cr.behaviors.lunarray_Tween,
			12241912369208
		]
		],
		false,
		false,
		9645019635088909,
		[]
	]
,	[
		"t87",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,301830691533469,7084335515708612],
		2,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			1119895783996731,
			[
				["nearmiss-sheet0.png", 15139, 150, 133, 69, 43, 1, 0.507246, 0.511628,[],[0.362319,-0.302326,0.391305,-0.0232559,-0.463768,-0.0232559],0],
				["nearmiss-sheet0.png", 15139, 1, 177, 69, 43, 1, 0.507246, 0.511628,[],[0.362319,-0.302326,0.391305,-0.0232559,-0.463768,-0.0232559],0],
				["nearmiss-sheet0.png", 15139, 76, 133, 73, 43, 1, 0.506849, 0.511628,[],[],0],
				["nearmiss-sheet0.png", 15139, 79, 45, 75, 43, 1, 0.506667, 0.511628,[],[],0],
				["nearmiss-sheet0.png", 15139, 1, 45, 77, 43, 1, 0.506494, 0.511628,[],[],0],
				["nearmiss-sheet0.png", 15139, 77, 89, 74, 43, 1, 0.5, 0.511628,[],[],0],
				["nearmiss-sheet0.png", 15139, 155, 45, 75, 43, 1, 0.506667, 0.511628,[],[],0],
				["nearmiss-sheet0.png", 15139, 1, 89, 75, 43, 1, 0.506667, 0.511628,[],[],0],
				["nearmiss-sheet0.png", 15139, 152, 89, 74, 43, 1, 0.5, 0.511628,[],[],0],
				["nearmiss-sheet0.png", 15139, 1, 133, 74, 43, 1, 0.5, 0.511628,[],[],0],
				["nearmiss-sheet0.png", 15139, 97, 1, 91, 43, 1, 0.505495, 0.511628,[],[],0],
				["nearmiss-sheet0.png", 15139, 1, 1, 95, 43, 1, 0.505263, 0.511628,[],[],0]
			]
			]
		],
		[
		[
			"EaseTween",
			cr.behaviors.lunarray_Tween,
			6420013024912658
		]
,		[
			"EaseTween2",
			cr.behaviors.lunarray_Tween,
			4353141838352439
		]
		],
		false,
		false,
		7434307839826926,
		[]
	]
,	[
		"t88",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			2973036119157475,
			[
				["nearmisstext-sheet0.png", 4048, 0, 0, 179, 44, 1, 0.502793, 0.5,[],[-0.00558633,-0.409091,0.452514,-0.318182,-0.480447,-0.159091],0]
			]
			]
		],
		[
		[
			"EaseTween",
			cr.behaviors.lunarray_Tween,
			2670366282159804
		]
		],
		false,
		false,
		9876592412044172,
		[]
	]
,	[
		"t89",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			3429590084313719,
			[
				["boostzone-sheet0.png", 4824, 0, 0, 467, 35, 1, 1.00214, 0.514286,[],[-0.989293,-0.342857,-0.503212,-0.342857,-0.0299783,-0.142857,-0.0192723,-0.0285718,-0.0256963,0.171428,-0.503212,0.314285,-0.989293,0.314285],0]
			]
			]
		],
		[
		[
			"Flash",
			cr.behaviors.Flash,
			2636839969728375
		]
		],
		false,
		false,
		1080704680865885,
		[]
	]
,	[
		"t90",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			6837789537899328,
			[
				["multiply2-sheet0.png", 10546, 0, 0, 132, 131, 1, 0.5, 0.503817,[],[-0.325758,-0.328244,0,-0.412214,0.272727,-0.274809,0.386364,-0.00763378,0.280303,0.274809,0,0.40458,-0.318182,0.312977,-0.477273,-0.00763378],0]
			]
			]
		],
		[
		],
		false,
		false,
		627416376389577,
		[]
	]
,	[
		"t91",
		cr.plugins_.Sprite,
		false,
		[74250495477444],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			5959165270506899,
			[
				["useablebloodbutton-sheet0.png", 3518, 0, 0, 67, 85, 1, 0, 0.564706,[],[0,-0.564706,1,-0.561765,1,0.435294,0,0.435294],0],
				["useablebloodbutton-sheet1.png", 3518, 0, 0, 67, 85, 1, 0, 0.564706,[],[0,-0.564706,1,-0.561765,1,0.435294,0,0.435294],0],
				["useablebloodbutton-sheet2.png", 3518, 0, 0, 67, 85, 1, 0, 0.564706,[],[0,-0.564706,1,-0.561765,1,0.435294,0,0.435294],0]
			]
			]
		],
		[
		],
		false,
		false,
		7027144216601019,
		[]
	]
,	[
		"t92",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			2849792059533332,
			[
				["f1-sheet0.png", 332, 0, 0, 29, 17, 1, 0.517241, 0.529412,[],[-0.0344824,-0.411765,0.379311,0.294117,-0.413793,0.294117],2]
			]
			]
		],
		[
		],
		false,
		false,
		9476431377323396,
		[]
	]
,	[
		"t93",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			5337586666402651,
			[
				["black_space-sheet0.png", 125, 0, 0, 800, 40, 1, 0.5, 0.5,[],[],4]
			]
			]
		],
		[
		],
		false,
		false,
		4051182206149818,
		[]
	]
,	[
		"t94",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			7166515504919786,
			[
				["permanentunlocked-sheet0.png", 6806, 0, 0, 388, 47, 1, 0.5, 0.510638,[],[-0.489691,-0.425532,0,-0.234042,0.479381,-0.340425,0.463918,0.19149,-0.46134,0.170213,-0.492268,-0.0212763],0]
			]
			]
		],
		[
		[
			"EaseTween",
			cr.behaviors.lunarray_Tween,
			5448075018607251
		]
		],
		false,
		false,
		5152052453758382,
		[]
	]
,	[
		"t95",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			931280913022942,
			[
				["pickupunlocked-sheet0.png", 5972, 0, 0, 325, 47, 1, 0.501538, 0.510638,[],[-0.489231,-0.425532,-0.00307646,-0.255319,0.473847,-0.340425,0.455385,0.19149,-0.455385,0.170213,-0.492308,-0.0212763],0]
			]
			]
		],
		[
		[
			"EaseTween",
			cr.behaviors.lunarray_Tween,
			3218181620699115
		]
		],
		false,
		false,
		147865127637242,
		[]
	]
,	[
		"t96",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			2803588249152041,
			[
				["sprite2-sheet0.png", 2508, 0, 0, 620, 300, 1, 0.5, 0.5,[],[],1]
			]
			]
		],
		[
		],
		false,
		false,
		7472168530455135,
		[]
	]
,	[
		"t97",
		cr.plugins_.Particles,
		false,
		[],
		0,
		0,
		["starparticle.png", 700, 0],
		null,
		[
		],
		false,
		false,
		7366169733140776,
		[]
	]
,	[
		"t98",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			9388340595121245,
			[
				["boostzone-sheet0.png", 4824, 0, 0, 467, 35, 1, 1.00214, 0.514286,[],[-0.989293,-0.342857,-0.503212,-0.342857,-0.0299783,-0.142857,-0.0192723,-0.0285718,-0.0256963,0.171428,-0.503212,0.314285,-0.989293,0.314285],0]
			]
			]
		],
		[
		[
			"Flash",
			cr.behaviors.Flash,
			6357468186788878
		]
		],
		false,
		false,
		6106746201673409,
		[]
	]
,	[
		"t99",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			2635393423259196,
			[
				["allunlocked-sheet0.png", 11457, 0, 0, 409, 70, 1, 0.498778, 0.314286,[],[0.383864,0.471428,0.481663,0.185714,0.476772,0.542857],0]
			]
			]
		],
		[
		[
			"EaseTween",
			cr.behaviors.lunarray_Tween,
			5200162718223598
		]
		],
		false,
		false,
		2172128138740315,
		[]
	]
,	[
		"t100",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,301830691533469,7084335515708612],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			8336384151884015,
			[
				["blade-sheet0.png", 12601, 0, 0, 205, 251, 1, -0.292683, 0.0398406,[],[0.463415,-0.0119522,0.668293,-0.0119522,0.541463,0.462151],0]
			]
			]
		],
		[
		],
		false,
		false,
		2498255380373139,
		[]
	]
,	[
		"t101",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,301830691533469,7084335515708612],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			6556616796416719,
			[
				["blade_back-sheet0.png", 5000, 0, 0, 147, 138, 1, 0.503401, 0.5,[],[-0.455782,-0.405797,0.414966,-0.413043,-0.0272103,0.384058],0]
			]
			]
		],
		[
		],
		false,
		false,
		3456979642913431,
		[]
	]
,	[
		"t102",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,301830691533469,7084335515708612,4663957248922965,1719337793121768,2630194092700791],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			5086132289235025,
			[
				["blade_wheel-sheet0.png", 4611, 0, 0, 204, 201, 1, 0.5, 0.502488,[],[-0.313725,-0.313433,0.00490201,-0.422886,0.343137,-0.278607,0.367647,0.23383,0,0.457711,-0.313725,0.308457,-0.441177,-0.00497553],0]
			]
			]
		],
		[
		[
			"Rotate",
			cr.behaviors.Rotate,
			7544359815655858
		]
		],
		false,
		false,
		774396518199811,
		[]
	]
,	[
		"t103",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,301830691533469,7084335515708612,4663957248922965,1719337793121768,2630194092700791],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			3541271828098488,
			[
				["blade_low-sheet0.png", 19604, 0, 0, 204, 283, 1, 0, 0.0424028,[],[0.367647,-0.0106007,0.700981,-0.0106007,0.931373,0.526501,0.823529,0.830389,0.5,0.922261,0.191176,0.819788,0.0588235,0.540636],0]
			]
			]
		],
		[
		],
		false,
		false,
		2002707136598411,
		[]
	]
,	[
		"t104",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,301830691533469,7084335515708612,4663957248922965,1719337793121768,2630194092700791],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			9365708215639311,
			[
				["blade_wheel-sheet0.png", 4611, 0, 0, 204, 201, 1, 0.5, 0.502488,[],[-0.313725,-0.313433,0,-0.467662,0.348039,-0.308458,0.460784,0.00497544,0.338235,0.313432,0,0.447761,-0.313725,0.308457,-0.441177,-0.00497553],0]
			]
			]
		],
		[
		[
			"Rotate",
			cr.behaviors.Rotate,
			9733116975196698
		]
		],
		false,
		false,
		3436243294589887,
		[]
	]
,	[
		"t105",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,301830691533469,7084335515708612],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			4314160039801501,
			[
				["ground_blade-sheet0.png", 15054, 0, 0, 232, 256, 1, 0.00431034, 0.960938,[],[0.448276,-0.652344,0.762931,0.00390649,0.112069,0.0078125],0]
			]
			]
		],
		[
		],
		false,
		false,
		3394527224144183,
		[]
	]
,	[
		"t106",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,301830691533469,7084335515708612,4663957248922965,1719337793121768,2630194092700791],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			9437718146287785,
			[
				["ground_blade_low-sheet0.png", 21873, 0, 0, 232, 290, 1, 0.00862069, 0.951724,[],[0.142241,-0.793103,0.469827,-0.917241,0.801724,-0.789655,0.978448,0.0137929,0.0344827,0.0137929],0]
			]
			]
		],
		[
		],
		false,
		false,
		7854566306429162,
		[]
	]
,	[
		"t107",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,301830691533469,7084335515708612],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			8565003901054486,
			[
				["ground_blade_back-sheet0.png", 6081, 0, 0, 229, 146, 1, 0.480349, 0.554795,[],[-0.0218343,-0.0684935,0.471616,0.369863,-0.441048,0.383561],0]
			]
			]
		],
		[
		],
		false,
		false,
		6290333773685657,
		[]
	]
,	[
		"t108",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,301830691533469,7084335515708612,4663957248922965,1719337793121768,2630194092700791],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			5922768483820957,
			[
				["knife-sheet0.png", 3097, 0, 0, 103, 70, 1, 0.495146, 0.471429,[],[-0.288835,-0.403571,0.478155,0.357142,-0.00728163,0.485714,-0.48301,0.0178574],0]
			]
			]
		],
		[
		[
			"Rotate",
			cr.behaviors.Rotate,
			5795045036440834
		]
		],
		false,
		false,
		7728116672023322,
		[]
	]
,	[
		"t109",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,301830691533469,7084335515708612,4663957248922965,1719337793121768,2630194092700791],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			185164395299221,
			[
				["barricade-sheet0.png", 23436, 0, 0, 210, 268, 1, 0, 0.951493,[],[0.238095,-0.735075,0.614286,-0.81903,0.92381,0.0111945,0.157143,-0.0223876],0]
			]
			]
		],
		[
		],
		false,
		false,
		2665434304146232,
		[]
	]
,	[
		"t110",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,301830691533469,7084335515708612,4663957248922965,1719337793121768,2630194092700791],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			1958527161810059,
			[
				["fence-sheet0.png", 6168, 0, 0, 107, 143, 1, -0.00934579, 0.874126,[],[0.383178,-0.667832,0.747664,-0.702797,0.668225,-0.0209789,0.196262,-0.0174829],0]
			]
			]
		],
		[
		],
		false,
		false,
		170712060794039,
		[]
	]
,	[
		"t111",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,301830691533469,7084335515708612,4663957248922965,1719337793121768,2630194092700791],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			7760553369568551,
			[
				["chainhook-sheet0.png", 5367, 0, 0, 56, 426, 1, 0.0178571, 0.0164319,[],[0.785714,0.776995,0.785714,0.962441,0.160714,0.962441,0.160714,0.779343],0]
			]
			]
		],
		[
		[
			"Sine",
			cr.behaviors.Sin,
			7355984210077037
		]
		],
		false,
		false,
		1269081135445225,
		[]
	]
,	[
		"t112",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,301830691533469,7084335515708612,4663957248922965,1719337793121768,2630194092700791],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			1080754090801578,
			[
				["ropehook-sheet0.png", 5768, 0, 0, 67, 469, 1, 0, 0.0191898,[],[0.835821,0.76759,0.776119,0.957356,0.208955,0.957356,0.179104,0.76759],0]
			]
			]
		],
		[
		],
		false,
		false,
		487305584888531,
		[]
	]
,	[
		"t113",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,301830691533469,7084335515708612,4663957248922965,1719337793121768,2630194092700791],
		0,
		0,
		null,
		[
			[
			"Default",
			30,
			true,
			1,
			0,
			false,
			4522039188474812,
			[
				["beartrap-sheet0.png", 27430, 1, 1, 155, 132, 1, 0, 0.878788,[],[0.101613,-0.310606,0.870968,-0.308712,0.867742,-0.00946987,0.104839,-0.0113639],0],
				["beartrap-sheet0.png", 27430, 157, 1, 155, 132, 1, 0, 0.878788,[],[0.0354839,-0.284091,0.96129,-0.289773,0.906452,1.19209e-007,0.1,0.00378811],0],
				["beartrap-sheet0.png", 27430, 313, 1, 155, 132, 1, 0, 0.878788,[],[0.383871,-0.390152,0.587097,-0.39394,0.943548,-0.0530299,0.0306452,-0.0492429],0],
				["beartrap-sheet0.png", 27430, 1, 134, 155, 132, 1, 0, 0.878788,[],[0.356452,-0.481061,0.596774,-0.481061,0.827419,-0.00946987,0.0596774,-0.00378788],0],
				["beartrap-sheet0.png", 27430, 157, 134, 155, 132, 1, 0, 0.878788,[],[0.835484,-0.670455,0.574194,-0.170455,0.393548,-0.166667,0.106452,-0.670455],0],
				["beartrap-sheet0.png", 27430, 313, 134, 155, 132, 1, 0, 0.878788,[],[0.651613,-0.712121,0.648387,-0.257576,0.309677,-0.261364,0.303226,-0.712121],0],
				["beartrap-sheet0.png", 27430, 1, 267, 155, 132, 1, 0, 0.878788,[],[0.625807,-0.765152,0.619355,-0.340909,0.319355,-0.333333,0.316129,-0.765151],0],
				["beartrap-sheet0.png", 27430, 157, 267, 155, 132, 1, 0, 0.878788,[],[0.596774,-0.810606,0.587097,-0.337121,0.33871,-0.352273,0.335484,-0.810606],0],
				["beartrap-sheet0.png", 27430, 313, 267, 155, 132, 1, 0, 0.878788,[],[0.596774,-0.852273,0.593548,-0.371212,0.345161,-0.375,0.345161,-0.852273],0],
				["beartrap-sheet1.png", 9770, 1, 1, 155, 132, 1, 0, 0.878788,[],[0.564516,-0.780303,0.564516,-0.234848,0.348387,-0.238636,0.351613,-0.776515],0],
				["beartrap-sheet1.png", 9770, 157, 1, 155, 132, 1, 0, 0.878788,[],[0.367742,-0.592803,0.567742,-0.590909,0.567742,-0.0511369,0.362903,-0.0492429],0],
				["beartrap-sheet1.png", 9770, 313, 1, 155, 132, 1, 0, 0.878788,[],[0.364516,-0.568182,0.609677,-0.568182,0.6,0.00189412,0.366129,0.00189412],0],
				["beartrap-sheet1.png", 9770, 1, 134, 155, 132, 1, 0, 0.878788,[],[0.770968,-0.539773,0.879032,-0.0719699,0.112903,-0.0738639,0.180645,-0.543561],0],
				["beartrap-sheet1.png", 9770, 157, 134, 155, 132, 1, 0, 0.878788,[],[0.816129,-0.350379,0.864516,-0.0511359,0.104839,-0.0435609,0.135484,-0.335227],0]
			]
			]
		],
		[
		],
		false,
		false,
		2968603129010499,
		[]
	]
,	[
		"t114",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,301830691533469,7084335515708612,4663957248922965,1719337793121768,2630194092700791],
		0,
		0,
		null,
		[
			[
			"Default",
			10,
			true,
			1,
			0,
			false,
			5528822046251796,
			[
				["campfire-sheet0.png", 22256, 1, 1, 143, 212, 1, 0.503497, 0.5,[],[0.188811,-0.169811,0.363636,0.396226,-0.314686,0.391509,-0.139861,-0.174528],0],
				["campfire-sheet0.png", 22256, 145, 1, 143, 212, 1, 0.503497, 0.5,[],[0.188811,-0.169811,0.363636,0.396226,-0.314686,0.391509,-0.139861,-0.174528],0],
				["campfire-sheet0.png", 22256, 289, 1, 143, 212, 1, 0.503497, 0.5,[],[0.188811,-0.169811,0.363636,0.396226,-0.314686,0.391509,-0.139861,-0.174528],0],
				["campfire-sheet0.png", 22256, 1, 214, 143, 212, 1, 0.503497, 0.5,[],[0.188811,-0.169811,0.363636,0.396226,-0.314686,0.391509,-0.139861,-0.174528],0],
				["campfire-sheet0.png", 22256, 145, 214, 143, 212, 1, 0.503497, 0.5,[],[0.188811,-0.169811,0.363636,0.396226,-0.314686,0.391509,-0.139861,-0.174528],0],
				["campfire-sheet0.png", 22256, 289, 214, 143, 212, 1, 0.503497, 0.5,[],[0.188811,-0.169811,0.363636,0.396226,-0.314686,0.391509,-0.139861,-0.174528],0],
				["campfire-sheet1.png", 13136, 1, 1, 143, 212, 1, 0.503497, 0.5,[],[0.188811,-0.169811,0.363636,0.396226,-0.314686,0.391509,-0.139861,-0.174528],0],
				["campfire-sheet1.png", 13136, 145, 1, 143, 212, 1, 0.503497, 0.5,[],[0.188811,-0.169811,0.363636,0.396226,-0.314686,0.391509,-0.139861,-0.174528],0],
				["campfire-sheet1.png", 13136, 289, 1, 143, 212, 1, 0.503497, 0.5,[],[0.188811,-0.169811,0.363636,0.396226,-0.314686,0.391509,-0.139861,-0.174528],0]
			]
			]
		],
		[
		],
		false,
		false,
		4317726669114568,
		[]
	]
,	[
		"t115",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,301830691533469,7084335515708612,4663957248922965,1719337793121768,2630194092700791],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			1590316499984499,
			[
				["e_fence-sheet0.png", 11125, 0, 0, 418, 157, 1, 0.0167464, 0.949045,[],[0.134064,-0.736306,0.956571,-0.883864,0.917561,0.0242884,0.15357,0.0309554],0]
			]
			]
		],
		[
		],
		false,
		false,
		5592518732917165,
		[]
	]
,	[
		"t116",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,301830691533469,7084335515708612],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			8249602357393518,
			[
				["useablebloodbutton-sheet2.png", 3518, 0, 0, 67, 85, 1, 0, 0.564706,[],[0,-0.564706,1,-0.561765,1,0.435294,0,0.435294],0]
			]
			]
		],
		[
		],
		false,
		false,
		98410252761544,
		[]
	]
,	[
		"t117",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,301830691533469,7084335515708612],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			5798286568529741,
			[
				["bucket-sheet0.png", 3116, 0, 0, 41, 53, 1, 0, 0.566038,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		5201706500448454,
		[]
	]
,	[
		"t118",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,301830691533469,7084335515708612],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			1495877418416618,
			[
				["plaster-sheet0.png", 2508, 0, 0, 49, 49, 1, 0.510204, 0.510204,[],[-0.418368,-0.433674,0.403062,-0.436225,0.408164,0.387756,-0.418368,0.395409],0]
			]
			]
		],
		[
		],
		false,
		false,
		239278087838859,
		[]
	]
,	[
		"t119",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,301830691533469,7084335515708612],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			5223152202196594,
			[
				["plus50-sheet0.png", 1654, 0, 0, 57, 57, 1, 0, 0.561404,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		1778014749647122,
		[]
	]
,	[
		"t120",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,301830691533469,7084335515708612],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			942706089070118,
			[
				["plus100-sheet0.png", 2543, 0, 0, 60, 60, 1, 0, 0.566667,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		3909234616835469,
		[]
	]
,	[
		"t121",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,301830691533469,7084335515708612],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			3594307074798265,
			[
				["multi2short-sheet0.png", 3823, 0, 0, 59, 59, 1, 0, 0.559322,[],[0.0720339,-0.512712,0.902543,-0.508475,0.902543,0.347458,0.0720339,0.347458],0]
			]
			]
		],
		[
		],
		false,
		false,
		4878001624119887,
		[]
	]
,	[
		"t122",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,301830691533469,7084335515708612],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			908747527976257,
			[
				["multi2long-sheet0.png", 4173, 0, 0, 59, 59, 1, 0, 0.559322,[],[0,-0.559322,0.989407,-0.559322,1,0.440678,0.00211864,0.440678],0]
			]
			]
		],
		[
		],
		false,
		false,
		9148195013481824,
		[]
	]
,	[
		"t123",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,301830691533469,7084335515708612],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			4559195247704201,
			[
				["blooduseable-sheet0.png", 387, 0, 0, 41, 39, 1, 0, 0.564103,[],[1,-0.564103,1,0.435897,0,0.435897,0,-0.564103],0]
			]
			]
		],
		[
		],
		false,
		false,
		1035159500092314,
		[]
	]
,	[
		"t124",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,301830691533469,7084335515708612],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			4455949412231083,
			[
				["shield-sheet0.png", 2661, 0, 0, 54, 57, 1, 0, 0.561404,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		72643918181144,
		[]
	]
,	[
		"t125",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602,301830691533469,7084335515708612],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			6699075271824107,
			[
				["blood_drop-sheet0.png", 919, 0, 0, 22, 37, 1, 0, 0.567568,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		8218595278148683,
		[]
	]
,	[
		"t126",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"run",
			30,
			true,
			1,
			0,
			false,
			6189286836534453,
			[
				["bucketattachment-sheet0.png", 17149, 1, 1, 56, 69, 1, 0.5, 0.507246,[],[],0],
				["bucketattachment-sheet0.png", 17149, 58, 1, 56, 69, 1, 0.5, 0.536232,[],[],0],
				["bucketattachment-sheet0.png", 17149, 115, 1, 56, 69, 1, 0.5, 0.507246,[],[],0],
				["bucketattachment-sheet0.png", 17149, 172, 1, 56, 69, 1, 0.5, 0.463768,[],[],0],
				["bucketattachment-sheet0.png", 17149, 1, 71, 56, 69, 1, 0.5, 0.449275,[],[],0],
				["bucketattachment-sheet0.png", 17149, 58, 71, 56, 69, 1, 0.5, 0.434783,[],[],0],
				["bucketattachment-sheet0.png", 17149, 115, 71, 56, 69, 1, 0.482143, 0.449275,[],[],0],
				["bucketattachment-sheet0.png", 17149, 172, 71, 56, 69, 1, 0.5, 0.463768,[],[],0],
				["bucketattachment-sheet0.png", 17149, 1, 141, 56, 69, 1, 0.5, 0.478261,[],[],0],
				["bucketattachment-sheet0.png", 17149, 58, 141, 56, 69, 1, 0.5, 0.492754,[],[],0]
			]
			]
,			[
			"jump",
			5,
			false,
			1,
			0,
			false,
			8297540572915676,
			[
				["bucketattachment-sheet0.png", 17149, 115, 141, 56, 69, 1, 0.5, 0.507246,[],[],0]
			]
			]
		],
		[
		[
			"Pin",
			cr.behaviors.Pin,
			9222328768309183
		]
		],
		false,
		false,
		7642150640782317,
		[]
	]
,	[
		"t127",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			3015200453605184,
			[
				["plaster-sheet0.png", 2508, 0, 0, 49, 49, 1, 0.510204, 0.510204,[],[-0.326531,-0.326531,-0.0204081,-0.306122,0.306123,-0.326531,0.326531,-0.0204081,0.306123,0.306123,-0.0204081,0.326531,-0.326531,0.306123],0]
			]
			]
		],
		[
		[
			"Pin",
			cr.behaviors.Pin,
			2374897517440782
		]
		],
		false,
		false,
		6001552015698768,
		[]
	]
,	[
		"t128",
		cr.plugins_.Sprite,
		false,
		[],
		2,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			9082017887448186,
			[
				["bubbleattachment-sheet0.png", 10904, 0, 0, 136, 137, 1, 0.5, 0.50365,[],[0.426471,-0.00729966,0,0.423357,-0.433823,-0.00729966],0]
			]
			]
		],
		[
		[
			"Pin",
			cr.behaviors.Pin,
			2959635231758365
		]
,		[
			"Flash",
			cr.behaviors.Flash,
			2964050511422156
		]
		],
		false,
		false,
		2515931173391059,
		[]
	]
,	[
		"t129",
		cr.plugins_.Spritefont2,
		false,
		[],
		0,
		0,
		["spritefonthighscoreend.png", 11411, 0],
		null,
		[
		],
		false,
		false,
		4167602978110279,
		[]
	]
,	[
		"t130",
		cr.plugins_.Spritefont2,
		false,
		[],
		0,
		0,
		["spritefonthighscoreend.png", 11411, 0],
		null,
		[
		],
		false,
		false,
		6099684955707403,
		[]
	]
,	[
		"t131",
		cr.plugins_.Spritefont2,
		false,
		[],
		0,
		0,
		["spritefonthighscoreend.png", 11411, 0],
		null,
		[
		],
		false,
		false,
		9531417166362281,
		[]
	]
,	[
		"t132",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			6794771922805081,
			[
				["near_miss_coll-sheet0.png", 169, 0, 0, 256, 256, 1, 0.5, 0.5,[],[],3]
			]
			]
		],
		[
		[
			"Pin",
			cr.behaviors.Pin,
			4612548900628049
		]
		],
		false,
		false,
		523082500533887,
		[]
	]
,	[
		"t133",
		cr.plugins_.Arr,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		true,
		false,
		8865689583512797,
		[]
	]
,	[
		"t134",
		cr.plugins_.Arr,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		true,
		false,
		5662121728396155,
		[]
	]
,	[
		"t135",
		cr.plugins_.Sprite,
		false,
		[1743021117264248,8097206776676888,7733057071512602],
		2,
		0,
		null,
		[
			[
			"run",
			30,
			false,
			1,
			0,
			false,
			3785177527301305,
			[
				["chicken-sheet0.png", 170335, 1, 1, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 119, 1, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 237, 1, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 355, 1, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 473, 1, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 591, 1, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 709, 1, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 827, 1, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 1, 107, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 119, 107, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 237, 107, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 355, 107, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 473, 107, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 591, 107, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 709, 107, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 827, 107, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 1, 213, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 119, 213, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 237, 213, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 355, 213, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0]
			]
			]
,			[
			"jump",
			30,
			false,
			1,
			0,
			false,
			5073397756942456,
			[
				["chicken-sheet0.png", 170335, 473, 213, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 591, 213, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 709, 213, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 827, 213, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 1, 319, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 119, 319, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0]
			]
			]
,			[
			"fall",
			30,
			false,
			1,
			0,
			false,
			8247393628749419,
			[
				["chicken-sheet0.png", 170335, 237, 319, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 355, 319, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 473, 319, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 591, 319, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 709, 319, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 827, 319, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0]
			]
			]
,			[
			"land",
			30,
			false,
			1,
			0,
			false,
			1975890141091979,
			[
				["chicken-sheet0.png", 170335, 1, 425, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 119, 425, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 237, 425, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 355, 425, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 473, 425, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0]
			]
			]
,			[
			"fly",
			30,
			false,
			1,
			0,
			false,
			7439230705856358,
			[
				["chicken-sheet0.png", 170335, 591, 425, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 709, 425, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 827, 425, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 1, 531, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 119, 531, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 237, 531, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0]
			]
			]
,			[
			"flyfromfall",
			30,
			false,
			1,
			0,
			false,
			7126786812663729,
			[
				["chicken-sheet0.png", 170335, 355, 531, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 473, 531, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 591, 531, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 709, 531, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 827, 531, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0]
			]
			]
,			[
			"gethit",
			30,
			false,
			1,
			0,
			false,
			2058906584792404,
			[
				["chicken-sheet0.png", 170335, 1, 637, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 119, 637, 117, 105, 10, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 237, 637, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0]
			]
			]
,			[
			"die",
			30,
			false,
			1,
			0,
			false,
			7838751174936456,
			[
				["chicken-sheet0.png", 170335, 355, 637, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0]
			]
			]
,			[
			"electrichit",
			20,
			false,
			1,
			0,
			false,
			2077515666373543,
			[
				["chicken-sheet0.png", 170335, 473, 637, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 591, 637, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 709, 637, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 827, 637, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 1, 743, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 119, 743, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 237, 743, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 355, 743, 117, 105, 1, 0.504274, 0.504762,[],[-0.418803,-0.333333,0.435897,-0.333333,0.435897,0.371428,-0.273505,0.371428],0],
				["chicken-sheet0.png", 170335, 473, 743, 117, 105, 1, 0.504274, 0.504762,[],[],0]
			]
			]
		],
		[
		[
			"Platform",
			cr.behaviors.Platform,
			7445603657291744
		]
,		[
			"Flash",
			cr.behaviors.Flash,
			6976679773681816
		]
		],
		false,
		false,
		2090508252419078,
		[]
	]
,	[
		"t136",
		cr.plugins_.Keyboard,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		1139356608833558,
		[]
		,[]
	]
,	[
		"t137",
		cr.plugins_.Particles,
		false,
		[],
		1,
		0,
		["particles.png", 262, 0],
		null,
		[
		[
			"Pin",
			cr.behaviors.Pin,
			5392687346125237
		]
		],
		false,
		false,
		9127699876962827,
		[]
	]
,	[
		"t138",
		cr.plugins_.Touch,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		1725458895881408,
		[]
		,[0]
	]
,	[
		"t139",
		cr.plugins_.Mouse,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		8097242370570944,
		[]
		,[]
	]
,	[
		"t140",
		cr.plugins_.Function,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		2370849525272243,
		[]
		,[]
	]
,	[
		"t141",
		cr.plugins_.Arr,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		true,
		false,
		2345937314645568,
		[]
	]
,	[
		"t142",
		cr.plugins_.Arr,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		true,
		false,
		4135639014601736,
		[]
	]
,	[
		"t143",
		cr.plugins_.Arr,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		true,
		false,
		1281659656326362,
		[]
	]
,	[
		"t144",
		cr.plugins_.Audio,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		9466857824570584,
		[]
		,[0,1,1,600,600,10000,1,5000,1]
	]
,	[
		"t145",
		cr.plugins_.WebStorage,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		5448387568135482,
		[]
		,[]
	]
,	[
		"t146",
		cr.plugins_.Button,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		1995182425847088,
		[]
	]
,	[
		"t147",
		cr.plugins_.Browser,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		9722601538579394,
		[]
		,[]
	]
,	[
		"t148",
		cr.plugins_.CJSAds,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		8816469578108592,
		[]
		,[0,1,1]
	]
,	[
		"t149",
		cr.plugins_.Sprite,
		true,
		[8516814691150662],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		481731317075691,
		[]
	]
,	[
		"t150",
		cr.plugins_.Sprite,
		true,
		[1743021117264248,8097206776676888,7733057071512602],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		2469022801033092,
		[]
	]
,	[
		"t151",
		cr.plugins_.Sprite,
		true,
		[1663437692107267],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		3981340683908716,
		[]
	]
,	[
		"t152",
		cr.plugins_.Sprite,
		true,
		[5384722272299964],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		8116333408721453,
		[]
	]
,	[
		"t153",
		cr.plugins_.Sprite,
		true,
		[6252805433968067],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		9026178321716229,
		[]
	]
,	[
		"t154",
		cr.plugins_.Sprite,
		true,
		[5836504645218812],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		5480187653456405,
		[]
	]
,	[
		"t155",
		cr.plugins_.Sprite,
		true,
		[7719003541241144],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		3079223187696023,
		[]
	]
,	[
		"t156",
		cr.plugins_.Sprite,
		true,
		[2663989748644787],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		8628199797033412,
		[]
	]
,	[
		"t157",
		cr.plugins_.Sprite,
		true,
		[301830691533469,7084335515708612],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		5827307270586254,
		[]
	]
,	[
		"t158",
		cr.plugins_.Sprite,
		true,
		[4663957248922965,1719337793121768,2630194092700791],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		4585681563150014,
		[]
	]
,	[
		"t159",
		cr.plugins_.Sprite,
		true,
		[74250495477444],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		725679208748648,
		[]
	]
	],
	[
		[149,0,1]
,		[150,109,113,100,101,103,102,104,116,125,123,117,114,111,135,115,110,2,3,4,105,107,106,108,0,1,5,6,7,8,9,10,11,12,13,14,15,19,16,17,18,20,21,122,121,87,118,120,119,112,124]
,		[151,2,3,4]
,		[152,5,6]
,		[153,7,8,9]
,		[154,10,11,12]
,		[155,13,14,15,19,16,17,18]
,		[156,20,21]
,		[157,109,113,100,101,103,102,104,116,125,123,117,114,111,115,110,105,107,106,108,122,121,87,118,120,119,112,124]
,		[158,109,113,103,102,104,114,111,115,110,106,108,112]
,		[159,46,47,30,26,54,49,50,25,53,44,82,40,24,70,32,51,91,52]
	],
	[
	[
		"Wave_empty",
		2560,
		800,
		false,
		null,
		6777490540846592,
		[
		[
			"Ground",
			0,
			1515979075323687,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				144,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 764, 0, 640, 187, 0, 0, 1, 0, 1, 0, 0, []],
				3,
				145,
				[
					["G_s2"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 764, 0, 640, 195, 0, 0, 1, 0, 1, 0, 0, []],
				4,
				146,
				[
					["G_s3"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1920, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				147,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Objetcs",
			1,
			6750379749513962,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Wave1_1",
		2560,
		800,
		false,
		null,
		6139249340852564,
		[
		[
			"Ground",
			0,
			8665766711110633,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				124,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 764, 0, 640, 187, 0, 0, 1, 0, 1, 0, 0, []],
				3,
				125,
				[
					["G_s2"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 764, 0, 640, 195, 0, 0, 1, 0, 1, 0, 0, []],
				4,
				126,
				[
					["G_s3"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1920, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				127,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[725, 500, 0, 61.3028, 63.6638, 0, 0, 1, 0, 0.564706, 0, 0, []],
				116,
				128,
				[
					["blood"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1589, 500, 0, 61.3028, 63.6638, 0, 0, 1, 0, 0.564706, 0, 0, []],
				116,
				129,
				[
					["blood"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Objetcs",
			1,
			1803158583289051,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[2021, 598, 0, 197, 255, 0, 0, 1, 0, 0.951493, 0, 0, []],
				109,
				130,
				[
					["barricade"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Wave1_2",
		2560,
		800,
		false,
		null,
		3407931200199481,
		[
		[
			"Ground",
			0,
			1290590422141673,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				104,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 764, 0, 640, 187, 0, 0, 1, 0, 1, 0, 0, []],
				3,
				105,
				[
					["G_s2"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 764, 0, 640, 195, 0, 0, 1, 0, 1, 0, 0, []],
				4,
				131,
				[
					["G_s3"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1920, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				132,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[611, 518, 0, 61.3028, 63.6638, 0, 0, 1, 0, 0.564706, 0, 0, []],
				116,
				133,
				[
					["blood"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1938, 329, 0, 61.3028, 63.6638, 0, 0, 1, 0, 0.564706, 0, 0, []],
				116,
				134,
				[
					["blood"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 596, 0, 94, 130, 0, 0, 1, -0.00934579, 0.874126, 0, 0, []],
				110,
				135,
				[
					["fence"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1407, 555, 0, 41, 53, 0, 0, 1, 0, 0.566038, 0, 0, []],
				117,
				386,
				[
					["bucketpickup"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Objetcs",
			1,
			5705380020444815,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Wave1_3",
		2560,
		800,
		false,
		null,
		5435938449406824,
		[
		[
			"Ground",
			0,
			2276535808315657,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				136,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 764, 0, 640, 187, 0, 0, 1, 0, 1, 0, 0, []],
				3,
				137,
				[
					["G_s2"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 764, 0, 640, 195, 0, 0, 1, 0, 1, 0, 0, []],
				4,
				138,
				[
					["G_s3"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1920, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				139,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[775, 336, 0, 61.3028, 63.6638, 0, 0, 1, 0, 0.564706, 0, 0, []],
				116,
				140,
				[
					["blood"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1945, 336, 0, 61.3028, 63.6638, 0, 0, 1, 0, 0.564706, 0, 0, []],
				116,
				141,
				[
					["blood"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 596, 0, 94, 130, 0, 0, 1, -0.00934579, 0.874126, 0, 0, []],
				110,
				142,
				[
					["fence"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[400, -28, 0, 46, 416, 0, 0, 1, 0.0178571, 0.0164319, 0, 0, []],
				111,
				143,
				[
					["chainhook"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				[
					1,
					1,
					0,
					3,
					5,
					3,
					0,
					100,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Objetcs",
			1,
			643206518629172,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Wave1_4",
		2560,
		800,
		false,
		null,
		5254589843647505,
		[
		[
			"Ground",
			0,
			3961921032823919,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				97,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 764, 0, 640, 187, 0, 0, 1, 0, 1, 0, 0, []],
				3,
				107,
				[
					["G_s2"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 764, 0, 640, 195, 0, 0, 1, 0, 1, 0, 0, []],
				4,
				113,
				[
					["G_s3"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1920, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				114,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Objetcs",
			1,
			5088451918928017,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[1144, 613, 0, 222, 280, 0, 0, 1, 0.00862069, 0.951724, 0, 0, []],
				106,
				148,
				[
					["ground_blade_wheel"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					["blade"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[542, 516, 0, 61.3028, 63.6638, 0, 0, 1, 0, 0.564706, 0, 0, []],
				116,
				149,
				[
					["blood"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1990, 516, 0, 61.3028, 63.6638, 0, 0, 1, 0, 0.564706, 0, 0, []],
				116,
				150,
				[
					["blood"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1426, 479, 0, 57, 57, 0, 0, 1, 0, 0.561404, 0, 0, []],
				119,
				151,
				[
					["plus10"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[988, 479, 0, 57, 57, 0, 0, 1, 0, 0.561404, 0, 0, []],
				119,
				152,
				[
					["plus10"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1240, 290, 0, 22, 37, 0, 0, 1, 0, 0.567568, 0, 0, []],
				125,
				159,
				[
					["blood_drop"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1241, 220, 0, 22, 37, 0, 0, 1, 0, 0.567568, 0, 0, []],
				125,
				160,
				[
					["blood_drop"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1240, 151, 0, 22, 37, 0, 0, 1, 0, 0.567568, 0, 0, []],
				125,
				161,
				[
					["blood_drop"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Wave1_5",
		2560,
		800,
		false,
		null,
		9047508291895138,
		[
		[
			"Ground",
			0,
			1510676598718029,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				115,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 764, 0, 640, 187, 0, 0, 1, 0, 1, 0, 0, []],
				3,
				117,
				[
					["G_s2"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 764, 0, 640, 195, 0, 0, 1, 0, 1, 0, 0, []],
				4,
				122,
				[
					["G_s3"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1920, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				123,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Objetcs",
			1,
			2601515710139764,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[769, 597, 0, 94, 130, 0, 0, 1, -0.00934579, 0.874126, 0, 0, []],
				110,
				162,
				[
					["fence"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[794, 423, 0, 61.3028, 63.6638, 0, 0, 1, 0, 0.564706, 0, 0, []],
				116,
				163,
				[
					["blood"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[918, 546, 0, 49, 49, 0, 0, 1, 0.510204, 0.510204, 0, 0, []],
				118,
				164,
				[
					["plaster"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1970, 531, 0, 61.3028, 63.6638, 0, 0, 1, 0, 0.564706, 0, 0, []],
				116,
				165,
				[
					["blood"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1977, -31, 0, 57, 459, 0, 0, 1, 0, 0.0191898, 0, 0, []],
				112,
				166,
				[
					["ropehook"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2048, 396, 0, 60, 60, 0, 0, 1, 0, 0.566667, 0, 0, []],
				120,
				167,
				[
					["plus100"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1818, 396, 0, 22, 37, 0, 0, 1, 0, 0.567568, 0, 0, []],
				125,
				168,
				[
					["blood_drop"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1926, 269, 0, 22, 37, 0, 0, 1, 0, 0.567568, 0, 0, []],
				125,
				169,
				[
					["blood_drop"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2072, 269, 0, 22, 37, 0, 0, 1, 0, 0.567568, 0, 0, []],
				125,
				170,
				[
					["blood_drop"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2179, 397, 0, 22, 37, 0, 0, 1, 0, 0.567568, 0, 0, []],
				125,
				171,
				[
					["blood_drop"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[9, 169, 0, 57, 57, 0, 0, 1, 0, 0.561404, 0, 0, []],
				119,
				172,
				[
					["plus10"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Wave1_6",
		2560,
		800,
		false,
		null,
		3251455858852636,
		[
		[
			"Ground",
			0,
			1930480715388642,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				173,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 764, 0, 640, 187, 0, 0, 1, 0, 1, 0, 0, []],
				3,
				174,
				[
					["G_s2"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 764, 0, 640, 195, 0, 0, 1, 0, 1, 0, 0, []],
				4,
				175,
				[
					["G_s3"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1920, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				176,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1183, 54, 0, 194, 273, 0, 0, 1, 0, 0.025641, 0, 0, []],
				103,
				177,
				[
					["blade_wheel_low"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					["blade"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[563, 271, 0, 61.3028, 63.6638, 0, 0.14916, 1, 0, 0.564706, 0, 0, []],
				116,
				178,
				[
					["blood"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2212, 531, 0, 61.3028, 63.6638, 0, 0.14916, 1, 0, 0.564706, 0, 0, []],
				116,
				179,
				[
					["blood"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1097, 268, 0, 59, 59, 0, 0, 1, 0, 0.559322, 0, 0, []],
				121,
				180,
				[
					["multi2short"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1413, 263, 0, 41, 53, 0, 0, 1, 0, 0.566038, 0, 0, []],
				117,
				181,
				[
					["bucketpickup"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1828, 532, 0, 57, 57, 0, 0, 1, 0, 0.561404, 0, 0, []],
				119,
				182,
				[
					["plus10"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Objetcs",
			1,
			3090869358553706,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Wave2_1",
		2560,
		800,
		false,
		null,
		7394631614493476,
		[
		[
			"Ground",
			0,
			6710421347779517,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				183,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 764, 0, 640, 187, 0, 0, 1, 0, 1, 0, 0, []],
				3,
				184,
				[
					["G_s2"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 764, 0, 640, 195, 0, 0, 1, 0, 1, 0, 0, []],
				4,
				185,
				[
					["G_s3"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1920, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				186,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[431, 596, 0, 94, 130, 0, 0, 1, -0.00934579, 0.874126, 0, 0, []],
				110,
				195,
				[
					["fence"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[630, 415, 0, 61.3028, 63.6638, 0, 0.14916, 1, 0, 0.564706, 0, 0, []],
				116,
				196,
				[
					["blood"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[863, 6, 0, 57, 459, 0, 0, 1, 0, 0.0191898, 0, 0, []],
				112,
				197,
				[
					["ropehook"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1411, 598, 0, 197, 255, 0, 0, 1, 0, 0.951493, 0, 0, []],
				109,
				198,
				[
					["barricade"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2018, 14, 0, 194, 273, 0, 0, 1, 0, 0.0424028, 0, 0, []],
				103,
				199,
				[
					["blade_wheel_low"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					["blade"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1932, 201, 0, 54, 57, 0, 0, 1, 0, 0.561404, 0, 0, []],
				124,
				200,
				[
					["shield"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1485, 218, 0, 22, 37, 0, 0, 1, 0, 0.567568, 0, 0, []],
				125,
				201,
				[
					["blood_drop"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1669, 312, 0, 22, 37, 0, 0, 1, 0, 0.567568, 0, 0, []],
				125,
				202,
				[
					["blood_drop"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1320, 538, 0, 41, 39, 0, 0, 1, 0, 0.564103, 0, 0, []],
				123,
				203,
				[
					["useableHealth"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Objetcs",
			1,
			4966203819195569,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Wave2_2",
		2560,
		800,
		false,
		null,
		3135611523619631,
		[
		[
			"Ground",
			0,
			7814157278492925,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				187,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 764, 0, 640, 187, 0, 0, 1, 0, 1, 0, 0, []],
				3,
				188,
				[
					["G_s2"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 764, 0, 640, 195, 0, 0, 1, 0, 1, 0, 0, []],
				4,
				189,
				[
					["G_s3"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1920, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				190,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[345, 26, 0, 194, 273, 0, 0, 1, 0, 0.0424028, 0, 0, []],
				103,
				204,
				[
					["blade_wheel_low"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					["blade"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[928, 423, 0, 61.3028, 63.6638, 0, 0, 1, 0, 0.564706, 0, 0, []],
				116,
				205,
				[
					["blood"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[903, 596, 0, 94, 130, 0, 0, 1, -0.00934579, 0.874126, 0, 0, []],
				110,
				206,
				[
					["fence"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1621, 596, 0, 94, 130, 0, 0, 1, -0.00934579, 0.874126, 0, 0, []],
				110,
				207,
				[
					["fence"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1972, 85, 0, 194, 273, 0, 0, 1, 0, 0.0424028, 0, 0, []],
				103,
				208,
				[
					["blade_wheel_low"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					["blade"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[4900, 377, 0, 97, 65, 0, 0, 1, 0.495146, 0.471429, 0, 0, []],
				108,
				209,
				[
					["knife"],
					["Obstacles"],
					["singleObject"],
					[1],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				[
					-300,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[388, 556, 0, 59, 59, 0, 0, 1, 0, 0.559322, 0, 0, []],
				122,
				210,
				[
					["multi2long"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Objetcs",
			1,
			3084151695988679,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Wave2_3",
		2560,
		800,
		false,
		null,
		3098042796332596,
		[
		[
			"Ground",
			0,
			7014946942912126,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				191,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 764, 0, 640, 187, 0, 0, 1, 0, 1, 0, 0, []],
				3,
				192,
				[
					["G_s2"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 764, 0, 640, 195, 0, 0, 1, 0, 1, 0, 0, []],
				4,
				193,
				[
					["G_s3"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1920, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				194,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[524, 426, 0, 61.3028, 63.6638, 0, 0, 1, 0, 0.564706, 0, 0, []],
				116,
				211,
				[
					["blood"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1042, -65, 0, 46, 416, 0, 0, 1, 0.0178571, 0.0164319, 0, 0, []],
				111,
				212,
				[
					["chainhook"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				[
					1,
					1,
					0,
					3,
					5,
					3,
					0,
					100,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1270, 244, 0, 97, 65, 0, 0, 1, 0.495146, 0.471429, 0, 0, []],
				108,
				213,
				[
					["knife"],
					["Obstacles"],
					["singleObject"],
					[1],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				[
					-300,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1589, 256, 0, 61.3028, 63.6638, 0, 0, 1, 0, 0.564706, 0, 0, []],
				116,
				214,
				[
					["blood"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2360, 462, 0, 97, 65, 0, 0, 1, 0.495146, 0.471429, 0, 0, []],
				108,
				215,
				[
					["knife"],
					["Obstacles"],
					["singleObject"],
					[1],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				[
					-300,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Objetcs",
			1,
			1409501765388332,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Wave2_4",
		2560,
		800,
		false,
		null,
		8058192248878778,
		[
		[
			"Ground",
			0,
			6558186868580492,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				216,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 764, 0, 640, 187, 0, 0, 1, 0, 1, 0, 0, []],
				3,
				217,
				[
					["G_s2"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 764, 0, 640, 195, 0, 0, 1, 0, 1, 0, 0, []],
				4,
				218,
				[
					["G_s3"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1920, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				219,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1076, 599, 0, 411, 150, 0, 0, 1, 0.00729927, 0.973333, 0, 0, []],
				115,
				220,
				[
					["e_fence"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["electric"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[268, 614, 0, 145, 122, 0, 0, 1, 0, 0.878788, 0, 0, []],
				113,
				221,
				[
					["bear_trap"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					["bear"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1719, 612, 0, 145, 122, 0, 0, 1, 0, 0.878788, 0, 0, []],
				113,
				222,
				[
					["bear_trap"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					["bear"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2150, -29, 0, 46, 416, 0, 0, 1, 0.0178571, 0.0164319, 0, 0, []],
				111,
				223,
				[
					["chainhook"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				[
					1,
					1,
					0,
					3,
					5,
					3,
					0,
					100,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[764, -31, 0, 46, 416, 0, 0, 1, 0.0178571, 0.0164319, 0, 0, []],
				111,
				224,
				[
					["chainhook"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				[
					1,
					1,
					0,
					3,
					5,
					3,
					0,
					100,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1265, 440, 0, 60, 60, 0, 0, 1, 0, 0.566667, 0, 0, []],
				120,
				225,
				[
					["plus100"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[745, 518, 0, 61.3028, 63.6638, 0, 0, 1, 0, 0.564706, 0, 0, []],
				116,
				226,
				[
					["blood"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[675, 168, 0, 59, 59, 0, 0, 1, 0, 0.559322, 0, 0, []],
				122,
				227,
				[
					["multi2long"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1569, 557, 0, 57, 57, 0, 0, 1, 0, 0.561404, 0, 0, []],
				119,
				228,
				[
					["plus10"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1627, 319, 0, 22, 37, 0, 0, 1, 0, 0.567568, 0, 0, []],
				125,
				229,
				[
					["blood_drop"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1842, 386, 0, 22, 37, 0, 0, 1, 0, 0.567568, 0, 0, []],
				125,
				230,
				[
					["blood_drop"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2056, 523, 0, 22, 37, 0, 0, 1, 0, 0.567568, 0, 0, []],
				125,
				231,
				[
					["blood_drop"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Objetcs",
			1,
			7055259198709002,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Wave2_5",
		2560,
		800,
		false,
		null,
		7596877187652453,
		[
		[
			"Ground",
			0,
			6665655329233695,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				232,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 764, 0, 640, 187, 0, 0, 1, 0, 1, 0, 0, []],
				3,
				233,
				[
					["G_s2"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 764, 0, 640, 195, 0, 0, 1, 0, 1, 0, 0, []],
				4,
				234,
				[
					["G_s3"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1920, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				235,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1006, 604, 0, 197, 255, 0, 0, 1, 0, 0.951493, 0, 0, []],
				109,
				236,
				[
					["barricade"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[547, 72, 0, 194, 273, 0, 0, 1, 0, 0.0424028, 0, 0, []],
				103,
				237,
				[
					["blade_wheel_low"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					["blade"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1307, 66, 0, 194, 273, 0, 0, 1, 0, 0.0424028, 0, 0, []],
				103,
				238,
				[
					["blade_wheel_low"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					["blade"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[274, 601, 0, 94, 130, 0, 0, 1, -0.00934579, 0.874126, 0, 0, []],
				110,
				239,
				[
					["fence"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2128, 550, 0, 61.3028, 63.6638, 0, 0, 1, 0, 0.564706, 0, 0, []],
				116,
				240,
				[
					["blood"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1664, 602, 0, 411, 150, 0, 0, 1, 0.00729927, 0.973333, 0, 0, []],
				115,
				241,
				[
					["e_fence"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["electric"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[914, 398, 0, 22, 37, 0, 0, 1, 0, 0.567568, 0, 0, []],
				125,
				242,
				[
					["blood_drop"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1133, 285, 0, 22, 37, 0, 0, 1, 0, 0.567568, 0, 0, []],
				125,
				243,
				[
					["blood_drop"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1238, 408, 0, 22, 37, 0, 0, 1, 0, 0.567568, 0, 0, []],
				125,
				244,
				[
					["blood_drop"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1029, 282, 0, 22, 37, 0, 0, 1, 0, 0.567568, 0, 0, []],
				125,
				245,
				[
					["blood_drop"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[633, 378, 0, 41, 39, 0, 0, 1, 0, 0.564103, 0, 0, []],
				123,
				246,
				[
					["useableHealth"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1078, 171, 0, 41, 53, 0, 0, 1, 0, 0.566038, 0, 0, []],
				117,
				247,
				[
					["bucketpickup"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Objetcs",
			1,
			33835844624096,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Wave2_6",
		2560,
		800,
		false,
		null,
		2267871295930719,
		[
		[
			"Ground",
			0,
			4263903201975455,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				248,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 764, 0, 640, 187, 0, 0, 1, 0, 1, 0, 0, []],
				3,
				249,
				[
					["G_s2"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 764, 0, 640, 195, 0, 0, 1, 0, 1, 0, 0, []],
				4,
				250,
				[
					["G_s3"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1920, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				251,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[375, 600, 0, 222, 280, 0, 0, 1, 0.00862069, 0.951724, 0, 0, []],
				106,
				252,
				[
					["ground_blade_wheel"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					["blade"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[721, -186, 0, 57, 459, 0, 0, 1, 0, 0.0191898, 0, 0, []],
				112,
				253,
				[
					["ropehook"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1419, -11, 0, 57, 459, 0, 0, 1, 0, 0.0191898, 0, 0, []],
				112,
				255,
				[
					["ropehook"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2220, -73, 0, 57, 459, 0, 0, 1, 0, 0.0191898, 0, 0, []],
				112,
				256,
				[
					["ropehook"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1677, 604, 0, 411, 150, 0, 0, 1, 0.00729927, 0.973333, 0, 0, []],
				115,
				257,
				[
					["e_fence"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["electric"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3584, 174, 0, 97, 65, 0, 0, 1, 0.495146, 0.471429, 0, 0, []],
				108,
				258,
				[
					["knife"],
					["Obstacles"],
					["singleObject"],
					[1],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				[
					-300,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1544, 537, 0, 61.3028, 63.6638, 0, 0, 1, 0, 0.564706, 0, 0, []],
				116,
				259,
				[
					["blood"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2224, 528, 0, 22, 37, 0, 0, 1, 0, 0.567568, 0, 0, []],
				125,
				260,
				[
					["blood_drop"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2456, 532, 0, 22, 37, 0, 0, 1, 0, 0.567568, 0, 0, []],
				125,
				261,
				[
					["blood_drop"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2259, 153, 0, 60, 60, 0, 0, 1, 0, 0.566667, 0, 0, []],
				120,
				262,
				[
					["plus100"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[654, 540, 0, 49, 49, 0, 0, 1, 0.510204, 0.510204, 0, 0, []],
				118,
				263,
				[
					["plaster"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1149, 226, 0, 59, 59, 0, 0, 1, 0, 0.559322, 0, 0, []],
				121,
				264,
				[
					["multi2short"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Objetcs",
			1,
			5385400154137669,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Wave3_1",
		2560,
		800,
		false,
		null,
		9975463295859444,
		[
		[
			"Ground",
			0,
			6324548864206081,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				254,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 764, 0, 640, 187, 0, 0, 1, 0, 1, 0, 0, []],
				3,
				265,
				[
					["G_s2"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 764, 0, 640, 195, 0, 0, 1, 0, 1, 0, 0, []],
				4,
				266,
				[
					["G_s3"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1920, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				267,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[224, 598, 0, 197, 255, 0, 0, 1, 0, 0.968627, 0, 0, []],
				109,
				268,
				[
					["barricade"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[534, 50, 0, 194, 273, 0, 0, 1, 0, 0.025641, 0, 0, []],
				103,
				269,
				[
					["blade_wheel_low"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					["blade"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[960, -20, 0, 46, 416, 0, 0, 1, 0, 0.00480769, 0, 0, []],
				111,
				270,
				[
					["chainhook"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				[
					1,
					1,
					0,
					3,
					5,
					3,
					0,
					100,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1563, 596, 0, 94, 130, 0, 0, 1, -0.0106383, 0.907692, 0, 0, []],
				110,
				271,
				[
					["fence"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1270, 200, 0, 97, 65, 0, 0, 1, 0.515464, 0.476923, 0, 0, []],
				108,
				272,
				[
					["knife"],
					["Obstacles"],
					["singleObject"],
					[1],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				[
					-300,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1953, 98, 0, 57, 459, 0, 0, 1, 0, 0.00653595, 0, 0, []],
				112,
				273,
				[
					["ropehook"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2408, -57, 0, 57, 459, 0, 0, 1, 0, 0.00653595, 0, 0, []],
				112,
				274,
				[
					["ropehook"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1208, 527, 0, 61.3028, 63.6638, 0, 0, 1, 0, 0.564706, 0, 0, []],
				116,
				275,
				[
					["blood"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Objetcs",
			1,
			1996444773822745,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Wave3_2",
		2560,
		800,
		false,
		null,
		4866097163644987,
		[
		[
			"Ground",
			0,
			4657033474662277,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				276,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 764, 0, 640, 187, 0, 0, 1, 0, 1, 0, 0, []],
				3,
				277,
				[
					["G_s2"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 764, 0, 640, 195, 0, 0, 1, 0, 1, 0, 0, []],
				4,
				278,
				[
					["G_s3"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1920, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				279,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[226, 98, 0, 57, 459, 0, 0, 1, 0, 0.00653595, 0, 0, []],
				112,
				280,
				[
					["ropehook"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[532, -3, 0, 46, 416, 0, 0, 1, 0, 0.00480769, 0, 0, []],
				111,
				281,
				[
					["chainhook"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				[
					1,
					1,
					0,
					3,
					5,
					3,
					0,
					100,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[960, -20, 0, 46, 416, 0, 0, 1, 0, 0.00480769, 0, 0, []],
				111,
				282,
				[
					["chainhook"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				[
					1,
					1,
					0,
					3,
					5,
					3,
					0,
					100,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[966, 228, 0, 61.3028, 63.6638, 0, 0, 1, 0, 0.564706, 0, 0, []],
				116,
				283,
				[
					["blood"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[939, 596, 0, 94, 130, 0, 0, 1, -0.0106383, 0.907692, 0, 0, []],
				110,
				284,
				[
					["fence"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1335, 71, 0, 194, 273, 0, 0, 1, 0, 0.025641, 0, 0, []],
				103,
				285,
				[
					["blade_wheel_low"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					["blade"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1831, 47, 0, 57, 459, 0, 0, 1, 0, 0.00653595, 0, 0, []],
				112,
				286,
				[
					["ropehook"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2517, 498, 0, 97, 65, 0, 0, 1, 0.515464, 0.476923, 0, 0, []],
				108,
				287,
				[
					["knife"],
					["Obstacles"],
					["singleObject"],
					[1],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				[
					-300,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Objetcs",
			1,
			2969251103771977,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Wave3_3",
		2560,
		800,
		false,
		null,
		7188244373535183,
		[
		[
			"Ground",
			0,
			8931981724328669,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				288,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 764, 0, 640, 187, 0, 0, 1, 0, 1, 0, 0, []],
				3,
				289,
				[
					["G_s2"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 764, 0, 640, 195, 0, 0, 1, 0, 1, 0, 0, []],
				4,
				290,
				[
					["G_s3"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1920, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				291,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[454, 543, 0, 61.3028, 63.6638, 0, 0, 1, 0, 0.564706, 0, 0, []],
				116,
				292,
				[
					["blood"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[729, 598, 0, 197, 255, 0, 0, 1, 0, 0.968627, 0, 0, []],
				109,
				293,
				[
					["barricade"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1293, 97, 0, 194, 273, 0, 0, 1, 0, 0.025641, 0, 0, []],
				103,
				294,
				[
					["blade_wheel_low"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					["blade"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1418, 540, 0, 97, 65, 0, 0, 1, 0.515464, 0.476923, 0, 0, []],
				108,
				295,
				[
					["knife"],
					["Obstacles"],
					["singleObject"],
					[1],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				[
					-300,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1703, 429, 0, 97, 65, 0, 0, 1, 0.515464, 0.476923, 0, 0, []],
				108,
				296,
				[
					["knife"],
					["Obstacles"],
					["singleObject"],
					[1],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				[
					-300,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1965, 293, 0, 97, 65, 0, 0, 1, 0.515464, 0.476923, 0, 0, []],
				108,
				297,
				[
					["knife"],
					["Obstacles"],
					["singleObject"],
					[1],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				[
					-300,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1681, 385, 0, 61.3028, 63.6638, 0, 0, 1, 0, 0.564706, 0, 0, []],
				116,
				298,
				[
					["blood"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1940, 5, 0, 46, 416, 0, 0, 1, 0, 0.00480769, 0, 0, []],
				111,
				299,
				[
					["chainhook"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				[
					1,
					1,
					0,
					3,
					5,
					3,
					0,
					100,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Objetcs",
			1,
			485988992318061,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Wave3_4",
		2560,
		800,
		false,
		null,
		8264437308205681,
		[
		[
			"Ground",
			0,
			6321872022773316,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				300,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 764, 0, 640, 187, 0, 0, 1, 0, 1, 0, 0, []],
				3,
				301,
				[
					["G_s2"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 764, 0, 640, 195, 0, 0, 1, 0, 1, 0, 0, []],
				4,
				302,
				[
					["G_s3"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1920, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				303,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[347, 607, 0, 232, 290, 0, 0, 1, 0.00862069, 0.951724, 0, 0, []],
				106,
				304,
				[
					["ground_blade_wheel"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					["blade"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[714, 15, 0, 204, 283, 0, 0, 1, 0, 0.0424028, 0, 0, []],
				103,
				305,
				[
					["blade_wheel_low"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					["blade"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1051, 600, 0, 210, 268, 0, 0, 1, 0, 0.951493, 0, 0, []],
				109,
				306,
				[
					["barricade"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[738, 610, 0, 155, 132, 0, 0, 1, 0, 0.878788, 0, 0, []],
				113,
				307,
				[
					["bear_trap"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					["bear"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1896, 519, 0, 143, 212, 0, 0, 1, 0.503497, 0.5, 0, 0, []],
				114,
				308,
				[
					["campfire"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					["fire"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2688, 299, 0, 97, 65, 0, 0, 1, 0.495146, 0.471429, 0, 0, []],
				108,
				309,
				[
					["knife"],
					["Obstacles"],
					["singleObject"],
					[1],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				[
					-300,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1364, -194, 0, 67, 469, 0, 0, 1, 0, 0.0191898, 0, 0, []],
				112,
				310,
				[
					["ropehook"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1595, -30, 0, 67, 469, 0, 0, 1, 0, 0.0191898, 0, 0, []],
				112,
				311,
				[
					["ropehook"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2105, 82, 0, 194, 273, 0, 0, 1, 0, 0.0424028, 0, 0, []],
				103,
				312,
				[
					["blade_wheel_low"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					["blade"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[558, 271, 0, 22, 37, 0, 0, 1, 0, 0.567568, 0, 0, []],
				125,
				313,
				[
					["blood_drop"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[657, 398, 0, 22, 37, 0, 0, 1, 0, 0.567568, 0, 0, []],
				125,
				314,
				[
					["blood_drop"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[794, 464, 0, 22, 37, 0, 0, 1, 0, 0.567568, 0, 0, []],
				125,
				315,
				[
					["blood_drop"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[944, 395, 0, 22, 37, 0, 0, 1, 0, 0.567568, 0, 0, []],
				125,
				316,
				[
					["blood_drop"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1056, 270, 0, 22, 37, 0, 0, 1, 0, 0.567568, 0, 0, []],
				125,
				317,
				[
					["blood_drop"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1607, 544, 0, 22, 37, 0, 0, 1, 0, 0.567568, 0, 0, []],
				125,
				318,
				[
					["blood_drop"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1642, 185, 0, 59, 59, 0, 0, 1, 0, 0.559322, 0, 0, []],
				122,
				319,
				[
					["multi2long"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2189, 410, 0, 22, 37, 0, 0, 1, 0, 0.567568, 0, 0, []],
				125,
				320,
				[
					["blood_drop"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2342, 252, 0, 22, 37, 0, 0, 1, 0, 0.567568, 0, 0, []],
				125,
				321,
				[
					["blood_drop"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1762, 441, 0, 22, 37, 0, 0, 1, 0, 0.567568, 0, 0, []],
				125,
				322,
				[
					["blood_drop"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Objetcs",
			1,
			9215192597742647,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Wave3_5",
		2560,
		800,
		false,
		null,
		9083535502250892,
		[
		[
			"Ground",
			0,
			8569771524998002,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				323,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 764, 0, 640, 187, 0, 0, 1, 0, 1, 0, 0, []],
				3,
				324,
				[
					["G_s2"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 764, 0, 640, 195, 0, 0, 1, 0, 1, 0, 0, []],
				4,
				325,
				[
					["G_s3"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1920, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				326,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[84, 609, 0, 411, 150, 0, 0, 1, 0.00729927, 0.973333, 0, 0, []],
				115,
				327,
				[
					["e_fence"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["electric"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1079, 607, 0, 411, 150, 0, 0, 1, 0.00729927, 0.973333, 0, 0, []],
				115,
				328,
				[
					["e_fence"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["electric"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2058, 601, 0, 411, 150, 0, 0, 1, 0.00729927, 0.973333, 0, 0, []],
				115,
				329,
				[
					["e_fence"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["electric"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[720, 604, 0, 145, 122, 0, 0, 1, 0, 0.878788, 0, 0, []],
				113,
				330,
				[
					["bear_trap"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					["bear"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1739, 610, 0, 145, 122, 0, 0, 1, 0, 0.878788, 0, 0, []],
				113,
				331,
				[
					["bear_trap"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					["bear"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[575, -41, 0, 46, 416, 0, 0, 1, 0, 0.00480769, 0, 0, []],
				111,
				332,
				[
					["chainhook"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				[
					1,
					1,
					0,
					3,
					5,
					3,
					0,
					100,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2224, -89, 0, 46, 416, 0, 0, 1, 0, 0.00480769, 0, 0, []],
				111,
				333,
				[
					["chainhook"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				[
					1,
					1,
					0,
					3,
					5,
					3,
					0,
					100,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1696, 2, 0, 194, 273, 0, 0, 1, 0, 0.025641, 0, 0, []],
				103,
				334,
				[
					["blade_wheel_low"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					["blade"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[915, -228, 0, 57, 459, 0, 0, 1, 0, 0.00653595, 0, 0, []],
				112,
				335,
				[
					["ropehook"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1277, -55, 0, 57, 459, 0, 0, 1, 0, 0.00653595, 0, 0, []],
				112,
				336,
				[
					["ropehook"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1598, 476, 0, 41, 53, 0, 0, 1, 0, 0.566038, 0, 0, []],
				117,
				337,
				[
					["bucketpickup"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[960, 482, 0, 54, 57, 0, 0, 1, 0, 0.561404, 0, 0, []],
				124,
				338,
				[
					["shield"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1508, 328, 0, 61.3028, 63.6638, 0, 0, 1, 0, 0.564706, 0, 0, []],
				116,
				339,
				[
					["blood"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1949, 185, 0, 41, 39, 0, 0, 1, 0, 0.564103, 0, 0, []],
				123,
				340,
				[
					["useableHealth"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[272, 441, 0, 57, 57, 0, 0, 1, 0, 0.561404, 0, 0, []],
				119,
				341,
				[
					["plus10"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1151, 353, 0, 57, 57, 0, 0, 1, 0, 0.561404, 0, 0, []],
				119,
				342,
				[
					["plus10"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1766, 324, 0, 57, 57, 0, 0, 1, 0, 0.561404, 0, 0, []],
				119,
				343,
				[
					["plus10"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Objetcs",
			1,
			101413563451739,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Wave3_6",
		2560,
		800,
		false,
		null,
		2228225971102167,
		[
		[
			"Ground",
			0,
			3081209857003842,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				344,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 764, 0, 640, 187, 0, 0, 1, 0, 1, 0, 0, []],
				3,
				345,
				[
					["G_s2"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 764, 0, 640, 195, 0, 0, 1, 0, 1, 0, 0, []],
				4,
				346,
				[
					["G_s3"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1920, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				347,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1848, 521, 0, 133, 202, 0, 0, 1, 0.503759, 0.5, 0, 0, []],
				114,
				348,
				[
					["campfire"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					["fire"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[227, -93, 0, 194, 273, 0, 0, 1, 0, 0.025641, 0, 0, []],
				103,
				349,
				[
					["blade_wheel_low"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					["blade"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[590, 608, 0, 411, 150, 0, 0, 1, 0.00729927, 0.973333, 0, 0, []],
				115,
				351,
				[
					["e_fence"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["electric"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[499, 518, 0, 60, 60, 0, 0, 1, 0, 0.566667, 0, 0, []],
				120,
				352,
				[
					["plus100"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1169, 603, 0, 197, 255, 0, 0, 1, 0, 0.968627, 0, 0, []],
				109,
				353,
				[
					["barricade"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1534, -132, 0, 57, 459, 0, 0, 1, 0, 0.00653595, 0, 0, []],
				112,
				354,
				[
					["ropehook"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1532, 552, 0, 41, 53, 0, 0, 1, 0, 0.566038, 0, 0, []],
				117,
				355,
				[
					["bucketpickup"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2033, 601, 0, 411, 150, 0, 0, 1, 0.00729927, 0.973333, 0, 0, []],
				115,
				356,
				[
					["e_fence"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["electric"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1954, 492, 0, 57, 57, 0, 0, 1, 0, 0.561404, 0, 0, []],
				119,
				357,
				[
					["plus10"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1235, 210, 0, 57, 57, 0, 0, 1, 0, 0.561404, 0, 0, []],
				119,
				358,
				[
					["plus10"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[786, -74, 0, 46, 416, 0, 0, 1, 0, 0.00480769, 0, 0, []],
				111,
				359,
				[
					["chainhook"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				[
					1,
					1,
					0,
					3,
					5,
					3,
					0,
					100,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2215, -88, 0, 46, 416, 0, 0, 1, 0, 0.00480769, 0, 0, []],
				111,
				360,
				[
					["chainhook"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				[
					1,
					1,
					0,
					3,
					5,
					3,
					0,
					100,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[321, 279, 0, 22, 37, 0, 0, 1, 0, 0.567568, 0, 0, []],
				125,
				361,
				[
					["blood_drop"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[489, 370, 0, 22, 37, 0, 0, 1, 0, 0.567568, 0, 0, []],
				125,
				362,
				[
					["blood_drop"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[782, 437, 0, 54, 57, 0, 0, 1, 0, 0.561404, 0, 0, []],
				124,
				363,
				[
					["shield"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1816, 430, 0, 61.3028, 63.6638, 0, 0, 1, 0, 0.564706, 0, 0, []],
				116,
				364,
				[
					["blood"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[968, 364, 0, 22, 37, 0, 0, 1, 0, 0.567568, 0, 0, []],
				125,
				365,
				[
					["blood_drop"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1096, 267, 0, 22, 37, 0, 0, 1, 0, 0.567568, 0, 0, []],
				125,
				366,
				[
					["blood_drop"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2281, 303, 0, 59, 59, 0, 0, 1, 0, 0.559322, 0, 0, []],
				122,
				367,
				[
					["multi2long"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[318, 520, 0, 133, 202, 0, 0, 1, 0.503759, 0.5, 0, 0, []],
				114,
				350,
				[
					["campfire"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					["fire"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Objetcs",
			1,
			5761371296106259,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"MainScreen",
		1280,
		720,
		false,
		"MenuEvent",
		208408600342447,
		[
		[
			"back",
			0,
			4205877961102391,
			true,
			[0, 0, 0],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[-145, -33.6014, 0, 1570, 853, 0, 0, 1, 0, 0, 0, 0, []],
				39,
				60,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"play",
			1,
			1583725436145468,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[629, 455, 0, 235, 235, 0, 0, 1, 0.502128, 0.502128, 0, 0, []],
				40,
				61,
				[
					["playmain"]
				],
				[
				[
					1,
					1,
					17,
					"0.01,0.01",
					"100, 100",
					0.3,
					"0.1,0.1",
					0,
					0,
					1,
					0,
					""
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[639.5, 873, 0, 1291, 108, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				93,
				156,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"logo and buttons",
			2,
			7091044504197851,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[618, 172, 0, 619, 185, 0, 0, 1, 0.500808, 0.502703, 0, 0, []],
				41,
				62,
				[
				],
				[
				[
					1,
					1,
					17,
					"0.01,0.01",
					"100, 100",
					0.3,
					"0,0",
					0,
					0,
					1,
					0,
					""
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[61, 59, 0, 66, 66, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				42,
				63,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[631, 654, 0, 174, 125, 0, 0, 1, 0.5, 0.504, 0, 0, []],
				43,
				64,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[56, 655, 0, 47, 55, 0, 0, 1, 0.510638, 0.509091, 0, 0, []],
				83,
				66,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[82, 632, 0, 266, 49, 0, 0, 1, 0, 0, 0, 0, []],
				130,
				72,
				[
				],
				[
				],
				[
					42,
					46,
					"0123456789+-:x/",
					"00000",
					1,
					0,
					0,
					0,
					0,
					0,
					-20,
					0
				]
			]
,			[
				[629, 289, 0, 527, 65, 0, 0, 1, 0.500949, 0.507692, 0, 0, []],
				48,
				407,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1027, 50, 0, 53, 56, 0, 0, 1, 0.509434, 0.5, 0, 0, []],
				49,
				409,
				[
					["facebook"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1094, 50, 0, 55, 55, 0, 0, 1, 0.509091, 0.509091, 0, 0, []],
				51,
				410,
				[
					["twitter"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1160, 51, 0, 54, 56, 0, 0, 1, 0.5, 0.517857, 0, 0, []],
				50,
				411,
				[
					["googleplus"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1225, 50, 0, 54, 55, 0, 0, 1, 0.5, 0.509091, 0, 0, []],
				52,
				412,
				[
					["youtube"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"vignette",
			3,
			3060632022884314,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 0, 0, 294, 820, 0, 0, 1, 0, 0, 0, 0, []],
				22,
				154,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 820, 0, 294, 820, 0, 3.14159, 1, 0, 0, 0, 0, []],
				22,
				155,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"facebook",
			4,
			3171694039050849,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			],
			[			]
		]
,		[
			"CrossPromos",
			5,
			9927874977168794,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"MainGame",
		2560,
		720,
		false,
		"GameEvent",
		7504880762131949,
		[
		[
			"Layer 1",
			0,
			4948967515255718,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 360, 0, 1280, 720, 0, 0, 1, 0, 0.499307, 0, 0, []],
				0,
				1,
				[
					[0],
					["L1_s1"],
					["L1Scrolling"],
					["repeat"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					0
				]
			]
,			[
				[1280, 360, 0, 1280, 720, 0, 0, 1, 0, 0.5, 0, 0, []],
				1,
				4,
				[
					[0],
					["L1_s2"],
					["L1Scrolling"],
					["repeat"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					0
				]
			]
			],
			[			]
		]
,		[
			"Layer 2",
			1,
			6312687136358836,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 716, 0, 1280, 272, 0, 0, 1, 0, 1, 0, 0, []],
				5,
				15,
				[
					["L2_s1"],
					["L2Scrolling"],
					["random2"],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					0
				]
			]
,			[
				[1280, 716, 0, 1280, 296, 0, 0, 1, 0, 1, 0, 0, []],
				6,
				16,
				[
					["L2_s2"],
					["L2Scrolling"],
					["random2"],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					0
				]
			]
			],
			[			]
		]
,		[
			"Layer 3",
			2,
			8258625471670795,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0.266, 644, 0, 640, 218, 0, 0, 1, 0, 1, 0, 0, []],
				7,
				17,
				[
					["L3_s1"],
					["L3Scrolling"],
					["random3"],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					0
				]
			]
,			[
				[640, 644, 0, 640, 220, 0, 0, 1, 0, 1, 0, 0, []],
				8,
				18,
				[
					["L3_s2"],
					["L3Scrolling"],
					["random3"],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					0
				]
			]
,			[
				[1280, 644, 0, 640, 220, 0, 0, 1, 0, 1, 0, 0, []],
				9,
				19,
				[
					["L3_s3"],
					["L3Scrolling"],
					["random3"],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					0
				]
			]
			],
			[			]
		]
,		[
			"Layer 4",
			3,
			7066837588197546,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 695, 0, 1280, 308, 0, 0, 1, 0, 1, 0, 0, []],
				10,
				20,
				[
					["L4_s1"],
					["L4Scrolling"],
					["random3"],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					0
				]
			]
,			[
				[1280, 695, 0, 1280, 310, 0, 0, 1, 0, 1, 0, 0, []],
				11,
				21,
				[
					["L4_s2"],
					["L4Scrolling"],
					["random3"],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					0
				]
			]
,			[
				[2560, 716, 0, 1280, 465, 0, 0, 1, 0, 1, 0, 0, []],
				12,
				22,
				[
					["L4_s3"],
					["L4Scrolling"],
					["random3"],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					0
				]
			]
			],
			[			]
		]
,		[
			"Layer 5",
			4,
			8547397635649466,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[749, 587, 0, 148, 86, 0, 0, 1, 0.00675676, 0.72093, 0, 0, []],
				13,
				23,
				[
					["L5_b1"],
					["L5Scrolling"],
					["singleObject"],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					0
				]
			]
,			[
				[252, 604, 0, 157, 114, 0, 0, 1, 0.00636943, 0.736842, 0, 0, []],
				14,
				24,
				[
					["L5_b2"],
					["L5Scrolling"],
					["singleObject"],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					0
				]
			]
,			[
				[1346, 578, 0, 167, 101, 0, 0, 1, 0.00598802, 0.673267, 0, 0, []],
				15,
				25,
				[
					["L5_b3"],
					["L5Scrolling"],
					["singleObject"],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					0
				]
			]
,			[
				[391, 592, 0, 33, 125, 0, 0, 1, 0.030303, 0.928, 0, 0, []],
				16,
				26,
				[
					["L5_s1"],
					["L5Scrolling"],
					["singleObject"],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					0
				]
			]
,			[
				[1366, 598, 0, 196, 377, 0, 0, 1, 0.459184, 0.976127, 0, 0, []],
				17,
				27,
				[
					["L5_s2"],
					["L5Scrolling"],
					["singleObject"],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					0
				]
			]
,			[
				[857, 603, 0, 75, 125, 0, 0, 1, 0.0266667, 0.936, 0, 0, []],
				18,
				28,
				[
					["L5_s3"],
					["L5Scrolling"],
					["singleObject"],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					0
				]
			]
,			[
				[1986, 607, 0, 164, 89, 0, 0, 1, -0.00609756, 0.786517, 0, 0, []],
				19,
				29,
				[
					["L5_b4"],
					["L5Scrolling"],
					["singleObject"],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					0
				]
			]
			],
			[			]
		]
,		[
			"EarthLayer",
			5,
			5356632277931595,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 764, 0, 640, 215, 0, 0, 1, 0, 1, 0, 0, []],
				2,
				7,
				[
					["G_s1"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 764, 0, 640, 187, 0, 0, 1, 0, 1, 0, 0, []],
				3,
				13,
				[
					["G_s2"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 764, 0, 640, 195, 0, 0, 1, 0, 1, 0, 0, []],
				4,
				14,
				[
					["G_s3"],
					["GScrolling"],
					["random3"],
					[0]
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Obstacles",
			6,
			3958150222440432,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			],
			[			]
		]
,		[
			"Layer 7",
			7,
			2396854215095719,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 779, 0, 1295, 196, 0, 0, 1, 0, 1, 0, 0, []],
				20,
				30,
				[
					["L7_s1"],
					["L7Scrolling"],
					["random2"],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					0
				]
			]
,			[
				[1279, 777, 0, 1277, 175, 0, 0, 1, 0, 1, 0, 0, []],
				21,
				31,
				[
					["L7_s2"],
					["L7Scrolling"],
					["random2"],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					0
				]
			]
			],
			[			]
		]
,		[
			"Layer 8",
			8,
			1184457870315036,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			],
			[			]
		]
,		[
			"ChickenLayer",
			9,
			2486740518851329,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[143, 531, 0, 117, 105, 0, 0, 1, 0.504274, 0.504762, 0, 0, []],
				135,
				0,
				[
					["G_s3"],
					["GScrolling"],
					["random3"]
				],
				[
				[
					500,
					50,
					1500,
					450,
					1200,
					1000,
					1,
					1
				],
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[187, 502, 0, 10, 10, 0, -2.08237, 1, 0, 0.5, 0, 0, []],
				137,
				5,
				[
				],
				[
				[
				]
				],
				[
					2,
					20,
					0,
					300,
					5,
					100,
					-10,
					0,
					0,
					10,
					10,
					0,
					0,
					600,
					0,
					800,
					0,
					1,
					1
				]
			]
,			[
				[143, 524, 0, 153.786, 139.48, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				132,
				86,
				[
				],
				[
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"UI",
			10,
			5350606150741274,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[649, 666, 0, 710, 45, 0, 0, 1, 0.505634, 0.488889, 0, 0, []],
				79,
				44,
				[
				],
				[
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[335, 658, 0, 639, 14, 0, 0, 1, 0, 0, 0, 0, []],
				80,
				45,
				[
				],
				[
				[
				]
				],
				[
					0,
					0
				]
			]
,			[
				[-2, -3, 0, 1286, 188, 0, 0, 1, 0, 0, 0, 0, []],
				81,
				36,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1066, 60, 0, 46, 54, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				84,
				68,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[129, 64, 0, 27.7191, 32.4372, 0, 0, 1, 0.510638, 0.509091, 0, 0, []],
				83,
				120,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1088, 38, 0, 190, 69, 0, 0, 1, 0, 0, 0, 0, []],
				130,
				369,
				[
				],
				[
				],
				[
					42,
					46,
					"0123456789+-:x/",
					"0",
					1,
					0,
					0,
					0,
					0,
					0,
					-20,
					0
				]
			]
,			[
				[137.31, 50.6071, 0, 158, 32, 0, 0, 1, 0, 0, 0, 0, []],
				129,
				368,
				[
				],
				[
				],
				[
					42,
					46,
					"0123456789+-:x/",
					"12345",
					0.6,
					0,
					0,
					0,
					0,
					0,
					-12,
					0
				]
			]
			],
			[			]
		]
,		[
			"UIButtons",
			11,
			9367210204037043,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[70, 68, 0, 95, 95, 0, 0, 1, 0.505263, 0.505263, 0, 0, []],
				82,
				37,
				[
					["pause"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"PauseScreen",
			12,
			9932263976188641,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			],
			[			]
		]
,		[
			"facebook",
			13,
			4595117688346229,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			],
			[			]
		]
,		[
			"Vignette",
			14,
			3794556525622695,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[639.5, 812, 0, 1281, 98, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				93,
				157,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[0, 0, 0, 294, 764, 0, 0, 1, 0, 0, 0, 0, []],
				22,
				32,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 763, 0, 294, 763, 0, 3.14159, 1, 0, 0, 0, 0, []],
				22,
				35,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Debug",
			15,
			6022722992341179,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			],
			[			]
		]
,		[
			"ADs",
			16,
			1104397591557283,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			],
			[			]
		]
		],
		[
			[
				null,
				141,
				11,
				[
				],
				[
				],
				[
					9,
					1,
					1
				]
			]
,			[
				null,
				142,
				33,
				[
				],
				[
				],
				[
					9,
					1,
					1
				]
			]
,			[
				null,
				143,
				34,
				[
				],
				[
				],
				[
					9,
					1,
					1
				]
			]
,			[
				null,
				133,
				47,
				[
				],
				[
				],
				[
					20,
					1,
					1
				]
			]
,			[
				null,
				134,
				8,
				[
				],
				[
				],
				[
					10,
					1,
					1
				]
			]
		],
		[]
	]
,	[
		"ObjectDepot",
		1280,
		1024,
		false,
		null,
		6952832175811196,
		[
		[
			"Pause_obstacles",
			0,
			6167581326755301,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[1537, 351, 0, 61.3028, 63.6638, 0, 0, 1, 0, 0.564706, 0, 0, []],
				116,
				48,
				[
					["blood"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[102, 269, 0, 197, 255, 0, 0, 1, 0, 0.951493, 0, 0, []],
				109,
				49,
				[
					["barricade"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[333, 29, 0, 195, 241, 0, 0, 1, -0.292683, 0.0398406, 0, 0, []],
				100,
				50,
				[
					["blade"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[575, 28, 0, 56, 426, 0, 0, 1, 0.0178571, 0.0164319, 0, 0, []],
				111,
				51,
				[
					["chainhook"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				[
					1,
					1,
					0,
					3,
					5,
					3,
					0,
					100,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[38.3441, 428.856, 0, 107, 143, 0, 0, 1, -0.00934579, 0.874126, 0, 0, []],
				110,
				52,
				[
					["fence"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[253, 360, 0, 103, 70, 0, 0, 1, 0.495146, 0.471429, 0, 0, []],
				108,
				53,
				[
					["knife"],
					["Obstacles"],
					["singleObject"],
					[1],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				[
					-300,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[665, 26, 0, 67, 469, 0, 0, 1, 0, 0.0191898, 0, 0, []],
				112,
				54,
				[
					["ropehook"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"END",
			1,
			7553306871451819,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, -4, 0, 1280, 1026, 0, 0, 1, 0, 0, 0, 0, []],
				31,
				41,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 366, 0, 829, 511, 0, 0, 1, 0.500603, 0.500978, 0, 0, []],
				34,
				58,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[468, 411, 0, 107, 107, 0, 0, 1, 0.504673, 0.504673, 0, 0, []],
				30,
				38,
				[
					["back"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[842, 411, 0, 107, 107, 0, 0, 1, 0.504673, 0.504673, 0, 0, []],
				32,
				39,
				[
					["replay"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[651, 259, 0, 331, 193, 0, 0, 1, 0.501511, 0.502591, 0, 0, []],
				33,
				40,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[604, 429, 0, 30.8881, 36.2599, 0, 0, 1, 0.510638, 0.509091, 0, 0, []],
				35,
				70,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[725, 204, 0, 132, 131, 0, 0, 1, 0.5, 0.503817, 0, 0, []],
				36,
				77,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[639.399, 378, 0, 274, 51, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				38,
				370,
				[
				],
				[
				],
				[
					42,
					46,
					"0123456789+-:x/",
					"1237",
					1,
					0,
					1,
					0,
					1,
					0,
					-20,
					0
				]
			]
,			[
				[610, 413, 0, 191, 38, 0, 0, 1, 0, 0, 0, 0, []],
				37,
				371,
				[
				],
				[
				],
				[
					42,
					46,
					"0123456789+-:x/",
					"1123",
					0.7,
					0,
					0,
					0,
					0,
					0,
					-13,
					0
				]
			]
			],
			[			]
		]
,		[
			"PAUSE",
			2,
			9274704960516821,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[-3, -6, 0, 1280, 1038, 0, 0, 1, 0, 0, 0, 0, []],
				27,
				42,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 366, 0, 829, 511, 0, 0, 1, 0.500603, 0.500978, 0, 0, []],
				28,
				57,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[512, 414, 0, 107, 107, 0, 0, 1, 0.504673, 0.504673, 0, 0, []],
				26,
				43,
				[
					["back"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[638, 260, 0, 143, 156, 0, 0, 1, 0.503497, 0.5, 0, 0, []],
				23,
				46,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[773, 414, 0, 107, 107, 0, 0, 1, 0.504673, 0.504673, 0, 0, []],
				24,
				55,
				[
					["play"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[626, 566, 0, 107, 107, 0, 0, 1, 0.504673, 0.504673, 0, 0, []],
				25,
				56,
				[
					["howto"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[950, 214, 0, 132, 131, 0, 0, 1, 0.5, 0.503817, 0, 0, []],
				85,
				71,
				[
				],
				[
				[
					1,
					1,
					17,
					"0.01,0.01",
					"100,100",
					0.2,
					"0,0",
					0,
					0,
					1,
					0,
					""
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Main",
			3,
			5491298649194871,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 0, 0, 194, 273, 0, 0, 1, 0, 0.0424028, 0, 0, []],
				103,
				89,
				[
					["blade_wheel_low"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					["blade"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[104, -46, 0, 219, 136, 0, 0, 1, 0.480349, 0.554795, 0, 0, []],
				107,
				93,
				[
					["blade_back"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					0
				]
			]
,			[
				[103, -177, 0, 194, 191, 0, 0, 1, 0.5, 0.502488, 0, 0, []],
				104,
				92,
				[
					["blade_wheel_ground"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					["blade"]
				],
				[
				[
					-200,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[105, 58, 0, 137, 128, 0, 0, 1, 0.503401, 0.5, 0, 0, []],
				101,
				84,
				[
					["blade_back"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					0
				]
			]
,			[
				[-307, 926, 0, 194, 191, 0, 0, 1, 0.5, 0.502488, 0, 0, []],
				102,
				83,
				[
					["blade_wheel"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					["blade"]
				],
				[
				[
					-350,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[314, 206, 0, 111, 111, 0, 0, 1, 0.504505, 0.504505, 0, 0, []],
				46,
				79,
				[
					["audiooff"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[809, 544, 0, 111, 111, 0, 0, 1, 0.504505, 0.504505, 0, 0, []],
				47,
				80,
				[
					["audioon"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[529, 537, 0, 34, 70, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				86,
				65,
				[
				],
				[
				[
					1,
					1,
					17,
					"0.01,0.01",
					"100, 100",
					0.2,
					"0,0",
					0,
					0,
					1,
					0,
					""
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[0, 0, 0, 195, 241, 0, 0, 1, -0.292683, 0.0398406, 0, 0, []],
				100,
				82,
				[
					["blade"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[96, 171, 0, 194, 191, 0, 0, 1, 0.5, 0.502488, 0, 0, []],
				104,
				85,
				[
					["blade_wheel_ground"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					["blade"]
				],
				[
				[
					-200,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[-13, 777, 0, 69, 43, 0, 0, 1, 0.507246, 0.511628, 0, 0, []],
				87,
				87,
				[
					["nearMiss"],
					["ui"],
					["singleObject"],
					[0],
					[0]
				],
				[
				[
					1,
					5,
					0,
					"100,100",
					"0,0",
					0.5,
					"0.5,0.5",
					0,
					0,
					0,
					0,
					""
				],
				[
					1,
					1,
					23,
					"0.1,0.1",
					"13, 13",
					0.3,
					"0,0",
					0,
					0,
					1,
					0,
					""
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[20, 814, 0, 123.81, 30.4337, 0, 0, 1, 0.502793, 0.5, 0, 0, []],
				88,
				88,
				[
				],
				[
				[
					1,
					5,
					0,
					"100,100",
					"0, 0",
					0.5,
					"0.5,0",
					0,
					0,
					0,
					0,
					""
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1021, 187, 0, 145, 122, 0, 0, 1, 0, 0.878788, 0, 0, []],
				113,
				95,
				[
					["bear_trap"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					["bear"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[-95, 267, 0, 143, 212, 0, 0, 1, 0.503497, 0.5, 0, 0, []],
				114,
				94,
				[
					["campfire"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					["fire"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[-425, 542, 0, 418, 157, 0, 0, 1, 0.0167464, 0.949045, 0, 0, []],
				115,
				96,
				[
					["e_fence"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["electric"],
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1476, 345, 0, 56, 69, 0, 0, 1, 0.5, 0.507246, 0, 0, []],
				126,
				99,
				[
				],
				[
				[
				]
				],
				[
					0,
					"Default",
					0,
					0
				]
			]
,			[
				[1040, -60, 0, 467, 35, 0, 0, 1, 1.00214, 0.514286, 0, 0, []],
				89,
				100,
				[
				],
				[
				[
				]
				],
				[
					0,
					"Default",
					0,
					0
				]
			]
,			[
				[1409, 338, 0, 49, 49, 0, 0, 1, 0.510204, 0.510204, 0, 0, []],
				127,
				101,
				[
				],
				[
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1311, 416, 0, 57, 57, 0, 0, 1, 0, 0.561404, 0, 0, []],
				119,
				102,
				[
					["plus10"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1380, 416, 0, 60, 60, 0, 0, 1, 0, 0.566667, 0, 0, []],
				120,
				103,
				[
					["plus50"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1443, 416, 0, 59, 59, 0, 0, 1, 0, 0.559322, 0, 0, []],
				121,
				106,
				[
					["multi2short"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1503, 417, 0, 59, 59, 0, 0, 1, 0, 0.559322, 0, 0, []],
				122,
				108,
				[
					["multi2long"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1335.77, 508.766, 0, 65.2399, 64.7457, 0, 0, 1, 0.5, 0.503817, 0, 0, []],
				90,
				109,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1156, 805, 0, 41, 39, 0, 0, 1, 0, 0.564103, 0, 0, []],
				123,
				111,
				[
					["useableHealth"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1313, 642.321, 0, 46.3544, 58.8078, 0, 0, 1, 0, 0.564706, 0, 0, []],
				91,
				116,
				[
					["health"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1333, 713, 0, 29, 17, 0, 0, 1, 0.517241, 0.529412, 0, 0, []],
				92,
				119,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1305, 343, 0, 54, 57, 0, 0, 1, 0, 0.561404, 0, 0, []],
				124,
				112,
				[
					["shield"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1156, -82, 0, 136, 137, 0, 0, 1, 0.5, 0.50365, 0, 0, []],
				128,
				118,
				[
				],
				[
				[
				],
				[
				]
				],
				[
					0,
					"Default",
					0,
					0
				]
			]
,			[
				[1389, 826, 0, 49, 49, 0, 0, 1, 0.510204, 0.510204, 0, 0, []],
				118,
				98,
				[
					["plaster"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1580, 418, 0, 22, 37, 0, 0, 1, 0, 0.567568, 0, 0, []],
				125,
				158,
				[
					["blood_drop"],
					["pickup"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1364.45, 489.853, 0, 225.602, 53.5999, 0, 0, 1, 0, 0, 0, 0, []],
				131,
				67,
				[
				],
				[
				],
				[
					42,
					46,
					"0123456789+-:x/",
					"00:00",
					1,
					0,
					0,
					0,
					0,
					0,
					-19,
					0
				]
			]
,			[
				[0, 0, 0, 222, 246, 0, 0, 1, 0.00431034, 0.960938, 0, 0, []],
				105,
				91,
				[
					["blade_wheel"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1038, -112, 0, 467, 35, 0, 0, 1, 1.00214, 0.514286, 0, 0, []],
				98,
				406,
				[
				],
				[
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Achievments",
			4,
			5981524349712441,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[473, 520, 0, 123, 80, 0, 0, 1, 0.504065, 0.5, 0, 0, []],
				55,
				110,
				[
					[""]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[713, 520, 0, 123, 80, 0, 0, 1, 0.504065, 0.5, 0, 0, []],
				57,
				121,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[593, 520, 0, 123, 80, 0, 0, 1, 0.504065, 0.5, 0, 0, []],
				56,
				372,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[798, 520, 0, 36, 41, 0, 0, 1, 0.5, 0.512195, 0, 0, []],
				58,
				373,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[473, 520, 0, 71, 43, 0, 0, 1, 0.507042, 0.511628, 0, 0, []],
				59,
				374,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[593, 520, 0, 75, 39, 0, 0, 1, 0.506667, 0.512821, 0, 0, []],
				60,
				375,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[713, 520, 0, 82, 42, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				61,
				376,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[850, 527, 0, 96, 84, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				62,
				377,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[470, 572, 0, 127, 29, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				64,
				379,
				[
				],
				[
				],
				[
					17,
					16,
					"0123456789+-:x/",
					"00/00",
					1,
					0,
					1,
					0,
					1,
					0,
					-5,
					0
				]
			]
,			[
				[591, 572, 0, 119, 29, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				65,
				380,
				[
				],
				[
				],
				[
					17,
					16,
					"0123456789+-:x/",
					"00/00",
					1,
					0,
					1,
					0,
					1,
					0,
					-5,
					0
				]
			]
,			[
				[713, 572, 0, 124, 29, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				66,
				381,
				[
				],
				[
				],
				[
					17,
					16,
					"0123456789+-:x/",
					"00/00",
					1,
					0,
					1,
					0,
					1,
					0,
					-5,
					0
				]
			]
,			[
				[86, 160, 0, 252.773, 75.546, 0, 0, 1, 0.500808, 0.502703, 0, 0, []],
				45,
				382,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[645, 624, 0, 388, 47, 0, 0, 1, 0.5, 0.510638, 0, 0, []],
				94,
				69,
				[
				],
				[
				[
					0,
					1,
					23,
					"0.1,0.1",
					"10, 10",
					0.5,
					"0,0",
					0,
					0,
					1,
					0,
					""
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[648, 678, 0, 96, 84, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				67,
				76,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[247, 625, 0, 325, 47, 0, 0, 1, 0.501538, 0.510638, 0, 0, []],
				95,
				383,
				[
				],
				[
				[
					0,
					1,
					23,
					"0.1,0.1",
					"10, 10",
					0.5,
					"0,0",
					0,
					0,
					1,
					0,
					""
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[945, -48, 0, 96, 84, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				68,
				384,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[297, 91, 0, 128, 128, 0, 0, 1, 0, 0.5, 0, 0, []],
				97,
				387,
				[
				],
				[
				],
				[
					30,
					360,
					1,
					420,
					12,
					100,
					0,
					0,
					0,
					500,
					5,
					0,
					50,
					300,
					0,
					800,
					0,
					0,
					1
				]
			]
,			[
				[0, 0, 3.815e-006, 222, 280, 0, 0, 1, 0.00862069, 0.951724, 0, 0, []],
				106,
				90,
				[
					["ground_blade_wheel"],
					["Obstacles"],
					["singleObject"],
					[0],
					[0],
					[0],
					["normal"],
					["blade"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[461, 824, 0, 409, 70, 0, 0, 1, 0.498778, 0.314286, 0, 0, []],
				99,
				408,
				[
				],
				[
				[
					0,
					1,
					23,
					"0.1,0.1",
					"10,10",
					0.5,
					"0,0",
					0,
					0,
					1,
					0,
					""
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"particles",
			5,
			1888231262607935,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			],
			[			]
		]
,		[
			"Tutorial",
			6,
			4071325207357577,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 0, 0, 1303, 1026, 0, 0, 1, 0, 0, 0, 0, []],
				69,
				388,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 360, 0, 794, 476, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				71,
				389,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[982, 542, 0, 107, 107, 0, 0, 1, 0.504673, 0.504673, 0, 0, []],
				70,
				390,
				[
					["playtut"]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[416, 548, 0, 102, 85, 0, 0, 1, 0.5, 0.505882, 0, 0, []],
				72,
				391,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[571, 548, 0, 102, 85, 0, 0, 1, 0.5, 0.505882, 0, 0, []],
				72,
				392,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[723, 546, 0, 102, 85, 0, 0, 1, 0.5, 0.505882, 0, 0, []],
				72,
				393,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[408, 545, 0, 109, 76, 0, 0, 1, 0.504587, 0.5, 0, 0, []],
				73,
				394,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Tutorial2",
			7,
			9494742814250316,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[640, 360, 0, 794, 476, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				74,
				395,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[511, 460, 0, 136, 106, 0, 0, 1, 0.507353, 0.5, 0, 0, []],
				77,
				396,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[744, 460, 0, 150, 108, 0, 0, 1, 0.506667, 0.5, 0, 0, []],
				78,
				397,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[516, 542, 0, 109, 76, 0, 0, 1, 0.504587, 0.5, 0, 0, []],
				75,
				398,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[742, 549, 0, 109, 76, 0, 0, 1, 0.504587, 0.5, 0, 0, []],
				76,
				399,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Facebook",
			8,
			9368581918637974,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			],
			[			]
		]
		],
		[
			[
				null,
				63,
				378,
				[
				],
				[
				],
				[
					11,
					4,
					1
				]
			]
		],
		[]
	]
,	[
		"SplashScreen",
		1280,
		720,
		false,
		"SplashEvents",
		7447204548380708,
		[
		[
			"Layer 0",
			0,
			9014182427766428,
			true,
			[0, 0, 0],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[640, 343, 0, 620, 300, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				96,
				385,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
	],
	[
	[
		"GameEvent",
		[
		[
			2,
			"checkControls"
		]
,		[
			2,
			"facebook"
		]
,		[
			2,
			"GlobalButtons"
		]
,		[
			2,
			"Audio"
		]
,		[
			1,
			"useGamma",
			0,
			0,
false,false,9920367313035597
		]
,		[
			1,
			"score",
			0,
			0,
false,false,6994625351838832
		]
,		[
			1,
			"highscore",
			0,
			0,
false,false,7476887060595419
		]
,		[
			1,
			"achievmentsActive",
			0,
			1,
false,false,8838464217755922
		]
,		[
			1,
			"OverallPlayed",
			0,
			0,
false,false,8171822425350607
		]
,		[
			1,
			"tutorialWatched",
			0,
			0,
false,false,8665157302307597
		]
,		[
			1,
			"tutorialScreenActive",
			0,
			0,
false,false,1303647335371998
		]
,		[
			1,
			"shieldActive",
			0,
			0,
false,false,8050420340555485
		]
,		[
			1,
			"useableBlood",
			0,
			0,
false,false,6436390932974574
		]
,		[
			1,
			"nearMissCombo",
			0,
			1,
false,false,8323295883451823
		]
,		[
			1,
			"multiTimer",
			0,
			0,
false,false,8226881204517793
		]
,		[
			1,
			"multiActive",
			0,
			0,
false,false,196436969662158
		]
,		[
			1,
			"healthLoseSpeed",
			0,
			5,
false,false,5053440133773103
		]
,		[
			1,
			"SCALEFACTOR",
			0,
			1,
false,true,2903930607876927
		]
,		[
			1,
			"finalscore",
			0,
			0,
false,false,9685883777447852
		]
,		[
			1,
			"Damage",
			0,
			20,
false,false,6941051002112747
		]
,		[
			1,
			"hitState",
			0,
			0,
false,false,7927335829577804
		]
,		[
			1,
			"scoreMultiplier",
			0,
			1,
false,false,6395996402686552
		]
,		[
			1,
			"scoreActive",
			0,
			1,
false,false,3553459179186441
		]
,		[
			1,
			"HighDifficulty",
			0,
			1,
false,false,5806308966102748
		]
,		[
			1,
			"LowDifficulty",
			0,
			0,
false,false,3839422904337907
		]
,		[
			1,
			"CurDifficulty",
			0,
			1,
false,false,7476354251949925
		]
,		[
			1,
			"CurL5ScreenPassed",
			0,
			0,
false,false,545207184123529
		]
,		[
			1,
			"CurGScreenPassed",
			0,
			0,
false,false,6696200194552619
		]
,		[
			1,
			"ScreensPassed",
			0,
			0,
false,false,3891228741388898
		]
,		[
			1,
			"paused",
			0,
			0,
false,false,7978057465532094
		]
,		[
			1,
			"speed",
			0,
			400,
false,false,9130805897876279
		]
,		[
			1,
			"numScreenpass",
			0,
			0,
false,false,2614774134976969
		]
,		[
			1,
			"moveCount",
			0,
			0,
false,false,4828050389782508
		]
,		[
			1,
			"L1SpeedMod",
			0,
			0.02,
false,false,9021820389305932
		]
,		[
			1,
			"L2SpeedMod",
			0,
			0.08,
false,false,4203160481740937
		]
,		[
			1,
			"L3SpeedMod",
			0,
			0.25,
false,false,994162862972343
		]
,		[
			1,
			"L4SpeedMod",
			0,
			0.2,
false,false,4952298344680676
		]
,		[
			1,
			"myScreenWidth",
			0,
			0,
false,false,3182035069737942
		]
,		[
			1,
			"L5SpeedMod",
			0,
			0.95,
false,false,644493777725379
		]
,		[
			1,
			"L7SpeedMod",
			0,
			2,
false,false,5895510561523195
		]
,		[
			1,
			"GSpeedMod",
			0,
			1,
false,false,8207825926188472
		]
,		[
			1,
			"MouseX",
			0,
			0,
false,false,5701048339157378
		]
,		[
			1,
			"ADMouseX",
			0,
			0,
false,false,669558054541583
		]
,		[
			1,
			"ADMouseY",
			0,
			0,
false,false,8191284770512047
		]
,		[
			1,
			"row1wasUnlocked",
			0,
			0,
false,false,5705614511684011
		]
,		[
			1,
			"row2wasUnlocked",
			0,
			0,
false,false,5680028672833064
		]
,		[
			1,
			"row3wasUnlocked",
			0,
			0,
false,false,8739572990410312
		]
,		[
			1,
			"plasterActive",
			0,
			0,
false,false,9569724525045556
		]
,		[
			1,
			"bucketActive",
			0,
			0,
false,false,6592219959232064
		]
,		[
			1,
			"jumpReady",
			0,
			1,
false,false,5204758242260231
		]
,		[
			1,
			"falloff",
			0,
			0,
false,false,1485089002785474
		]
,		[
			1,
			"health",
			0,
			60,
false,false,8185503639721385
		]
,		[
			1,
			"ChickenXoffset",
			0,
			0,
false,false,1650778643900287
		]
,		[
			1,
			"maxJumpCount",
			0,
			2,
false,false,5852991404837311
		]
,		[
			1,
			"jumpCount",
			0,
			0,
false,false,2709772107307029
		]
,		[
			1,
			"animSpeedUp",
			0,
			20,
false,false,2950868511370218
		]
,		[
			1,
			"Bounce",
			0,
			0,
false,false,5774334106929946
		]
,		[
			1,
			"maxX",
			0,
			1200,
false,false,8424307246624019
		]
,		[
			1,
			"minX",
			0,
			70,
false,false,7839419776343297
		]
,		[
			1,
			"animSpeed",
			0,
			30,
false,false,2855376926497308
		]
,		[
			1,
			"allUnlocked",
			0,
			0,
false,false,1303483035941566
		]
,		[
			1,
			"row1Unlocked",
			0,
			0,
false,false,814615352103297
		]
,		[
			1,
			"row2Unlocked",
			0,
			0,
false,false,1619648537771415
		]
,		[
			1,
			"row3Unlocked",
			0,
			0,
false,false,5684156571864298
		]
,		[
			1,
			"currentUnlock",
			0,
			0,
false,false,2877428088725571
		]
,		[
			1,
			"bloodDropsCollected",
			0,
			0,
false,false,3575960373647554
		]
,		[
			1,
			"electricHits",
			0,
			0,
false,false,1355389980515413
		]
,		[
			1,
			"bearTrapHits",
			0,
			0,
false,false,7120808112228181
		]
,		[
			1,
			"campfireHits",
			0,
			0,
false,false,6966848585478354
		]
,		[
			1,
			"bladeHits",
			0,
			0,
false,false,4737611379803795
		]
,		[
			1,
			"bloodCollected",
			0,
			0,
false,false,5935899108427566
		]
,		[
			1,
			"plus50Collected",
			0,
			0,
false,false,904719983253327
		]
,		[
			1,
			"plus100Collected",
			0,
			0,
false,false,4678743459847641
		]
,		[
			1,
			"plasterCollected",
			0,
			0,
false,false,8265737851352961
		]
,		[
			1,
			"multiplyCollected",
			0,
			0,
false,false,353400186938232
		]
,		[
			1,
			"multiplySeconds",
			0,
			0,
false,false,7919310574890644
		]
,		[
			1,
			"nearMissedObjects",
			0,
			0,
false,false,7690725981658784
		]
,		[
			1,
			"gamesPlayed",
			0,
			0,
false,false,8407058791224473
		]
,		[
			1,
			"needNewRecord",
			0,
			0,
false,false,1247694423820918
		]
,		[
			1,
			"startHealthAdd",
			0,
			0,
false,false,8591813119046873
		]
,		[
			1,
			"lifeExtension1Enabled",
			0,
			0,
false,false,2353097464181777
		]
,		[
			1,
			"lifeExtension2Enabled",
			0,
			0,
false,false,6630243640282092
		]
,		[
			1,
			"bloodDropEnabled",
			0,
			0,
false,false,765086322801839
		]
,		[
			1,
			"multiLongEnabled",
			0,
			0,
false,false,5733446311410187
		]
,		[
			1,
			"multiShortEnabled",
			0,
			0,
false,false,8481381623901536
		]
,		[
			1,
			"plus100Enabled",
			0,
			0,
false,false,1065333794148021
		]
,		[
			1,
			"bucketEnabled",
			0,
			0,
false,false,9808959135684427
		]
,		[
			1,
			"plus50Enabled",
			0,
			0,
false,false,9680113133496891
		]
,		[
			1,
			"plasterEnabled",
			0,
			0,
false,false,1862877281706414
		]
,		[
			1,
			"shieldEnabled",
			0,
			0,
false,false,2199163412004047
		]
,		[
			1,
			"useableBloodEnabled",
			0,
			0,
false,false,9270460823482823
		]
,		[
			1,
			"boostZoneActive",
			0,
			0,
false,false,8465205503667482
		]
,		[
			0,
			[true, "INIT"],
			false,
			3647667728922716,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				0,
				false,
				false,
				false,
				3647667728922716
				,[
				[
					1,
					[
						2,
						"INIT"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				517495525370117,
				[
				[
					-1,
					cr.system_object.prototype.cnds.OnLayoutStart,
					null,
					1,
					false,
					false,
					false,
					1166939514844424
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					7422585041396723
					,[
					[
						1,
						[
							2,
							"loadData"
						]
					]
,					[
						13,
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					3345304644118659
					,[
					[
						1,
						[
							2,
							"checkAudio"
						]
					]
,					[
						13,
					]
					]
				]
,				[
					137,
					cr.behaviors.Pin.prototype.acts.Pin,
					"Pin",
					118529583798537
					,[
					[
						4,
						135
					]
,					[
						3,
						1
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					558964303127909
					,[
					[
						1,
						[
							2,
							"setParticles"
						]
					]
,					[
						13,
					]
					]
				]
,				[
					132,
					cr.behaviors.Pin.prototype.acts.Pin,
					"Pin",
					6974782328086622
					,[
					[
						4,
						135
					]
,					[
						3,
						0
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					3159298854534971
					,[
					[
						11,
						"myScreenWidth"
					]
,					[
						7,
						[
							7,
							[
								19,
								cr.system_object.prototype.exps.layoutwidth
							]
							,[
								0,
								2
							]
						]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					2109267828390652
					,[
					[
						1,
						[
							2,
							"createL5Wave1"
						]
					]
,					[
						13,
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					2338459403316006
					,[
					[
						1,
						[
							10,
							[
								2,
								"createD1W"
							]
							,[
								19,
								cr.system_object.prototype.exps.str
								,[
[
									4,
									[
										19,
										cr.system_object.prototype.exps.floor
										,[
[
											19,
											cr.system_object.prototype.exps.random
											,[
[
												0,
												6
											]
											]
										]
										]
									]
									,[
										0,
										1
									]
								]
								]
							]
						]
					]
,					[
						13,
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					9915529621448109
					,[
					[
						1,
						[
							2,
							"playMusic"
						]
					]
,					[
						13,
					]
					]
				]
,				[
					129,
					cr.plugins_.Spritefont2.prototype.acts.SetText,
					null,
					3675124089426583
					,[
					[
						7,
						[
							23,
							"highscore"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.AddVar,
					null,
					3861007645131776
					,[
					[
						11,
						"OverallPlayed"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					8998279740309784
					,[
					[
						1,
						[
							2,
							"checkPlays"
						]
					]
,					[
						13,
					]
					]
				]
,				[
					148,
					cr.plugins_.CJSAds.prototype.acts.PreloadFullscreen,
					null,
					807213689632104
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayerVisible,
					null,
					7969488971977207
					,[
					[
						5,
						[
							0,
							13
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayerScale,
					null,
					5800531852461584
					,[
					[
						5,
						[
							0,
							13
						]
					]
,					[
						0,
						[
							0,
							2
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetGroupActive,
					null,
					6408974934088611
					,[
					[
						1,
						[
							2,
							"Global Buttons"
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					7449449069386473
					,[
					[
						1,
						[
							2,
							"checkControls"
						]
					]
,					[
						13,
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					9357825512832245,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						6251792886036018
						,[
						[
							11,
							"lifeExtension1Enabled"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.AddVar,
						null,
						6287332137085819
						,[
						[
							11,
							"health"
						]
,						[
							7,
							[
								0,
								20
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					9148590883451217,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						3158085318393816
						,[
						[
							11,
							"lifeExtension2Enabled"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.AddVar,
						null,
						3906582036489993
						,[
						[
							11,
							"health"
						]
,						[
							7,
							[
								0,
								20
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					1831478346328968,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						557232378071897
						,[
						[
							11,
							"achievmentsActive"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						8170211294685914
						,[
						[
							4,
							45
						]
,						[
							5,
							[
								0,
								10
							]
						]
,						[
							0,
							[
								6,
								[
									0,
									613
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
,						[
							0,
							[
								6,
								[
									0,
									62
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					1589779488284824,
					[
					[
						-1,
						cr.system_object.prototype.cnds.Else,
						null,
						0,
						false,
						false,
						false,
						5806023140904232
					]
					],
					[
					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						7726418729118753
						,[
						[
							1,
							[
								2,
								"createAchievements"
							]
						]
,						[
							13,
															[
									7,
									[
										0,
										11
									]
								]
,
								[
									7,
									[
										6,
										[
											0,
											470
										]
										,[
											23,
											"SCALEFACTOR"
										]
									]
								]
,
								[
									7,
									[
										6,
										[
											0,
											52
										]
										,[
											23,
											"SCALEFACTOR"
										]
									]
								]
,
								[
									7,
									[
										2,
										"MainACHIEV"
									]
								]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					4283915423697683,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						6745036108500256
						,[
						[
							11,
							"tutorialWatched"
						]
,						[
							8,
							1
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						1255290432527588
						,[
						[
							1,
							[
								2,
								"showTutorial"
							]
						]
,						[
							13,
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					9111478744031193,
					[
					[
						138,
						cr.plugins_.Touch.prototype.cnds.CompareOrientation,
						null,
						0,
						false,
						false,
						false,
						4636537755302001
						,[
						[
							3,
							1
						]
,						[
							8,
							4
						]
,						[
							0,
							[
								0,
								10
							]
						]
						]
					]
,					[
						138,
						cr.plugins_.Touch.prototype.cnds.CompareOrientation,
						null,
						0,
						false,
						false,
						false,
						3965206779188636
						,[
						[
							3,
							2
						]
,						[
							8,
							4
						]
,						[
							0,
							[
								0,
								-10
							]
						]
						]
					]
,					[
						138,
						cr.plugins_.Touch.prototype.cnds.CompareOrientation,
						null,
						0,
						false,
						false,
						false,
						2686129716996063
						,[
						[
							3,
							2
						]
,						[
							8,
							2
						]
,						[
							0,
							[
								0,
								10
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						9714954493122734
						,[
						[
							11,
							"useGamma"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					8186454828458642,
					[
					[
						-1,
						cr.system_object.prototype.cnds.Else,
						null,
						0,
						false,
						false,
						false,
						9520667905207763
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						4278794090866105
						,[
						[
							11,
							"useGamma"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				5317384127675709,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					7651412651682439
					,[
					[
						1,
						[
							2,
							"setParticles"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					7303743334172167,
					[
					[
						-1,
						cr.system_object.prototype.cnds.IsMobile,
						null,
						0,
						false,
						false,
						false,
						2446155799117343
					]
					],
					[
					[
						137,
						cr.plugins_.Particles.prototype.acts.SetRate,
						null,
						6399761576010207
						,[
						[
							0,
							[
								0,
								20
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					5440544703630484,
					[
					[
						-1,
						cr.system_object.prototype.cnds.Else,
						null,
						0,
						false,
						false,
						false,
						2590364674008636
					]
					],
					[
					[
						137,
						cr.plugins_.Particles.prototype.acts.SetRate,
						null,
						626237551760581
						,[
						[
							0,
							[
								0,
								200
							]
						]
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			[true, "LOAD"],
			false,
			2545956041901251,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				0,
				false,
				false,
				false,
				2545956041901251
				,[
				[
					1,
					[
						2,
						"LOAD"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				9972695038599933,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					8851547473643249
					,[
					[
						1,
						[
							2,
							"loadData"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					9332442494197399,
					[
					[
						145,
						cr.plugins_.WebStorage.prototype.cnds.LocalStorageExists,
						null,
						0,
						false,
						false,
						false,
						7612948557539358
						,[
						[
							1,
							[
								2,
								"webscore"
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						6614125015181323
						,[
						[
							11,
							"highscore"
						]
,						[
							7,
							[
								20,
								145,
								cr.plugins_.WebStorage.prototype.exps.LocalValue,
								true,
								null
								,[
[
									2,
									"webscore"
								]
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						1953163521707732
						,[
						[
							11,
							"row1Unlocked"
						]
,						[
							7,
							[
								19,
								cr.system_object.prototype.exps["int"]
								,[
[
									20,
									145,
									cr.plugins_.WebStorage.prototype.exps.LocalValue,
									true,
									null
									,[
[
										2,
										"row1Unlocked"
									]
									]
								]
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						3242834269246597
						,[
						[
							11,
							"row2Unlocked"
						]
,						[
							7,
							[
								19,
								cr.system_object.prototype.exps["int"]
								,[
[
									20,
									145,
									cr.plugins_.WebStorage.prototype.exps.LocalValue,
									true,
									null
									,[
[
										2,
										"row2Unlocked"
									]
									]
								]
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						6962159610542719
						,[
						[
							11,
							"row3Unlocked"
						]
,						[
							7,
							[
								19,
								cr.system_object.prototype.exps["int"]
								,[
[
									20,
									145,
									cr.plugins_.WebStorage.prototype.exps.LocalValue,
									true,
									null
									,[
[
										2,
										"row3Unlocked"
									]
									]
								]
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						3354581474757631
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							7,
							[
								19,
								cr.system_object.prototype.exps["int"]
								,[
[
									20,
									145,
									cr.plugins_.WebStorage.prototype.exps.LocalValue,
									true,
									null
									,[
[
										2,
										"currentUnlock"
									]
									]
								]
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						2500005336966439
						,[
						[
							11,
							"bloodCollected"
						]
,						[
							7,
							[
								19,
								cr.system_object.prototype.exps["int"]
								,[
[
									20,
									145,
									cr.plugins_.WebStorage.prototype.exps.LocalValue,
									true,
									null
									,[
[
										2,
										"bloodCollected"
									]
									]
								]
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						300483092298642
						,[
						[
							11,
							"nearMissedObjects"
						]
,						[
							7,
							[
								19,
								cr.system_object.prototype.exps["int"]
								,[
[
									20,
									145,
									cr.plugins_.WebStorage.prototype.exps.LocalValue,
									true,
									null
									,[
[
										2,
										"nearMissedObjects"
									]
									]
								]
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						4107870211605788
						,[
						[
							11,
							"needNewRecord"
						]
,						[
							7,
							[
								19,
								cr.system_object.prototype.exps["int"]
								,[
[
									20,
									145,
									cr.plugins_.WebStorage.prototype.exps.LocalValue,
									true,
									null
									,[
[
										2,
										"needNewRecord"
									]
									]
								]
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						2584539885661737
						,[
						[
							11,
							"gamesPlayed"
						]
,						[
							7,
							[
								19,
								cr.system_object.prototype.exps["int"]
								,[
[
									20,
									145,
									cr.plugins_.WebStorage.prototype.exps.LocalValue,
									true,
									null
									,[
[
										2,
										"gamesPlayed"
									]
									]
								]
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						8693955240591061
						,[
						[
							11,
							"multiplySeconds"
						]
,						[
							7,
							[
								19,
								cr.system_object.prototype.exps["int"]
								,[
[
									20,
									145,
									cr.plugins_.WebStorage.prototype.exps.LocalValue,
									true,
									null
									,[
[
										2,
										"multiplySeconds"
									]
									]
								]
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						4723258075629865
						,[
						[
							11,
							"startHealthAdd"
						]
,						[
							7,
							[
								19,
								cr.system_object.prototype.exps["int"]
								,[
[
									20,
									145,
									cr.plugins_.WebStorage.prototype.exps.LocalValue,
									true,
									null
									,[
[
										2,
										"startHealthAdd"
									]
									]
								]
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						7960877001935882
						,[
						[
							11,
							"bloodDropsCollected"
						]
,						[
							7,
							[
								19,
								cr.system_object.prototype.exps["int"]
								,[
[
									20,
									145,
									cr.plugins_.WebStorage.prototype.exps.LocalValue,
									true,
									null
									,[
[
										2,
										"bloodDropsCollected"
									]
									]
								]
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						6168895123761148
						,[
						[
							11,
							"electricHits"
						]
,						[
							7,
							[
								19,
								cr.system_object.prototype.exps["int"]
								,[
[
									20,
									145,
									cr.plugins_.WebStorage.prototype.exps.LocalValue,
									true,
									null
									,[
[
										2,
										"electricHits"
									]
									]
								]
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						167012857068369
						,[
						[
							11,
							"bearTrapHits"
						]
,						[
							7,
							[
								19,
								cr.system_object.prototype.exps["int"]
								,[
[
									20,
									145,
									cr.plugins_.WebStorage.prototype.exps.LocalValue,
									true,
									null
									,[
[
										2,
										"bearTrapHits"
									]
									]
								]
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						6037986953608322
						,[
						[
							11,
							"multiplyCollected"
						]
,						[
							7,
							[
								19,
								cr.system_object.prototype.exps["int"]
								,[
[
									20,
									145,
									cr.plugins_.WebStorage.prototype.exps.LocalValue,
									true,
									null
									,[
[
										2,
										"multiplyCollected"
									]
									]
								]
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						9990216874145021
						,[
						[
							11,
							"plus50Collected"
						]
,						[
							7,
							[
								19,
								cr.system_object.prototype.exps["int"]
								,[
[
									20,
									145,
									cr.plugins_.WebStorage.prototype.exps.LocalValue,
									true,
									null
									,[
[
										2,
										"plus50Collected"
									]
									]
								]
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						251731597514981
						,[
						[
							11,
							"plus100Collected"
						]
,						[
							7,
							[
								19,
								cr.system_object.prototype.exps["int"]
								,[
[
									20,
									145,
									cr.plugins_.WebStorage.prototype.exps.LocalValue,
									true,
									null
									,[
[
										2,
										"plus100Collected"
									]
									]
								]
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						3039918799949211
						,[
						[
							11,
							"bladeHits"
						]
,						[
							7,
							[
								19,
								cr.system_object.prototype.exps["int"]
								,[
[
									20,
									145,
									cr.plugins_.WebStorage.prototype.exps.LocalValue,
									true,
									null
									,[
[
										2,
										"bladeHits"
									]
									]
								]
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						9518485145117258
						,[
						[
							11,
							"campfireHits"
						]
,						[
							7,
							[
								19,
								cr.system_object.prototype.exps["int"]
								,[
[
									20,
									145,
									cr.plugins_.WebStorage.prototype.exps.LocalValue,
									true,
									null
									,[
[
										2,
										"campfireHits"
									]
									]
								]
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						9720916248176834
						,[
						[
							11,
							"multiLongEnabled"
						]
,						[
							7,
							[
								19,
								cr.system_object.prototype.exps["int"]
								,[
[
									20,
									145,
									cr.plugins_.WebStorage.prototype.exps.LocalValue,
									true,
									null
									,[
[
										2,
										"multiLongEnabled"
									]
									]
								]
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						1057316723884311
						,[
						[
							11,
							"multiShortEnabled"
						]
,						[
							7,
							[
								19,
								cr.system_object.prototype.exps["int"]
								,[
[
									20,
									145,
									cr.plugins_.WebStorage.prototype.exps.LocalValue,
									true,
									null
									,[
[
										2,
										"multiShortEnabled"
									]
									]
								]
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						1627192453866218
						,[
						[
							11,
							"plus100Enabled"
						]
,						[
							7,
							[
								19,
								cr.system_object.prototype.exps["int"]
								,[
[
									20,
									145,
									cr.plugins_.WebStorage.prototype.exps.LocalValue,
									true,
									null
									,[
[
										2,
										"plus100Enabled"
									]
									]
								]
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						6952624406356919
						,[
						[
							11,
							"plus50Enabled"
						]
,						[
							7,
							[
								19,
								cr.system_object.prototype.exps["int"]
								,[
[
									20,
									145,
									cr.plugins_.WebStorage.prototype.exps.LocalValue,
									true,
									null
									,[
[
										2,
										"plus50Enabled"
									]
									]
								]
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						6759129305206113
						,[
						[
							11,
							"plasterEnabled"
						]
,						[
							7,
							[
								19,
								cr.system_object.prototype.exps["int"]
								,[
[
									20,
									145,
									cr.plugins_.WebStorage.prototype.exps.LocalValue,
									true,
									null
									,[
[
										2,
										"plasterEnabled"
									]
									]
								]
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						1113344414042953
						,[
						[
							11,
							"shieldEnabled"
						]
,						[
							7,
							[
								19,
								cr.system_object.prototype.exps["int"]
								,[
[
									20,
									145,
									cr.plugins_.WebStorage.prototype.exps.LocalValue,
									true,
									null
									,[
[
										2,
										"shieldEnabled"
									]
									]
								]
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						1711340461905932
						,[
						[
							11,
							"useableBloodEnabled"
						]
,						[
							7,
							[
								19,
								cr.system_object.prototype.exps["int"]
								,[
[
									20,
									145,
									cr.plugins_.WebStorage.prototype.exps.LocalValue,
									true,
									null
									,[
[
										2,
										"useableBloodEnabled"
									]
									]
								]
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						6953282874778221
						,[
						[
							11,
							"OverallPlayed"
						]
,						[
							7,
							[
								19,
								cr.system_object.prototype.exps["int"]
								,[
[
									20,
									145,
									cr.plugins_.WebStorage.prototype.exps.LocalValue,
									true,
									null
									,[
[
										2,
										"overallPlayed"
									]
									]
								]
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						8406067477849439
						,[
						[
							11,
							"bloodDropEnabled"
						]
,						[
							7,
							[
								19,
								cr.system_object.prototype.exps["int"]
								,[
[
									20,
									145,
									cr.plugins_.WebStorage.prototype.exps.LocalValue,
									true,
									null
									,[
[
										2,
										"bloodDropEnabled"
									]
									]
								]
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						3979731771084232
						,[
						[
							11,
							"lifeExtension1Enabled"
						]
,						[
							7,
							[
								19,
								cr.system_object.prototype.exps["int"]
								,[
[
									20,
									145,
									cr.plugins_.WebStorage.prototype.exps.LocalValue,
									true,
									null
									,[
[
										2,
										"lifeExtension1Enabled"
									]
									]
								]
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						7681142171968824
						,[
						[
							11,
							"lifeExtension2Enabled"
						]
,						[
							7,
							[
								19,
								cr.system_object.prototype.exps["int"]
								,[
[
									20,
									145,
									cr.plugins_.WebStorage.prototype.exps.LocalValue,
									true,
									null
									,[
[
										2,
										"lifeExtension2Enabled"
									]
									]
								]
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						3043543873378041
						,[
						[
							11,
							"allUnlocked"
						]
,						[
							7,
							[
								19,
								cr.system_object.prototype.exps["int"]
								,[
[
									20,
									145,
									cr.plugins_.WebStorage.prototype.exps.LocalValue,
									true,
									null
									,[
[
										2,
										"allUnlocked"
									]
									]
								]
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						703723160280233
						,[
						[
							11,
							"boostZoneActive"
						]
,						[
							7,
							[
								19,
								cr.system_object.prototype.exps["int"]
								,[
[
									20,
									145,
									cr.plugins_.WebStorage.prototype.exps.LocalValue,
									true,
									null
									,[
[
										2,
										"boostZoneEnabled"
									]
									]
								]
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						7870676974770109
						,[
						[
							11,
							"plasterCollected"
						]
,						[
							7,
							[
								19,
								cr.system_object.prototype.exps["int"]
								,[
[
									20,
									145,
									cr.plugins_.WebStorage.prototype.exps.LocalValue,
									true,
									null
									,[
[
										2,
										"plasterCollected"
									]
									]
								]
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						6319778042598677
						,[
						[
							11,
							"bucketEnabled"
						]
,						[
							7,
							[
								19,
								cr.system_object.prototype.exps["int"]
								,[
[
									20,
									145,
									cr.plugins_.WebStorage.prototype.exps.LocalValue,
									true,
									null
									,[
[
										2,
										"bucketEnabled"
									]
									]
								]
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						8224328260723558
						,[
						[
							11,
							"tutorialWatched"
						]
,						[
							7,
							[
								19,
								cr.system_object.prototype.exps["int"]
								,[
[
									20,
									145,
									cr.plugins_.WebStorage.prototype.exps.LocalValue,
									true,
									null
									,[
[
										2,
										"tutorialWatched"
									]
									]
								]
								]
							]
						]
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			[true, "UPDATE"],
			false,
			2015531910973288,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				0,
				false,
				false,
				false,
				2015531910973288
				,[
				[
					1,
					[
						2,
						"UPDATE"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				6565300480754432,
				[
				[
					-1,
					cr.system_object.prototype.cnds.EveryTick,
					null,
					0,
					false,
					false,
					false,
					9217897705733616
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					5002607469220167
					,[
					[
						11,
						"moveCount"
					]
,					[
						7,
						[
							6,
							[
								23,
								"speed"
							]
							,[
								19,
								cr.system_object.prototype.exps.dt
							]
						]
					]
					]
				]
,				[
					135,
					cr.plugins_.Sprite.prototype.acts.SetX,
					null,
					2967820124139316
					,[
					[
						0,
						[
							4,
							[
								0,
								150
							]
							,[
								23,
								"ChickenXoffset"
							]
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.AddVar,
					null,
					318494660940215
					,[
					[
						11,
						"CurL5ScreenPassed"
					]
,					[
						7,
						[
							6,
							[
								23,
								"moveCount"
							]
							,[
								6,
								[
									0,
									1
								]
								,[
									23,
									"L5SpeedMod"
								]
							]
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.AddVar,
					null,
					5599667683801494
					,[
					[
						11,
						"CurGScreenPassed"
					]
,					[
						7,
						[
							6,
							[
								23,
								"moveCount"
							]
							,[
								6,
								[
									0,
									1
								]
								,[
									23,
									"GSpeedMod"
								]
							]
						]
					]
					]
				]
,				[
					149,
					cr.plugins_.Sprite.prototype.acts.SetX,
					null,
					3554245393366849
					,[
					[
						0,
						[
							5,
							[
								20,
								149,
								cr.plugins_.Sprite.prototype.exps.X,
								false,
								null
							]
							,[
								6,
								[
									23,
									"moveCount"
								]
								,[
									21,
									149,
									false,
									null
									,0
								]
							]
						]
					]
					]
				]
,				[
					152,
					cr.plugins_.Sprite.prototype.acts.SetX,
					null,
					5696034161230683
					,[
					[
						0,
						[
							5,
							[
								20,
								152,
								cr.plugins_.Sprite.prototype.exps.X,
								false,
								null
							]
							,[
								6,
								[
									23,
									"moveCount"
								]
								,[
									21,
									152,
									false,
									null
									,0
								]
							]
						]
					]
					]
				]
,				[
					153,
					cr.plugins_.Sprite.prototype.acts.SetX,
					null,
					8262924691289569
					,[
					[
						0,
						[
							5,
							[
								20,
								153,
								cr.plugins_.Sprite.prototype.exps.X,
								false,
								null
							]
							,[
								6,
								[
									23,
									"moveCount"
								]
								,[
									21,
									153,
									false,
									null
									,0
								]
							]
						]
					]
					]
				]
,				[
					154,
					cr.plugins_.Sprite.prototype.acts.SetX,
					null,
					8820792277292276
					,[
					[
						0,
						[
							5,
							[
								20,
								154,
								cr.plugins_.Sprite.prototype.exps.X,
								false,
								null
							]
							,[
								6,
								[
									23,
									"moveCount"
								]
								,[
									21,
									154,
									false,
									null
									,0
								]
							]
						]
					]
					]
				]
,				[
					155,
					cr.plugins_.Sprite.prototype.acts.SetX,
					null,
					5691070393024004
					,[
					[
						0,
						[
							5,
							[
								20,
								155,
								cr.plugins_.Sprite.prototype.exps.X,
								false,
								null
							]
							,[
								6,
								[
									23,
									"moveCount"
								]
								,[
									21,
									155,
									false,
									null
									,0
								]
							]
						]
					]
					]
				]
,				[
					156,
					cr.plugins_.Sprite.prototype.acts.SetX,
					null,
					1455322910276195
					,[
					[
						0,
						[
							5,
							[
								20,
								156,
								cr.plugins_.Sprite.prototype.exps.X,
								false,
								null
							]
							,[
								6,
								[
									23,
									"moveCount"
								]
								,[
									21,
									156,
									false,
									null
									,0
								]
							]
						]
					]
					]
				]
,				[
					151,
					cr.plugins_.Sprite.prototype.acts.SetX,
					null,
					5847481789177608
					,[
					[
						0,
						[
							5,
							[
								20,
								151,
								cr.plugins_.Sprite.prototype.exps.X,
								false,
								null
							]
							,[
								6,
								[
									23,
									"moveCount"
								]
								,[
									21,
									151,
									false,
									null
									,0
								]
							]
						]
					]
					]
				]
,				[
					157,
					cr.plugins_.Sprite.prototype.acts.SetX,
					null,
					3514208429658875
					,[
					[
						0,
						[
							5,
							[
								20,
								157,
								cr.plugins_.Sprite.prototype.exps.X,
								false,
								null
							]
							,[
								6,
								[
									23,
									"moveCount"
								]
								,[
									21,
									157,
									false,
									null
									,0
								]
							]
						]
					]
					]
				]
,				[
					80,
					cr.plugins_.TiledBg.prototype.acts.SetWidth,
					null,
					9676094979827765
					,[
					[
						0,
						[
							19,
							cr.system_object.prototype.exps.clamp
							,[
[
								6,
								[
									6,
									[
										23,
										"health"
									]
									,[
										1,
										0.01
									]
								]
								,[
									0,
									639
								]
							]
,[
								0,
								0
							]
,[
								0,
								639
							]
							]
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SubVar,
					null,
					6661980748060224
					,[
					[
						11,
						"health"
					]
,					[
						7,
						[
							6,
							[
								23,
								"healthLoseSpeed"
							]
							,[
								19,
								cr.system_object.prototype.exps.dt
							]
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					7854059148349579
					,[
					[
						11,
						"health"
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.clamp
							,[
[
								23,
								"health"
							]
,[
								0,
								0
							]
,[
								0,
								100
							]
							]
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.AddVar,
					null,
					1036708706295855
					,[
					[
						11,
						"speed"
					]
,					[
						7,
						[
							6,
							[
								0,
								2
							]
							,[
								19,
								cr.system_object.prototype.exps.dt
							]
						]
					]
					]
				]
				]
			]
,			[
				1,
				"l_L5WaveRandom",
				0,
				0,
false,false,7967045515073431
			]
,			[
				0,
				null,
				false,
				1191783853450867,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					8955697863197331
					,[
					[
						11,
						"CurL5ScreenPassed"
					]
,					[
						8,
						5
					]
,					[
						7,
						[
							6,
							[
								23,
								"myScreenWidth"
							]
							,[
								0,
								2
							]
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					9326301131006682
					,[
					[
						11,
						"CurL5ScreenPassed"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					3597100255607311
					,[
					[
						11,
						"l_L5WaveRandom"
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.floor
							,[
[
								19,
								cr.system_object.prototype.exps.random
								,[
[
									0,
									3
								]
								]
							]
							]
						]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					7528357445253869
					,[
					[
						1,
						[
							10,
							[
								2,
								"createL5Wave"
							]
							,[
								19,
								cr.system_object.prototype.exps.str
								,[
[
									4,
									[
										23,
										"l_L5WaveRandom"
									]
									,[
										0,
										1
									]
								]
								]
							]
						]
					]
,					[
						13,
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				3931257477413923,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					6586429889127242
					,[
					[
						11,
						"CurGScreenPassed"
					]
,					[
						8,
						5
					]
,					[
						7,
						[
							6,
							[
								23,
								"myScreenWidth"
							]
							,[
								0,
								2
							]
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.AddVar,
					null,
					9261171273287161
					,[
					[
						11,
						"numScreenpass"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					9675749806644314
					,[
					[
						11,
						"CurGScreenPassed"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					1651311477392918
					,[
					[
						1,
						[
							10,
							[
								10,
								[
									10,
									[
										2,
										"createD"
									]
									,[
										19,
										cr.system_object.prototype.exps.str
										,[
[
											19,
											cr.system_object.prototype.exps.floor
											,[
[
												4,
												[
													19,
													cr.system_object.prototype.exps.random
													,[
[
														23,
														"LowDifficulty"
													]
,[
														23,
														"HighDifficulty"
													]
													]
												]
												,[
													0,
													1
												]
											]
											]
										]
										]
									]
								]
								,[
									2,
									"W"
								]
							]
							,[
								19,
								cr.system_object.prototype.exps.str
								,[
[
									4,
									[
										19,
										cr.system_object.prototype.exps.floor
										,[
[
											19,
											cr.system_object.prototype.exps.random
											,[
[
												0,
												6
											]
											]
										]
										]
									]
									,[
										0,
										1
									]
								]
								]
							]
						]
					]
,					[
						13,
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					78094798246348,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						4837485821283984
						,[
						[
							11,
							"numScreenpass"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								3
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.AddVar,
						null,
						1070056864287505
						,[
						[
							11,
							"HighDifficulty"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					2475376910815921,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						3084851540167377
						,[
						[
							11,
							"numScreenpass"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								6
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.AddVar,
						null,
						7557374225510844
						,[
						[
							11,
							"LowDifficulty"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					2399725465565655,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						9196150653050329
						,[
						[
							11,
							"numScreenpass"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								9
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.AddVar,
						null,
						2185616834064938
						,[
						[
							11,
							"HighDifficulty"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					1022966926008862,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						898456357283371
						,[
						[
							11,
							"numScreenpass"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								12
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.AddVar,
						null,
						1526497908842472
						,[
						[
							11,
							"LowDifficulty"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			[true, "ACHIEVEMENTS"],
			false,
			6208800873357935,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				0,
				false,
				false,
				false,
				6208800873357935
				,[
				[
					1,
					[
						2,
						"ACHIEVEMENTS"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				7302367019750408,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					7503418856411054
					,[
					[
						1,
						[
							2,
							"createAchievements"
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					6078487057001803
					,[
					[
						4,
						55
					]
,					[
						5,
						[
							20,
							140,
							cr.plugins_.Function.prototype.exps.Param,
							false,
							null
							,[
[
								0,
								0
							]
							]
						]
					]
,					[
						0,
						[
							20,
							140,
							cr.plugins_.Function.prototype.exps.Param,
							false,
							null
							,[
[
								0,
								1
							]
							]
						]
					]
,					[
						0,
						[
							20,
							140,
							cr.plugins_.Function.prototype.exps.Param,
							false,
							null
							,[
[
								0,
								2
							]
							]
						]
					]
					]
				]
,				[
					55,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					549367089697306
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							20,
							140,
							cr.plugins_.Function.prototype.exps.Param,
							false,
							null
							,[
[
								0,
								3
							]
							]
						]
					]
					]
				]
,				[
					56,
					cr.plugins_.Sprite.prototype.acts.SetPos,
					null,
					1092177978285121
					,[
					[
						0,
						[
							4,
							[
								20,
								55,
								cr.plugins_.Sprite.prototype.exps.X,
								false,
								null
							]
							,[
								6,
								[
									0,
									120
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
					]
,					[
						0,
						[
							20,
							55,
							cr.plugins_.Sprite.prototype.exps.Y,
							false,
							null
						]
					]
					]
				]
,				[
					57,
					cr.plugins_.Sprite.prototype.acts.SetPos,
					null,
					7930009836474186
					,[
					[
						0,
						[
							4,
							[
								20,
								55,
								cr.plugins_.Sprite.prototype.exps.X,
								false,
								null
							]
							,[
								6,
								[
									0,
									240
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
					]
,					[
						0,
						[
							20,
							55,
							cr.plugins_.Sprite.prototype.exps.Y,
							false,
							null
						]
					]
					]
				]
,				[
					58,
					cr.plugins_.Sprite.prototype.acts.SetPos,
					null,
					9660815920265333
					,[
					[
						0,
						[
							4,
							[
								20,
								55,
								cr.plugins_.Sprite.prototype.exps.X,
								false,
								null
							]
							,[
								6,
								[
									0,
									325
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
					]
,					[
						0,
						[
							20,
							55,
							cr.plugins_.Sprite.prototype.exps.Y,
							false,
							null
						]
					]
					]
				]
,				[
					59,
					cr.plugins_.Sprite.prototype.acts.SetPos,
					null,
					1138890146421554
					,[
					[
						0,
						[
							20,
							55,
							cr.plugins_.Sprite.prototype.exps.X,
							false,
							null
						]
					]
,					[
						0,
						[
							20,
							55,
							cr.plugins_.Sprite.prototype.exps.Y,
							false,
							null
						]
					]
					]
				]
,				[
					60,
					cr.plugins_.Sprite.prototype.acts.SetPos,
					null,
					7119160304563937
					,[
					[
						0,
						[
							20,
							56,
							cr.plugins_.Sprite.prototype.exps.X,
							false,
							null
						]
					]
,					[
						0,
						[
							20,
							56,
							cr.plugins_.Sprite.prototype.exps.Y,
							false,
							null
						]
					]
					]
				]
,				[
					61,
					cr.plugins_.Sprite.prototype.acts.SetPos,
					null,
					7266966159462441
					,[
					[
						0,
						[
							20,
							57,
							cr.plugins_.Sprite.prototype.exps.X,
							false,
							null
						]
					]
,					[
						0,
						[
							20,
							57,
							cr.plugins_.Sprite.prototype.exps.Y,
							false,
							null
						]
					]
					]
				]
,				[
					64,
					cr.plugins_.Spritefont2.prototype.acts.SetPos,
					null,
					2517643725609233
					,[
					[
						0,
						[
							20,
							55,
							cr.plugins_.Sprite.prototype.exps.X,
							false,
							null
						]
					]
,					[
						0,
						[
							4,
							[
								20,
								55,
								cr.plugins_.Sprite.prototype.exps.Y,
								false,
								null
							]
							,[
								6,
								[
									0,
									47
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
					]
					]
				]
,				[
					65,
					cr.plugins_.Spritefont2.prototype.acts.SetPos,
					null,
					2138423352809654
					,[
					[
						0,
						[
							20,
							56,
							cr.plugins_.Sprite.prototype.exps.X,
							false,
							null
						]
					]
,					[
						0,
						[
							4,
							[
								20,
								56,
								cr.plugins_.Sprite.prototype.exps.Y,
								false,
								null
							]
							,[
								6,
								[
									0,
									47
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
					]
					]
				]
,				[
					66,
					cr.plugins_.Spritefont2.prototype.acts.SetPos,
					null,
					5336434917883328
					,[
					[
						0,
						[
							20,
							57,
							cr.plugins_.Sprite.prototype.exps.X,
							false,
							null
						]
					]
,					[
						0,
						[
							4,
							[
								20,
								57,
								cr.plugins_.Sprite.prototype.exps.Y,
								false,
								null
							]
							,[
								6,
								[
									0,
									47
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
					]
					]
				]
,				[
					62,
					cr.plugins_.Sprite.prototype.acts.SetPos,
					null,
					7594156480711531
					,[
					[
						0,
						[
							4,
							[
								20,
								55,
								cr.plugins_.Sprite.prototype.exps.X,
								false,
								null
							]
							,[
								6,
								[
									0,
									377
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
					]
,					[
						0,
						[
							4,
							[
								20,
								55,
								cr.plugins_.Sprite.prototype.exps.Y,
								false,
								null
							]
							,[
								6,
								[
									0,
									4
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
					]
					]
				]
,				[
					59,
					cr.plugins_.Sprite.prototype.acts.MoveToTop,
					null,
					809925793362056
				]
,				[
					60,
					cr.plugins_.Sprite.prototype.acts.MoveToTop,
					null,
					1029740885004973
				]
,				[
					61,
					cr.plugins_.Sprite.prototype.acts.MoveToTop,
					null,
					5908093357247874
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					9163524166493074
					,[
					[
						0,
						[
							1,
							0.1
						]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					327350682247943
					,[
					[
						1,
						[
							2,
							"updateAchievements"
						]
					]
,					[
						13,
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				3163086576130435,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					7931967216805091
					,[
					[
						1,
						[
							2,
							"moveAchievements"
						]
					]
					]
				]
				],
				[
				[
					55,
					cr.plugins_.Sprite.prototype.acts.SetPos,
					null,
					8930611280839581
					,[
					[
						0,
						[
							20,
							140,
							cr.plugins_.Function.prototype.exps.Param,
							false,
							null
							,[
[
								0,
								1
							]
							]
						]
					]
,					[
						0,
						[
							20,
							140,
							cr.plugins_.Function.prototype.exps.Param,
							false,
							null
							,[
[
								0,
								2
							]
							]
						]
					]
					]
				]
,				[
					55,
					cr.plugins_.Sprite.prototype.acts.MoveToLayer,
					null,
					649798857550796
					,[
					[
						5,
						[
							20,
							140,
							cr.plugins_.Function.prototype.exps.Param,
							false,
							null
							,[
[
								0,
								0
							]
							]
						]
					]
					]
				]
,				[
					56,
					cr.plugins_.Sprite.prototype.acts.SetPos,
					null,
					8258433571907525
					,[
					[
						0,
						[
							4,
							[
								20,
								55,
								cr.plugins_.Sprite.prototype.exps.X,
								false,
								null
							]
							,[
								6,
								[
									0,
									120
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
					]
,					[
						0,
						[
							20,
							55,
							cr.plugins_.Sprite.prototype.exps.Y,
							false,
							null
						]
					]
					]
				]
,				[
					56,
					cr.plugins_.Sprite.prototype.acts.MoveToLayer,
					null,
					505575185948864
					,[
					[
						5,
						[
							20,
							140,
							cr.plugins_.Function.prototype.exps.Param,
							false,
							null
							,[
[
								0,
								0
							]
							]
						]
					]
					]
				]
,				[
					57,
					cr.plugins_.Sprite.prototype.acts.SetPos,
					null,
					4842164209549081
					,[
					[
						0,
						[
							4,
							[
								20,
								55,
								cr.plugins_.Sprite.prototype.exps.X,
								false,
								null
							]
							,[
								6,
								[
									0,
									240
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
					]
,					[
						0,
						[
							20,
							55,
							cr.plugins_.Sprite.prototype.exps.Y,
							false,
							null
						]
					]
					]
				]
,				[
					57,
					cr.plugins_.Sprite.prototype.acts.MoveToLayer,
					null,
					6899970633134521
					,[
					[
						5,
						[
							20,
							140,
							cr.plugins_.Function.prototype.exps.Param,
							false,
							null
							,[
[
								0,
								0
							]
							]
						]
					]
					]
				]
,				[
					58,
					cr.plugins_.Sprite.prototype.acts.SetPos,
					null,
					2081708171925419
					,[
					[
						0,
						[
							4,
							[
								20,
								55,
								cr.plugins_.Sprite.prototype.exps.X,
								false,
								null
							]
							,[
								6,
								[
									0,
									325
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
					]
,					[
						0,
						[
							20,
							55,
							cr.plugins_.Sprite.prototype.exps.Y,
							false,
							null
						]
					]
					]
				]
,				[
					58,
					cr.plugins_.Sprite.prototype.acts.MoveToLayer,
					null,
					9689115463496546
					,[
					[
						5,
						[
							20,
							140,
							cr.plugins_.Function.prototype.exps.Param,
							false,
							null
							,[
[
								0,
								0
							]
							]
						]
					]
					]
				]
,				[
					59,
					cr.plugins_.Sprite.prototype.acts.SetPos,
					null,
					4994729282983712
					,[
					[
						0,
						[
							20,
							55,
							cr.plugins_.Sprite.prototype.exps.X,
							false,
							null
						]
					]
,					[
						0,
						[
							20,
							55,
							cr.plugins_.Sprite.prototype.exps.Y,
							false,
							null
						]
					]
					]
				]
,				[
					59,
					cr.plugins_.Sprite.prototype.acts.MoveToLayer,
					null,
					4566971997163343
					,[
					[
						5,
						[
							20,
							140,
							cr.plugins_.Function.prototype.exps.Param,
							false,
							null
							,[
[
								0,
								0
							]
							]
						]
					]
					]
				]
,				[
					60,
					cr.plugins_.Sprite.prototype.acts.SetPos,
					null,
					7246414084854787
					,[
					[
						0,
						[
							20,
							56,
							cr.plugins_.Sprite.prototype.exps.X,
							false,
							null
						]
					]
,					[
						0,
						[
							20,
							56,
							cr.plugins_.Sprite.prototype.exps.Y,
							false,
							null
						]
					]
					]
				]
,				[
					60,
					cr.plugins_.Sprite.prototype.acts.MoveToLayer,
					null,
					8829413780558162
					,[
					[
						5,
						[
							20,
							140,
							cr.plugins_.Function.prototype.exps.Param,
							false,
							null
							,[
[
								0,
								0
							]
							]
						]
					]
					]
				]
,				[
					61,
					cr.plugins_.Sprite.prototype.acts.SetPos,
					null,
					3035216390213818
					,[
					[
						0,
						[
							20,
							57,
							cr.plugins_.Sprite.prototype.exps.X,
							false,
							null
						]
					]
,					[
						0,
						[
							20,
							57,
							cr.plugins_.Sprite.prototype.exps.Y,
							false,
							null
						]
					]
					]
				]
,				[
					61,
					cr.plugins_.Sprite.prototype.acts.MoveToLayer,
					null,
					8429612229962041
					,[
					[
						5,
						[
							20,
							140,
							cr.plugins_.Function.prototype.exps.Param,
							false,
							null
							,[
[
								0,
								0
							]
							]
						]
					]
					]
				]
,				[
					64,
					cr.plugins_.Spritefont2.prototype.acts.SetPos,
					null,
					657337218061804
					,[
					[
						0,
						[
							20,
							55,
							cr.plugins_.Sprite.prototype.exps.X,
							false,
							null
						]
					]
,					[
						0,
						[
							4,
							[
								20,
								55,
								cr.plugins_.Sprite.prototype.exps.Y,
								false,
								null
							]
							,[
								6,
								[
									0,
									47
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
					]
					]
				]
,				[
					64,
					cr.plugins_.Spritefont2.prototype.acts.MoveToLayer,
					null,
					3006951911414372
					,[
					[
						5,
						[
							20,
							140,
							cr.plugins_.Function.prototype.exps.Param,
							false,
							null
							,[
[
								0,
								0
							]
							]
						]
					]
					]
				]
,				[
					65,
					cr.plugins_.Spritefont2.prototype.acts.SetPos,
					null,
					3847515105483796
					,[
					[
						0,
						[
							20,
							56,
							cr.plugins_.Sprite.prototype.exps.X,
							false,
							null
						]
					]
,					[
						0,
						[
							4,
							[
								20,
								56,
								cr.plugins_.Sprite.prototype.exps.Y,
								false,
								null
							]
							,[
								6,
								[
									0,
									47
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
					]
					]
				]
,				[
					65,
					cr.plugins_.Spritefont2.prototype.acts.MoveToLayer,
					null,
					2418020434151131
					,[
					[
						5,
						[
							20,
							140,
							cr.plugins_.Function.prototype.exps.Param,
							false,
							null
							,[
[
								0,
								0
							]
							]
						]
					]
					]
				]
,				[
					66,
					cr.plugins_.Spritefont2.prototype.acts.SetPos,
					null,
					2331412622966922
					,[
					[
						0,
						[
							20,
							57,
							cr.plugins_.Sprite.prototype.exps.X,
							false,
							null
						]
					]
,					[
						0,
						[
							4,
							[
								20,
								57,
								cr.plugins_.Sprite.prototype.exps.Y,
								false,
								null
							]
							,[
								6,
								[
									0,
									47
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
					]
					]
				]
,				[
					66,
					cr.plugins_.Spritefont2.prototype.acts.MoveToLayer,
					null,
					8718615548891245
					,[
					[
						5,
						[
							20,
							140,
							cr.plugins_.Function.prototype.exps.Param,
							false,
							null
							,[
[
								0,
								0
							]
							]
						]
					]
					]
				]
,				[
					62,
					cr.plugins_.Sprite.prototype.acts.SetPos,
					null,
					3358668593976102
					,[
					[
						0,
						[
							4,
							[
								20,
								55,
								cr.plugins_.Sprite.prototype.exps.X,
								false,
								null
							]
							,[
								6,
								[
									0,
									377
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
					]
,					[
						0,
						[
							20,
							55,
							cr.plugins_.Sprite.prototype.exps.Y,
							false,
							null
						]
					]
					]
				]
,				[
					62,
					cr.plugins_.Sprite.prototype.acts.MoveToLayer,
					null,
					3285611306006004
					,[
					[
						5,
						[
							20,
							140,
							cr.plugins_.Function.prototype.exps.Param,
							false,
							null
							,[
[
								0,
								0
							]
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				7111986241496461,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					8304784816906914
					,[
					[
						1,
						[
							2,
							"updateAchievements"
						]
					]
					]
				]
				],
				[
				[
					59,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					2113537616805739
					,[
					[
						0,
						[
							23,
							"currentUnlock"
						]
					]
					]
				]
,				[
					60,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					7857943423329392
					,[
					[
						0,
						[
							23,
							"currentUnlock"
						]
					]
					]
				]
,				[
					61,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					6962010334740019
					,[
					[
						0,
						[
							23,
							"currentUnlock"
						]
					]
					]
				]
,				[
					55,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					7731556020733274
					,[
					[
						0,
						[
							23,
							"row1Unlocked"
						]
					]
					]
				]
,				[
					56,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					6244129493967675
					,[
					[
						0,
						[
							23,
							"row2Unlocked"
						]
					]
					]
				]
,				[
					57,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					2481678470453875
					,[
					[
						0,
						[
							23,
							"row3Unlocked"
						]
					]
					]
				]
,				[
					62,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					4275740951497358
					,[
					[
						0,
						[
							23,
							"currentUnlock"
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					891228016333529,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						5585910230699311
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						64,
						cr.plugins_.Spritefont2.prototype.acts.SetText,
						null,
						9290843869886278
						,[
						[
							7,
							[
								10,
								[
									23,
									"needNewRecord"
								]
								,[
									2,
									"/1"
								]
							]
						]
						]
					]
,					[
						65,
						cr.plugins_.Spritefont2.prototype.acts.SetText,
						null,
						8655924565384367
						,[
						[
							7,
							[
								10,
								[
									23,
									"bloodCollected"
								]
								,[
									2,
									"/25"
								]
							]
						]
						]
					]
,					[
						66,
						cr.plugins_.Spritefont2.prototype.acts.SetText,
						null,
						7674780227284286
						,[
						[
							7,
							[
								10,
								[
									23,
									"gamesPlayed"
								]
								,[
									2,
									"/5"
								]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					69436942714278,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						7194322354311949
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						64,
						cr.plugins_.Spritefont2.prototype.acts.SetText,
						null,
						5184660131890239
						,[
						[
							7,
							[
								10,
								[
									23,
									"highscore"
								]
								,[
									2,
									"/500"
								]
							]
						]
						]
					]
,					[
						65,
						cr.plugins_.Spritefont2.prototype.acts.SetText,
						null,
						286623892518406
						,[
						[
							7,
							[
								10,
								[
									23,
									"bloodCollected"
								]
								,[
									2,
									"/50"
								]
							]
						]
						]
					]
,					[
						66,
						cr.plugins_.Spritefont2.prototype.acts.SetText,
						null,
						2179401111622753
						,[
						[
							7,
							[
								10,
								[
									23,
									"nearMissedObjects"
								]
								,[
									2,
									"/10"
								]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					3492213575464436,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						5775010168188263
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								2
							]
						]
						]
					]
					],
					[
					[
						64,
						cr.plugins_.Spritefont2.prototype.acts.SetText,
						null,
						2646591335784195
						,[
						[
							7,
							[
								10,
								[
									23,
									"plus50Collected"
								]
								,[
									2,
									"/10"
								]
							]
						]
						]
					]
,					[
						65,
						cr.plugins_.Spritefont2.prototype.acts.SetText,
						null,
						3845383019448263
						,[
						[
							7,
							[
								10,
								[
									23,
									"needNewRecord"
								]
								,[
									2,
									"/1"
								]
							]
						]
						]
					]
,					[
						66,
						cr.plugins_.Spritefont2.prototype.acts.SetText,
						null,
						7148838921589361
						,[
						[
							7,
							[
								10,
								[
									23,
									"nearMissedObjects"
								]
								,[
									2,
									"/30"
								]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					9628650547737358,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						9423372883872487
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								3
							]
						]
						]
					]
					],
					[
					[
						64,
						cr.plugins_.Spritefont2.prototype.acts.SetText,
						null,
						2963087643271086
						,[
						[
							7,
							[
								10,
								[
									23,
									"highscore"
								]
								,[
									2,
									"/750"
								]
							]
						]
						]
					]
,					[
						65,
						cr.plugins_.Spritefont2.prototype.acts.SetText,
						null,
						8080481265299771
						,[
						[
							7,
							[
								10,
								[
									23,
									"multiplySeconds"
								]
								,[
									2,
									"/15"
								]
							]
						]
						]
					]
,					[
						66,
						cr.plugins_.Spritefont2.prototype.acts.SetText,
						null,
						9445120121565243
						,[
						[
							7,
							[
								10,
								[
									23,
									"bloodCollected"
								]
								,[
									2,
									"/50"
								]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					9859343220778164,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						9480736666379743
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								4
							]
						]
						]
					]
					],
					[
					[
						64,
						cr.plugins_.Spritefont2.prototype.acts.SetText,
						null,
						1877320240659595
						,[
						[
							7,
							[
								10,
								[
									23,
									"multiplySeconds"
								]
								,[
									2,
									"/30"
								]
							]
						]
						]
					]
,					[
						65,
						cr.plugins_.Spritefont2.prototype.acts.SetText,
						null,
						8478850820211245
						,[
						[
							7,
							[
								10,
								[
									23,
									"nearMissedObjects"
								]
								,[
									2,
									"/50"
								]
							]
						]
						]
					]
,					[
						66,
						cr.plugins_.Spritefont2.prototype.acts.SetText,
						null,
						5438372870808558
						,[
						[
							7,
							[
								10,
								[
									23,
									"highscore"
								]
								,[
									2,
									"/1000"
								]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					3709143237198151,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						7681301555210801
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								5
							]
						]
						]
					]
					],
					[
					[
						64,
						cr.plugins_.Spritefont2.prototype.acts.SetText,
						null,
						9203417026180096
						,[
						[
							7,
							[
								10,
								[
									23,
									"plasterCollected"
								]
								,[
									2,
									"/3"
								]
							]
						]
						]
					]
,					[
						65,
						cr.plugins_.Spritefont2.prototype.acts.SetText,
						null,
						3031350940674642
						,[
						[
							7,
							[
								10,
								[
									23,
									"bloodDropsCollected"
								]
								,[
									2,
									"/60"
								]
							]
						]
						]
					]
,					[
						66,
						cr.plugins_.Spritefont2.prototype.acts.SetText,
						null,
						6488033680090429
						,[
						[
							7,
							[
								10,
								[
									23,
									"needNewRecord"
								]
								,[
									2,
									"/1"
								]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					8300602170892019,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						2749587656741671
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								6
							]
						]
						]
					]
					],
					[
					[
						64,
						cr.plugins_.Spritefont2.prototype.acts.SetText,
						null,
						5045162506171825
						,[
						[
							7,
							[
								10,
								[
									23,
									"multiplySeconds"
								]
								,[
									2,
									"/40"
								]
							]
						]
						]
					]
,					[
						65,
						cr.plugins_.Spritefont2.prototype.acts.SetText,
						null,
						652342986588319
						,[
						[
							7,
							[
								10,
								[
									23,
									"highscore"
								]
								,[
									2,
									"/1500"
								]
							]
						]
						]
					]
,					[
						66,
						cr.plugins_.Spritefont2.prototype.acts.SetText,
						null,
						3032781629761831
						,[
						[
							7,
							[
								10,
								[
									23,
									"nearMissedObjects"
								]
								,[
									2,
									"/50"
								]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					2903548032005424,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						2326024275322531
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								7
							]
						]
						]
					]
					],
					[
					[
						64,
						cr.plugins_.Spritefont2.prototype.acts.SetText,
						null,
						4771468382138818
						,[
						[
							7,
							[
								10,
								[
									23,
									"multiplyCollected"
								]
								,[
									2,
									"/5"
								]
							]
						]
						]
					]
,					[
						65,
						cr.plugins_.Spritefont2.prototype.acts.SetText,
						null,
						3638347878971704
						,[
						[
							7,
							[
								10,
								[
									23,
									"bloodCollected"
								]
								,[
									2,
									"/100"
								]
							]
						]
						]
					]
,					[
						66,
						cr.plugins_.Spritefont2.prototype.acts.SetText,
						null,
						8196415454472801
						,[
						[
							7,
							[
								10,
								[
									23,
									"bladeHits"
								]
								,[
									2,
									"/10"
								]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					2856522335299404,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						5331816441358547
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								8
							]
						]
						]
					]
					],
					[
					[
						64,
						cr.plugins_.Spritefont2.prototype.acts.SetText,
						null,
						1839386107685797
						,[
						[
							7,
							[
								10,
								[
									23,
									"bearTrapHits"
								]
								,[
									2,
									"/10"
								]
							]
						]
						]
					]
,					[
						65,
						cr.plugins_.Spritefont2.prototype.acts.SetText,
						null,
						3970690035238178
						,[
						[
							7,
							[
								10,
								[
									23,
									"plus50Collected"
								]
								,[
									2,
									"/20"
								]
							]
						]
						]
					]
,					[
						66,
						cr.plugins_.Spritefont2.prototype.acts.SetText,
						null,
						8632718916539505
						,[
						[
							7,
							[
								10,
								[
									23,
									"multiplySeconds"
								]
								,[
									2,
									"/50"
								]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					3284832443854069,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						3917644122903366
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								9
							]
						]
						]
					]
					],
					[
					[
						64,
						cr.plugins_.Spritefont2.prototype.acts.SetText,
						null,
						7144864835073792
						,[
						[
							7,
							[
								10,
								[
									23,
									"bloodCollected"
								]
								,[
									2,
									"/200"
								]
							]
						]
						]
					]
,					[
						65,
						cr.plugins_.Spritefont2.prototype.acts.SetText,
						null,
						707090952116882
						,[
						[
							7,
							[
								10,
								[
									23,
									"electricHits"
								]
								,[
									2,
									"/10"
								]
							]
						]
						]
					]
,					[
						66,
						cr.plugins_.Spritefont2.prototype.acts.SetText,
						null,
						5839491043765375
						,[
						[
							7,
							[
								10,
								[
									23,
									"highscore"
								]
								,[
									2,
									"/2000"
								]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					6272477526154806,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						8661843446727346
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								10
							]
						]
						]
					]
					],
					[
					[
						64,
						cr.plugins_.Spritefont2.prototype.acts.SetText,
						null,
						9936313887575383
						,[
						[
							7,
							[
								10,
								[
									23,
									"campfireHits"
								]
								,[
									2,
									"/10"
								]
							]
						]
						]
					]
,					[
						65,
						cr.plugins_.Spritefont2.prototype.acts.SetText,
						null,
						3364891260601971
						,[
						[
							7,
							[
								10,
								[
									23,
									"highscore"
								]
								,[
									2,
									"/3000"
								]
							]
						]
						]
					]
,					[
						66,
						cr.plugins_.Spritefont2.prototype.acts.SetText,
						null,
						2473112206112671
						,[
						[
							7,
							[
								10,
								[
									23,
									"plus100Collected"
								]
								,[
									2,
									"/10"
								]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					7581576864416476,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						4189795313709365
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								11
							]
						]
						]
					]
					],
					[
					[
						64,
						cr.plugins_.Spritefont2.prototype.acts.SetText,
						null,
						9702001816097929
						,[
						[
							7,
							[
								10,
								[
									23,
									"highscore"
								]
								,[
									2,
									"/3500"
								]
							]
						]
						]
					]
,					[
						65,
						cr.plugins_.Spritefont2.prototype.acts.SetText,
						null,
						7978439985862721
						,[
						[
							7,
							[
								10,
								[
									23,
									"nearMissedObjects"
								]
								,[
									2,
									"/100"
								]
							]
						]
						]
					]
,					[
						66,
						cr.plugins_.Spritefont2.prototype.acts.SetText,
						null,
						4104541257126228
						,[
						[
							7,
							[
								10,
								[
									23,
									"plus100Collected"
								]
								,[
									2,
									"/30"
								]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					4059170377305934,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						2373456253156448
						,[
						[
							11,
							"row1Unlocked"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						7742850038079823
						,[
						[
							11,
							"row2Unlocked"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						6281694330516811
						,[
						[
							11,
							"row3Unlocked"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						6986173980489882
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							2
						]
,						[
							7,
							[
								0,
								12
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.AddVar,
						null,
						3170288589438797
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						2952468768400316
						,[
						[
							1,
							[
								2,
								"setNextUnlock"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						940378265430844
						,[
						[
							11,
							"row1Unlocked"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						662471626557248
						,[
						[
							11,
							"row2Unlocked"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						818056874866891
						,[
						[
							11,
							"row3Unlocked"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						108540370725682
						,[
						[
							1,
							[
								2,
								"checkScore"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						5141180870855871
						,[
						[
							1,
							[
								2,
								"updateAchievements"
							]
						]
,						[
							13,
						]
						]
					]
					]
					,[
					[
						0,
						null,
						false,
						9903884499043885,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							7560091441365856
							,[
							[
								11,
								"currentUnlock"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									12
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							8380824601666458
							,[
							[
								11,
								"allUnlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							5810162660789624
							,[
							[
								1,
								[
									2,
									"allUnlocked"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							1376401968885526
							,[
							[
								11,
								"row1Unlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							2916596739669898
							,[
							[
								11,
								"row2Unlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							1849161289641387
							,[
							[
								11,
								"row3Unlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							1520969133100987
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				1,
				"boostintro",
				0,
				0,
false,false,6001962172838594
			]
,			[
				0,
				null,
				false,
				5404822000683102,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					3782016728597479
					,[
					[
						11,
						"boostZoneActive"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					7037459155201061
					,[
					[
						11,
						"boostintro"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					6393730548355264,
					[
					[
						-1,
						cr.system_object.prototype.cnds.TriggerOnce,
						null,
						0,
						false,
						false,
						false,
						5958676350066061
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						9837008468185798
						,[
						[
							4,
							89
						]
,						[
							5,
							[
								0,
								10
							]
						]
,						[
							0,
							[
								23,
								"myScreenWidth"
							]
						]
,						[
							0,
							[
								6,
								[
									0,
									631
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						]
					]
,					[
						89,
						cr.behaviors.Flash.prototype.acts.Flash,
						"Flash",
						5103104020628771
						,[
						[
							0,
							[
								1,
								0.2
							]
						]
,						[
							0,
							[
								1,
								0.2
							]
						]
,						[
							0,
							[
								1,
								1.2
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.Wait,
						null,
						4072273105798163
						,[
						[
							0,
							[
								0,
								3
							]
						]
						]
					]
,					[
						89,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						4703287066821239
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				6234683274288357,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					2927781537020661
					,[
					[
						1,
						[
							2,
							"checkRecord"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					9921550259346114,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						9823098018828411
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						5362138440254065
						,[
						[
							1,
							[
								2,
								"unlockRow1"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						9545777887446932
						,[
						[
							11,
							"row1Unlocked"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						3827793136357055
						,[
						[
							1,
							[
								2,
								"updateAchievements"
							]
						]
,						[
							13,
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					7378995605012289,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						7423520587921259
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								2
							]
						]
						]
					]
					],
					[
					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						8762845313383002
						,[
						[
							1,
							[
								2,
								"unlockRow2"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						9159920433745988
						,[
						[
							11,
							"row2Unlocked"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						1009496437703055
						,[
						[
							1,
							[
								2,
								"updateAchievements"
							]
						]
,						[
							13,
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					6186461136198619,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						45854409352861
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								5
							]
						]
						]
					]
					],
					[
					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						5877382639004674
						,[
						[
							1,
							[
								2,
								"unlockRow3"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						8736871157722668
						,[
						[
							11,
							"row3Unlocked"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						1692168465098846
						,[
						[
							1,
							[
								2,
								"updateAchievements"
							]
						]
,						[
							13,
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				4845097047962084,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					9613979112440403
					,[
					[
						1,
						[
							2,
							"checkTimer"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					3272876554165641,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						5043351537426131
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								3
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						3893540589337798,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							5681208764988945
							,[
							[
								11,
								"multiplySeconds"
							]
,							[
								8,
								2
							]
,							[
								7,
								[
									0,
									15
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.AddVar,
							null,
							4151688772640271
							,[
							[
								11,
								"multiplySeconds"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							7396911488231332
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						460848011957655,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							5019980403908218
							,[
							[
								11,
								"multiplySeconds"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									15
								]
							]
							]
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							574779250408819
							,[
							[
								1,
								[
									2,
									"unlockRow2"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							1799668031186775
							,[
							[
								11,
								"row2Unlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							4564295042650272
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					2061034958708846,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						3938226517018522
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								4
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						7406503419375101,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							5874592595576594
							,[
							[
								11,
								"multiplySeconds"
							]
,							[
								8,
								2
							]
,							[
								7,
								[
									0,
									30
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.AddVar,
							null,
							765507328582382
							,[
							[
								11,
								"multiplySeconds"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							6129701046530025
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						5413097275544653,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							6594088976807306
							,[
							[
								11,
								"multiplySeconds"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									30
								]
							]
							]
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							9242308574350703
							,[
							[
								1,
								[
									2,
									"unlockRow1"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							2423227912148334
							,[
							[
								11,
								"row1Unlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							7838380619338928
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					1709063639550321,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						4629450240223595
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								6
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						8805602752470762,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							7449763838524441
							,[
							[
								11,
								"multiplySeconds"
							]
,							[
								8,
								2
							]
,							[
								7,
								[
									0,
									40
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.AddVar,
							null,
							5667411855322256
							,[
							[
								11,
								"multiplySeconds"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							8150560771447349
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						7755194433565121,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							274273328307691
							,[
							[
								11,
								"multiplySeconds"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									40
								]
							]
							]
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							3066964758346993
							,[
							[
								1,
								[
									2,
									"unlockRow1"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							3713746291150738
							,[
							[
								11,
								"row1Unlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							1920887479569882
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					8276876058342924,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						490716311712617
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								8
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						7290497635425615,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							4062228801298233
							,[
							[
								11,
								"multiplySeconds"
							]
,							[
								8,
								2
							]
,							[
								7,
								[
									0,
									50
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.AddVar,
							null,
							9243418101089615
							,[
							[
								11,
								"multiplySeconds"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							1063520238890882
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						9926261822195543,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							5685528478437671
							,[
							[
								11,
								"multiplySeconds"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									50
								]
							]
							]
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							5898663688648933
							,[
							[
								1,
								[
									2,
									"unlockRow3"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							3326589092095171
							,[
							[
								11,
								"row3Unlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							2543506623379148
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				4842986930483513,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					774301650823191
					,[
					[
						1,
						[
							2,
							"checkBlood"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					9436089616587493,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						8304578682062207
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						4301447356108937,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							1777457025456588
							,[
							[
								11,
								"bloodCollected"
							]
,							[
								8,
								2
							]
,							[
								7,
								[
									0,
									25
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.AddVar,
							null,
							6476244815320527
							,[
							[
								11,
								"bloodCollected"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							8893339538105948
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						7046435726014716,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							8341990518029229
							,[
							[
								11,
								"bloodCollected"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									25
								]
							]
							]
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							9789854331604856
							,[
							[
								1,
								[
									2,
									"unlockRow2"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							5425878060542828
							,[
							[
								11,
								"row2Unlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							7983396056010284
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							277733100231102
							,[
							[
								1,
								[
									2,
									"playCheer"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					8230118619109193,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						6085763786524594
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						4422351383327392,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							7251028330999364
							,[
							[
								11,
								"bloodCollected"
							]
,							[
								8,
								2
							]
,							[
								7,
								[
									0,
									50
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.AddVar,
							null,
							8834368514381298
							,[
							[
								11,
								"bloodCollected"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							5716937926399284
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						4496858730043959,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							9572821665695082
							,[
							[
								11,
								"bloodCollected"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									50
								]
							]
							]
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							4093485183077702
							,[
							[
								1,
								[
									2,
									"unlockRow2"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							4892944036648615
							,[
							[
								11,
								"row2Unlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							8873431597496353
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					102892097537951,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						5441309564122573
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								3
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						590223030270821,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							527667285456474
							,[
							[
								11,
								"bloodCollected"
							]
,							[
								8,
								2
							]
,							[
								7,
								[
									0,
									50
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.AddVar,
							null,
							7463838022970202
							,[
							[
								11,
								"bloodCollected"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							1608228625264354
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						9439999305219516,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							6739368402859176
							,[
							[
								11,
								"bloodCollected"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									50
								]
							]
							]
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							4080990806896043
							,[
							[
								1,
								[
									2,
									"unlockRow3"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							7016942436053681
							,[
							[
								11,
								"row3Unlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							5352333738679377
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					8901093425538565,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						9985133570692193
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								7
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						6020436920310374,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							7834391402560515
							,[
							[
								11,
								"bloodCollected"
							]
,							[
								8,
								2
							]
,							[
								7,
								[
									0,
									100
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.AddVar,
							null,
							7006704040347821
							,[
							[
								11,
								"bloodCollected"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							7802047018122747
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						8683846460063906,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							4533902812474516
							,[
							[
								11,
								"bloodCollected"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									100
								]
							]
							]
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							5102549900006531
							,[
							[
								1,
								[
									2,
									"unlockRow2"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							9931693256376512
							,[
							[
								11,
								"row2Unlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							500320709324434
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					1717093421418191,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						5512615854436714
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								9
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						4290796947728247,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							2195080339207197
							,[
							[
								11,
								"bloodCollected"
							]
,							[
								8,
								2
							]
,							[
								7,
								[
									0,
									200
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.AddVar,
							null,
							4848781871061192
							,[
							[
								11,
								"bloodCollected"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							347849891605511
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						2515857692164952,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							5097295334755472
							,[
							[
								11,
								"bloodCollected"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									200
								]
							]
							]
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							2010432461530046
							,[
							[
								1,
								[
									2,
									"unlockRow1"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							6334666016670233
							,[
							[
								11,
								"row1Unlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							417549479002134
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				436543913294454,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					2357675014199064
					,[
					[
						1,
						[
							2,
							"checkBloodDrop"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					5956785826596964,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						2308461526162307
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								5
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						1890201644329499,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							3554809768185475
							,[
							[
								11,
								"bloodDropsCollected"
							]
,							[
								8,
								2
							]
,							[
								7,
								[
									0,
									60
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.AddVar,
							null,
							1736796272311069
							,[
							[
								11,
								"bloodDropsCollected"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							5962231852658995
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						1242674550245422,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							958865893053184
							,[
							[
								11,
								"bloodDropsCollected"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									60
								]
							]
							]
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							5350363098868909
							,[
							[
								1,
								[
									2,
									"unlockRow2"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							3255187831031412
							,[
							[
								11,
								"row2Unlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							8089242579029748
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				3082732094850726,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					645584697531673
					,[
					[
						1,
						[
							2,
							"checkElectricHits"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					1163711395166581,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						8904395959227173
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								9
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						8375909389727607,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							5878960167522232
							,[
							[
								11,
								"electricHits"
							]
,							[
								8,
								2
							]
,							[
								7,
								[
									0,
									10
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.AddVar,
							null,
							7913914118133558
							,[
							[
								11,
								"electricHits"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							41650078083816
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						4314779845818279,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							1225736705629076
							,[
							[
								11,
								"electricHits"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									10
								]
							]
							]
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							1092638679847249
							,[
							[
								1,
								[
									2,
									"unlockRow2"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							47807227668432
							,[
							[
								11,
								"row2Unlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							7485009657034842
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				3683403064986387,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					6094349965938757
					,[
					[
						1,
						[
							2,
							"checkBlade"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					2453771492154274,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						7758807695835104
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								7
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						8517296657389999,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							1879342337152198
							,[
							[
								11,
								"bladeHits"
							]
,							[
								8,
								2
							]
,							[
								7,
								[
									0,
									10
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.AddVar,
							null,
							7373179369088879
							,[
							[
								11,
								"bladeHits"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							6826108338481921
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						633099321355158,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							3065102067538168
							,[
							[
								11,
								"bladeHits"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									10
								]
							]
							]
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							7900004743146823
							,[
							[
								1,
								[
									2,
									"unlockRow3"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							9730045292659419
							,[
							[
								11,
								"row3Unlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							705886962597868
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				9962609524485343,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					2160409785047847
					,[
					[
						1,
						[
							2,
							"checkFire"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					9681167007055867,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						2934516768001573
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								10
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						5644136690952044,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							1316048536370183
							,[
							[
								11,
								"campfireHits"
							]
,							[
								8,
								2
							]
,							[
								7,
								[
									0,
									10
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.AddVar,
							null,
							3905185597746762
							,[
							[
								11,
								"campfireHits"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							1239505423836251
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						2998224158886429,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							3939386688275065
							,[
							[
								11,
								"campfireHits"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									10
								]
							]
							]
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							7826137864090524
							,[
							[
								1,
								[
									2,
									"unlockRow1"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							35009314342498
							,[
							[
								11,
								"row1Unlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							605936342368101
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				5634627656285096,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					2386619152769793
					,[
					[
						1,
						[
							2,
							"checkPlaster"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					3728170472891871,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						670275012652589
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								5
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						6169642053379786,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							232814076766482
							,[
							[
								11,
								"plasterCollected"
							]
,							[
								8,
								2
							]
,							[
								7,
								[
									0,
									3
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.AddVar,
							null,
							5178819573440528
							,[
							[
								11,
								"plasterCollected"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							8325592349850384
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						7422991758342531,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							1509124448885726
							,[
							[
								11,
								"plasterCollected"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									3
								]
							]
							]
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							4634818272806946
							,[
							[
								1,
								[
									2,
									"unlockRow1"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							1101642091298532
							,[
							[
								11,
								"row1Unlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							1579003577556037
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				8699662355792162,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					5833272131500689
					,[
					[
						1,
						[
							2,
							"checkBear"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					1750968978795346,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						1368050721060452
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								8
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						5055509368584814,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							368286587822289
							,[
							[
								11,
								"bearTrapHits"
							]
,							[
								8,
								2
							]
,							[
								7,
								[
									0,
									10
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.AddVar,
							null,
							7482712267721586
							,[
							[
								11,
								"bearTrapHits"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							1581074049968489
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						852674069012388,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							8110665676672276
							,[
							[
								11,
								"bearTrapHits"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									10
								]
							]
							]
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							2890396716231591
							,[
							[
								1,
								[
									2,
									"unlockRow1"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							275868121090842
							,[
							[
								11,
								"row1Unlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							7940940804799468
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				2331111140978124,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					2590114806749001
					,[
					[
						1,
						[
							2,
							"checkMultiplyCollect"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					606856560939718,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						4038443304775187
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								7
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						5470831729815828,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							3790137260033953
							,[
							[
								11,
								"multiplyCollected"
							]
,							[
								8,
								2
							]
,							[
								7,
								[
									0,
									5
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.AddVar,
							null,
							3398734247768321
							,[
							[
								11,
								"multiplyCollected"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							2477496962770798
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						7340039109464443,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							6156370523639457
							,[
							[
								11,
								"multiplyCollected"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									5
								]
							]
							]
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							8367365111406142
							,[
							[
								1,
								[
									2,
									"unlockRow1"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							1813230373371594
							,[
							[
								11,
								"row1Unlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							1999300442333372
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				8596684171932404,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					6056945181837852
					,[
					[
						1,
						[
							2,
							"checkPlus50Collect"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					1550717598557831,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						9586946244829066
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								2
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						5615118723029003,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							6926700677995544
							,[
							[
								11,
								"plus50Collected"
							]
,							[
								8,
								2
							]
,							[
								7,
								[
									0,
									10
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.AddVar,
							null,
							7440627720445388
							,[
							[
								11,
								"plus50Collected"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							4234088552538907
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						2553156673498603,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							6013028498716393
							,[
							[
								11,
								"plus50Collected"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									10
								]
							]
							]
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							6055354869159141
							,[
							[
								1,
								[
									2,
									"unlockRow1"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							5724689799367259
							,[
							[
								11,
								"row1Unlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							3455679467909229
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					130022299530733,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						8166935384883925
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								8
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						3160614970189883,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							7150398328426813
							,[
							[
								11,
								"plus50Collected"
							]
,							[
								8,
								2
							]
,							[
								7,
								[
									0,
									20
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.AddVar,
							null,
							8084842367097741
							,[
							[
								11,
								"plus50Collected"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							9649730478375545
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						9913826626456419,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							8519853080405361
							,[
							[
								11,
								"plus50Collected"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									20
								]
							]
							]
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							5111526798893197
							,[
							[
								1,
								[
									2,
									"unlockRow2"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							8140970912713219
							,[
							[
								11,
								"row2Unlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							9618432929694633
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				6800933894068401,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					3392909763948695
					,[
					[
						1,
						[
							2,
							"checkPlus100Collect"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					1546543517406988,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						9270452371538749
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								10
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						7975059671744432,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							3619965369590975
							,[
							[
								11,
								"plus100Collected"
							]
,							[
								8,
								2
							]
,							[
								7,
								[
									0,
									10
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.AddVar,
							null,
							2950236673554769
							,[
							[
								11,
								"plus100Collected"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							8453281188973934
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						8290053820784867,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							8774403791504304
							,[
							[
								11,
								"plus100Collected"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									10
								]
							]
							]
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							6619566938209746
							,[
							[
								1,
								[
									2,
									"unlockRow3"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							4996174358435407
							,[
							[
								11,
								"row3Unlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							1394335944487385
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					6399091957683884,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						4704137815734014
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								11
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						4939185990735136,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							9853884327277249
							,[
							[
								11,
								"plus100Collected"
							]
,							[
								8,
								2
							]
,							[
								7,
								[
									0,
									30
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.AddVar,
							null,
							6934605893781184
							,[
							[
								11,
								"plus100Collected"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							9766055324354868
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						4242375860738816,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							1719710159883924
							,[
							[
								11,
								"plus100Collected"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									30
								]
							]
							]
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							794901121617519
							,[
							[
								1,
								[
									2,
									"unlockRow3"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							3230754827131776
							,[
							[
								11,
								"row3Unlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							3840597064714186
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				8344830875557768,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					6236710761043828
					,[
					[
						1,
						[
							2,
							"checkPlays"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					9008982984493651,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						6940792295942834
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						7329139992836683,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							6266216544350186
							,[
							[
								11,
								"gamesPlayed"
							]
,							[
								8,
								2
							]
,							[
								7,
								[
									0,
									5
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.AddVar,
							null,
							945679798432465
							,[
							[
								11,
								"gamesPlayed"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							1455056853574453
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						4539593013234589,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							9247804227025085
							,[
							[
								11,
								"gamesPlayed"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									5
								]
							]
							]
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							3853470844459554
							,[
							[
								1,
								[
									2,
									"playUnlock"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							9387879142244647
							,[
							[
								11,
								"row3Unlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							4409590683258114
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					6659639283688487,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						6535992245016679
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							1
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						7815621892719664
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							1
						]
,						[
							7,
							[
								0,
								3
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						2152849471759281
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							1
						]
,						[
							7,
							[
								0,
								5
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						5762441357778251
						,[
						[
							11,
							"gamesPlayed"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				3150106083855451,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					4923351830190397
					,[
					[
						1,
						[
							2,
							"checkNearMiss"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					7161366293240092,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						7541241562985979
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						5392001987258896,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							1826441756493374
							,[
							[
								11,
								"nearMissedObjects"
							]
,							[
								8,
								2
							]
,							[
								7,
								[
									0,
									10
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.AddVar,
							null,
							8095989139243773
							,[
							[
								11,
								"nearMissedObjects"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							6490039132660966
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						3245443198098491,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							2805168108154651
							,[
							[
								11,
								"nearMissedObjects"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									10
								]
							]
							]
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							6862655949366629
							,[
							[
								1,
								[
									2,
									"unlockRow3"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							8946972053345364
							,[
							[
								11,
								"row3Unlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							6927801388694915
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					835730424305142,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						8392955952979147
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								2
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						6242349326732528,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							699793449797973
							,[
							[
								11,
								"nearMissedObjects"
							]
,							[
								8,
								2
							]
,							[
								7,
								[
									0,
									30
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.AddVar,
							null,
							3700786702404305
							,[
							[
								11,
								"nearMissedObjects"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							5241556300770746
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						3782032433803623,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							7040008949740775
							,[
							[
								11,
								"nearMissedObjects"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									30
								]
							]
							]
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							6354481936914211
							,[
							[
								1,
								[
									2,
									"unlockRow3"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							9924743245001077
							,[
							[
								11,
								"row3Unlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							4851445901066014
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					7253501258660649,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						6385953391167017
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								4
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						7733753013901359,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							4915964633950001
							,[
							[
								11,
								"nearMissedObjects"
							]
,							[
								8,
								2
							]
,							[
								7,
								[
									0,
									50
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.AddVar,
							null,
							9380892324633962
							,[
							[
								11,
								"nearMissedObjects"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							7073968047636752
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						5605088875639468,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							2432305055125322
							,[
							[
								11,
								"nearMissedObjects"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									50
								]
							]
							]
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							1976239886261361
							,[
							[
								1,
								[
									2,
									"unlockRow2"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							758804475595854
							,[
							[
								11,
								"row2Unlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							8825280788808533
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					826157720874739,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						3879992150804712
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								6
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						6182565726300139,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							5788755446399546
							,[
							[
								11,
								"nearMissedObjects"
							]
,							[
								8,
								2
							]
,							[
								7,
								[
									0,
									50
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.AddVar,
							null,
							8322691981169308
							,[
							[
								11,
								"nearMissedObjects"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							471177158753274
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						306725997632553,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							1438459223858676
							,[
							[
								11,
								"nearMissedObjects"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									50
								]
							]
							]
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							9994190429209538
							,[
							[
								1,
								[
									2,
									"unlockRow3"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							7018547164786831
							,[
							[
								11,
								"row3Unlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							2639412447591056
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					4579782034616282,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						5704059662644417
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								11
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						3363898448698948,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							508612854479775
							,[
							[
								11,
								"nearMissedObjects"
							]
,							[
								8,
								2
							]
,							[
								7,
								[
									0,
									100
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.AddVar,
							null,
							8374284503181616
							,[
							[
								11,
								"nearMissedObjects"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							150746005580949
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						9674244176832959,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							473152472419309
							,[
							[
								11,
								"nearMissedObjects"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									100
								]
							]
							]
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							3241048157484103
							,[
							[
								1,
								[
									2,
									"unlockRow2"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							5074649066488709
							,[
							[
								11,
								"row2Unlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							4219189030142676
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				5517090787519504,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					6854653325910323
					,[
					[
						1,
						[
							2,
							"checkScore"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					1251826471300493,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						7334740734907602
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						8198393880471345,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							3724338713640935
							,[
							[
								11,
								"highscore"
							]
,							[
								8,
								5
							]
,							[
								7,
								[
									0,
									500
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							6732072355075664
							,[
							[
								11,
								"row1Unlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							6281569411097216
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					1799473401789627,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						2457774240726531
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								3
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						7445881785500601,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							8271217137435259
							,[
							[
								11,
								"highscore"
							]
,							[
								8,
								5
							]
,							[
								7,
								[
									0,
									750
								]
							]
							]
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							7047743474757272
							,[
							[
								1,
								[
									2,
									"unlockRow1"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							2959036881704827
							,[
							[
								11,
								"row1Unlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							9951637024861983
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					6007019432248156,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						644746390273206
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								4
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						3430138911950344,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							6874915242595782
							,[
							[
								11,
								"highscore"
							]
,							[
								8,
								5
							]
,							[
								7,
								[
									0,
									1000
								]
							]
							]
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							6647101415812575
							,[
							[
								1,
								[
									2,
									"unlockRow3"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							4043054059209206
							,[
							[
								11,
								"row3Unlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							1245197980390395
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					6303551048731361,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						7042980205829724
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								6
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						5148421631093904,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							3829139749934992
							,[
							[
								11,
								"highscore"
							]
,							[
								8,
								5
							]
,							[
								7,
								[
									0,
									1500
								]
							]
							]
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							4304754242248442
							,[
							[
								1,
								[
									2,
									"unlockRow2"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							5642289906071223
							,[
							[
								11,
								"row2Unlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							8088232730605863
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					5997169724536473,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						3304291139585704
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								9
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						3501632019822419,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							3304769657268094
							,[
							[
								11,
								"highscore"
							]
,							[
								8,
								5
							]
,							[
								7,
								[
									0,
									2000
								]
							]
							]
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							325300065911221
							,[
							[
								1,
								[
									2,
									"unlockRow3"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							8050414122255919
							,[
							[
								11,
								"row3Unlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							2586930751819782
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					2520775142638022,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						3136886176986816
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								10
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						8084719916706847,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							401486133013648
							,[
							[
								11,
								"highscore"
							]
,							[
								8,
								5
							]
,							[
								7,
								[
									0,
									3000
								]
							]
							]
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							7094984038160054
							,[
							[
								1,
								[
									2,
									"unlockRow2"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							3612912513850369
							,[
							[
								11,
								"row2Unlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							6543831786380155
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					113312099599619,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						2863573344445937
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								11
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						4240859470168895,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							4404215733789394
							,[
							[
								11,
								"highscore"
							]
,							[
								8,
								5
							]
,							[
								7,
								[
									0,
									3500
								]
							]
							]
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							7361909794271761
							,[
							[
								1,
								[
									2,
									"unlockRow1"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							2565901976839369
							,[
							[
								11,
								"row1Unlocked"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							60607927894323
							,[
							[
								1,
								[
									2,
									"updateAchievements"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				5686447102966711,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					8723266058440307
					,[
					[
						1,
						[
							2,
							"setNextUnlock"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					8017613695941222,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						9729259717312878
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						5417935290732719
						,[
						[
							11,
							"plus50Enabled"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						1294723025398164
						,[
						[
							11,
							"bloodCollected"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						7796491591264445
						,[
						[
							11,
							"needNewRecord"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						4583890312098337
						,[
						[
							11,
							"gamesPlayed"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						8065307627575931
						,[
						[
							1,
							[
								2,
								"displayPermanentUnlocked"
							]
						]
,						[
							13,
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					5103049088993814,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						5719085857508262
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								2
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						3705310329680981
						,[
						[
							11,
							"boostZoneActive"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						926397948955134
						,[
						[
							11,
							"multiShortEnabled"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						9017032329654108
						,[
						[
							11,
							"bloodCollected"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						4614210559344543
						,[
						[
							11,
							"nearMissedObjects"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						4360499819767329
						,[
						[
							1,
							[
								2,
								"displayPermanentUnlocked"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						582062758869591
						,[
						[
							11,
							"needNewRecord"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					774653822110873,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						3552224086728836
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								3
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						9427862771608668
						,[
						[
							11,
							"lifeExtension1Enabled"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						9948178001102391
						,[
						[
							11,
							"needNewRecord"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						8800183826955233
						,[
						[
							11,
							"plus50Collected"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						4632223188448214
						,[
						[
							11,
							"nearMissedObjects"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						9340442189277463
						,[
						[
							1,
							[
								2,
								"displayPermanentUnlocked"
							]
						]
,						[
							13,
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					6438427455019385,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						7902240190077645
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								4
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						2719898612459173
						,[
						[
							11,
							"plasterEnabled"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						1787707289563483
						,[
						[
							11,
							"bloodCollected"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						7321310088382439
						,[
						[
							11,
							"multiplySeconds"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						2180565576455474
						,[
						[
							11,
							"needNewRecord"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						9270736325491548
						,[
						[
							1,
							[
								2,
								"displayPermanentUnlocked"
							]
						]
,						[
							13,
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					1185665105589265,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						4108663447746101
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								5
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						5410719881244201
						,[
						[
							11,
							"bloodDropEnabled"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						9799693483176332
						,[
						[
							11,
							"multiplySeconds"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						1649856631561681
						,[
						[
							11,
							"needNewRecord"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						7173688262349278
						,[
						[
							11,
							"nearMissedObjects"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						7858900186927907
						,[
						[
							1,
							[
								2,
								"pickupUnlocked"
							]
						]
,						[
							13,
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					5624770369765932,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						9280190017258868
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								6
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						6627727250385108
						,[
						[
							11,
							"multiLongEnabled"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						3269682429839228
						,[
						[
							11,
							"needNewRecord"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						559169296752838
						,[
						[
							11,
							"bloodDropsCollected"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						7506325498793851
						,[
						[
							11,
							"plasterCollected"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						3236009451396107
						,[
						[
							1,
							[
								2,
								"pickupUnlocked"
							]
						]
,						[
							13,
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					8876805698607483,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						9815820436280863
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								7
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						3964598681058903
						,[
						[
							11,
							"lifeExtension2Enabled"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						2947473835211434
						,[
						[
							11,
							"multiplySeconds"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						613273053026615
						,[
						[
							11,
							"nearMissedObjects"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						4911433388340902
						,[
						[
							1,
							[
								2,
								"displayPermanentUnlocked"
							]
						]
,						[
							13,
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					7038022167052977,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						5151808353035646
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								8
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						7114859596709066
						,[
						[
							11,
							"plus100Enabled"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						9541966994291846
						,[
						[
							11,
							"bloodDropsCollected"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						2409303033242194
						,[
						[
							11,
							"bladeHits"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						229608651482648
						,[
						[
							11,
							"multiplyCollected"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						2774720336522471
						,[
						[
							1,
							[
								2,
								"pickupUnlocked"
							]
						]
,						[
							13,
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					2187561576545895,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						6685011393107879
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								9
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						2799652161870185
						,[
						[
							11,
							"shieldEnabled"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						3128161995269486
						,[
						[
							11,
							"bearTrapHits"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						555288221525217
						,[
						[
							11,
							"plus50Collected"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						2664268156120449
						,[
						[
							11,
							"multiplySeconds"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						8400556694712689
						,[
						[
							11,
							"bloodCollected"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						1428156914053543
						,[
						[
							1,
							[
								2,
								"pickupUnlocked"
							]
						]
,						[
							13,
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					219623841952299,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						3477277392788827
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								10
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						2110648803658984
						,[
						[
							11,
							"bucketEnabled"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						8204083151338512
						,[
						[
							11,
							"bloodCollected"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						6815150718211846
						,[
						[
							11,
							"electricHits"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						5646682667012876
						,[
						[
							1,
							[
								2,
								"pickupUnlocked"
							]
						]
,						[
							13,
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					4456233804449659,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						3756888849297025
						,[
						[
							11,
							"currentUnlock"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								11
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						1548637679975867
						,[
						[
							11,
							"useableBloodEnabled"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						6353460058438266
						,[
						[
							11,
							"campfireHits"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						8883516924629705
						,[
						[
							11,
							"plus100Collected"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						2095787847942676
						,[
						[
							1,
							[
								2,
								"pickupUnlocked"
							]
						]
,						[
							13,
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				3137785319322918,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					8209882069913747
					,[
					[
						1,
						[
							2,
							"displayPermanentUnlocked"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					5979663334931331,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						5671620759051166
						,[
						[
							11,
							"paused"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						9215629998703347
						,[
						[
							4,
							94
						]
,						[
							5,
							[
								0,
								11
							]
						]
,						[
							0,
							[
								7,
								[
									23,
									"myScreenWidth"
								]
								,[
									0,
									2
								]
							]
						]
,						[
							0,
							[
								6,
								[
									0,
									160
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						7438479329967789
						,[
						[
							4,
							67
						]
,						[
							5,
							[
								0,
								11
							]
						]
,						[
							0,
							[
								7,
								[
									23,
									"myScreenWidth"
								]
								,[
									0,
									2
								]
							]
						]
,						[
							0,
							[
								6,
								[
									0,
									210
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						]
					]
,					[
						67,
						cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
						null,
						2133205779824947
						,[
						[
							0,
							[
								5,
								[
									23,
									"currentUnlock"
								]
								,[
									0,
									1
								]
							]
						]
						]
					]
,					[
						94,
						cr.behaviors.lunarray_Tween.prototype.acts.Start,
						"EaseTween",
						1010588018275767
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						5900736347382046
						,[
						[
							1,
							[
								2,
								"playRooster"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.Wait,
						null,
						7818422437482127
						,[
						[
							0,
							[
								0,
								2
							]
						]
						]
					]
,					[
						67,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						5056013712380305
					]
,					[
						94,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						5097496265576262
					]
					]
				]
,				[
					0,
					null,
					false,
					6971349530607153,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						1479639509776343
						,[
						[
							11,
							"paused"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						2241155308304811
						,[
						[
							4,
							94
						]
,						[
							5,
							[
								0,
								12
							]
						]
,						[
							0,
							[
								7,
								[
									23,
									"myScreenWidth"
								]
								,[
									0,
									2
								]
							]
						]
,						[
							0,
							[
								6,
								[
									0,
									624
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						5348169543828323
						,[
						[
							4,
							67
						]
,						[
							5,
							[
								0,
								12
							]
						]
,						[
							0,
							[
								7,
								[
									23,
									"myScreenWidth"
								]
								,[
									0,
									2
								]
							]
						]
,						[
							0,
							[
								6,
								[
									0,
									678
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						]
					]
,					[
						67,
						cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
						null,
						4764948391570382
						,[
						[
							0,
							[
								5,
								[
									23,
									"currentUnlock"
								]
								,[
									0,
									1
								]
							]
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						6992890497628462
						,[
						[
							1,
							[
								2,
								"playRooster"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.Wait,
						null,
						3610831479570955
						,[
						[
							0,
							[
								1,
								0.5
							]
						]
						]
					]
,					[
						67,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						2604840123484929
					]
,					[
						94,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						2408459046107238
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				4658230970715767,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					5720645374524131
					,[
					[
						1,
						[
							2,
							"pickupUnlocked"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					5517659969199131,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						7065380716872561
						,[
						[
							11,
							"paused"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						2389998727251133
						,[
						[
							4,
							95
						]
,						[
							5,
							[
								0,
								11
							]
						]
,						[
							0,
							[
								7,
								[
									23,
									"myScreenWidth"
								]
								,[
									0,
									2
								]
							]
						]
,						[
							0,
							[
								6,
								[
									0,
									160
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						7754240684775267
						,[
						[
							4,
							67
						]
,						[
							5,
							[
								0,
								11
							]
						]
,						[
							0,
							[
								7,
								[
									23,
									"myScreenWidth"
								]
								,[
									0,
									2
								]
							]
						]
,						[
							0,
							[
								6,
								[
									0,
									210
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						]
					]
,					[
						67,
						cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
						null,
						6855312807308842
						,[
						[
							0,
							[
								5,
								[
									23,
									"currentUnlock"
								]
								,[
									0,
									1
								]
							]
						]
						]
					]
,					[
						95,
						cr.behaviors.lunarray_Tween.prototype.acts.Start,
						"EaseTween",
						6078403414890562
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						1142359489933005
						,[
						[
							1,
							[
								2,
								"playRooster"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.Wait,
						null,
						2026186938853663
						,[
						[
							0,
							[
								0,
								2
							]
						]
						]
					]
,					[
						67,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						193963129537167
					]
,					[
						95,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						2561238913006298
					]
					]
				]
,				[
					0,
					null,
					false,
					2840301997730074,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						8005651337276117
						,[
						[
							11,
							"paused"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						7466523752330276
						,[
						[
							4,
							95
						]
,						[
							5,
							[
								0,
								12
							]
						]
,						[
							0,
							[
								7,
								[
									23,
									"myScreenWidth"
								]
								,[
									0,
									2
								]
							]
						]
,						[
							0,
							[
								6,
								[
									0,
									624
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						527463263155057
						,[
						[
							4,
							67
						]
,						[
							5,
							[
								0,
								12
							]
						]
,						[
							0,
							[
								7,
								[
									23,
									"myScreenWidth"
								]
								,[
									0,
									2
								]
							]
						]
,						[
							0,
							[
								6,
								[
									0,
									678
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						]
					]
,					[
						67,
						cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
						null,
						5287912605164994
						,[
						[
							0,
							[
								5,
								[
									23,
									"currentUnlock"
								]
								,[
									0,
									1
								]
							]
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						1387744954238351
						,[
						[
							1,
							[
								2,
								"playRooster"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.Wait,
						null,
						2771031229702058
						,[
						[
							0,
							[
								1,
								0.5
							]
						]
						]
					]
,					[
						67,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						7074802577932733
					]
,					[
						95,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						9337815262415663
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				7925821521002159,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					8043653014775426
					,[
					[
						1,
						[
							2,
							"allUnlocked"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					4148576697884924,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						6846360224626082
						,[
						[
							11,
							"paused"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						7570436582326489
						,[
						[
							4,
							99
						]
,						[
							5,
							[
								0,
								11
							]
						]
,						[
							0,
							[
								7,
								[
									23,
									"myScreenWidth"
								]
								,[
									0,
									2
								]
							]
						]
,						[
							0,
							[
								6,
								[
									0,
									160
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						]
					]
,					[
						99,
						cr.behaviors.lunarray_Tween.prototype.acts.Start,
						"EaseTween",
						4220968677725861
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						7959377612146427
						,[
						[
							1,
							[
								2,
								"playRooster"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.Wait,
						null,
						6548123306403554
						,[
						[
							0,
							[
								0,
								2
							]
						]
						]
					]
,					[
						99,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						8153544897873534
					]
					]
				]
,				[
					0,
					null,
					false,
					6058428347520551,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						1200786300847423
						,[
						[
							11,
							"paused"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						3993409303016674
						,[
						[
							4,
							99
						]
,						[
							5,
							[
								0,
								12
							]
						]
,						[
							0,
							[
								7,
								[
									23,
									"myScreenWidth"
								]
								,[
									0,
									2
								]
							]
						]
,						[
							0,
							[
								6,
								[
									0,
									624
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						235175566738615
						,[
						[
							1,
							[
								2,
								"playRooster"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.Wait,
						null,
						3778997420452402
						,[
						[
							0,
							[
								1,
								0.5
							]
						]
						]
					]
,					[
						99,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						816963177325391
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				6454565290068361,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					6784474781889514
					,[
					[
						1,
						[
							2,
							"unlockRow1"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					5818389980274266
					,[
					[
						11,
						"row1Unlocked"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					9658868229884088
					,[
					[
						1,
						[
							2,
							"playUnlock"
						]
					]
,					[
						13,
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					6899871245096123,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						228541929322912
						,[
						[
							11,
							"paused"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.cnds.IsMobile,
						null,
						0,
						false,
						true,
						false,
						9700447527645208
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						5288001364684824
						,[
						[
							4,
							97
						]
,						[
							5,
							[
								0,
								11
							]
						]
,						[
							0,
							[
								20,
								55,
								cr.plugins_.Sprite.prototype.exps.X,
								false,
								null
							]
						]
,						[
							0,
							[
								20,
								55,
								cr.plugins_.Sprite.prototype.exps.Y,
								false,
								null
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				2695080742816224,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					8521576028754773
					,[
					[
						1,
						[
							2,
							"unlockRow2"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					2475006743338655
					,[
					[
						11,
						"row2Unlocked"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					2356282276982827
					,[
					[
						1,
						[
							2,
							"playUnlock"
						]
					]
,					[
						13,
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					1775439804404813,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						6424939166292796
						,[
						[
							11,
							"paused"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.cnds.IsMobile,
						null,
						0,
						false,
						true,
						false,
						9539759418189829
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						6851189132972228
						,[
						[
							4,
							97
						]
,						[
							5,
							[
								0,
								11
							]
						]
,						[
							0,
							[
								20,
								56,
								cr.plugins_.Sprite.prototype.exps.X,
								false,
								null
							]
						]
,						[
							0,
							[
								20,
								56,
								cr.plugins_.Sprite.prototype.exps.Y,
								false,
								null
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				5403020327340113,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					2591059070175413
					,[
					[
						1,
						[
							2,
							"unlockRow3"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					1764856676667956
					,[
					[
						11,
						"row3Unlocked"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					3820926064523097
					,[
					[
						1,
						[
							2,
							"playUnlock"
						]
					]
,					[
						13,
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					9176067883132492,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						6953390382998512
						,[
						[
							11,
							"paused"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.cnds.IsMobile,
						null,
						0,
						false,
						true,
						false,
						6718044829077941
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						591558828246183
						,[
						[
							4,
							97
						]
,						[
							5,
							[
								0,
								11
							]
						]
,						[
							0,
							[
								20,
								57,
								cr.plugins_.Sprite.prototype.exps.X,
								false,
								null
							]
						]
,						[
							0,
							[
								20,
								57,
								cr.plugins_.Sprite.prototype.exps.Y,
								false,
								null
							]
						]
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			[true, "SCORE"],
			false,
			7851513392506168,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				0,
				false,
				false,
				false,
				7851513392506168
				,[
				[
					1,
					[
						2,
						"SCORE"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				1333903939281267,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					8827633159297267
					,[
					[
						11,
						"scoreMultiplier"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							2
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					9782802470493189,
					[
					[
						-1,
						cr.system_object.prototype.cnds.Every,
						null,
						0,
						false,
						false,
						false,
						802298864157767
						,[
						[
							0,
							[
								1,
								1
							]
						]
						]
					]
					],
					[
					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						3413863202325552
						,[
						[
							1,
							[
								2,
								"checkTimer"
							]
						]
,						[
							13,
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				6009122576279561,
				[
				[
					135,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					6104903153996949
					,[
					[
						8,
						5
					]
,					[
						0,
						[
							6,
							[
								23,
								"myScreenWidth"
							]
							,[
								1,
								0.64
							]
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					4947656737371357
					,[
					[
						11,
						"boostZoneActive"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					2881558385972527
					,[
					[
						11,
						"multiActive"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					6872099326558163,
					[
					[
						-1,
						cr.system_object.prototype.cnds.TriggerOnce,
						null,
						0,
						false,
						false,
						false,
						778336684783185
					]
					],
					[
					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						2582901105272968
						,[
						[
							1,
							[
								2,
								"boostScore"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						9985705288749521
						,[
						[
							4,
							98
						]
,						[
							5,
							[
								0,
								10
							]
						]
,						[
							0,
							[
								23,
								"myScreenWidth"
							]
						]
,						[
							0,
							[
								6,
								[
									0,
									631
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						]
					]
,					[
						89,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						8912672281928488
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				1481426304694124,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					8852494692188325
					,[
					[
						1,
						[
							2,
							"boostScore"
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					8920763578547693
					,[
					[
						11,
						"scoreMultiplier"
					]
,					[
						7,
						[
							0,
							2
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					8973058956125448
					,[
					[
						4,
						85
					]
,					[
						5,
						[
							0,
							10
						]
					]
,					[
						0,
						[
							0,
							1226
						]
					]
,					[
						0,
						[
							0,
							129
						]
					]
					]
				]
,				[
					130,
					cr.plugins_.Spritefont2.prototype.acts.SetScale,
					null,
					6813703247043466
					,[
					[
						0,
						[
							1,
							1.1
						]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					6141074503234879
					,[
					[
						1,
						[
							2,
							"playBling"
						]
					]
,					[
						13,
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				6149489260257819,
				[
				[
					135,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					3375972597614222
					,[
					[
						8,
						2
					]
,					[
						0,
						[
							6,
							[
								23,
								"myScreenWidth"
							]
							,[
								1,
								0.64
							]
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					7979819891921764
					,[
					[
						11,
						"boostZoneActive"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					6139782872148441
					,[
					[
						11,
						"multiActive"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					4308999168071376
					,[
					[
						11,
						"scoreMultiplier"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					8689165399718144,
					[
					[
						-1,
						cr.system_object.prototype.cnds.TriggerOnce,
						null,
						0,
						false,
						false,
						false,
						2083873731237017
					]
					],
					[
					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						9484630856954623
						,[
						[
							1,
							[
								2,
								"unboostScore"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						98,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						8776188263016452
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				7427692190637949,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					8972382067440814
					,[
					[
						1,
						[
							2,
							"unboostScore"
						]
					]
					]
				]
				],
				[
				[
					85,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					3042880201883163
				]
,				[
					130,
					cr.plugins_.Spritefont2.prototype.acts.SetScale,
					null,
					1389788876161778
					,[
					[
						0,
						[
							1,
							1
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				3538026603470774,
				[
				[
					-1,
					cr.system_object.prototype.cnds.Every,
					null,
					0,
					false,
					false,
					false,
					1077279872789516
					,[
					[
						0,
						[
							1,
							0.09
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					4668381455333111
					,[
					[
						11,
						"scoreActive"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.AddVar,
					null,
					2480993087684607
					,[
					[
						11,
						"score"
					]
,					[
						7,
						[
							6,
							[
								0,
								1
							]
							,[
								23,
								"scoreMultiplier"
							]
						]
					]
					]
				]
,				[
					130,
					cr.plugins_.Spritefont2.prototype.acts.SetText,
					null,
					6170239055939812
					,[
					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"score"
							]
							]
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			[true, "CHICKEN CONTROLS"],
			false,
			3551791612009604,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				0,
				false,
				false,
				false,
				3551791612009604
				,[
				[
					1,
					[
						2,
						"CHICKEN CONTROLS"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				5972917044700135,
				[
				[
					139,
					cr.plugins_.Mouse.prototype.cnds.IsButtonDown,
					null,
					0,
					false,
					false,
					false,
					1525872845332166
					,[
					[
						3,
						0
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					2569864728614813
					,[
					[
						1,
						[
							2,
							"Jump"
						]
					]
,					[
						13,
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				2944690847277963,
				[
				[
					138,
					cr.plugins_.Touch.prototype.cnds.OnTouchStart,
					null,
					1,
					false,
					false,
					false,
					2501269176567903
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					7298214254381706
					,[
					[
						1,
						[
							2,
							"Jump"
						]
					]
,					[
						13,
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				7631800451240781,
				[
				[
					138,
					cr.plugins_.Touch.prototype.cnds.OnTouchEnd,
					null,
					1,
					false,
					false,
					false,
					2779169743915267
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					3095849703243857
					,[
					[
						11,
						"jumpReady"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				6599266767305591,
				[
				[
					139,
					cr.plugins_.Mouse.prototype.cnds.IsButtonDown,
					null,
					0,
					false,
					true,
					false,
					4457271128317367
					,[
					[
						3,
						0
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					8668669323512986,
					[
					[
						-1,
						cr.system_object.prototype.cnds.TriggerOnce,
						null,
						0,
						false,
						false,
						false,
						338585727612918
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						179524861221293
						,[
						[
							11,
							"jumpReady"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				4406688286579605,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					756832706089034
					,[
					[
						1,
						[
							2,
							"Jump"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					7100094065609315
					,[
					[
						11,
						"jumpReady"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					386154857940837
					,[
					[
						11,
						"hitState"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					7836946204175439
					,[
					[
						11,
						"jumpReady"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.AddVar,
					null,
					4053725383022758
					,[
					[
						11,
						"jumpCount"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					6378474522451297
					,[
					[
						11,
						"Bounce"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					2798146990422219
					,[
					[
						1,
						[
							2,
							"playFly"
						]
					]
,					[
						13,
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					1540218622957512,
					[
					[
						135,
						cr.behaviors.Platform.prototype.cnds.IsOnFloor,
						"Platform",
						0,
						false,
						false,
						false,
						4166814842018958
					]
					],
					[
					[
						135,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						6095085299334118
						,[
						[
							1,
							[
								2,
								"jump"
							]
						]
,						[
							3,
							1
						]
						]
					]
,					[
						135,
						cr.behaviors.Platform.prototype.acts.SetVectorY,
						"Platform",
						9159780037010596
						,[
						[
							0,
							[
								0,
								-550
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					8591037051097485,
					[
					[
						135,
						cr.behaviors.Platform.prototype.cnds.IsOnFloor,
						"Platform",
						0,
						false,
						true,
						false,
						7454873334360509
					]
,					[
						135,
						cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying,
						null,
						0,
						false,
						true,
						false,
						7343214274468681
						,[
						[
							1,
							[
								2,
								"fall"
							]
						]
						]
					]
					],
					[
					[
						135,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						5948094263267951
						,[
						[
							1,
							[
								2,
								"fly"
							]
						]
,						[
							3,
							1
						]
						]
					]
,					[
						135,
						cr.behaviors.Platform.prototype.acts.SetVectorY,
						"Platform",
						5224316866226955
						,[
						[
							0,
							[
								0,
								-550
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					1281164770151848,
					[
					[
						135,
						cr.behaviors.Platform.prototype.cnds.IsOnFloor,
						"Platform",
						0,
						false,
						true,
						false,
						1155656460168917
					]
,					[
						135,
						cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying,
						null,
						0,
						false,
						false,
						false,
						7024856485821814
						,[
						[
							1,
							[
								2,
								"fall"
							]
						]
						]
					]
					],
					[
					[
						135,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						2526972527098559
						,[
						[
							1,
							[
								2,
								"flyfromfall"
							]
						]
,						[
							3,
							1
						]
						]
					]
,					[
						135,
						cr.behaviors.Platform.prototype.acts.SetVectorY,
						"Platform",
						5121563398338338
						,[
						[
							0,
							[
								0,
								-550
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				1277831675700562,
				[
				[
					135,
					cr.behaviors.Platform.prototype.cnds.IsOnFloor,
					"Platform",
					0,
					false,
					true,
					false,
					4603344268959886
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					2722059587292638
					,[
					[
						11,
						"jumpCount"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					3169805800529169
					,[
					[
						11,
						"jumpCount"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.AddVar,
					null,
					4486113410470892
					,[
					[
						11,
						"falloff"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				9942811917996062,
				[
				[
					135,
					cr.behaviors.Platform.prototype.cnds.OnLand,
					"Platform",
					1,
					false,
					false,
					false,
					5016692879074732
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					4253213584294891
					,[
					[
						11,
						"hitState"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					6004536353653797
					,[
					[
						11,
						"jumpCount"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					4613641553472481
					,[
					[
						11,
						"falloff"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					135,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					5474766453215864
					,[
					[
						1,
						[
							2,
							"land"
						]
					]
,					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				2095912698129177,
				[
				[
					135,
					cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying,
					null,
					0,
					false,
					false,
					false,
					2892792709637429
					,[
					[
						1,
						[
							2,
							"land"
						]
					]
					]
				]
,				[
					135,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					8656285508558029
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							2
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					3232998088653447
					,[
					[
						11,
						"Bounce"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					135,
					cr.behaviors.Platform.prototype.acts.SetVectorY,
					"Platform",
					2167251923465842
					,[
					[
						0,
						[
							0,
							-250
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					2480521129874262
					,[
					[
						11,
						"Bounce"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					9345624541415558
					,[
					[
						1,
						[
							2,
							"playBounce"
						]
					]
,					[
						13,
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				3345448125778358,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					3625410374740366
					,[
					[
						11,
						"useGyro"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					4886358460554642,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						937583068744328
						,[
						[
							11,
							"useGamma"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						4778415964569954,
						[
						[
							-1,
							cr.system_object.prototype.cnds.IsMobile,
							null,
							0,
							false,
							false,
							false,
							7029899714092839
						]
,						[
							138,
							cr.plugins_.Touch.prototype.cnds.CompareOrientation,
							null,
							0,
							false,
							false,
							false,
							5370261993119505
							,[
							[
								3,
								1
							]
,							[
								8,
								3
							]
,							[
								0,
								[
									0,
									10
								]
							]
							]
						]
,						[
							138,
							cr.plugins_.Touch.prototype.cnds.CompareOrientation,
							null,
							0,
							false,
							false,
							false,
							3676166509639621
							,[
							[
								3,
								1
							]
,							[
								8,
								5
							]
,							[
								0,
								[
									0,
									-10
								]
							]
							]
						]
						],
						[
						[
							135,
							cr.plugins_.Sprite.prototype.acts.SetAnimSpeed,
							null,
							8173024444919058
							,[
							[
								0,
								[
									23,
									"animSpeed"
								]
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						9839760952910269,
						[
						[
							138,
							cr.plugins_.Touch.prototype.cnds.CompareOrientation,
							null,
							0,
							false,
							false,
							false,
							9275971864277176
							,[
							[
								3,
								1
							]
,							[
								8,
								4
							]
,							[
								0,
								[
									0,
									10
								]
							]
							]
						]
						],
						[
						]
						,[
						[
							0,
							null,
							false,
							9216236478179174,
							[
							[
								135,
								cr.plugins_.Sprite.prototype.cnds.CompareX,
								null,
								0,
								false,
								false,
								false,
								8398653008081335
								,[
								[
									8,
									2
								]
,								[
									0,
									[
										23,
										"maxX"
									]
								]
								]
							]
							],
							[
							[
								-1,
								cr.system_object.prototype.acts.AddVar,
								null,
								1351913757439112
								,[
								[
									11,
									"ChickenXoffset"
								]
,								[
									7,
									[
										0,
										5
									]
								]
								]
							]
							]
							,[
							[
								0,
								null,
								false,
								8052728202852791,
								[
								[
									135,
									cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying,
									null,
									0,
									false,
									false,
									false,
									7973360437303223
									,[
									[
										1,
										[
											2,
											"run"
										]
									]
									]
								]
								],
								[
								[
									135,
									cr.plugins_.Sprite.prototype.acts.SetAnimSpeed,
									null,
									7441750523500448
									,[
									[
										0,
										[
											4,
											[
												23,
												"animSpeed"
											]
											,[
												23,
												"animSpeedUp"
											]
										]
									]
									]
								]
								]
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						498363025934421,
						[
						[
							138,
							cr.plugins_.Touch.prototype.cnds.CompareOrientation,
							null,
							0,
							false,
							false,
							false,
							6900527750256672
							,[
							[
								3,
								1
							]
,							[
								8,
								2
							]
,							[
								0,
								[
									0,
									-10
								]
							]
							]
						]
						],
						[
						]
						,[
						[
							0,
							null,
							false,
							1614264231525861,
							[
							[
								135,
								cr.plugins_.Sprite.prototype.cnds.CompareX,
								null,
								0,
								false,
								false,
								false,
								9364596082911485
								,[
								[
									8,
									4
								]
,								[
									0,
									[
										23,
										"minX"
									]
								]
								]
							]
							],
							[
							[
								-1,
								cr.system_object.prototype.acts.AddVar,
								null,
								5343984306511121
								,[
								[
									11,
									"ChickenXoffset"
								]
,								[
									7,
									[
										0,
										-5
									]
								]
								]
							]
							]
							,[
							[
								0,
								null,
								false,
								6281333239964395,
								[
								[
									135,
									cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying,
									null,
									0,
									false,
									false,
									false,
									2759922819101979
									,[
									[
										1,
										[
											2,
											"run"
										]
									]
									]
								]
								],
								[
								[
									135,
									cr.plugins_.Sprite.prototype.acts.SetAnimSpeed,
									null,
									6118829588169896
									,[
									[
										0,
										[
											5,
											[
												23,
												"animSpeed"
											]
											,[
												6,
												[
													23,
													"animSpeedUp"
												]
												,[
													1,
													0.5
												]
											]
										]
									]
									]
								]
								]
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					3653099859297751,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						6323938026482865
						,[
						[
							11,
							"useGamma"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						28777215930673,
						[
						[
							-1,
							cr.system_object.prototype.cnds.IsMobile,
							null,
							0,
							false,
							false,
							false,
							719515790307619
						]
,						[
							138,
							cr.plugins_.Touch.prototype.cnds.CompareOrientation,
							null,
							0,
							false,
							false,
							false,
							2973263470714771
							,[
							[
								3,
								2
							]
,							[
								8,
								3
							]
,							[
								0,
								[
									0,
									10
								]
							]
							]
						]
,						[
							138,
							cr.plugins_.Touch.prototype.cnds.CompareOrientation,
							null,
							0,
							false,
							false,
							false,
							5168190685677219
							,[
							[
								3,
								2
							]
,							[
								8,
								5
							]
,							[
								0,
								[
									0,
									-10
								]
							]
							]
						]
						],
						[
						[
							135,
							cr.plugins_.Sprite.prototype.acts.SetAnimSpeed,
							null,
							1637085923962062
							,[
							[
								0,
								[
									23,
									"animSpeed"
								]
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						9928505358124919,
						[
						[
							138,
							cr.plugins_.Touch.prototype.cnds.CompareOrientation,
							null,
							0,
							false,
							false,
							false,
							9352806168687846
							,[
							[
								3,
								2
							]
,							[
								8,
								4
							]
,							[
								0,
								[
									0,
									10
								]
							]
							]
						]
						],
						[
						]
						,[
						[
							0,
							null,
							false,
							7613420394423849,
							[
							[
								135,
								cr.plugins_.Sprite.prototype.cnds.CompareX,
								null,
								0,
								false,
								false,
								false,
								5455923512963007
								,[
								[
									8,
									2
								]
,								[
									0,
									[
										23,
										"maxX"
									]
								]
								]
							]
							],
							[
							[
								-1,
								cr.system_object.prototype.acts.AddVar,
								null,
								5772893947526857
								,[
								[
									11,
									"ChickenXoffset"
								]
,								[
									7,
									[
										0,
										5
									]
								]
								]
							]
							]
							,[
							[
								0,
								null,
								false,
								8105146529333819,
								[
								[
									135,
									cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying,
									null,
									0,
									false,
									false,
									false,
									5882116447359252
									,[
									[
										1,
										[
											2,
											"run"
										]
									]
									]
								]
								],
								[
								[
									135,
									cr.plugins_.Sprite.prototype.acts.SetAnimSpeed,
									null,
									5238796999145899
									,[
									[
										0,
										[
											4,
											[
												23,
												"animSpeed"
											]
											,[
												23,
												"animSpeedUp"
											]
										]
									]
									]
								]
								]
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						9458656938363134,
						[
						[
							138,
							cr.plugins_.Touch.prototype.cnds.CompareOrientation,
							null,
							0,
							false,
							false,
							false,
							8434597748557888
							,[
							[
								3,
								2
							]
,							[
								8,
								2
							]
,							[
								0,
								[
									0,
									-10
								]
							]
							]
						]
						],
						[
						]
						,[
						[
							0,
							null,
							false,
							1838865079915202,
							[
							[
								135,
								cr.plugins_.Sprite.prototype.cnds.CompareX,
								null,
								0,
								false,
								false,
								false,
								7719398222665028
								,[
								[
									8,
									4
								]
,								[
									0,
									[
										23,
										"minX"
									]
								]
								]
							]
							],
							[
							[
								-1,
								cr.system_object.prototype.acts.AddVar,
								null,
								3536063547093729
								,[
								[
									11,
									"ChickenXoffset"
								]
,								[
									7,
									[
										0,
										-5
									]
								]
								]
							]
							]
							,[
							[
								0,
								null,
								false,
								2927176324267326,
								[
								[
									135,
									cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying,
									null,
									0,
									false,
									false,
									false,
									9578977748225077
									,[
									[
										1,
										[
											2,
											"run"
										]
									]
									]
								]
								],
								[
								[
									135,
									cr.plugins_.Sprite.prototype.acts.SetAnimSpeed,
									null,
									9766071479216378
									,[
									[
										0,
										[
											5,
											[
												23,
												"animSpeed"
											]
											,[
												6,
												[
													23,
													"animSpeedUp"
												]
												,[
													1,
													0.5
												]
											]
										]
									]
									]
								]
								]
							]
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				6437678745317792,
				[
				[
					-1,
					cr.system_object.prototype.cnds.Else,
					null,
					0,
					false,
					false,
					false,
					7184775196091735
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					9660224401461569,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						9097549066427231
						,[
						[
							11,
							"invertControls"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						5299458894525234,
						[
						[
							138,
							cr.plugins_.Touch.prototype.cnds.CompareAcceleration,
							null,
							0,
							false,
							false,
							false,
							9207542379532552
							,[
							[
								3,
								1
							]
,							[
								8,
								4
							]
,							[
								0,
								[
									1,
									1.7
								]
							]
							]
						]
						],
						[
						]
						,[
						[
							0,
							null,
							false,
							9577830696491387,
							[
							[
								135,
								cr.plugins_.Sprite.prototype.cnds.CompareX,
								null,
								0,
								false,
								false,
								false,
								7943205725046864
								,[
								[
									8,
									2
								]
,								[
									0,
									[
										23,
										"maxX"
									]
								]
								]
							]
							],
							[
							[
								-1,
								cr.system_object.prototype.acts.AddVar,
								null,
								5769587166114214
								,[
								[
									11,
									"ChickenXoffset"
								]
,								[
									7,
									[
										0,
										5
									]
								]
								]
							]
							]
							,[
							[
								0,
								null,
								false,
								7100012759549652,
								[
								[
									135,
									cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying,
									null,
									0,
									false,
									false,
									false,
									900989822569018
									,[
									[
										1,
										[
											2,
											"run"
										]
									]
									]
								]
								],
								[
								[
									135,
									cr.plugins_.Sprite.prototype.acts.SetAnimSpeed,
									null,
									5431669061543689
									,[
									[
										0,
										[
											4,
											[
												23,
												"animSpeed"
											]
											,[
												23,
												"animSpeedUp"
											]
										]
									]
									]
								]
								]
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						4645360959117365,
						[
						[
							138,
							cr.plugins_.Touch.prototype.cnds.CompareAcceleration,
							null,
							0,
							false,
							false,
							false,
							4889719659537209
							,[
							[
								3,
								1
							]
,							[
								8,
								2
							]
,							[
								0,
								[
									1,
									-1.7
								]
							]
							]
						]
						],
						[
						]
						,[
						[
							0,
							null,
							false,
							3512267996319571,
							[
							[
								135,
								cr.plugins_.Sprite.prototype.cnds.CompareX,
								null,
								0,
								false,
								false,
								false,
								2139207996300918
								,[
								[
									8,
									4
								]
,								[
									0,
									[
										23,
										"minX"
									]
								]
								]
							]
							],
							[
							[
								-1,
								cr.system_object.prototype.acts.AddVar,
								null,
								491954347949703
								,[
								[
									11,
									"ChickenXoffset"
								]
,								[
									7,
									[
										0,
										-5
									]
								]
								]
							]
							]
							,[
							[
								0,
								null,
								false,
								3826632014643861,
								[
								[
									135,
									cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying,
									null,
									0,
									false,
									false,
									false,
									606179838836446
									,[
									[
										1,
										[
											2,
											"run"
										]
									]
									]
								]
								],
								[
								[
									135,
									cr.plugins_.Sprite.prototype.acts.SetAnimSpeed,
									null,
									9005563259129764
									,[
									[
										0,
										[
											5,
											[
												23,
												"animSpeed"
											]
											,[
												6,
												[
													23,
													"animSpeedUp"
												]
												,[
													1,
													0.5
												]
											]
										]
									]
									]
								]
								]
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					7599652327788926,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						3344070293153097
						,[
						[
							11,
							"invertControls"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						7384614704346969,
						[
						[
							138,
							cr.plugins_.Touch.prototype.cnds.CompareAcceleration,
							null,
							0,
							false,
							false,
							false,
							8018421174612638
							,[
							[
								3,
								1
							]
,							[
								8,
								2
							]
,							[
								0,
								[
									1,
									1.7
								]
							]
							]
						]
						],
						[
						]
						,[
						[
							0,
							null,
							false,
							5927032016610209,
							[
							[
								135,
								cr.plugins_.Sprite.prototype.cnds.CompareX,
								null,
								0,
								false,
								false,
								false,
								3469115501318472
								,[
								[
									8,
									2
								]
,								[
									0,
									[
										23,
										"maxX"
									]
								]
								]
							]
							],
							[
							[
								-1,
								cr.system_object.prototype.acts.AddVar,
								null,
								9140963823325731
								,[
								[
									11,
									"ChickenXoffset"
								]
,								[
									7,
									[
										0,
										5
									]
								]
								]
							]
							]
							,[
							[
								0,
								null,
								false,
								5119404350041639,
								[
								[
									135,
									cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying,
									null,
									0,
									false,
									false,
									false,
									5498847429736428
									,[
									[
										1,
										[
											2,
											"run"
										]
									]
									]
								]
								],
								[
								[
									135,
									cr.plugins_.Sprite.prototype.acts.SetAnimSpeed,
									null,
									5792969743113358
									,[
									[
										0,
										[
											4,
											[
												23,
												"animSpeed"
											]
											,[
												23,
												"animSpeedUp"
											]
										]
									]
									]
								]
								]
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						9965291480267869,
						[
						[
							138,
							cr.plugins_.Touch.prototype.cnds.CompareAcceleration,
							null,
							0,
							false,
							false,
							false,
							8216733327345542
							,[
							[
								3,
								1
							]
,							[
								8,
								4
							]
,							[
								0,
								[
									1,
									-1.7
								]
							]
							]
						]
						],
						[
						]
						,[
						[
							0,
							null,
							false,
							3394580942659648,
							[
							[
								135,
								cr.plugins_.Sprite.prototype.cnds.CompareX,
								null,
								0,
								false,
								false,
								false,
								1726301706396966
								,[
								[
									8,
									4
								]
,								[
									0,
									[
										23,
										"minX"
									]
								]
								]
							]
							],
							[
							[
								-1,
								cr.system_object.prototype.acts.AddVar,
								null,
								8389167188392402
								,[
								[
									11,
									"ChickenXoffset"
								]
,								[
									7,
									[
										0,
										-5
									]
								]
								]
							]
							]
							,[
							[
								0,
								null,
								false,
								2657624194637839,
								[
								[
									135,
									cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying,
									null,
									0,
									false,
									false,
									false,
									2639095707523914
									,[
									[
										1,
										[
											2,
											"run"
										]
									]
									]
								]
								],
								[
								[
									135,
									cr.plugins_.Sprite.prototype.acts.SetAnimSpeed,
									null,
									2484681900684654
									,[
									[
										0,
										[
											5,
											[
												23,
												"animSpeed"
											]
											,[
												6,
												[
													23,
													"animSpeedUp"
												]
												,[
													1,
													0.5
												]
											]
										]
									]
									]
								]
								]
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					7097314415253481,
					[
					[
						-1,
						cr.system_object.prototype.cnds.IsMobile,
						null,
						0,
						false,
						false,
						false,
						7303319489762274
					]
,					[
						138,
						cr.plugins_.Touch.prototype.cnds.CompareAcceleration,
						null,
						0,
						false,
						false,
						false,
						88476362225886
						,[
						[
							3,
							1
						]
,						[
							8,
							5
						]
,						[
							0,
							[
								1,
								-1.7
							]
						]
						]
					]
,					[
						138,
						cr.plugins_.Touch.prototype.cnds.CompareAcceleration,
						null,
						0,
						false,
						false,
						false,
						8703253457467562
						,[
						[
							3,
							1
						]
,						[
							8,
							3
						]
,						[
							0,
							[
								1,
								1.7
							]
						]
						]
					]
					],
					[
					[
						135,
						cr.plugins_.Sprite.prototype.acts.SetAnimSpeed,
						null,
						8084856189663491
						,[
						[
							0,
							[
								23,
								"animSpeed"
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				9253440162681732,
				[
				[
					139,
					cr.plugins_.Mouse.prototype.cnds.OnRelease,
					null,
					1,
					false,
					false,
					false,
					7960615260182322
					,[
					[
						3,
						2
					]
					]
				]
				],
				[
				[
					135,
					cr.plugins_.Sprite.prototype.acts.SetAnimSpeed,
					null,
					1278291444409004
					,[
					[
						0,
						[
							23,
							"animSpeed"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				3201381675585733,
				[
				[
					139,
					cr.plugins_.Mouse.prototype.cnds.IsButtonDown,
					null,
					0,
					false,
					false,
					false,
					2960738573597388
					,[
					[
						3,
						2
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					9643238075724915
					,[
					[
						11,
						"MouseX"
					]
,					[
						7,
						[
							20,
							139,
							cr.plugins_.Mouse.prototype.exps.X,
							false,
							null
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					8618008253622962,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						1156922596374145
						,[
						[
							11,
							"MouseX"
						]
,						[
							8,
							4
						]
,						[
							7,
							[
								4,
								[
									20,
									135,
									cr.plugins_.Sprite.prototype.exps.X,
									false,
									null
								]
								,[
									0,
									5
								]
							]
						]
						]
					]
,					[
						135,
						cr.plugins_.Sprite.prototype.cnds.CompareX,
						null,
						0,
						false,
						false,
						false,
						946575134065224
						,[
						[
							8,
							2
						]
,						[
							0,
							[
								23,
								"maxX"
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.AddVar,
						null,
						6633378825136093
						,[
						[
							11,
							"ChickenXoffset"
						]
,						[
							7,
							[
								0,
								5
							]
						]
						]
					]
					]
					,[
					[
						0,
						null,
						false,
						4851744126523887,
						[
						[
							135,
							cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying,
							null,
							0,
							false,
							false,
							false,
							4164991190415002
							,[
							[
								1,
								[
									2,
									"run"
								]
							]
							]
						]
						],
						[
						[
							135,
							cr.plugins_.Sprite.prototype.acts.SetAnimSpeed,
							null,
							1834419945219859
							,[
							[
								0,
								[
									4,
									[
										23,
										"animSpeed"
									]
									,[
										23,
										"animSpeedUp"
									]
								]
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					2447689854416951,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						2198277149938109
						,[
						[
							11,
							"MouseX"
						]
,						[
							8,
							2
						]
,						[
							7,
							[
								20,
								135,
								cr.plugins_.Sprite.prototype.exps.X,
								false,
								null
							]
						]
						]
					]
,					[
						135,
						cr.plugins_.Sprite.prototype.cnds.CompareX,
						null,
						0,
						false,
						false,
						false,
						9098209067234378
						,[
						[
							8,
							4
						]
,						[
							0,
							[
								23,
								"minX"
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.AddVar,
						null,
						7448533450766565
						,[
						[
							11,
							"ChickenXoffset"
						]
,						[
							7,
							[
								0,
								-5
							]
						]
						]
					]
					]
					,[
					[
						0,
						null,
						false,
						6729063429363669,
						[
						[
							135,
							cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying,
							null,
							0,
							false,
							false,
							false,
							7902979080691993
							,[
							[
								1,
								[
									2,
									"run"
								]
							]
							]
						]
						],
						[
						[
							135,
							cr.plugins_.Sprite.prototype.acts.SetAnimSpeed,
							null,
							8780795096585877
							,[
							[
								0,
								[
									5,
									[
										23,
										"animSpeed"
									]
									,[
										6,
										[
											23,
											"animSpeedUp"
										]
										,[
											1,
											0.5
										]
									]
								]
							]
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				966861424088879,
				[
				[
					135,
					cr.plugins_.Sprite.prototype.cnds.OnAnimFinished,
					null,
					1,
					false,
					false,
					false,
					7371531561368852
					,[
					[
						1,
						[
							2,
							"run"
						]
					]
					]
				]
				],
				[
				[
					135,
					cr.plugins_.Sprite.prototype.acts.StartAnim,
					null,
					2140793769612446
					,[
					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				9188438054861184,
				[
				[
					135,
					cr.plugins_.Sprite.prototype.cnds.OnAnimFinished,
					null,
					1,
					false,
					false,
					false,
					2632097337671694
					,[
					[
						1,
						[
							2,
							"land"
						]
					]
					]
				]
				],
				[
				[
					135,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					5453096669517051
					,[
					[
						1,
						[
							2,
							"run"
						]
					]
,					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				9227535937639641,
				[
				[
					135,
					cr.behaviors.Platform.prototype.cnds.IsFalling,
					"Platform",
					0,
					false,
					false,
					false,
					3725126030333345
				]
,				[
					-1,
					cr.system_object.prototype.cnds.TriggerOnce,
					null,
					0,
					false,
					false,
					false,
					4701828696508762
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					3548659455905619
					,[
					[
						11,
						"hitState"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					135,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					7336474588698235
					,[
					[
						1,
						[
							2,
							"fall"
						]
					]
,					[
						3,
						1
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			[true, "COLLISIONS"],
			false,
			7659057268294583,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				0,
				false,
				false,
				false,
				7659057268294583
				,[
				[
					1,
					[
						2,
						"COLLISIONS"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				9180705176449853,
				[
				[
					158,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					5664826643109189
					,[
					[
						8,
						2
					]
,					[
						0,
						[
							5,
							[
								5,
								[
									20,
									135,
									cr.plugins_.Sprite.prototype.exps.X,
									false,
									null
								]
								,[
									20,
									158,
									cr.plugins_.Sprite.prototype.exps.Width,
									false,
									null
								]
							]
							,[
								4,
								[
									20,
									135,
									cr.plugins_.Sprite.prototype.exps.Width,
									false,
									null
								]
								,[
									6,
									[
										0,
										10
									]
									,[
										23,
										"SCALEFACTOR"
									]
								]
							]
						]
					]
					]
				]
,				[
					158,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					7172390465475271
					,[
					[
						10,
						0
					]
,					[
						8,
						2
					]
,					[
						7,
						[
							0,
							2
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					2248426626245641
					,[
					[
						1,
						[
							2,
							"resetCombo"
						]
					]
,					[
						13,
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				1076041948205872,
				[
				[
					132,
					cr.plugins_.Sprite.prototype.cnds.IsOverlapping,
					null,
					0,
					false,
					true,
					false,
					7544887560419072
					,[
					[
						4,
						158
					]
					]
				]
,				[
					158,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					422451828275598
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					1223537911043269
					,[
					[
						11,
						"health"
					]
,					[
						8,
						4
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					9289681951391709
					,[
					[
						11,
						"nearMissCombo"
					]
,					[
						8,
						2
					]
,					[
						7,
						[
							0,
							6
						]
					]
					]
				]
				],
				[
				[
					158,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					5315075746216261
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							0,
							2
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					7841399550959905
					,[
					[
						4,
						87
					]
,					[
						5,
						[
							0,
							9
						]
					]
,					[
						0,
						[
							5,
							[
								20,
								135,
								cr.plugins_.Sprite.prototype.exps.X,
								false,
								null
							]
							,[
								0,
								20
							]
						]
					]
,					[
						0,
						[
							20,
							135,
							cr.plugins_.Sprite.prototype.exps.Y,
							false,
							null
						]
					]
					]
				]
,				[
					87,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					4603882392272363
					,[
					[
						0,
						[
							6,
							[
								23,
								"nearMissCombo"
							]
							,[
								23,
								"scoreMultiplier"
							]
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					7926847578606508
					,[
					[
						4,
						88
					]
,					[
						5,
						[
							0,
							11
						]
					]
,					[
						0,
						[
							7,
							[
								23,
								"myScreenWidth"
							]
							,[
								0,
								2
							]
						]
					]
,					[
						0,
						[
							0,
							636
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.AddVar,
					null,
					1039600857119119
					,[
					[
						11,
						"score"
					]
,					[
						7,
						[
							6,
							[
								6,
								[
									0,
									10
								]
								,[
									23,
									"nearMissCombo"
								]
							]
							,[
								23,
								"scoreMultiplier"
							]
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.AddVar,
					null,
					6889883926578235
					,[
					[
						11,
						"nearMissCombo"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					4874514143768051
					,[
					[
						1,
						[
							2,
							"checkNearMiss"
						]
					]
,					[
						13,
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					5066761805058986
					,[
					[
						1,
						[
							2,
							"playMiss"
						]
					]
,					[
						13,
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					6819888290281209
					,[
					[
						0,
						[
							1,
							1
						]
					]
					]
				]
,				[
					88,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					8151969752841206
				]
				]
				,[
				[
					0,
					null,
					false,
					6096745464647812,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						6175981489200805
						,[
						[
							11,
							"nearMissCombo"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								6
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						7821584788723915
						,[
						[
							11,
							"nearMissCombo"
						]
,						[
							7,
							[
								0,
								5
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				8262448121506274,
				[
				[
					132,
					cr.plugins_.Sprite.prototype.cnds.OnCollision,
					null,
					0,
					false,
					false,
					true,
					628757353028718
					,[
					[
						4,
						158
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					1604556049491783,
					[
					[
						-1,
						cr.system_object.prototype.cnds.TriggerOnce,
						null,
						0,
						false,
						false,
						false,
						5633008423263821
					]
					],
					[
					[
						158,
						cr.plugins_.Sprite.prototype.acts.AddInstanceVar,
						null,
						8156484699208669
						,[
						[
							10,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				7295950252603233,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					6306887437400081
					,[
					[
						1,
						[
							2,
							"resetCombo"
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					8226383338219966
					,[
					[
						11,
						"nearMissCombo"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					4194637789137277,
					[
					[
						158,
						cr.plugins_.Sprite.prototype.cnds.CompareX,
						null,
						0,
						false,
						false,
						false,
						6354699710292731
						,[
						[
							8,
							2
						]
,						[
							0,
							[
								4,
								[
									20,
									158,
									cr.plugins_.Sprite.prototype.exps.Width,
									false,
									null
								]
								,[
									20,
									135,
									cr.plugins_.Sprite.prototype.exps.X,
									false,
									null
								]
							]
						]
						]
					]
					],
					[
					[
						158,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						5639098943442226
						,[
						[
							10,
							0
						]
,						[
							7,
							[
								0,
								2
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				3346906176148424,
				[
				[
					135,
					cr.plugins_.Sprite.prototype.cnds.OnCollision,
					null,
					0,
					false,
					false,
					true,
					8104181133633732
					,[
					[
						4,
						158
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					6268355260319558
					,[
					[
						1,
						[
							2,
							"resetCombo"
						]
					]
,					[
						13,
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					8562776690409353,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						5262313006367597
						,[
						[
							11,
							"shieldActive"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						135,
						cr.behaviors.Platform.prototype.acts.SetVectorY,
						"Platform",
						545578147924667
						,[
						[
							0,
							[
								0,
								-650
							]
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						2853183908962016
						,[
						[
							1,
							[
								2,
								"loseShield"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						4900917643634185
						,[
						[
							1,
							[
								2,
								"playHit"
							]
						]
,						[
							13,
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					4356658186838744,
					[
					[
						-1,
						cr.system_object.prototype.cnds.Else,
						null,
						0,
						false,
						false,
						false,
						8393743223300888
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						566453353862116,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							1594842322690007
							,[
							[
								11,
								"bucketActive"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							1093222475044355
							,[
							[
								1,
								[
									2,
									"loseBucket"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						6446274871844024,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							5938258531004655
							,[
							[
								11,
								"plasterActive"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							4124251244809708
							,[
							[
								1,
								[
									2,
									"losePlaster"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						100379450872653,
						[
						[
							158,
							cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
							null,
							0,
							false,
							false,
							false,
							3728336564283963
							,[
							[
								10,
								1
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									2,
									"normal"
								]
							]
							]
						]
						],
						[
						[
							158,
							cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
							null,
							9201158137377309
							,[
							[
								10,
								0
							]
,							[
								7,
								[
									0,
									0
								]
							]
							]
						]
,						[
							135,
							cr.plugins_.Sprite.prototype.acts.SetAnim,
							null,
							7756103078458676
							,[
							[
								1,
								[
									2,
									"gethit"
								]
							]
,							[
								3,
								1
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							3398257627220561
							,[
							[
								11,
								"hitState"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SubVar,
							null,
							5694769261356338
							,[
							[
								11,
								"health"
							]
,							[
								7,
								[
									23,
									"Damage"
								]
							]
							]
						]
,						[
							137,
							cr.plugins_.Particles.prototype.acts.SetInitSize,
							null,
							6079926341383737
							,[
							[
								0,
								[
									0,
									10
								]
							]
							]
						]
,						[
							137,
							cr.plugins_.Particles.prototype.acts.SetSprayCone,
							null,
							195078366579517
							,[
							[
								0,
								[
									0,
									360
								]
							]
							]
						]
,						[
							135,
							cr.behaviors.Platform.prototype.acts.SetVectorY,
							"Platform",
							8267194205435901
							,[
							[
								0,
								[
									0,
									-650
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							3646013216220264
							,[
							[
								1,
								[
									2,
									"playHit"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.Wait,
							null,
							4962968794358786
							,[
							[
								0,
								[
									1,
									0.4
								]
							]
							]
						]
,						[
							137,
							cr.plugins_.Particles.prototype.acts.SetInitSize,
							null,
							873840636693932
							,[
							[
								0,
								[
									0,
									5
								]
							]
							]
						]
,						[
							137,
							cr.plugins_.Particles.prototype.acts.SetSprayCone,
							null,
							4132812461117593
							,[
							[
								0,
								[
									0,
									20
								]
							]
							]
						]
						]
						,[
						[
							0,
							null,
							false,
							3226895424956186,
							[
							[
								158,
								cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
								null,
								0,
								false,
								false,
								false,
								4649549903564733
								,[
								[
									10,
									2
								]
,								[
									8,
									0
								]
,								[
									7,
									[
										2,
										"blade"
									]
								]
								]
							]
							],
							[
							[
								140,
								cr.plugins_.Function.prototype.acts.CallFunction,
								null,
								2947497766209147
								,[
								[
									1,
									[
										2,
										"checkBlade"
									]
								]
,								[
									13,
								]
								]
							]
							]
						]
,						[
							0,
							null,
							false,
							3869946009859225,
							[
							[
								158,
								cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
								null,
								0,
								false,
								false,
								false,
								3256086817908313
								,[
								[
									10,
									2
								]
,								[
									8,
									0
								]
,								[
									7,
									[
										2,
										"fire"
									]
								]
								]
							]
							],
							[
							[
								140,
								cr.plugins_.Function.prototype.acts.CallFunction,
								null,
								6229182465250214
								,[
								[
									1,
									[
										2,
										"checkFire"
									]
								]
,								[
									13,
								]
								]
							]
							]
						]
,						[
							0,
							null,
							false,
							4650260638444746,
							[
							[
								158,
								cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
								null,
								0,
								false,
								false,
								false,
								7144617933771307
								,[
								[
									10,
									2
								]
,								[
									8,
									0
								]
,								[
									7,
									[
										2,
										"bear"
									]
								]
								]
							]
							],
							[
							[
								140,
								cr.plugins_.Function.prototype.acts.CallFunction,
								null,
								1825208159774426
								,[
								[
									1,
									[
										2,
										"checkBear"
									]
								]
,								[
									13,
								]
								]
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						7225218698006416,
						[
						[
							158,
							cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
							null,
							0,
							false,
							false,
							false,
							4300254264882859
							,[
							[
								10,
								1
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									2,
									"electric"
								]
							]
							]
						]
						],
						[
						[
							158,
							cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
							null,
							9025201304594052
							,[
							[
								10,
								0
							]
,							[
								7,
								[
									0,
									0
								]
							]
							]
						]
,						[
							135,
							cr.plugins_.Sprite.prototype.acts.SetAnim,
							null,
							7088860956176602
							,[
							[
								1,
								[
									2,
									"electrichit"
								]
							]
,							[
								3,
								1
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							43878038993481
							,[
							[
								11,
								"hitState"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SubVar,
							null,
							6593393562967886
							,[
							[
								11,
								"health"
							]
,							[
								7,
								[
									23,
									"Damage"
								]
							]
							]
						]
,						[
							137,
							cr.plugins_.Particles.prototype.acts.SetInitSize,
							null,
							6291103906950302
							,[
							[
								0,
								[
									0,
									10
								]
							]
							]
						]
,						[
							137,
							cr.plugins_.Particles.prototype.acts.SetSprayCone,
							null,
							7325819471517086
							,[
							[
								0,
								[
									0,
									360
								]
							]
							]
						]
,						[
							135,
							cr.behaviors.Platform.prototype.acts.SetVectorY,
							"Platform",
							2244150397499125
							,[
							[
								0,
								[
									0,
									-650
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							1182227789357132
							,[
							[
								1,
								[
									2,
									"playElectric"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							7023301544889246
							,[
							[
								1,
								[
									2,
									"checkElectricHits"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.Wait,
							null,
							2698912048929626
							,[
							[
								0,
								[
									1,
									0.4
								]
							]
							]
						]
,						[
							137,
							cr.plugins_.Particles.prototype.acts.SetInitSize,
							null,
							7816933529867929
							,[
							[
								0,
								[
									0,
									5
								]
							]
							]
						]
,						[
							137,
							cr.plugins_.Particles.prototype.acts.SetSprayCone,
							null,
							1222835386324119
							,[
							[
								0,
								[
									0,
									20
								]
							]
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				true,
				6231755689241404,
				[
				[
					135,
					cr.plugins_.Sprite.prototype.cnds.OnAnimFinished,
					null,
					1,
					false,
					false,
					false,
					2640402824478874
					,[
					[
						1,
						[
							2,
							"gethit"
						]
					]
					]
				]
,				[
					135,
					cr.plugins_.Sprite.prototype.cnds.OnAnimFinished,
					null,
					1,
					false,
					false,
					false,
					6362311769187934
					,[
					[
						1,
						[
							2,
							"electrichit"
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					4628057624203835
					,[
					[
						11,
						"hitState"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					6618659395626985,
					[
					[
						135,
						cr.behaviors.Platform.prototype.cnds.IsOnFloor,
						"Platform",
						0,
						false,
						false,
						false,
						3307495818659991
					]
					],
					[
					[
						135,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						5642217325070925
						,[
						[
							1,
							[
								2,
								"run"
							]
						]
,						[
							3,
							1
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					2471850894579826,
					[
					[
						-1,
						cr.system_object.prototype.cnds.Else,
						null,
						0,
						false,
						false,
						false,
						2188139496242009
					]
					],
					[
					[
						135,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						2611864013160921
						,[
						[
							1,
							[
								2,
								"fall"
							]
						]
,						[
							3,
							1
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					7833198814913088,
					[
					],
					[
					]
				]
				]
			]
,			[
				1,
				"FLASHSTART",
				0,
				25,
false,true,6012006862530894
			]
,			[
				0,
				null,
				false,
				7555151550111833,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					7602116881152405
					,[
					[
						11,
						"health"
					]
,					[
						8,
						2
					]
,					[
						7,
						[
							23,
							"FLASHSTART"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					1711299328162456,
					[
					[
						-1,
						cr.system_object.prototype.cnds.TriggerOnce,
						null,
						0,
						false,
						false,
						false,
						4360621077242753
					]
					],
					[
					[
						80,
						cr.behaviors.Flash.prototype.acts.Flash,
						"Flash",
						685701072574083
						,[
						[
							0,
							[
								1,
								0.2
							]
						]
,						[
							0,
							[
								1,
								0.2
							]
						]
,						[
							0,
							[
								0,
								10
							]
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						4780332285549382
						,[
						[
							1,
							[
								2,
								"playHeart"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						3067879224032885
						,[
						[
							4,
							86
						]
,						[
							5,
							[
								0,
								10
							]
						]
,						[
							0,
							[
								0,
								277
							]
						]
,						[
							0,
							[
								0,
								666
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				5259635527557785,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					796559671068681
					,[
					[
						11,
						"health"
					]
,					[
						8,
						4
					]
,					[
						7,
						[
							23,
							"FLASHSTART"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					1460801110055615,
					[
					[
						-1,
						cr.system_object.prototype.cnds.TriggerOnce,
						null,
						0,
						false,
						false,
						false,
						8758189445419742
					]
					],
					[
					[
						80,
						cr.behaviors.Flash.prototype.acts.StopFlashing,
						"Flash",
						5384189025710197
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						4185683540015997
						,[
						[
							1,
							[
								2,
								"stopHeart"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						86,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						1137809221334924
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			[true, "DIE"],
			false,
			2554115375273518,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				0,
				false,
				false,
				false,
				2554115375273518
				,[
				[
					1,
					[
						2,
						"DIE"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				2577114706279177,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					7058424001578602
					,[
					[
						11,
						"health"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					2015879747996396,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						7849370260095627
						,[
						[
							11,
							"useableBlood"
						]
,						[
							8,
							4
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						6056118391510613
						,[
						[
							1,
							[
								2,
								"useHealth"
							]
						]
,						[
							13,
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					4550271148129131,
					[
					[
						-1,
						cr.system_object.prototype.cnds.Else,
						null,
						0,
						false,
						false,
						false,
						9446095208690669
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						7618296024619964,
						[
						[
							-1,
							cr.system_object.prototype.cnds.TriggerOnce,
							null,
							0,
							false,
							false,
							false,
							7623647758517408
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.SetGroupActive,
							null,
							7344875666815818
							,[
							[
								1,
								[
									2,
									"CHICKEN CONTROLS"
								]
							]
,							[
								3,
								0
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							4419618350554386
							,[
							[
								11,
								"speed"
							]
,							[
								7,
								[
									0,
									0
								]
							]
							]
						]
,						[
							135,
							cr.plugins_.Sprite.prototype.acts.SetAnim,
							null,
							9531148533811575
							,[
							[
								1,
								[
									2,
									"die"
								]
							]
,							[
								3,
								1
							]
							]
						]
,						[
							135,
							cr.plugins_.Sprite.prototype.acts.SetCollisions,
							null,
							4446961739299009
							,[
							[
								3,
								0
							]
							]
						]
,						[
							108,
							cr.behaviors.Rotate.prototype.acts.SetSpeed,
							"Rotate",
							4489183744429582
							,[
							[
								0,
								[
									0,
									0
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							8471830713920099
							,[
							[
								1,
								[
									2,
									"stopMusic"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							6040847453445925
							,[
							[
								11,
								"scoreActive"
							]
,							[
								7,
								[
									0,
									0
								]
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							7205719933760184
							,[
							[
								11,
								"finalscore"
							]
,							[
								7,
								[
									23,
									"score"
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							4740716203019205
							,[
							[
								1,
								[
									2,
									"playEnd"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							9697632293658178
							,[
							[
								1,
								[
									2,
									"stopHeart"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							4357750034034762
							,[
							[
								1,
								[
									2,
									"playNoBlood"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							86,
							cr.plugins_.Sprite.prototype.acts.Destroy,
							null,
							2909200485485192
						]
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			[true, "GROUND AND OBJECT SCROLLING"],
			false,
			4207116560790942,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				0,
				false,
				false,
				false,
				4207116560790942
				,[
				[
					1,
					[
						2,
						"GROUND AND OBJECT SCROLLING"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				6802767211681432,
				[
				[
					157,
					cr.plugins_.Sprite.prototype.cnds.OnCreated,
					null,
					1,
					false,
					false,
					false,
					1525947567856924
				]
				],
				[
				[
					157,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					1919166652632449
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							4,
							[
								21,
								157,
								false,
								null
								,0
							]
							,[
								23,
								"GSpeedMod"
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				3400571016478429,
				[
				[
					151,
					cr.plugins_.Sprite.prototype.cnds.OnCreated,
					null,
					1,
					false,
					false,
					false,
					4955595481835155
				]
				],
				[
				[
					151,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					1187378467715945
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							4,
							[
								21,
								151,
								false,
								null
								,0
							]
							,[
								23,
								"GSpeedMod"
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				1729875795433463,
				[
				[
					149,
					cr.plugins_.Sprite.prototype.cnds.OnCreated,
					null,
					1,
					false,
					false,
					false,
					1129144280491269
				]
				],
				[
				[
					149,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					4567508901129546
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							4,
							[
								21,
								149,
								false,
								null
								,0
							]
							,[
								23,
								"L1SpeedMod"
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				8316468287257363,
				[
				[
					152,
					cr.plugins_.Sprite.prototype.cnds.OnCreated,
					null,
					1,
					false,
					false,
					false,
					3430734423225875
				]
				],
				[
				[
					152,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					718220464316145
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							4,
							[
								21,
								152,
								false,
								null
								,0
							]
							,[
								23,
								"L2SpeedMod"
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				8520962002165553,
				[
				[
					153,
					cr.plugins_.Sprite.prototype.cnds.OnCreated,
					null,
					1,
					false,
					false,
					false,
					5258025161850732
				]
				],
				[
				[
					153,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					3808039773533859
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							4,
							[
								21,
								153,
								false,
								null
								,0
							]
							,[
								23,
								"L3SpeedMod"
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				8487355742200436,
				[
				[
					154,
					cr.plugins_.Sprite.prototype.cnds.OnCreated,
					null,
					1,
					false,
					false,
					false,
					5318456050166671
				]
				],
				[
				[
					154,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					4369868588938795
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							4,
							[
								21,
								154,
								false,
								null
								,0
							]
							,[
								23,
								"L4SpeedMod"
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				8095367045026123,
				[
				[
					155,
					cr.plugins_.Sprite.prototype.cnds.OnCreated,
					null,
					1,
					false,
					false,
					false,
					7566263710696016
				]
				],
				[
				[
					155,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					9365212697793086
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							4,
							[
								21,
								155,
								false,
								null
								,0
							]
							,[
								23,
								"L5SpeedMod"
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				6142610245186914,
				[
				[
					156,
					cr.plugins_.Sprite.prototype.cnds.OnCreated,
					null,
					1,
					false,
					false,
					false,
					413034032888096
				]
				],
				[
				[
					156,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					7065736154669045
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							4,
							[
								21,
								156,
								false,
								null
								,0
							]
							,[
								23,
								"L7SpeedMod"
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				8436414302179565,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					8649431743926132
					,[
					[
						1,
						[
							2,
							"createL5Wave1"
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					3441500694025876
					,[
					[
						4,
						13
					]
,					[
						5,
						[
							0,
							4
						]
					]
,					[
						0,
						[
							4,
							[
								6,
								[
									23,
									"myScreenWidth"
								]
								,[
									0,
									2
								]
							]
							,[
								0,
								292
							]
						]
					]
,					[
						0,
						[
							0,
							598
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					9388555911992259
					,[
					[
						4,
						14
					]
,					[
						5,
						[
							0,
							4
						]
					]
,					[
						0,
						[
							4,
							[
								6,
								[
									23,
									"myScreenWidth"
								]
								,[
									0,
									2
								]
							]
							,[
								0,
								1184
							]
						]
					]
,					[
						0,
						[
							0,
							598
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					1228045429435774
					,[
					[
						4,
						15
					]
,					[
						5,
						[
							0,
							4
						]
					]
,					[
						0,
						[
							4,
							[
								6,
								[
									23,
									"myScreenWidth"
								]
								,[
									0,
									2
								]
							]
							,[
								0,
								1760
							]
						]
					]
,					[
						0,
						[
							0,
							593
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					3448228953459012
					,[
					[
						4,
						15
					]
,					[
						5,
						[
							0,
							4
						]
					]
,					[
						0,
						[
							4,
							[
								6,
								[
									23,
									"myScreenWidth"
								]
								,[
									0,
									2
								]
							]
							,[
								0,
								665
							]
						]
					]
,					[
						0,
						[
							0,
							593
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					3261177104289244
					,[
					[
						4,
						15
					]
,					[
						5,
						[
							0,
							4
						]
					]
,					[
						0,
						[
							4,
							[
								6,
								[
									23,
									"myScreenWidth"
								]
								,[
									0,
									2
								]
							]
							,[
								0,
								2560
							]
						]
					]
,					[
						0,
						[
							0,
							593
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					7085879201512412
					,[
					[
						4,
						19
					]
,					[
						5,
						[
							0,
							4
						]
					]
,					[
						0,
						[
							4,
							[
								6,
								[
									23,
									"myScreenWidth"
								]
								,[
									0,
									2
								]
							]
							,[
								0,
								2086
							]
						]
					]
,					[
						0,
						[
							0,
							598
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					1727553288261054
					,[
					[
						4,
						16
					]
,					[
						5,
						[
							0,
							4
						]
					]
,					[
						0,
						[
							4,
							[
								6,
								[
									23,
									"myScreenWidth"
								]
								,[
									0,
									2
								]
							]
							,[
								0,
								1615
							]
						]
					]
,					[
						0,
						[
							0,
							594
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					1258890804702057
					,[
					[
						4,
						17
					]
,					[
						5,
						[
							0,
							4
						]
					]
,					[
						0,
						[
							4,
							[
								6,
								[
									23,
									"myScreenWidth"
								]
								,[
									0,
									2
								]
							]
							,[
								0,
								1024
							]
						]
					]
,					[
						0,
						[
							0,
							598
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					2471484560873045
					,[
					[
						4,
						18
					]
,					[
						5,
						[
							0,
							4
						]
					]
,					[
						0,
						[
							4,
							[
								6,
								[
									23,
									"myScreenWidth"
								]
								,[
									0,
									2
								]
							]
							,[
								0,
								639
							]
						]
					]
,					[
						0,
						[
							0,
							603
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				4111974838044098,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					2638474884210143
					,[
					[
						1,
						[
							2,
							"createL5Wave2"
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					1920696048964337
					,[
					[
						4,
						13
					]
,					[
						5,
						[
							0,
							4
						]
					]
,					[
						0,
						[
							4,
							[
								6,
								[
									23,
									"myScreenWidth"
								]
								,[
									0,
									2
								]
							]
							,[
								0,
								292
							]
						]
					]
,					[
						0,
						[
							0,
							598
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					6589766465385781
					,[
					[
						4,
						14
					]
,					[
						5,
						[
							0,
							4
						]
					]
,					[
						0,
						[
							4,
							[
								6,
								[
									23,
									"myScreenWidth"
								]
								,[
									0,
									2
								]
							]
							,[
								0,
								1184
							]
						]
					]
,					[
						0,
						[
							0,
							598
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					582990207929787
					,[
					[
						4,
						15
					]
,					[
						5,
						[
							0,
							4
						]
					]
,					[
						0,
						[
							4,
							[
								6,
								[
									23,
									"myScreenWidth"
								]
								,[
									0,
									2
								]
							]
							,[
								0,
								1760
							]
						]
					]
,					[
						0,
						[
							0,
							593
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					3364880372044547
					,[
					[
						4,
						19
					]
,					[
						5,
						[
							0,
							4
						]
					]
,					[
						0,
						[
							4,
							[
								6,
								[
									23,
									"myScreenWidth"
								]
								,[
									0,
									2
								]
							]
							,[
								0,
								2086
							]
						]
					]
,					[
						0,
						[
							0,
							598
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					9836364705884271
					,[
					[
						4,
						16
					]
,					[
						5,
						[
							0,
							4
						]
					]
,					[
						0,
						[
							4,
							[
								6,
								[
									23,
									"myScreenWidth"
								]
								,[
									0,
									2
								]
							]
							,[
								0,
								1615
							]
						]
					]
,					[
						0,
						[
							0,
							594
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					5327257739126563
					,[
					[
						4,
						17
					]
,					[
						5,
						[
							0,
							4
						]
					]
,					[
						0,
						[
							4,
							[
								6,
								[
									23,
									"myScreenWidth"
								]
								,[
									0,
									2
								]
							]
							,[
								0,
								1024
							]
						]
					]
,					[
						0,
						[
							0,
							598
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					2645048948295549
					,[
					[
						4,
						18
					]
,					[
						5,
						[
							0,
							4
						]
					]
,					[
						0,
						[
							4,
							[
								6,
								[
									23,
									"myScreenWidth"
								]
								,[
									0,
									2
								]
							]
							,[
								0,
								639
							]
						]
					]
,					[
						0,
						[
							0,
							603
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				4115118724942431,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					6010814667181349
					,[
					[
						1,
						[
							2,
							"createL5Wave3"
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					3396378893500561
					,[
					[
						4,
						13
					]
,					[
						5,
						[
							0,
							4
						]
					]
,					[
						0,
						[
							4,
							[
								6,
								[
									23,
									"myScreenWidth"
								]
								,[
									0,
									2
								]
							]
							,[
								0,
								749
							]
						]
					]
,					[
						0,
						[
							0,
							598
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					5214743984976105
					,[
					[
						4,
						14
					]
,					[
						5,
						[
							0,
							4
						]
					]
,					[
						0,
						[
							4,
							[
								6,
								[
									23,
									"myScreenWidth"
								]
								,[
									0,
									2
								]
							]
							,[
								0,
								252
							]
						]
					]
,					[
						0,
						[
							0,
							598
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					4945640540682314
					,[
					[
						4,
						15
					]
,					[
						5,
						[
							0,
							4
						]
					]
,					[
						0,
						[
							4,
							[
								6,
								[
									23,
									"myScreenWidth"
								]
								,[
									0,
									2
								]
							]
							,[
								0,
								1346
							]
						]
					]
,					[
						0,
						[
							0,
							593
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					3266607642623039
					,[
					[
						4,
						19
					]
,					[
						5,
						[
							0,
							4
						]
					]
,					[
						0,
						[
							4,
							[
								6,
								[
									23,
									"myScreenWidth"
								]
								,[
									0,
									2
								]
							]
							,[
								0,
								2000
							]
						]
					]
,					[
						0,
						[
							0,
							598
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					7786510914015389
					,[
					[
						4,
						16
					]
,					[
						5,
						[
							0,
							4
						]
					]
,					[
						0,
						[
							4,
							[
								6,
								[
									23,
									"myScreenWidth"
								]
								,[
									0,
									2
								]
							]
							,[
								0,
								391
							]
						]
					]
,					[
						0,
						[
							0,
							594
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					5153605141441005
					,[
					[
						4,
						17
					]
,					[
						5,
						[
							0,
							4
						]
					]
,					[
						0,
						[
							4,
							[
								6,
								[
									23,
									"myScreenWidth"
								]
								,[
									0,
									2
								]
							]
							,[
								0,
								1366
							]
						]
					]
,					[
						0,
						[
							0,
							598
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					8664062603797793
					,[
					[
						4,
						18
					]
,					[
						5,
						[
							0,
							4
						]
					]
,					[
						0,
						[
							4,
							[
								6,
								[
									23,
									"myScreenWidth"
								]
								,[
									0,
									2
								]
							]
							,[
								0,
								857
							]
						]
					]
,					[
						0,
						[
							0,
							603
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				8764123234316867,
				[
				[
					150,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					6922703043355494
					,[
					[
						8,
						2
					]
,					[
						0,
						[
							6,
							[
								20,
								150,
								cr.plugins_.Sprite.prototype.exps.Width,
								false,
								null
							]
							,[
								0,
								-1
							]
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					1,
					"randomNum",
					0,
					0,
false,false,9047901678046513
				]
,				[
					0,
					null,
					false,
					8390112048668767,
					[
					[
						150,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						3328800980464495
						,[
						[
							10,
							2
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"random3"
							]
						]
						]
					]
					],
					[
					[
						150,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						8766731402707793
					]
					]
					,[
					[
						0,
						null,
						false,
						849889467061381,
						[
						[
							150,
							cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
							null,
							0,
							false,
							false,
							false,
							4492753374125715
							,[
							[
								10,
								1
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									2,
									"L3Scrolling"
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							1055590242867044
							,[
							[
								11,
								"randomNum"
							]
,							[
								7,
								[
									19,
									cr.system_object.prototype.exps.floor
									,[
[
										19,
										cr.system_object.prototype.exps.random
										,[
[
											0,
											3
										]
										]
									]
									]
								]
							]
							]
						]
						]
						,[
						[
							0,
							null,
							false,
							6891063807190598,
							[
							[
								-1,
								cr.system_object.prototype.cnds.CompareVar,
								null,
								0,
								false,
								false,
								false,
								5926256307035864
								,[
								[
									11,
									"randomNum"
								]
,								[
									8,
									0
								]
,								[
									7,
									[
										0,
										0
									]
								]
								]
							]
							],
							[
							[
								-1,
								cr.system_object.prototype.acts.CreateObject,
								null,
								9510990247151689
								,[
								[
									4,
									7
								]
,								[
									5,
									[
										0,
										2
									]
								]
,								[
									0,
									[
										4,
										[
											20,
											150,
											cr.plugins_.Sprite.prototype.exps.X,
											false,
											null
										]
										,[
											6,
											[
												20,
												150,
												cr.plugins_.Sprite.prototype.exps.Width,
												false,
												null
											]
											,[
												0,
												3
											]
										]
									]
								]
,								[
									0,
									[
										0,
										644
									]
								]
								]
							]
,							[
								7,
								cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
								null,
								7059098111624736
								,[
								[
									10,
									0
								]
,								[
									7,
									[
										19,
										cr.system_object.prototype.exps.str
										,[
[
											19,
											cr.system_object.prototype.exps.random
											,[
[
												0,
												3000
											]
											]
										]
										]
									]
								]
								]
							]
							]
						]
,						[
							0,
							null,
							false,
							5990361192757616,
							[
							[
								-1,
								cr.system_object.prototype.cnds.CompareVar,
								null,
								0,
								false,
								false,
								false,
								3403741078491338
								,[
								[
									11,
									"randomNum"
								]
,								[
									8,
									0
								]
,								[
									7,
									[
										0,
										1
									]
								]
								]
							]
							],
							[
							[
								-1,
								cr.system_object.prototype.acts.CreateObject,
								null,
								4748623218479257
								,[
								[
									4,
									8
								]
,								[
									5,
									[
										0,
										2
									]
								]
,								[
									0,
									[
										4,
										[
											20,
											150,
											cr.plugins_.Sprite.prototype.exps.X,
											false,
											null
										]
										,[
											6,
											[
												20,
												150,
												cr.plugins_.Sprite.prototype.exps.Width,
												false,
												null
											]
											,[
												0,
												3
											]
										]
									]
								]
,								[
									0,
									[
										0,
										644
									]
								]
								]
							]
,							[
								8,
								cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
								null,
								6630566564343504
								,[
								[
									10,
									0
								]
,								[
									7,
									[
										19,
										cr.system_object.prototype.exps.str
										,[
[
											19,
											cr.system_object.prototype.exps.random
											,[
[
												0,
												3000
											]
											]
										]
										]
									]
								]
								]
							]
							]
						]
,						[
							0,
							null,
							false,
							1533579885764469,
							[
							[
								-1,
								cr.system_object.prototype.cnds.CompareVar,
								null,
								0,
								false,
								false,
								false,
								6133545553906126
								,[
								[
									11,
									"randomNum"
								]
,								[
									8,
									0
								]
,								[
									7,
									[
										0,
										2
									]
								]
								]
							]
							],
							[
							[
								-1,
								cr.system_object.prototype.acts.CreateObject,
								null,
								7544362013161398
								,[
								[
									4,
									9
								]
,								[
									5,
									[
										0,
										2
									]
								]
,								[
									0,
									[
										4,
										[
											20,
											150,
											cr.plugins_.Sprite.prototype.exps.X,
											false,
											null
										]
										,[
											6,
											[
												20,
												150,
												cr.plugins_.Sprite.prototype.exps.Width,
												false,
												null
											]
											,[
												0,
												3
											]
										]
									]
								]
,								[
									0,
									[
										0,
										644
									]
								]
								]
							]
,							[
								9,
								cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
								null,
								4074755703961908
								,[
								[
									10,
									0
								]
,								[
									7,
									[
										19,
										cr.system_object.prototype.exps.str
										,[
[
											19,
											cr.system_object.prototype.exps.random
											,[
[
												0,
												3000
											]
											]
										]
										]
									]
								]
								]
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						6019523484155848,
						[
						[
							150,
							cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
							null,
							0,
							false,
							false,
							false,
							1420096392118795
							,[
							[
								10,
								1
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									2,
									"L4Scrolling"
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							4244895321138072
							,[
							[
								11,
								"randomNum"
							]
,							[
								7,
								[
									19,
									cr.system_object.prototype.exps.floor
									,[
[
										19,
										cr.system_object.prototype.exps.random
										,[
[
											0,
											3
										]
										]
									]
									]
								]
							]
							]
						]
						]
						,[
						[
							0,
							null,
							false,
							7922604485885991,
							[
							[
								-1,
								cr.system_object.prototype.cnds.CompareVar,
								null,
								0,
								false,
								false,
								false,
								7516802677328005
								,[
								[
									11,
									"randomNum"
								]
,								[
									8,
									0
								]
,								[
									7,
									[
										0,
										0
									]
								]
								]
							]
							],
							[
							[
								-1,
								cr.system_object.prototype.acts.CreateObject,
								null,
								1646897631528975
								,[
								[
									4,
									10
								]
,								[
									5,
									[
										0,
										3
									]
								]
,								[
									0,
									[
										4,
										[
											20,
											150,
											cr.plugins_.Sprite.prototype.exps.X,
											false,
											null
										]
										,[
											6,
											[
												20,
												150,
												cr.plugins_.Sprite.prototype.exps.Width,
												false,
												null
											]
											,[
												0,
												3
											]
										]
									]
								]
,								[
									0,
									[
										0,
										695
									]
								]
								]
							]
,							[
								10,
								cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
								null,
								7279485476499468
								,[
								[
									10,
									0
								]
,								[
									7,
									[
										19,
										cr.system_object.prototype.exps.str
										,[
[
											19,
											cr.system_object.prototype.exps.random
											,[
[
												0,
												3000
											]
											]
										]
										]
									]
								]
								]
							]
							]
						]
,						[
							0,
							null,
							false,
							2342458104256511,
							[
							[
								-1,
								cr.system_object.prototype.cnds.CompareVar,
								null,
								0,
								false,
								false,
								false,
								6520135071983244
								,[
								[
									11,
									"randomNum"
								]
,								[
									8,
									0
								]
,								[
									7,
									[
										0,
										1
									]
								]
								]
							]
							],
							[
							[
								-1,
								cr.system_object.prototype.acts.CreateObject,
								null,
								2216701075534315
								,[
								[
									4,
									11
								]
,								[
									5,
									[
										0,
										3
									]
								]
,								[
									0,
									[
										4,
										[
											20,
											150,
											cr.plugins_.Sprite.prototype.exps.X,
											false,
											null
										]
										,[
											6,
											[
												20,
												150,
												cr.plugins_.Sprite.prototype.exps.Width,
												false,
												null
											]
											,[
												0,
												3
											]
										]
									]
								]
,								[
									0,
									[
										0,
										695
									]
								]
								]
							]
,							[
								11,
								cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
								null,
								1608297677897364
								,[
								[
									10,
									0
								]
,								[
									7,
									[
										19,
										cr.system_object.prototype.exps.str
										,[
[
											19,
											cr.system_object.prototype.exps.random
											,[
[
												0,
												3000
											]
											]
										]
										]
									]
								]
								]
							]
							]
						]
,						[
							0,
							null,
							false,
							8048304825127813,
							[
							[
								-1,
								cr.system_object.prototype.cnds.CompareVar,
								null,
								0,
								false,
								false,
								false,
								4391851082602245
								,[
								[
									11,
									"randomNum"
								]
,								[
									8,
									0
								]
,								[
									7,
									[
										0,
										2
									]
								]
								]
							]
							],
							[
							[
								-1,
								cr.system_object.prototype.acts.CreateObject,
								null,
								2083625797282718
								,[
								[
									4,
									12
								]
,								[
									5,
									[
										0,
										3
									]
								]
,								[
									0,
									[
										4,
										[
											20,
											150,
											cr.plugins_.Sprite.prototype.exps.X,
											false,
											null
										]
										,[
											6,
											[
												20,
												150,
												cr.plugins_.Sprite.prototype.exps.Width,
												false,
												null
											]
											,[
												0,
												3
											]
										]
									]
								]
,								[
									0,
									[
										0,
										718
									]
								]
								]
							]
,							[
								12,
								cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
								null,
								3045288931199608
								,[
								[
									10,
									0
								]
,								[
									7,
									[
										19,
										cr.system_object.prototype.exps.str
										,[
[
											19,
											cr.system_object.prototype.exps.random
											,[
[
												0,
												3000
											]
											]
										]
										]
									]
								]
								]
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						7251752284408597,
						[
						[
							150,
							cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
							null,
							0,
							false,
							false,
							false,
							5401919110592382
							,[
							[
								10,
								1
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									2,
									"GScrolling"
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							9499065883787541
							,[
							[
								11,
								"randomNum"
							]
,							[
								7,
								[
									19,
									cr.system_object.prototype.exps.floor
									,[
[
										19,
										cr.system_object.prototype.exps.random
										,[
[
											0,
											3
										]
										]
									]
									]
								]
							]
							]
						]
						]
						,[
						[
							0,
							null,
							false,
							6338015841313031,
							[
							[
								-1,
								cr.system_object.prototype.cnds.CompareVar,
								null,
								0,
								false,
								false,
								false,
								7170778131658096
								,[
								[
									11,
									"randomNum"
								]
,								[
									8,
									0
								]
,								[
									7,
									[
										0,
										0
									]
								]
								]
							]
							],
							[
							[
								-1,
								cr.system_object.prototype.acts.CreateObject,
								null,
								2481552104117421
								,[
								[
									4,
									2
								]
,								[
									5,
									[
										0,
										5
									]
								]
,								[
									0,
									[
										4,
										[
											20,
											150,
											cr.plugins_.Sprite.prototype.exps.X,
											false,
											null
										]
										,[
											6,
											[
												20,
												150,
												cr.plugins_.Sprite.prototype.exps.Width,
												false,
												null
											]
											,[
												0,
												3
											]
										]
									]
								]
,								[
									0,
									[
										0,
										764
									]
								]
								]
							]
,							[
								2,
								cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
								null,
								2747313940861214
								,[
								[
									10,
									0
								]
,								[
									7,
									[
										19,
										cr.system_object.prototype.exps.str
										,[
[
											19,
											cr.system_object.prototype.exps.random
											,[
[
												0,
												3000
											]
											]
										]
										]
									]
								]
								]
							]
							]
						]
,						[
							0,
							null,
							false,
							9044365089735278,
							[
							[
								-1,
								cr.system_object.prototype.cnds.CompareVar,
								null,
								0,
								false,
								false,
								false,
								3898441124945343
								,[
								[
									11,
									"randomNum"
								]
,								[
									8,
									0
								]
,								[
									7,
									[
										0,
										1
									]
								]
								]
							]
							],
							[
							[
								-1,
								cr.system_object.prototype.acts.CreateObject,
								null,
								2076617981132822
								,[
								[
									4,
									3
								]
,								[
									5,
									[
										0,
										5
									]
								]
,								[
									0,
									[
										4,
										[
											20,
											150,
											cr.plugins_.Sprite.prototype.exps.X,
											false,
											null
										]
										,[
											6,
											[
												20,
												150,
												cr.plugins_.Sprite.prototype.exps.Width,
												false,
												null
											]
											,[
												0,
												3
											]
										]
									]
								]
,								[
									0,
									[
										0,
										764
									]
								]
								]
							]
,							[
								3,
								cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
								null,
								8116153627530953
								,[
								[
									10,
									0
								]
,								[
									7,
									[
										19,
										cr.system_object.prototype.exps.str
										,[
[
											19,
											cr.system_object.prototype.exps.random
											,[
[
												0,
												3000
											]
											]
										]
										]
									]
								]
								]
							]
							]
						]
,						[
							0,
							null,
							false,
							9610792673756383,
							[
							[
								-1,
								cr.system_object.prototype.cnds.CompareVar,
								null,
								0,
								false,
								false,
								false,
								4769830167877655
								,[
								[
									11,
									"randomNum"
								]
,								[
									8,
									0
								]
,								[
									7,
									[
										0,
										2
									]
								]
								]
							]
							],
							[
							[
								-1,
								cr.system_object.prototype.acts.CreateObject,
								null,
								7288845295076883
								,[
								[
									4,
									4
								]
,								[
									5,
									[
										0,
										5
									]
								]
,								[
									0,
									[
										4,
										[
											20,
											150,
											cr.plugins_.Sprite.prototype.exps.X,
											false,
											null
										]
										,[
											6,
											[
												20,
												150,
												cr.plugins_.Sprite.prototype.exps.Width,
												false,
												null
											]
											,[
												0,
												3
											]
										]
									]
								]
,								[
									0,
									[
										0,
										764
									]
								]
								]
							]
,							[
								4,
								cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
								null,
								5853352225110108
								,[
								[
									10,
									0
								]
,								[
									7,
									[
										19,
										cr.system_object.prototype.exps.str
										,[
[
											19,
											cr.system_object.prototype.exps.random
											,[
[
												0,
												3000
											]
											]
										]
										]
									]
								]
								]
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					4038005389877124,
					[
					[
						150,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						4173295705021231
						,[
						[
							10,
							2
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"random2"
							]
						]
						]
					]
					],
					[
					[
						150,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						7867574285194857
					]
					]
					,[
					[
						0,
						null,
						false,
						7555634151048033,
						[
						[
							150,
							cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
							null,
							0,
							false,
							false,
							false,
							766547382894135
							,[
							[
								10,
								1
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									2,
									"L2Scrolling"
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							9723337570867955
							,[
							[
								11,
								"randomNum"
							]
,							[
								7,
								[
									19,
									cr.system_object.prototype.exps.floor
									,[
[
										19,
										cr.system_object.prototype.exps.random
										,[
[
											0,
											2
										]
										]
									]
									]
								]
							]
							]
						]
						]
						,[
						[
							0,
							null,
							false,
							5880461079325577,
							[
							[
								-1,
								cr.system_object.prototype.cnds.CompareVar,
								null,
								0,
								false,
								false,
								false,
								6731472518453508
								,[
								[
									11,
									"randomNum"
								]
,								[
									8,
									0
								]
,								[
									7,
									[
										0,
										0
									]
								]
								]
							]
							],
							[
							[
								-1,
								cr.system_object.prototype.acts.CreateObject,
								null,
								1771032882831269
								,[
								[
									4,
									5
								]
,								[
									5,
									[
										0,
										1
									]
								]
,								[
									0,
									[
										4,
										[
											20,
											150,
											cr.plugins_.Sprite.prototype.exps.X,
											false,
											null
										]
										,[
											6,
											[
												20,
												150,
												cr.plugins_.Sprite.prototype.exps.Width,
												false,
												null
											]
											,[
												0,
												2
											]
										]
									]
								]
,								[
									0,
									[
										0,
										716
									]
								]
								]
							]
,							[
								5,
								cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
								null,
								3840713845955573
								,[
								[
									10,
									0
								]
,								[
									7,
									[
										19,
										cr.system_object.prototype.exps.str
										,[
[
											19,
											cr.system_object.prototype.exps.random
											,[
[
												0,
												3000
											]
											]
										]
										]
									]
								]
								]
							]
							]
						]
,						[
							0,
							null,
							false,
							9954874662670865,
							[
							[
								-1,
								cr.system_object.prototype.cnds.CompareVar,
								null,
								0,
								false,
								false,
								false,
								3220014254557571
								,[
								[
									11,
									"randomNum"
								]
,								[
									8,
									0
								]
,								[
									7,
									[
										0,
										1
									]
								]
								]
							]
							],
							[
							[
								-1,
								cr.system_object.prototype.acts.CreateObject,
								null,
								2322701683569115
								,[
								[
									4,
									6
								]
,								[
									5,
									[
										0,
										1
									]
								]
,								[
									0,
									[
										4,
										[
											20,
											150,
											cr.plugins_.Sprite.prototype.exps.X,
											false,
											null
										]
										,[
											6,
											[
												20,
												150,
												cr.plugins_.Sprite.prototype.exps.Width,
												false,
												null
											]
											,[
												0,
												2
											]
										]
									]
								]
,								[
									0,
									[
										0,
										716
									]
								]
								]
							]
,							[
								6,
								cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
								null,
								4468062771944606
								,[
								[
									10,
									0
								]
,								[
									7,
									[
										19,
										cr.system_object.prototype.exps.str
										,[
[
											19,
											cr.system_object.prototype.exps.random
											,[
[
												0,
												3000
											]
											]
										]
										]
									]
								]
								]
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						5606809888162372,
						[
						[
							150,
							cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
							null,
							0,
							false,
							false,
							false,
							3999616953899
							,[
							[
								10,
								1
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									2,
									"L7Scrolling"
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							3683424012232214
							,[
							[
								11,
								"randomNum"
							]
,							[
								7,
								[
									19,
									cr.system_object.prototype.exps.floor
									,[
[
										19,
										cr.system_object.prototype.exps.random
										,[
[
											0,
											2
										]
										]
									]
									]
								]
							]
							]
						]
						]
						,[
						[
							0,
							null,
							false,
							2914386887928058,
							[
							[
								-1,
								cr.system_object.prototype.cnds.CompareVar,
								null,
								0,
								false,
								false,
								false,
								2477254515705035
								,[
								[
									11,
									"randomNum"
								]
,								[
									8,
									0
								]
,								[
									7,
									[
										0,
										0
									]
								]
								]
							]
							],
							[
							[
								-1,
								cr.system_object.prototype.acts.CreateObject,
								null,
								4397180424481977
								,[
								[
									4,
									20
								]
,								[
									5,
									[
										0,
										7
									]
								]
,								[
									0,
									[
										4,
										[
											20,
											150,
											cr.plugins_.Sprite.prototype.exps.X,
											false,
											null
										]
										,[
											6,
											[
												20,
												150,
												cr.plugins_.Sprite.prototype.exps.Width,
												false,
												null
											]
											,[
												0,
												2
											]
										]
									]
								]
,								[
									0,
									[
										0,
										779
									]
								]
								]
							]
,							[
								5,
								cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
								null,
								1243211243879287
								,[
								[
									10,
									0
								]
,								[
									7,
									[
										19,
										cr.system_object.prototype.exps.str
										,[
[
											19,
											cr.system_object.prototype.exps.random
											,[
[
												0,
												3000
											]
											]
										]
										]
									]
								]
								]
							]
							]
						]
,						[
							0,
							null,
							false,
							7096373947708356,
							[
							[
								-1,
								cr.system_object.prototype.cnds.CompareVar,
								null,
								0,
								false,
								false,
								false,
								7533672964496127
								,[
								[
									11,
									"randomNum"
								]
,								[
									8,
									0
								]
,								[
									7,
									[
										0,
										1
									]
								]
								]
							]
							],
							[
							[
								-1,
								cr.system_object.prototype.acts.CreateObject,
								null,
								7082336172635171
								,[
								[
									4,
									21
								]
,								[
									5,
									[
										0,
										7
									]
								]
,								[
									0,
									[
										4,
										[
											20,
											150,
											cr.plugins_.Sprite.prototype.exps.X,
											false,
											null
										]
										,[
											6,
											[
												20,
												150,
												cr.plugins_.Sprite.prototype.exps.Width,
												false,
												null
											]
											,[
												0,
												2
											]
										]
									]
								]
,								[
									0,
									[
										0,
										777
									]
								]
								]
							]
,							[
								6,
								cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
								null,
								8830375890898889
								,[
								[
									10,
									0
								]
,								[
									7,
									[
										19,
										cr.system_object.prototype.exps.str
										,[
[
											19,
											cr.system_object.prototype.exps.random
											,[
[
												0,
												3000
											]
											]
										]
										]
									]
								]
								]
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					9934215881806453,
					[
					[
						150,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						7471092606560308
						,[
						[
							10,
							2
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"repeat"
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						1713602035643649,
						[
						[
							150,
							cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
							null,
							0,
							false,
							false,
							false,
							4065974541353257
							,[
							[
								10,
								1
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									2,
									"L1Scrolling"
								]
							]
							]
						]
						],
						[
						[
							150,
							cr.plugins_.Sprite.prototype.acts.SetX,
							null,
							1051531968265302
							,[
							[
								0,
								[
									4,
									[
										20,
										150,
										cr.plugins_.Sprite.prototype.exps.X,
										false,
										null
									]
									,[
										6,
										[
											20,
											150,
											cr.plugins_.Sprite.prototype.exps.Width,
											false,
											null
										]
										,[
											0,
											2
										]
									]
								]
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					6902627822519867,
					[
					[
						150,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						1652970016258111
						,[
						[
							10,
							2
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"singleObject"
							]
						]
						]
					]
					],
					[
					[
						150,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						2616721497656448
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				4729438066249954,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					3513597130387578
					,[
					[
						1,
						[
							2,
							"createD1W1"
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					2409562432008163
					,[
					[
						1,
						[
							2,
							"createBlade"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									324
								]
							]
,
							[
								7,
								[
									0,
									116
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					6558280871273624
					,[
					[
						1,
						[
							2,
							"createBlood"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									725
								]
							]
,
							[
								7,
								[
									0,
									500
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					6878069912530097
					,[
					[
						1,
						[
							2,
							"createBlood"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1589
								]
							]
,
							[
								7,
								[
									0,
									500
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					4960066300326726
					,[
					[
						1,
						[
							2,
							"createBarricade"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									2021
								]
							]
,
							[
								7,
								[
									0,
									598
								]
							]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				3326637936636049,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					7301449358517614
					,[
					[
						1,
						[
							2,
							"createD1W2"
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					8049743795894281
					,[
					[
						1,
						[
							2,
							"createBlood"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									611
								]
							]
,
							[
								7,
								[
									0,
									518
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					4750462899035297
					,[
					[
						1,
						[
							2,
							"createBlood"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1938
								]
							]
,
							[
								7,
								[
									0,
									329
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					6970027197214833
					,[
					[
						1,
						[
							2,
							"createFence"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1280
								]
							]
,
							[
								7,
								[
									0,
									596
								]
							]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				1072546225160559,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					5540212029986457
					,[
					[
						1,
						[
							2,
							"createD1W3"
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					4494223615449058
					,[
					[
						1,
						[
							2,
							"createBlood"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									775
								]
							]
,
							[
								7,
								[
									0,
									318
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					7148187019848526
					,[
					[
						1,
						[
							2,
							"createBlood"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1945
								]
							]
,
							[
								7,
								[
									0,
									336
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					697796291189252
					,[
					[
						1,
						[
							2,
							"createChainhook"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									400
								]
							]
,
							[
								7,
								[
									0,
									-28
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					6793819183368467
					,[
					[
						1,
						[
							2,
							"createFence"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1280
								]
							]
,
							[
								7,
								[
									0,
									596
								]
							]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				1391756779580128,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					5926324136715341
					,[
					[
						1,
						[
							2,
							"createD1W4"
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					3996631699699323
					,[
					[
						1,
						[
							2,
							"createBlood"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									542
								]
							]
,
							[
								7,
								[
									0,
									516
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					8604753555595912
					,[
					[
						1,
						[
							2,
							"createBlood"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1990
								]
							]
,
							[
								7,
								[
									0,
									516
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					5430236108400382
					,[
					[
						1,
						[
							2,
							"createBladeGround"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1144
								]
							]
,
							[
								7,
								[
									0,
									613
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					365806596807927
					,[
					[
						1,
						[
							2,
							"create50plus"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									988
								]
							]
,
							[
								7,
								[
									0,
									479
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					3427178344561688
					,[
					[
						1,
						[
							2,
							"create50plus"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1426
								]
							]
,
							[
								7,
								[
									0,
									479
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					5584340938736032
					,[
					[
						1,
						[
							2,
							"createBloodDrop"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1240
								]
							]
,
							[
								7,
								[
									0,
									290
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					4090743476604172
					,[
					[
						1,
						[
							2,
							"createBloodDrop"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1240
								]
							]
,
							[
								7,
								[
									0,
									220
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					8203719194060721
					,[
					[
						1,
						[
							2,
							"createBloodDrop"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1240
								]
							]
,
							[
								7,
								[
									0,
									151
								]
							]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				6969734281484613,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					1708851407533887
					,[
					[
						1,
						[
							2,
							"createD1W5"
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					1801239508955938
					,[
					[
						1,
						[
							2,
							"createBlood"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									794
								]
							]
,
							[
								7,
								[
									0,
									423
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					2806917747186643
					,[
					[
						1,
						[
							2,
							"createBlood"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1970
								]
							]
,
							[
								7,
								[
									0,
									531
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					3848119051919375
					,[
					[
						1,
						[
							2,
							"createFence"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									769
								]
							]
,
							[
								7,
								[
									0,
									597
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					2422848053658796
					,[
					[
						1,
						[
							2,
							"createPlaster"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									940
								]
							]
,
							[
								7,
								[
									0,
									546
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					2054958898276296
					,[
					[
						1,
						[
							2,
							"create50plus"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									9
								]
							]
,
							[
								7,
								[
									0,
									169
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					6690941542886782
					,[
					[
						1,
						[
							2,
							"createRopehook"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1977
								]
							]
,
							[
								7,
								[
									0,
									-31
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					5694512499914629
					,[
					[
						1,
						[
							2,
							"createBloodDrop"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1818
								]
							]
,
							[
								7,
								[
									0,
									396
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					1279861504008722
					,[
					[
						1,
						[
							2,
							"createBloodDrop"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1926
								]
							]
,
							[
								7,
								[
									0,
									269
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					3190323755347541
					,[
					[
						1,
						[
							2,
							"createBloodDrop"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									2072
								]
							]
,
							[
								7,
								[
									0,
									269
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					7021411659415621
					,[
					[
						1,
						[
							2,
							"createBloodDrop"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									2179
								]
							]
,
							[
								7,
								[
									0,
									396
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					6536597044897947
					,[
					[
						1,
						[
							2,
							"create100plus"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									2048
								]
							]
,
							[
								7,
								[
									0,
									396
								]
							]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				2525614726137253,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					1405633207124744
					,[
					[
						1,
						[
							2,
							"createD1W6"
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					7385554055663815
					,[
					[
						1,
						[
							2,
							"createBlood"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									563
								]
							]
,
							[
								7,
								[
									0,
									271
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					4565302176584081
					,[
					[
						1,
						[
							2,
							"createBlood"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									2212
								]
							]
,
							[
								7,
								[
									0,
									531
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					7111493425614059
					,[
					[
						1,
						[
							2,
							"createBlade"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1181
								]
							]
,
							[
								7,
								[
									0,
									74
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					4903218478596434
					,[
					[
						1,
						[
							2,
							"createBucket"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1413
								]
							]
,
							[
								7,
								[
									0,
									263
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					8482707502681555
					,[
					[
						1,
						[
							2,
							"createTimerShort"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1097
								]
							]
,
							[
								7,
								[
									0,
									268
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					1647010073652838
					,[
					[
						1,
						[
							2,
							"create50plus"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1828
								]
							]
,
							[
								7,
								[
									0,
									532
								]
							]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				8655092549568834,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					8304121625450167
					,[
					[
						1,
						[
							2,
							"createD1WX"
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					5707197015721061
					,[
					[
						1,
						[
							2,
							"createBladeGround"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									0
								]
							]
,
							[
								7,
								[
									0,
									603
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					3003143285060875
					,[
					[
						1,
						[
							2,
							"createBearTrap"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									2000
								]
							]
,
							[
								7,
								[
									0,
									607
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					9021627292947907
					,[
					[
						1,
						[
							2,
							"createCampFire"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									488
								]
							]
,
							[
								7,
								[
									0,
									515
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					2226703305339095
					,[
					[
						1,
						[
							2,
							"createEFence"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1506
								]
							]
,
							[
								7,
								[
									0,
									597
								]
							]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				5952440944989843,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					4056434510887296
					,[
					[
						1,
						[
							2,
							"createD2W1"
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					3263243229912549
					,[
					[
						1,
						[
							2,
							"createFence"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									431
								]
							]
,
							[
								7,
								[
									0,
									596
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					7904621621221436
					,[
					[
						1,
						[
							2,
							"createBlood"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									630
								]
							]
,
							[
								7,
								[
									0,
									415
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					3953724589611735
					,[
					[
						1,
						[
							2,
							"createRopehook"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									863
								]
							]
,
							[
								7,
								[
									0,
									6
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					4133351060251664
					,[
					[
						1,
						[
							2,
							"createBarricade"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1411
								]
							]
,
							[
								7,
								[
									0,
									598
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					3777108330465985
					,[
					[
						1,
						[
							2,
							"createBlade"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									2018
								]
							]
,
							[
								7,
								[
									0,
									14
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					3985692991469701
					,[
					[
						1,
						[
							2,
							"createBloodDrop"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1485
								]
							]
,
							[
								7,
								[
									0,
									218
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					9486054759245698
					,[
					[
						1,
						[
							2,
							"createBloodDrop"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1669
								]
							]
,
							[
								7,
								[
									0,
									312
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					235981731021774
					,[
					[
						1,
						[
							2,
							"createShield"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1932
								]
							]
,
							[
								7,
								[
									0,
									201
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					2620533416018168
					,[
					[
						1,
						[
							2,
							"createUseableBlood"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1320
								]
							]
,
							[
								7,
								[
									0,
									538
								]
							]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				2323362694488596,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					530479643974609
					,[
					[
						1,
						[
							2,
							"createD2W2"
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					2836035682215227
					,[
					[
						1,
						[
							2,
							"createBlade"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									345
								]
							]
,
							[
								7,
								[
									0,
									26
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					1465096027276388
					,[
					[
						1,
						[
							2,
							"createBlood"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									928
								]
							]
,
							[
								7,
								[
									0,
									423
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					8026351079961384
					,[
					[
						1,
						[
							2,
							"createFence"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									903
								]
							]
,
							[
								7,
								[
									0,
									596
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					5025498399380308
					,[
					[
						1,
						[
							2,
							"createFence"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1621
								]
							]
,
							[
								7,
								[
									0,
									596
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					6342105568930807
					,[
					[
						1,
						[
							2,
							"createBlade"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1972
								]
							]
,
							[
								7,
								[
									0,
									85
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					6493059427728692
					,[
					[
						1,
						[
							2,
							"createKnife"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									4900
								]
							]
,
							[
								7,
								[
									0,
									377
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					2174768112139329
					,[
					[
						1,
						[
							2,
							"createTimerLong"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									388
								]
							]
,
							[
								7,
								[
									0,
									556
								]
							]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				5249848068484965,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					876477558421651
					,[
					[
						1,
						[
							2,
							"createD2W3"
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					264047074454459
					,[
					[
						1,
						[
							2,
							"createBlood"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									524
								]
							]
,
							[
								7,
								[
									0,
									426
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					7950434322083544
					,[
					[
						1,
						[
							2,
							"createChainhook"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1042
								]
							]
,
							[
								7,
								[
									0,
									-65
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					6772880731280909
					,[
					[
						1,
						[
							2,
							"createKnife"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1270
								]
							]
,
							[
								7,
								[
									0,
									244
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					7832097688451447
					,[
					[
						1,
						[
							2,
							"createBlood"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1589
								]
							]
,
							[
								7,
								[
									0,
									256
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					3411025915159401
					,[
					[
						1,
						[
							2,
							"createKnife"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									2360
								]
							]
,
							[
								7,
								[
									0,
									462
								]
							]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				9288072365524842,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					5520924428665405
					,[
					[
						1,
						[
							2,
							"createD2W4"
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					3479278079341344
					,[
					[
						1,
						[
							2,
							"createBearTrap"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									268
								]
							]
,
							[
								7,
								[
									0,
									614
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					1181197216252183
					,[
					[
						1,
						[
							2,
							"createBearTrap"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1719
								]
							]
,
							[
								7,
								[
									0,
									612
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					1513543565194013
					,[
					[
						1,
						[
							2,
							"createChainhook"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									764
								]
							]
,
							[
								7,
								[
									0,
									-31
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					6678137854138672
					,[
					[
						1,
						[
							2,
							"createChainhook"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									2150
								]
							]
,
							[
								7,
								[
									0,
									-29
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					7584155721408191
					,[
					[
						1,
						[
							2,
							"createBlood"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									745
								]
							]
,
							[
								7,
								[
									0,
									518
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					7190918093117847
					,[
					[
						1,
						[
							2,
							"createEFence"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1076
								]
							]
,
							[
								7,
								[
									0,
									599
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					5091485962511087
					,[
					[
						1,
						[
							2,
							"create100plus"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1265
								]
							]
,
							[
								7,
								[
									0,
									440
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					9516830128315011
					,[
					[
						1,
						[
							2,
							"create50plus"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1569
								]
							]
,
							[
								7,
								[
									0,
									557
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					8100105628854751
					,[
					[
						1,
						[
							2,
							"createBloodDrop"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1627
								]
							]
,
							[
								7,
								[
									0,
									319
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					7883686537622429
					,[
					[
						1,
						[
							2,
							"createBloodDrop"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1842
								]
							]
,
							[
								7,
								[
									0,
									386
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					9559835411169737
					,[
					[
						1,
						[
							2,
							"createBloodDrop"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									2056
								]
							]
,
							[
								7,
								[
									0,
									523
								]
							]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				2086410821208211,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					5648307990456102
					,[
					[
						1,
						[
							2,
							"createD2W5"
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					2560040455426088
					,[
					[
						1,
						[
							2,
							"createFence"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									274
								]
							]
,
							[
								7,
								[
									0,
									601
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					1049951426936091
					,[
					[
						1,
						[
							2,
							"createBlade"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									547
								]
							]
,
							[
								7,
								[
									0,
									72
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					7697024603146101
					,[
					[
						1,
						[
							2,
							"createBlade"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1320
								]
							]
,
							[
								7,
								[
									0,
									66
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					2862084325093498
					,[
					[
						1,
						[
							2,
							"createBarricade"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1006
								]
							]
,
							[
								7,
								[
									0,
									604
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					8157234412939068
					,[
					[
						1,
						[
							2,
							"createUseableBlood"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									633
								]
							]
,
							[
								7,
								[
									0,
									378
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					2516905590608385
					,[
					[
						1,
						[
							2,
							"createBloodDrop"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									914
								]
							]
,
							[
								7,
								[
									0,
									398
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					20522439110005
					,[
					[
						1,
						[
							2,
							"createBloodDrop"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1029
								]
							]
,
							[
								7,
								[
									0,
									282
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					5824290448401755
					,[
					[
						1,
						[
							2,
							"createBloodDrop"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1133
								]
							]
,
							[
								7,
								[
									0,
									285
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					8680893634632093
					,[
					[
						1,
						[
							2,
							"createBloodDrop"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1238
								]
							]
,
							[
								7,
								[
									0,
									408
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					1073884238735568
					,[
					[
						1,
						[
							2,
							"createBucket"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1078
								]
							]
,
							[
								7,
								[
									0,
									171
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					8180598480575342
					,[
					[
						1,
						[
							2,
							"createEFence"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1664
								]
							]
,
							[
								7,
								[
									0,
									602
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					6257306188850298
					,[
					[
						1,
						[
							2,
							"createBlood"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									2128
								]
							]
,
							[
								7,
								[
									0,
									550
								]
							]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				1040138334932069,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					3569205097332188
					,[
					[
						1,
						[
							2,
							"createD2W6"
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					8299326880611492
					,[
					[
						1,
						[
							2,
							"createBladeGround"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									375
								]
							]
,
							[
								7,
								[
									0,
									607
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					9759223551094083
					,[
					[
						1,
						[
							2,
							"createPlaster"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									654
								]
							]
,
							[
								7,
								[
									0,
									540
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					7333369949543954
					,[
					[
						1,
						[
							2,
							"createRopehook"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									721
								]
							]
,
							[
								7,
								[
									0,
									-186
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					1555916135904973
					,[
					[
						1,
						[
							2,
							"createRopehook"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1419
								]
							]
,
							[
								7,
								[
									0,
									-11
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					1550173271001281
					,[
					[
						1,
						[
							2,
							"createRopehook"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									2218
								]
							]
,
							[
								7,
								[
									0,
									-71
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					9325041365106277
					,[
					[
						1,
						[
							2,
							"createTimerShort"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1149
								]
							]
,
							[
								7,
								[
									0,
									226
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					5935022338259095
					,[
					[
						1,
						[
							2,
							"createBlood"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1544
								]
							]
,
							[
								7,
								[
									0,
									537
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					687586217691488
					,[
					[
						1,
						[
							2,
							"createEFence"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1677
								]
							]
,
							[
								7,
								[
									0,
									604
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					7364360903874379
					,[
					[
						1,
						[
							2,
							"create100plus"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									2259
								]
							]
,
							[
								7,
								[
									0,
									153
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					7209374297938579
					,[
					[
						1,
						[
							2,
							"createBloodDrop"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									2224
								]
							]
,
							[
								7,
								[
									0,
									528
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					5451083009337804
					,[
					[
						1,
						[
							2,
							"createBloodDrop"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									2456
								]
							]
,
							[
								7,
								[
									0,
									532
								]
							]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				1402778324865745,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					5739033135915973
					,[
					[
						1,
						[
							2,
							"createD3W1"
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					1947857587195533
					,[
					[
						1,
						[
							2,
							"createBarricade"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									224
								]
							]
,
							[
								7,
								[
									0,
									598
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					6189229030897363
					,[
					[
						1,
						[
							2,
							"createBlade"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									534
								]
							]
,
							[
								7,
								[
									0,
									50
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					6864994131732809
					,[
					[
						1,
						[
							2,
							"createChainhook"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									960
								]
							]
,
							[
								7,
								[
									0,
									-20
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					2955305179602174
					,[
					[
						1,
						[
							2,
							"createFence"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									935
								]
							]
,
							[
								7,
								[
									0,
									596
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					3387580792749401
					,[
					[
						1,
						[
							2,
							"createBlood"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1208
								]
							]
,
							[
								7,
								[
									0,
									527
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					4859271920841535
					,[
					[
						1,
						[
							2,
							"createFence"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1563
								]
							]
,
							[
								7,
								[
									0,
									596
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					6241215677838872
					,[
					[
						1,
						[
							2,
							"createKnife"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1270
								]
							]
,
							[
								7,
								[
									0,
									200
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					4641468047925317
					,[
					[
						1,
						[
							2,
							"createRopehook"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1953
								]
							]
,
							[
								7,
								[
									0,
									98
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					477544296801878
					,[
					[
						1,
						[
							2,
							"createRopehook"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									2408
								]
							]
,
							[
								7,
								[
									0,
									-57
								]
							]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				2911909733093885,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					4154560645446808
					,[
					[
						1,
						[
							2,
							"createD3W2"
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					4780797055554118
					,[
					[
						1,
						[
							2,
							"createRopehook"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									226
								]
							]
,
							[
								7,
								[
									0,
									98
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					2651001364149229
					,[
					[
						1,
						[
							2,
							"createChainhook"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									532
								]
							]
,
							[
								7,
								[
									0,
									-3
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					950694742558413
					,[
					[
						1,
						[
							2,
							"createChainhook"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									960
								]
							]
,
							[
								7,
								[
									0,
									-20
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					6117020062933517
					,[
					[
						1,
						[
							2,
							"createBlood"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									966
								]
							]
,
							[
								7,
								[
									0,
									228
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					4695502663593325
					,[
					[
						1,
						[
							2,
							"createFence"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									939
								]
							]
,
							[
								7,
								[
									0,
									596
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					8108870292008384
					,[
					[
						1,
						[
							2,
							"createBlade"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1335
								]
							]
,
							[
								7,
								[
									0,
									71
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					5641183630789649
					,[
					[
						1,
						[
							2,
							"createRopehook"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1831
								]
							]
,
							[
								7,
								[
									0,
									47
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					4031175833459492
					,[
					[
						1,
						[
							2,
							"createKnife"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									2517
								]
							]
,
							[
								7,
								[
									0,
									498
								]
							]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				8125867470280551,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					4823349328908013
					,[
					[
						1,
						[
							2,
							"createD3W3"
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					3600274121403315
					,[
					[
						1,
						[
							2,
							"createBlood"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									454
								]
							]
,
							[
								7,
								[
									0,
									543
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					5656511655292391
					,[
					[
						1,
						[
							2,
							"createBarricade"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									729
								]
							]
,
							[
								7,
								[
									0,
									598
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					8698535078029476
					,[
					[
						1,
						[
							2,
							"createBlade"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1293
								]
							]
,
							[
								7,
								[
									0,
									97
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					396546847272203
					,[
					[
						1,
						[
							2,
							"createKnife"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1418
								]
							]
,
							[
								7,
								[
									0,
									540
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					5414298526949461
					,[
					[
						1,
						[
							2,
							"createKnife"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1703
								]
							]
,
							[
								7,
								[
									0,
									429
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					7982989241554977
					,[
					[
						1,
						[
							2,
							"createKnife"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1965
								]
							]
,
							[
								7,
								[
									0,
									293
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					997688090021398
					,[
					[
						1,
						[
							2,
							"createBlood"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1681
								]
							]
,
							[
								7,
								[
									0,
									385
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					3833878538212834
					,[
					[
						1,
						[
							2,
							"createChainhook"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1940
								]
							]
,
							[
								7,
								[
									0,
									5
								]
							]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				8564858929455533,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					912787822684213
					,[
					[
						1,
						[
							2,
							"createD3W4"
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					3947475405713443
					,[
					[
						1,
						[
							2,
							"createBlade"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									714
								]
							]
,
							[
								7,
								[
									0,
									15
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					7690567787063088
					,[
					[
						1,
						[
							2,
							"createBlade"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									2105
								]
							]
,
							[
								7,
								[
									0,
									82
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					6651579799356882
					,[
					[
						1,
						[
							2,
							"createBladeGround"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									347
								]
							]
,
							[
								7,
								[
									0,
									607
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					3267804276304543
					,[
					[
						1,
						[
							2,
							"createBearTrap"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									738
								]
							]
,
							[
								7,
								[
									0,
									610
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					4065456606352849
					,[
					[
						1,
						[
							2,
							"createBloodDrop"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									558
								]
							]
,
							[
								7,
								[
									0,
									271
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					7837532219931284
					,[
					[
						1,
						[
							2,
							"createBloodDrop"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									657
								]
							]
,
							[
								7,
								[
									0,
									398
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					5491699466207558
					,[
					[
						1,
						[
							2,
							"createBloodDrop"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									794
								]
							]
,
							[
								7,
								[
									0,
									464
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					427714426221251
					,[
					[
						1,
						[
							2,
							"createBloodDrop"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									944
								]
							]
,
							[
								7,
								[
									0,
									395
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					5909781420171956
					,[
					[
						1,
						[
							2,
							"createBloodDrop"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1056
								]
							]
,
							[
								7,
								[
									0,
									270
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					3783404521944851
					,[
					[
						1,
						[
							2,
							"createBloodDrop"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1607
								]
							]
,
							[
								7,
								[
									0,
									544
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					6791435877990463
					,[
					[
						1,
						[
							2,
							"createBloodDrop"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1762
								]
							]
,
							[
								7,
								[
									0,
									441
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					1988493854373603
					,[
					[
						1,
						[
							2,
							"createBloodDrop"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									2189
								]
							]
,
							[
								7,
								[
									0,
									410
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					9751972861871197
					,[
					[
						1,
						[
							2,
							"createBloodDrop"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									2342
								]
							]
,
							[
								7,
								[
									0,
									252
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					8713031721391399
					,[
					[
						1,
						[
							2,
							"createBarricade"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1051
								]
							]
,
							[
								7,
								[
									0,
									600
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					8814871945109382
					,[
					[
						1,
						[
							2,
							"createRopehook"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1364
								]
							]
,
							[
								7,
								[
									0,
									-194
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					7307014304008355
					,[
					[
						1,
						[
							2,
							"createRopehook"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1595
								]
							]
,
							[
								7,
								[
									0,
									-30
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					73036831266666
					,[
					[
						1,
						[
							2,
							"createCampFire"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1896
								]
							]
,
							[
								7,
								[
									0,
									519
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					4038191570453153
					,[
					[
						1,
						[
							2,
							"createTimerLong"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1642
								]
							]
,
							[
								7,
								[
									0,
									185
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					5932157180250272
					,[
					[
						1,
						[
							2,
							"createKnife"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									2688
								]
							]
,
							[
								7,
								[
									0,
									299
								]
							]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				5953717864337322,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					8646114744438349
					,[
					[
						1,
						[
							2,
							"createD3W5"
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					4691958457373548
					,[
					[
						1,
						[
							2,
							"createEFence"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									84
								]
							]
,
							[
								7,
								[
									0,
									609
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					4263384038622032
					,[
					[
						1,
						[
							2,
							"createEFence"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1079
								]
							]
,
							[
								7,
								[
									0,
									607
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					9228876650721543
					,[
					[
						1,
						[
							2,
							"createEFence"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									2058
								]
							]
,
							[
								7,
								[
									0,
									601
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					8982838497199858
					,[
					[
						1,
						[
							2,
							"create50plus"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									272
								]
							]
,
							[
								7,
								[
									0,
									441
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					4745905827390698
					,[
					[
						1,
						[
							2,
							"create50plus"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1151
								]
							]
,
							[
								7,
								[
									0,
									353
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					3419159309388142
					,[
					[
						1,
						[
							2,
							"create50plus"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1766
								]
							]
,
							[
								7,
								[
									0,
									324
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					4506454221002771
					,[
					[
						1,
						[
							2,
							"createChainhook"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									575
								]
							]
,
							[
								7,
								[
									0,
									-41
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					7756721698377539
					,[
					[
						1,
						[
							2,
							"createChainhook"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									2224
								]
							]
,
							[
								7,
								[
									0,
									-89
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					9718650209337497
					,[
					[
						1,
						[
							2,
							"createShield"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									960
								]
							]
,
							[
								7,
								[
									0,
									482
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					7179674349280778
					,[
					[
						1,
						[
							2,
							"createBucket"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1598
								]
							]
,
							[
								7,
								[
									0,
									476
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					5718867814125681
					,[
					[
						1,
						[
							2,
							"createUseableBlood"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1949
								]
							]
,
							[
								7,
								[
									0,
									185
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					5849739884644174
					,[
					[
						1,
						[
							2,
							"createRopehook"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									915
								]
							]
,
							[
								7,
								[
									0,
									-228
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					2645741890002317
					,[
					[
						1,
						[
							2,
							"createRopehook"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1277
								]
							]
,
							[
								7,
								[
									0,
									-55
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					316024344027689
					,[
					[
						1,
						[
							2,
							"createBearTrap"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									720
								]
							]
,
							[
								7,
								[
									0,
									604
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					3727337583456457
					,[
					[
						1,
						[
							2,
							"createBearTrap"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1739
								]
							]
,
							[
								7,
								[
									0,
									610
								]
							]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				6465029869177212,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					7199760588460895
					,[
					[
						1,
						[
							2,
							"createD3W6"
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					4852502033996836
					,[
					[
						1,
						[
							2,
							"createCampfire"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									318
								]
							]
,
							[
								7,
								[
									0,
									520
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					8646384952610276
					,[
					[
						1,
						[
							2,
							"createBlade"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									227
								]
							]
,
							[
								7,
								[
									0,
									-93
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					1050715453863815
					,[
					[
						1,
						[
							2,
							"createBloodDrop"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									321
								]
							]
,
							[
								7,
								[
									0,
									279
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					9164495244844421
					,[
					[
						1,
						[
							2,
							"createBloodDrop"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									489
								]
							]
,
							[
								7,
								[
									0,
									370
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					4156343314629784
					,[
					[
						1,
						[
							2,
							"createBloodDrop"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									968
								]
							]
,
							[
								7,
								[
									0,
									364
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					6228055627164592
					,[
					[
						1,
						[
							2,
							"createBloodDrop"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1096
								]
							]
,
							[
								7,
								[
									0,
									267
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					6029586352695937
					,[
					[
						1,
						[
							2,
							"createChainhook"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									786
								]
							]
,
							[
								7,
								[
									0,
									-74
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					2424945191158275
					,[
					[
						1,
						[
							2,
							"createChainhook"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									2215
								]
							]
,
							[
								7,
								[
									0,
									-88
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					4560627727085429
					,[
					[
						1,
						[
							2,
							"createRopehook"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1534
								]
							]
,
							[
								7,
								[
									0,
									-132
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					3370693195946479
					,[
					[
						1,
						[
							2,
							"createEFence"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									590
								]
							]
,
							[
								7,
								[
									0,
									608
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					2689717152874616
					,[
					[
						1,
						[
							2,
							"createEFence"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									2033
								]
							]
,
							[
								7,
								[
									0,
									601
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					9840263644755587
					,[
					[
						1,
						[
							2,
							"create100plus"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									499
								]
							]
,
							[
								7,
								[
									0,
									518
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					8417088477804179
					,[
					[
						1,
						[
							2,
							"create50plus"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1235
								]
							]
,
							[
								7,
								[
									0,
									210
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					6392643363337882
					,[
					[
						1,
						[
							2,
							"create50plus"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1954
								]
							]
,
							[
								7,
								[
									0,
									492
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					9476490182345398
					,[
					[
						1,
						[
							2,
							"createBlood"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									1816
								]
							]
,
							[
								7,
								[
									0,
									430
								]
							]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					3587406449320071
					,[
					[
						1,
						[
							2,
							"createTimerLong"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									2281
								]
							]
,
							[
								7,
								[
									0,
									303
								]
							]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				8017277158354502,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					2440233653302297
					,[
					[
						1,
						[
							2,
							"createBlade"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					7255541863801026,
					[
					[
						-1,
						cr.system_object.prototype.cnds.IsMobile,
						null,
						0,
						false,
						true,
						false,
						9139286134341481
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						9776562581280802
						,[
						[
							4,
							100
						]
,						[
							5,
							[
								0,
								6
							]
						]
,						[
							0,
							[
								6,
								[
									4,
									[
										6,
										[
											23,
											"myScreenWidth"
										]
										,[
											0,
											2
										]
									]
									,[
										20,
										140,
										cr.plugins_.Function.prototype.exps.Param,
										false,
										null
										,[
[
											0,
											0
										]
										]
									]
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
,						[
							0,
							[
								6,
								[
									20,
									140,
									cr.plugins_.Function.prototype.exps.Param,
									false,
									null
									,[
[
										0,
										1
									]
									]
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						]
					]
,					[
						102,
						cr.plugins_.Sprite.prototype.acts.SetPos,
						null,
						1706284288656229
						,[
						[
							0,
							[
								6,
								[
									4,
									[
										4,
										[
											6,
											[
												23,
												"myScreenWidth"
											]
											,[
												0,
												2
											]
										]
										,[
											20,
											140,
											cr.plugins_.Function.prototype.exps.Param,
											false,
											null
											,[
[
												0,
												0
											]
											]
										]
									]
									,[
										0,
										96
									]
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
,						[
							0,
							[
								6,
								[
									4,
									[
										20,
										140,
										cr.plugins_.Function.prototype.exps.Param,
										false,
										null
										,[
[
											0,
											1
										]
										]
									]
									,[
										0,
										171
									]
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						]
					]
,					[
						102,
						cr.plugins_.Sprite.prototype.acts.MoveToBottom,
						null,
						210226492593417
					]
,					[
						101,
						cr.plugins_.Sprite.prototype.acts.SetPos,
						null,
						2475431802894492
						,[
						[
							0,
							[
								6,
								[
									4,
									[
										4,
										[
											6,
											[
												23,
												"myScreenWidth"
											]
											,[
												0,
												2
											]
										]
										,[
											20,
											140,
											cr.plugins_.Function.prototype.exps.Param,
											false,
											null
											,[
[
												0,
												0
											]
											]
										]
									]
									,[
										0,
										105
									]
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
,						[
							0,
							[
								6,
								[
									4,
									[
										20,
										140,
										cr.plugins_.Function.prototype.exps.Param,
										false,
										null
										,[
[
											0,
											1
										]
										]
									]
									,[
										0,
										58
									]
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						]
					]
,					[
						101,
						cr.plugins_.Sprite.prototype.acts.MoveToBottom,
						null,
						2435251537650283
					]
					]
				]
,				[
					0,
					null,
					false,
					1378692394676356,
					[
					[
						-1,
						cr.system_object.prototype.cnds.IsMobile,
						null,
						0,
						false,
						false,
						false,
						402139119554953
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						6493594346235705
						,[
						[
							4,
							103
						]
,						[
							5,
							[
								0,
								6
							]
						]
,						[
							0,
							[
								6,
								[
									4,
									[
										6,
										[
											23,
											"myScreenWidth"
										]
										,[
											0,
											2
										]
									]
									,[
										20,
										140,
										cr.plugins_.Function.prototype.exps.Param,
										false,
										null
										,[
[
											0,
											0
										]
										]
									]
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
,						[
							0,
							[
								6,
								[
									20,
									140,
									cr.plugins_.Function.prototype.exps.Param,
									false,
									null
									,[
[
										0,
										1
									]
									]
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				6364576257460663,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					57030936207055
					,[
					[
						1,
						[
							2,
							"createBladeGround"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					8704341686371993,
					[
					[
						-1,
						cr.system_object.prototype.cnds.IsMobile,
						null,
						0,
						false,
						true,
						false,
						9032699933723027
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						7175272976463812
						,[
						[
							4,
							105
						]
,						[
							5,
							[
								0,
								6
							]
						]
,						[
							0,
							[
								6,
								[
									4,
									[
										6,
										[
											23,
											"myScreenWidth"
										]
										,[
											0,
											2
										]
									]
									,[
										20,
										140,
										cr.plugins_.Function.prototype.exps.Param,
										false,
										null
										,[
[
											0,
											0
										]
										]
									]
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
,						[
							0,
							[
								6,
								[
									20,
									140,
									cr.plugins_.Function.prototype.exps.Param,
									false,
									null
									,[
[
										0,
										1
									]
									]
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						]
					]
,					[
						104,
						cr.plugins_.Sprite.prototype.acts.SetPos,
						null,
						31696424317911
						,[
						[
							0,
							[
								6,
								[
									4,
									[
										4,
										[
											6,
											[
												23,
												"myScreenWidth"
											]
											,[
												0,
												2
											]
										]
										,[
											20,
											140,
											cr.plugins_.Function.prototype.exps.Param,
											false,
											null
											,[
[
												0,
												0
											]
											]
										]
									]
									,[
										0,
										103
									]
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
,						[
							0,
							[
								6,
								[
									5,
									[
										20,
										140,
										cr.plugins_.Function.prototype.exps.Param,
										false,
										null
										,[
[
											0,
											1
										]
										]
									]
									,[
										0,
										177
									]
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						]
					]
,					[
						104,
						cr.plugins_.Sprite.prototype.acts.MoveToBottom,
						null,
						4448558082822264
					]
,					[
						107,
						cr.plugins_.Sprite.prototype.acts.SetPos,
						null,
						6405739098139096
						,[
						[
							0,
							[
								6,
								[
									4,
									[
										4,
										[
											6,
											[
												23,
												"myScreenWidth"
											]
											,[
												0,
												2
											]
										]
										,[
											20,
											140,
											cr.plugins_.Function.prototype.exps.Param,
											false,
											null
											,[
[
												0,
												0
											]
											]
										]
									]
									,[
										0,
										104
									]
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
,						[
							0,
							[
								6,
								[
									5,
									[
										20,
										140,
										cr.plugins_.Function.prototype.exps.Param,
										false,
										null
										,[
[
											0,
											1
										]
										]
									]
									,[
										0,
										52
									]
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						]
					]
,					[
						107,
						cr.plugins_.Sprite.prototype.acts.MoveToBottom,
						null,
						457745568962246
					]
					]
				]
,				[
					0,
					null,
					false,
					5055327721453859,
					[
					[
						-1,
						cr.system_object.prototype.cnds.IsMobile,
						null,
						0,
						false,
						false,
						false,
						892846884044276
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						4331903462142659
						,[
						[
							4,
							106
						]
,						[
							5,
							[
								0,
								6
							]
						]
,						[
							0,
							[
								6,
								[
									4,
									[
										6,
										[
											23,
											"myScreenWidth"
										]
										,[
											0,
											2
										]
									]
									,[
										20,
										140,
										cr.plugins_.Function.prototype.exps.Param,
										false,
										null
										,[
[
											0,
											0
										]
										]
									]
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
,						[
							0,
							[
								6,
								[
									20,
									140,
									cr.plugins_.Function.prototype.exps.Param,
									false,
									null
									,[
[
										0,
										1
									]
									]
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				1261184124391918,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					713042573349975
					,[
					[
						1,
						[
							2,
							"createBearTrap"
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					2378489859476057
					,[
					[
						4,
						113
					]
,					[
						5,
						[
							0,
							6
						]
					]
,					[
						0,
						[
							6,
							[
								4,
								[
									6,
									[
										23,
										"myScreenWidth"
									]
									,[
										0,
										2
									]
								]
								,[
									20,
									140,
									cr.plugins_.Function.prototype.exps.Param,
									false,
									null
									,[
[
										0,
										0
									]
									]
								]
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							6,
							[
								20,
								140,
								cr.plugins_.Function.prototype.exps.Param,
								false,
								null
								,[
[
									0,
									1
								]
								]
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				6957009546175642,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					6374731774855436
					,[
					[
						1,
						[
							2,
							"createCampFire"
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					6692348532289163
					,[
					[
						4,
						114
					]
,					[
						5,
						[
							0,
							6
						]
					]
,					[
						0,
						[
							6,
							[
								4,
								[
									6,
									[
										23,
										"myScreenWidth"
									]
									,[
										0,
										2
									]
								]
								,[
									20,
									140,
									cr.plugins_.Function.prototype.exps.Param,
									false,
									null
									,[
[
										0,
										0
									]
									]
								]
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							6,
							[
								20,
								140,
								cr.plugins_.Function.prototype.exps.Param,
								false,
								null
								,[
[
									0,
									1
								]
								]
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				2074016026798621,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					8810407448839449
					,[
					[
						1,
						[
							2,
							"createEFence"
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					1375557958329973
					,[
					[
						4,
						115
					]
,					[
						5,
						[
							0,
							6
						]
					]
,					[
						0,
						[
							6,
							[
								4,
								[
									6,
									[
										23,
										"myScreenWidth"
									]
									,[
										0,
										2
									]
								]
								,[
									20,
									140,
									cr.plugins_.Function.prototype.exps.Param,
									false,
									null
									,[
[
										0,
										0
									]
									]
								]
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							6,
							[
								20,
								140,
								cr.plugins_.Function.prototype.exps.Param,
								false,
								null
								,[
[
									0,
									1
								]
								]
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
					]
				]
				]
			]
,			[
				1,
				"randomCheckValue",
				0,
				1,
false,false,7382371054557216
			]
,			[
				0,
				null,
				false,
				336320166945442,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					7221321571864424
					,[
					[
						1,
						[
							2,
							"create100plus"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					1440755613610332
					,[
					[
						11,
						"plus100Enabled"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					9582757427850195
					,[
					[
						4,
						120
					]
,					[
						5,
						[
							0,
							6
						]
					]
,					[
						0,
						[
							6,
							[
								4,
								[
									6,
									[
										23,
										"myScreenWidth"
									]
									,[
										0,
										2
									]
								]
								,[
									20,
									140,
									cr.plugins_.Function.prototype.exps.Param,
									false,
									null
									,[
[
										0,
										0
									]
									]
								]
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							6,
							[
								20,
								140,
								cr.plugins_.Function.prototype.exps.Param,
								false,
								null
								,[
[
									0,
									1
								]
								]
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				8379118804572005,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					1232072234178512
					,[
					[
						1,
						[
							2,
							"create50plus"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					5241564070588308
					,[
					[
						11,
						"plus50Enabled"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					2921898949612085
					,[
					[
						4,
						119
					]
,					[
						5,
						[
							0,
							6
						]
					]
,					[
						0,
						[
							6,
							[
								4,
								[
									6,
									[
										23,
										"myScreenWidth"
									]
									,[
										0,
										2
									]
								]
								,[
									20,
									140,
									cr.plugins_.Function.prototype.exps.Param,
									false,
									null
									,[
[
										0,
										0
									]
									]
								]
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							6,
							[
								20,
								140,
								cr.plugins_.Function.prototype.exps.Param,
								false,
								null
								,[
[
									0,
									1
								]
								]
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				2174935019369384,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					9468969638894123
					,[
					[
						1,
						[
							2,
							"createTimerShort"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					6958819993738368
					,[
					[
						11,
						"multiShortEnabled"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					5294311195970237
					,[
					[
						11,
						"randomCheckValue"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							20,
							140,
							cr.plugins_.Function.prototype.exps.Call,
							false,
							null
							,[
[
								2,
								"makeRandomDecision"
							]
,[
								0,
								2
							]
							]
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					8883403785425672
					,[
					[
						4,
						121
					]
,					[
						5,
						[
							0,
							6
						]
					]
,					[
						0,
						[
							6,
							[
								4,
								[
									6,
									[
										23,
										"myScreenWidth"
									]
									,[
										0,
										2
									]
								]
								,[
									20,
									140,
									cr.plugins_.Function.prototype.exps.Param,
									false,
									null
									,[
[
										0,
										0
									]
									]
								]
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							6,
							[
								20,
								140,
								cr.plugins_.Function.prototype.exps.Param,
								false,
								null
								,[
[
									0,
									1
								]
								]
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				2842786821762817,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					7045752545068532
					,[
					[
						1,
						[
							2,
							"createTimerLong"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					4146112518897981
					,[
					[
						11,
						"multiLongEnabled"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					9476793378037689
					,[
					[
						4,
						122
					]
,					[
						5,
						[
							0,
							6
						]
					]
,					[
						0,
						[
							6,
							[
								4,
								[
									6,
									[
										23,
										"myScreenWidth"
									]
									,[
										0,
										2
									]
								]
								,[
									20,
									140,
									cr.plugins_.Function.prototype.exps.Param,
									false,
									null
									,[
[
										0,
										0
									]
									]
								]
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							6,
							[
								20,
								140,
								cr.plugins_.Function.prototype.exps.Param,
								false,
								null
								,[
[
									0,
									1
								]
								]
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				4669124956461948,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					7632725285563169
					,[
					[
						1,
						[
							2,
							"createBlood"
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					606782491553119
					,[
					[
						4,
						116
					]
,					[
						5,
						[
							0,
							6
						]
					]
,					[
						0,
						[
							6,
							[
								4,
								[
									6,
									[
										23,
										"myScreenWidth"
									]
									,[
										0,
										2
									]
								]
								,[
									20,
									140,
									cr.plugins_.Function.prototype.exps.Param,
									false,
									null
									,[
[
										0,
										0
									]
									]
								]
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							6,
							[
								20,
								140,
								cr.plugins_.Function.prototype.exps.Param,
								false,
								null
								,[
[
									0,
									1
								]
								]
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				1379307844947168,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					5409629087984169
					,[
					[
						1,
						[
							2,
							"createBloodDrop"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					3577750925233349
					,[
					[
						11,
						"bloodDropEnabled"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					1383419784627104
					,[
					[
						4,
						125
					]
,					[
						5,
						[
							0,
							6
						]
					]
,					[
						0,
						[
							6,
							[
								4,
								[
									6,
									[
										23,
										"myScreenWidth"
									]
									,[
										0,
										2
									]
								]
								,[
									20,
									140,
									cr.plugins_.Function.prototype.exps.Param,
									false,
									null
									,[
[
										0,
										0
									]
									]
								]
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							6,
							[
								20,
								140,
								cr.plugins_.Function.prototype.exps.Param,
								false,
								null
								,[
[
									0,
									1
								]
								]
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				457699921471529,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					866993736788556
					,[
					[
						1,
						[
							2,
							"createUseableBlood"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					2936813272317855
					,[
					[
						11,
						"useableBloodEnabled"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					328014504568287
					,[
					[
						11,
						"randomCheckValue"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							20,
							140,
							cr.plugins_.Function.prototype.exps.Call,
							false,
							null
							,[
[
								2,
								"makeRandomDecision"
							]
,[
								0,
								2
							]
							]
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					3638092708188425
					,[
					[
						4,
						123
					]
,					[
						5,
						[
							0,
							6
						]
					]
,					[
						0,
						[
							6,
							[
								4,
								[
									6,
									[
										23,
										"myScreenWidth"
									]
									,[
										0,
										2
									]
								]
								,[
									20,
									140,
									cr.plugins_.Function.prototype.exps.Param,
									false,
									null
									,[
[
										0,
										0
									]
									]
								]
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							6,
							[
								20,
								140,
								cr.plugins_.Function.prototype.exps.Param,
								false,
								null
								,[
[
									0,
									1
								]
								]
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				2721899849342345,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					8200136406441871
					,[
					[
						1,
						[
							2,
							"createShield"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					1404354450716763
					,[
					[
						11,
						"shieldEnabled"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					8423329080255414
					,[
					[
						11,
						"randomCheckValue"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							20,
							140,
							cr.plugins_.Function.prototype.exps.Call,
							false,
							null
							,[
[
								2,
								"makeRandomDecision"
							]
,[
								0,
								2
							]
							]
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					6867134624652435
					,[
					[
						4,
						124
					]
,					[
						5,
						[
							0,
							6
						]
					]
,					[
						0,
						[
							6,
							[
								4,
								[
									6,
									[
										23,
										"myScreenWidth"
									]
									,[
										0,
										2
									]
								]
								,[
									20,
									140,
									cr.plugins_.Function.prototype.exps.Param,
									false,
									null
									,[
[
										0,
										0
									]
									]
								]
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							6,
							[
								20,
								140,
								cr.plugins_.Function.prototype.exps.Param,
								false,
								null
								,[
[
									0,
									1
								]
								]
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				7046911929947224,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					3695370239686721
					,[
					[
						1,
						[
							2,
							"createPlaster"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					6469353692193615
					,[
					[
						11,
						"plasterEnabled"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					4336860148575423
					,[
					[
						11,
						"randomCheckValue"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							20,
							140,
							cr.plugins_.Function.prototype.exps.Call,
							false,
							null
							,[
[
								2,
								"makeRandomDecision"
							]
,[
								0,
								2
							]
							]
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					1779901423821201
					,[
					[
						4,
						118
					]
,					[
						5,
						[
							0,
							6
						]
					]
,					[
						0,
						[
							6,
							[
								4,
								[
									6,
									[
										23,
										"myScreenWidth"
									]
									,[
										0,
										2
									]
								]
								,[
									20,
									140,
									cr.plugins_.Function.prototype.exps.Param,
									false,
									null
									,[
[
										0,
										0
									]
									]
								]
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							6,
							[
								20,
								140,
								cr.plugins_.Function.prototype.exps.Param,
								false,
								null
								,[
[
									0,
									1
								]
								]
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				3908526871087504,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					9161650057308895
					,[
					[
						1,
						[
							2,
							"createBucket"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					6532879828977341
					,[
					[
						11,
						"bucketEnabled"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					7738371612045694
					,[
					[
						4,
						117
					]
,					[
						5,
						[
							0,
							6
						]
					]
,					[
						0,
						[
							6,
							[
								4,
								[
									6,
									[
										23,
										"myScreenWidth"
									]
									,[
										0,
										2
									]
								]
								,[
									20,
									140,
									cr.plugins_.Function.prototype.exps.Param,
									false,
									null
									,[
[
										0,
										0
									]
									]
								]
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							6,
							[
								20,
								140,
								cr.plugins_.Function.prototype.exps.Param,
								false,
								null
								,[
[
									0,
									1
								]
								]
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				3817774674185732,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					1480641812287538
					,[
					[
						1,
						[
							2,
							"createBarricade"
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					5062657574396236
					,[
					[
						4,
						109
					]
,					[
						5,
						[
							0,
							6
						]
					]
,					[
						0,
						[
							6,
							[
								4,
								[
									6,
									[
										23,
										"myScreenWidth"
									]
									,[
										0,
										2
									]
								]
								,[
									20,
									140,
									cr.plugins_.Function.prototype.exps.Param,
									false,
									null
									,[
[
										0,
										0
									]
									]
								]
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							6,
							[
								20,
								140,
								cr.plugins_.Function.prototype.exps.Param,
								false,
								null
								,[
[
									0,
									1
								]
								]
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				6953966819328699,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					9976456924796058
					,[
					[
						1,
						[
							2,
							"createFence"
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					6572320848197644
					,[
					[
						4,
						110
					]
,					[
						5,
						[
							0,
							6
						]
					]
,					[
						0,
						[
							6,
							[
								4,
								[
									6,
									[
										23,
										"myScreenWidth"
									]
									,[
										0,
										2
									]
								]
								,[
									20,
									140,
									cr.plugins_.Function.prototype.exps.Param,
									false,
									null
									,[
[
										0,
										0
									]
									]
								]
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							6,
							[
								20,
								140,
								cr.plugins_.Function.prototype.exps.Param,
								false,
								null
								,[
[
									0,
									1
								]
								]
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				4486902902636911,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					4217300318623622
					,[
					[
						1,
						[
							2,
							"createChainhook"
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					8109889780544379
					,[
					[
						4,
						111
					]
,					[
						5,
						[
							0,
							6
						]
					]
,					[
						0,
						[
							6,
							[
								4,
								[
									6,
									[
										23,
										"myScreenWidth"
									]
									,[
										0,
										2
									]
								]
								,[
									20,
									140,
									cr.plugins_.Function.prototype.exps.Param,
									false,
									null
									,[
[
										0,
										0
									]
									]
								]
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							6,
							[
								20,
								140,
								cr.plugins_.Function.prototype.exps.Param,
								false,
								null
								,[
[
									0,
									1
								]
								]
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				9499266892230747,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					559122671159957
					,[
					[
						1,
						[
							2,
							"createRopehook"
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					4849147431411992
					,[
					[
						4,
						112
					]
,					[
						5,
						[
							0,
							6
						]
					]
,					[
						0,
						[
							6,
							[
								4,
								[
									6,
									[
										23,
										"myScreenWidth"
									]
									,[
										0,
										2
									]
								]
								,[
									20,
									140,
									cr.plugins_.Function.prototype.exps.Param,
									false,
									null
									,[
[
										0,
										0
									]
									]
								]
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							6,
							[
								20,
								140,
								cr.plugins_.Function.prototype.exps.Param,
								false,
								null
								,[
[
									0,
									1
								]
								]
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				7468272180648439,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					5950503468031582
					,[
					[
						1,
						[
							2,
							"createKnife"
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					5730537938487657
					,[
					[
						4,
						108
					]
,					[
						5,
						[
							0,
							6
						]
					]
,					[
						0,
						[
							6,
							[
								4,
								[
									6,
									[
										23,
										"myScreenWidth"
									]
									,[
										0,
										2
									]
								]
								,[
									20,
									140,
									cr.plugins_.Function.prototype.exps.Param,
									false,
									null
									,[
[
										0,
										0
									]
									]
								]
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							6,
							[
								20,
								140,
								cr.plugins_.Function.prototype.exps.Param,
								false,
								null
								,[
[
									0,
									1
								]
								]
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				5729511183116535,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					8064150609967608
					,[
					[
						1,
						[
							2,
							"makeRandomDecision"
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.SetReturnValue,
					null,
					7066017796563602
					,[
					[
						7,
						[
							19,
							cr.system_object.prototype.exps.floor
							,[
[
								19,
								cr.system_object.prototype.exps.random
								,[
[
									20,
									140,
									cr.plugins_.Function.prototype.exps.Param,
									false,
									null
									,[
[
										0,
										0
									]
									]
								]
								]
							]
							]
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			[true, "PICKUPS"],
			false,
			2088870101177239,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				0,
				false,
				false,
				false,
				2088870101177239
				,[
				[
					1,
					[
						2,
						"PICKUPS"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				3969512219362777,
				[
				[
					135,
					cr.plugins_.Sprite.prototype.cnds.OnCollision,
					null,
					0,
					false,
					false,
					true,
					1812540966045195
					,[
					[
						4,
						116
					]
					]
				]
				],
				[
				[
					116,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					463771491558223
				]
,				[
					-1,
					cr.system_object.prototype.acts.AddVar,
					null,
					7312692329437557
					,[
					[
						11,
						"health"
					]
,					[
						7,
						[
							0,
							20
						]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					5410628361384775
					,[
					[
						1,
						[
							2,
							"playPickup"
						]
					]
,					[
						13,
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					6733714136323033
					,[
					[
						1,
						[
							2,
							"checkBlood"
						]
					]
,					[
						13,
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				5218668944131755,
				[
				[
					135,
					cr.plugins_.Sprite.prototype.cnds.OnCollision,
					null,
					0,
					false,
					false,
					true,
					5896691372068615
					,[
					[
						4,
						125
					]
					]
				]
				],
				[
				[
					125,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					6830002079023292
				]
,				[
					-1,
					cr.system_object.prototype.acts.AddVar,
					null,
					8482861872331614
					,[
					[
						11,
						"health"
					]
,					[
						7,
						[
							0,
							10
						]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					105622834725902
					,[
					[
						1,
						[
							2,
							"playPickup"
						]
					]
,					[
						13,
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					7692590648176409
					,[
					[
						1,
						[
							2,
							"checkBloodDrop"
						]
					]
,					[
						13,
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				5174281616911752,
				[
				[
					135,
					cr.plugins_.Sprite.prototype.cnds.OnCollision,
					null,
					0,
					false,
					false,
					true,
					9942656585189872
					,[
					[
						4,
						119
					]
					]
				]
				],
				[
				[
					119,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					8370100598834236
				]
,				[
					-1,
					cr.system_object.prototype.acts.AddVar,
					null,
					8849203454450859
					,[
					[
						11,
						"score"
					]
,					[
						7,
						[
							6,
							[
								0,
								50
							]
							,[
								23,
								"scoreMultiplier"
							]
						]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					3079838636083688
					,[
					[
						1,
						[
							2,
							"playPickup"
						]
					]
,					[
						13,
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					9313306059862375
					,[
					[
						1,
						[
							2,
							"checkPlus50Collect"
						]
					]
,					[
						13,
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					5062333787320266,
					[
					[
						-1,
						cr.system_object.prototype.cnds.Compare,
						null,
						0,
						false,
						false,
						false,
						6392563632051442
						,[
						[
							7,
							[
								23,
								"scoreMultiplier"
							]
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						4024703331601198
						,[
						[
							4,
							87
						]
,						[
							5,
							[
								0,
								9
							]
						]
,						[
							0,
							[
								4,
								[
									20,
									135,
									cr.plugins_.Sprite.prototype.exps.X,
									false,
									null
								]
								,[
									0,
									70
								]
							]
						]
,						[
							0,
							[
								5,
								[
									20,
									135,
									cr.plugins_.Sprite.prototype.exps.Y,
									false,
									null
								]
								,[
									0,
									70
								]
							]
						]
						]
					]
,					[
						87,
						cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
						null,
						4463675804023023
						,[
						[
							0,
							[
								0,
								5
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					3196223897393174,
					[
					[
						-1,
						cr.system_object.prototype.cnds.Else,
						null,
						0,
						false,
						false,
						false,
						1971650050736662
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						1390271426252925
						,[
						[
							4,
							87
						]
,						[
							5,
							[
								0,
								9
							]
						]
,						[
							0,
							[
								4,
								[
									20,
									135,
									cr.plugins_.Sprite.prototype.exps.X,
									false,
									null
								]
								,[
									0,
									70
								]
							]
						]
,						[
							0,
							[
								5,
								[
									20,
									135,
									cr.plugins_.Sprite.prototype.exps.Y,
									false,
									null
								]
								,[
									0,
									70
								]
							]
						]
						]
					]
,					[
						87,
						cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
						null,
						8244026950924566
						,[
						[
							0,
							[
								0,
								10
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				5641758210420142,
				[
				[
					135,
					cr.plugins_.Sprite.prototype.cnds.OnCollision,
					null,
					0,
					false,
					false,
					true,
					7549460558905474
					,[
					[
						4,
						120
					]
					]
				]
				],
				[
				[
					120,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					977212791509555
				]
,				[
					-1,
					cr.system_object.prototype.acts.AddVar,
					null,
					7824776194627476
					,[
					[
						11,
						"score"
					]
,					[
						7,
						[
							6,
							[
								0,
								100
							]
							,[
								23,
								"scoreMultiplier"
							]
						]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					3153472160201893
					,[
					[
						1,
						[
							2,
							"playPickup"
						]
					]
,					[
						13,
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					9690550556140103
					,[
					[
						1,
						[
							2,
							"checkPlus100Collect"
						]
					]
,					[
						13,
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					9310553282446987,
					[
					[
						-1,
						cr.system_object.prototype.cnds.Compare,
						null,
						0,
						false,
						false,
						false,
						3247556162747083
						,[
						[
							7,
							[
								23,
								"scoreMultiplier"
							]
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						5821998987655068
						,[
						[
							4,
							87
						]
,						[
							5,
							[
								0,
								9
							]
						]
,						[
							0,
							[
								4,
								[
									20,
									135,
									cr.plugins_.Sprite.prototype.exps.X,
									false,
									null
								]
								,[
									0,
									70
								]
							]
						]
,						[
							0,
							[
								5,
								[
									20,
									135,
									cr.plugins_.Sprite.prototype.exps.Y,
									false,
									null
								]
								,[
									0,
									70
								]
							]
						]
						]
					]
,					[
						87,
						cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
						null,
						1553588921919503
						,[
						[
							0,
							[
								0,
								10
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					4343039421074732,
					[
					[
						-1,
						cr.system_object.prototype.cnds.Else,
						null,
						0,
						false,
						false,
						false,
						9579554913687569
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						755570508895245
						,[
						[
							4,
							87
						]
,						[
							5,
							[
								0,
								9
							]
						]
,						[
							0,
							[
								4,
								[
									20,
									135,
									cr.plugins_.Sprite.prototype.exps.X,
									false,
									null
								]
								,[
									0,
									70
								]
							]
						]
,						[
							0,
							[
								5,
								[
									20,
									135,
									cr.plugins_.Sprite.prototype.exps.Y,
									false,
									null
								]
								,[
									0,
									70
								]
							]
						]
						]
					]
,					[
						87,
						cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
						null,
						6405724114918161
						,[
						[
							0,
							[
								0,
								11
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				[true, "USEABLE BLOOD"],
				false,
				9929670064778275,
				[
				[
					-1,
					cr.system_object.prototype.cnds.IsGroupActive,
					null,
					0,
					false,
					false,
					false,
					9929670064778275
					,[
					[
						1,
						[
							2,
							"USEABLE BLOOD"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					1298020714216605,
					[
					[
						135,
						cr.plugins_.Sprite.prototype.cnds.OnCollision,
						null,
						0,
						false,
						false,
						true,
						375477013789591
						,[
						[
							4,
							123
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						4611553903262647
						,[
						[
							11,
							"useableBlood"
						]
,						[
							8,
							2
						]
,						[
							7,
							[
								0,
								3
							]
						]
						]
					]
					],
					[
					[
						123,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						5744532832054367
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						3095332161825244
						,[
						[
							1,
							[
								2,
								"playPickup"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						2901666371723533
						,[
						[
							4,
							91
						]
,						[
							5,
							[
								0,
								10
							]
						]
,						[
							0,
							[
								6,
								[
									4,
									[
										0,
										10
									]
									,[
										6,
										[
											4,
											[
												0,
												7
											]
											,[
												20,
												91,
												cr.plugins_.Sprite.prototype.exps.Width,
												false,
												null
											]
										]
										,[
											23,
											"useableBlood"
										]
									]
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
,						[
							0,
							[
								6,
								[
									0,
									158
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.AddVar,
						null,
						5834250261957339
						,[
						[
							11,
							"useableBlood"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						92,
						cr.plugins_.Sprite.prototype.acts.SetX,
						null,
						5930444410626069
						,[
						[
							0,
							[
								6,
								[
									4,
									[
										0,
										65
									]
									,[
										6,
										[
											4,
											[
												0,
												7
											]
											,[
												20,
												91,
												cr.plugins_.Sprite.prototype.exps.Width,
												false,
												null
											]
										]
										,[
											5,
											[
												23,
												"useableBlood"
											]
											,[
												0,
												1
											]
										]
									]
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						]
					]
					]
					,[
					[
						0,
						null,
						false,
						5871343249901353,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							8386442920408537
							,[
							[
								11,
								"useableBlood"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.CreateObject,
							null,
							6835289862690537
							,[
							[
								4,
								92
							]
,							[
								5,
								[
									0,
									10
								]
							]
,							[
								0,
								[
									6,
									[
										4,
										[
											0,
											65
										]
										,[
											6,
											[
												4,
												[
													0,
													7
												]
												,[
													20,
													91,
													cr.plugins_.Sprite.prototype.exps.Width,
													false,
													null
												]
											]
											,[
												5,
												[
													23,
													"useableBlood"
												]
												,[
													0,
													1
												]
											]
										]
									]
									,[
										23,
										"SCALEFACTOR"
									]
								]
							]
,							[
								0,
								[
									0,
									174
								]
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					4192792184313112,
					[
					[
						140,
						cr.plugins_.Function.prototype.cnds.OnFunction,
						null,
						2,
						false,
						false,
						false,
						1103452698217614
						,[
						[
							1,
							[
								2,
								"healthButtonPressed"
							]
						]
						]
					]
					],
					[
					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						8012710785792554
						,[
						[
							1,
							[
								2,
								"useHealth"
							]
						]
,						[
							13,
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					3375372999774756,
					[
					[
						140,
						cr.plugins_.Function.prototype.cnds.OnFunction,
						null,
						2,
						false,
						false,
						false,
						4160408866806906
						,[
						[
							1,
							[
								2,
								"useHealth"
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						7403806097994405
						,[
						[
							11,
							"useableBlood"
						]
,						[
							8,
							4
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.AddVar,
						null,
						1701633916847094
						,[
						[
							11,
							"health"
						]
,						[
							7,
							[
								6,
								[
									0,
									20
								]
								,[
									23,
									"useableBlood"
								]
							]
						]
						]
					]
,					[
						91,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						3935148581905659
					]
,					[
						92,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						7101891840134099
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						3537495261890126
						,[
						[
							11,
							"useableBlood"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				[true, "MULTI TIMER"],
				false,
				3787139118269313,
				[
				[
					-1,
					cr.system_object.prototype.cnds.IsGroupActive,
					null,
					0,
					false,
					false,
					false,
					3787139118269313
					,[
					[
						1,
						[
							2,
							"MULTI TIMER"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					7589861176337666,
					[
					[
						135,
						cr.plugins_.Sprite.prototype.cnds.OnCollision,
						null,
						0,
						false,
						false,
						true,
						2371310218821642
						,[
						[
							4,
							121
						]
						]
					]
					],
					[
					[
						121,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						8684277219066715
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						5669327468100453
						,[
						[
							1,
							[
								2,
								"playPickup"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						98,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						7778740693965363
					]
					]
					,[
					[
						0,
						null,
						false,
						866590091149684,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							6690380859127272
							,[
							[
								11,
								"multiActive"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.AddVar,
							null,
							2645638171900814
							,[
							[
								11,
								"multiTimer"
							]
,							[
								7,
								[
									0,
									5
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							9743726124485834
							,[
							[
								1,
								[
									2,
									"setTimer"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						7363166818083565,
						[
						[
							-1,
							cr.system_object.prototype.cnds.Else,
							null,
							0,
							false,
							false,
							false,
							6319739257718946
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							922524339519997
							,[
							[
								1,
								[
									2,
									"createTimer"
								]
							]
,							[
								13,
																	[
										7,
										[
											0,
											5
										]
									]
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					1770700297834924,
					[
					[
						135,
						cr.plugins_.Sprite.prototype.cnds.OnCollision,
						null,
						0,
						false,
						false,
						true,
						8972424582399914
						,[
						[
							4,
							122
						]
						]
					]
					],
					[
					[
						122,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						1960302847254435
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						4064608885925802
						,[
						[
							1,
							[
								2,
								"playPickup"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						3682986346217954
						,[
						[
							1,
							[
								2,
								"checkMultiplyCollect"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						98,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						5471855990515983
					]
					]
					,[
					[
						0,
						null,
						false,
						2889776518378177,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							1460056806875247
							,[
							[
								11,
								"multiActive"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.AddVar,
							null,
							1151128340947357
							,[
							[
								11,
								"multiTimer"
							]
,							[
								7,
								[
									0,
									15
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							7502044124580881
							,[
							[
								1,
								[
									2,
									"setTimer"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						8577531135032266,
						[
						[
							-1,
							cr.system_object.prototype.cnds.Else,
							null,
							0,
							false,
							false,
							false,
							834158559784611
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							6369564261546243
							,[
							[
								1,
								[
									2,
									"createTimer"
								]
							]
,							[
								13,
																	[
										7,
										[
											0,
											15
										]
									]
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					3197556885481812,
					[
					[
						140,
						cr.plugins_.Function.prototype.cnds.OnFunction,
						null,
						2,
						false,
						false,
						false,
						2438184333667457
						,[
						[
							1,
							[
								2,
								"createTimer"
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						8161787336412904
						,[
						[
							4,
							90
						]
,						[
							5,
							[
								0,
								10
							]
						]
,						[
							0,
							[
								0,
								239
							]
						]
,						[
							0,
							[
								0,
								154
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						1397258789042111
						,[
						[
							11,
							"multiActive"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						131,
						cr.plugins_.Spritefont2.prototype.acts.SetPos,
						null,
						3548513941274871
						,[
						[
							0,
							[
								4,
								[
									20,
									90,
									cr.plugins_.Sprite.prototype.exps.X,
									false,
									null
								]
								,[
									6,
									[
										0,
										30
									]
									,[
										23,
										"SCALEFACTOR"
									]
								]
							]
						]
,						[
							0,
							[
								5,
								[
									20,
									90,
									cr.plugins_.Sprite.prototype.exps.Y,
									false,
									null
								]
								,[
									6,
									[
										0,
										20
									]
									,[
										23,
										"SCALEFACTOR"
									]
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						9143727903454434
						,[
						[
							11,
							"multiTimer"
						]
,						[
							7,
							[
								20,
								140,
								cr.plugins_.Function.prototype.exps.Param,
								false,
								null
								,[
[
									0,
									0
								]
								]
							]
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						4028322289499145
						,[
						[
							1,
							[
								2,
								"boostScore"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						8576713141180894
						,[
						[
							1,
							[
								2,
								"setTimer"
							]
						]
,						[
							13,
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					2158972907007289,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						2085458881352857
						,[
						[
							11,
							"multiActive"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						8989919682672051,
						[
						[
							-1,
							cr.system_object.prototype.cnds.Every,
							null,
							0,
							false,
							false,
							false,
							5719503830411173
							,[
							[
								0,
								[
									1,
									1
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.SubVar,
							null,
							6163076007658867
							,[
							[
								11,
								"multiTimer"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							7171356415195992
							,[
							[
								1,
								[
									2,
									"setTimer"
								]
							]
,							[
								13,
							]
							]
						]
						]
						,[
						[
							0,
							null,
							false,
							8037765464468783,
							[
							[
								-1,
								cr.system_object.prototype.cnds.CompareVar,
								null,
								0,
								false,
								false,
								false,
								4743471769553822
								,[
								[
									11,
									"multiTimer"
								]
,								[
									8,
									2
								]
,								[
									7,
									[
										0,
										0
									]
								]
								]
							]
							],
							[
							[
								140,
								cr.plugins_.Function.prototype.acts.CallFunction,
								null,
								9927232188300672
								,[
								[
									1,
									[
										2,
										"removeTimer"
									]
								]
,								[
									13,
								]
								]
							]
,							[
								140,
								cr.plugins_.Function.prototype.acts.CallFunction,
								null,
								8018601376022939
								,[
								[
									1,
									[
										2,
										"unboostScore"
									]
								]
,								[
									13,
								]
								]
							]
,							[
								90,
								cr.plugins_.Sprite.prototype.acts.Destroy,
								null,
								1979501100700559
							]
,							[
								-1,
								cr.system_object.prototype.acts.SetVar,
								null,
								7396984507381255
								,[
								[
									11,
									"multiActive"
								]
,								[
									7,
									[
										0,
										0
									]
								]
								]
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					9923239884146301,
					[
					[
						140,
						cr.plugins_.Function.prototype.cnds.OnFunction,
						null,
						2,
						false,
						false,
						false,
						5485181671119453
						,[
						[
							1,
							[
								2,
								"setTimer"
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						6688001528429747,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							6463282725826721
							,[
							[
								11,
								"multiTimer"
							]
,							[
								8,
								4
							]
,							[
								7,
								[
									0,
									9
								]
							]
							]
						]
						],
						[
						[
							131,
							cr.plugins_.Spritefont2.prototype.acts.SetText,
							null,
							1332523230834763
							,[
							[
								7,
								[
									10,
									[
										2,
										"00:"
									]
									,[
										23,
										"multiTimer"
									]
								]
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						579611875083171,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							1582688162551214
							,[
							[
								11,
								"multiTimer"
							]
,							[
								8,
								2
							]
,							[
								7,
								[
									0,
									10
								]
							]
							]
						]
						],
						[
						[
							131,
							cr.plugins_.Spritefont2.prototype.acts.SetText,
							null,
							4306155263903609
							,[
							[
								7,
								[
									10,
									[
										2,
										"00:0"
									]
									,[
										23,
										"multiTimer"
									]
								]
							]
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				3535568175962826,
				[
				[
					135,
					cr.plugins_.Sprite.prototype.cnds.OnCollision,
					null,
					0,
					false,
					false,
					true,
					6233876501578172
					,[
					[
						4,
						124
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					8628840263329123
					,[
					[
						11,
						"shieldActive"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					3053821523111787
					,[
					[
						1,
						[
							2,
							"useShield"
						]
					]
,					[
						13,
					]
					]
				]
,				[
					124,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					6758562898401858
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					3035189473881036
					,[
					[
						1,
						[
							2,
							"playPickup"
						]
					]
,					[
						13,
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				2234698570805321,
				[
				[
					135,
					cr.plugins_.Sprite.prototype.cnds.OnCollision,
					null,
					0,
					false,
					false,
					true,
					2257478459547307
					,[
					[
						4,
						117
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					6124620084577385,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						1872371524659093
						,[
						[
							11,
							"plasterActive"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						3358549687609097
						,[
						[
							1,
							[
								2,
								"losePlaster"
							]
						]
,						[
							13,
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					2304306908063502,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						2566011803593232
						,[
						[
							11,
							"bucketActive"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						117,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						5536073694224558
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						9814466880968496
						,[
						[
							1,
							[
								2,
								"playPickup"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						1932421061217525
						,[
						[
							1,
							[
								2,
								"useBucket"
							]
						]
,						[
							13,
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				5132590434421846,
				[
				[
					135,
					cr.plugins_.Sprite.prototype.cnds.OnCollision,
					null,
					0,
					false,
					false,
					true,
					4669540993943102
					,[
					[
						4,
						118
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					3334613246964311
					,[
					[
						11,
						"plasterActive"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					2017490886482002
					,[
					[
						11,
						"bucketActive"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					118,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					7368640737312371
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					9394333908154814
					,[
					[
						1,
						[
							2,
							"playPickup"
						]
					]
,					[
						13,
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					2359965111224957
					,[
					[
						1,
						[
							2,
							"usePlaster"
						]
					]
,					[
						13,
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					6672432869536156
					,[
					[
						1,
						[
							2,
							"checkPlaster"
						]
					]
,					[
						13,
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				9837842670122839,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					4453420905226906
					,[
					[
						1,
						[
							2,
							"useShield"
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					8643445652781856
					,[
					[
						4,
						128
					]
,					[
						5,
						[
							0,
							9
						]
					]
,					[
						0,
						[
							20,
							135,
							cr.plugins_.Sprite.prototype.exps.X,
							false,
							null
						]
					]
,					[
						0,
						[
							20,
							135,
							cr.plugins_.Sprite.prototype.exps.Y,
							false,
							null
						]
					]
					]
				]
,				[
					128,
					cr.behaviors.Pin.prototype.acts.Pin,
					"Pin",
					8981999798221872
					,[
					[
						4,
						135
					]
,					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					991588540783683
					,[
					[
						11,
						"shieldActive"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				8775877919657327,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					8260905331204215
					,[
					[
						1,
						[
							2,
							"loseShield"
						]
					]
					]
				]
				],
				[
				[
					128,
					cr.behaviors.Flash.prototype.acts.Flash,
					"Flash",
					8548459698447245
					,[
					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							1,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					3986339935655914
					,[
					[
						0,
						[
							1,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					8672003489847703
					,[
					[
						11,
						"shieldActive"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					128,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					3078824818257375
				]
				]
			]
,			[
				0,
				null,
				false,
				8453370915674195,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					1015414784482892
					,[
					[
						1,
						[
							2,
							"useBucket"
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					1509199595747262
					,[
					[
						4,
						126
					]
,					[
						5,
						[
							0,
							9
						]
					]
,					[
						0,
						[
							4,
							[
								20,
								135,
								cr.plugins_.Sprite.prototype.exps.X,
								false,
								null
							]
							,[
								0,
								40
							]
						]
					]
,					[
						0,
						[
							5,
							[
								20,
								135,
								cr.plugins_.Sprite.prototype.exps.Y,
								false,
								null
							]
							,[
								0,
								34
							]
						]
					]
					]
				]
,				[
					126,
					cr.behaviors.Pin.prototype.acts.Pin,
					"Pin",
					3162775981748691
					,[
					[
						4,
						135
					]
,					[
						3,
						1
					]
					]
				]
,				[
					137,
					cr.plugins_.Particles.prototype.acts.SetRate,
					null,
					1827721774519478
					,[
					[
						0,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					761250823969586
					,[
					[
						11,
						"bucketActive"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					637794798392752
					,[
					[
						11,
						"healthLoseSpeed"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				1643420813711535,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					2665765845086432
					,[
					[
						1,
						[
							2,
							"loseBucket"
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					8350541510317529
					,[
					[
						11,
						"bucketActive"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					3033612369744511
					,[
					[
						11,
						"healthLoseSpeed"
					]
,					[
						7,
						[
							0,
							5
						]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					7499966084377579
					,[
					[
						1,
						[
							2,
							"setParticles"
						]
					]
,					[
						13,
					]
					]
				]
,				[
					126,
					cr.behaviors.Pin.prototype.acts.Unpin,
					"Pin",
					459076315817566
				]
,				[
					126,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					8610241199594275
				]
				]
			]
,			[
				0,
				null,
				false,
				6918694597384257,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					1424298825970873
					,[
					[
						1,
						[
							2,
							"usePlaster"
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					8079113186972516
					,[
					[
						4,
						127
					]
,					[
						5,
						[
							0,
							9
						]
					]
,					[
						0,
						[
							4,
							[
								20,
								135,
								cr.plugins_.Sprite.prototype.exps.X,
								false,
								null
							]
							,[
								0,
								40
							]
						]
					]
,					[
						0,
						[
							5,
							[
								20,
								135,
								cr.plugins_.Sprite.prototype.exps.Y,
								false,
								null
							]
							,[
								0,
								34
							]
						]
					]
					]
				]
,				[
					127,
					cr.behaviors.Pin.prototype.acts.Pin,
					"Pin",
					5147109722145071
					,[
					[
						4,
						135
					]
,					[
						3,
						1
					]
					]
				]
,				[
					137,
					cr.plugins_.Particles.prototype.acts.SetRate,
					null,
					9728834107322578
					,[
					[
						0,
						[
							6,
							[
								20,
								137,
								cr.plugins_.Particles.prototype.exps.Rate,
								false,
								null
							]
							,[
								1,
								0.1
							]
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					3793858873447206
					,[
					[
						11,
						"plasterActive"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					2325190130691466
					,[
					[
						11,
						"healthLoseSpeed"
					]
,					[
						7,
						[
							6,
							[
								23,
								"healthLoseSpeed"
							]
							,[
								1,
								0.5
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				635183552575092,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					3447199473415829
					,[
					[
						1,
						[
							2,
							"losePlaster"
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					5731683513815245
					,[
					[
						11,
						"plasterActive"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					6548731716708924
					,[
					[
						11,
						"healthLoseSpeed"
					]
,					[
						7,
						[
							0,
							5
						]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					336411520775767
					,[
					[
						1,
						[
							2,
							"setParticles"
						]
					]
,					[
						13,
					]
					]
				]
,				[
					127,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					1595505274703968
				]
				]
			]
,			[
				0,
				null,
				false,
				6054990443708461,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					9136506744992831
					,[
					[
						11,
						"bucketActive"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					6387533404282354,
					[
					[
						135,
						cr.behaviors.Platform.prototype.cnds.IsOnFloor,
						"Platform",
						0,
						false,
						false,
						false,
						5183765326796872
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						1385870912830746,
						[
						[
							-1,
							cr.system_object.prototype.cnds.TriggerOnce,
							null,
							0,
							false,
							false,
							false,
							2924129082223807
						]
						],
						[
						[
							126,
							cr.plugins_.Sprite.prototype.acts.SetAnim,
							null,
							5752245641893949
							,[
							[
								1,
								[
									2,
									"run"
								]
							]
,							[
								3,
								1
							]
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				637387475180096,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					4432907500383107
					,[
					[
						11,
						"bucketActive"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					3808823947023353,
					[
					[
						135,
						cr.behaviors.Platform.prototype.cnds.IsOnFloor,
						"Platform",
						0,
						false,
						true,
						false,
						19583459200846
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						2922405183447673,
						[
						[
							-1,
							cr.system_object.prototype.cnds.TriggerOnce,
							null,
							0,
							false,
							false,
							false,
							5010288375907576
						]
						],
						[
						[
							126,
							cr.plugins_.Sprite.prototype.acts.SetAnim,
							null,
							7273001804771036
							,[
							[
								1,
								[
									2,
									"jump"
								]
							]
,							[
								3,
								1
							]
							]
						]
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			[true, "DEBUG"],
			false,
			6727259623433217,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				0,
				false,
				false,
				false,
				6727259623433217
				,[
				[
					1,
					[
						2,
						"DEBUG"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				6972890772860725,
				[
				[
					-1,
					cr.system_object.prototype.cnds.EveryTick,
					null,
					0,
					false,
					false,
					false,
					4176254148637285
				]
				],
				[
				]
			]
,			[
				0,
				null,
				false,
				8132063884737587,
				[
				[
					139,
					cr.plugins_.Mouse.prototype.cnds.IsButtonDown,
					null,
					0,
					false,
					false,
					false,
					6095577192094237
					,[
					[
						3,
						2
					]
					]
				]
				],
				[
				]
			]
,			[
				0,
				null,
				false,
				3078339340607744,
				[
				[
					139,
					cr.plugins_.Mouse.prototype.cnds.IsButtonDown,
					null,
					0,
					false,
					true,
					false,
					1742269282134098
					,[
					[
						3,
						2
					]
					]
				]
				],
				[
				]
			]
,			[
				0,
				null,
				false,
				9359450770233153,
				[
				[
					-1,
					cr.system_object.prototype.cnds.IsMobile,
					null,
					0,
					false,
					false,
					false,
					4333251818199843
				]
				],
				[
				]
			]
,			[
				0,
				null,
				false,
				4644194080449694,
				[
				[
					-1,
					cr.system_object.prototype.cnds.IsMobile,
					null,
					0,
					false,
					true,
					false,
					1592478752438767
				]
				],
				[
				]
			]
			]
		]
,		[
			0,
			[true, "BUTTONS"],
			false,
			478445142490883,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				0,
				false,
				false,
				false,
				478445142490883
				,[
				[
					1,
					[
						2,
						"BUTTONS"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				4588701791727178,
				[
				[
					139,
					cr.plugins_.Mouse.prototype.cnds.IsOverObject,
					null,
					0,
					false,
					false,
					false,
					2057679048759921
					,[
					[
						4,
						159
					]
					]
				]
				],
				[
				[
					159,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					8935809811909578
					,[
					[
						0,
						[
							0,
							1
						]
					]
					]
				]
,				[
					139,
					cr.plugins_.Mouse.prototype.acts.SetCursor,
					null,
					1520786503643067
					,[
					[
						3,
						1
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					5222585458637553,
					[
					[
						139,
						cr.plugins_.Mouse.prototype.cnds.OnRelease,
						null,
						1,
						false,
						false,
						false,
						9171774784638517
						,[
						[
							3,
							0
						]
						]
					]
					],
					[
					[
						159,
						cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
						null,
						5801753706902507
						,[
						[
							0,
							[
								0,
								0
							]
						]
						]
					]
					]
					,[
					[
						0,
						null,
						false,
						6191316986302013,
						[
						[
							-1,
							cr.system_object.prototype.cnds.TriggerOnce,
							null,
							0,
							false,
							false,
							false,
							5347212993854763
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							5266664944280531
							,[
							[
								1,
								[
									10,
									[
										19,
										cr.system_object.prototype.exps.str
										,[
[
											21,
											159,
											true,
											null
											,0
										]
										]
									]
									,[
										2,
										"ButtonPressed"
									]
								]
							]
,							[
								13,
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							8672306822281375
							,[
							[
								1,
								[
									2,
									"playClick"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					7954871711106996,
					[
					[
						139,
						cr.plugins_.Mouse.prototype.cnds.IsButtonDown,
						null,
						0,
						false,
						false,
						false,
						5465281863963016
						,[
						[
							3,
							0
						]
						]
					]
					],
					[
					[
						159,
						cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
						null,
						2306751573841219
						,[
						[
							0,
							[
								0,
								2
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				7108764878983952,
				[
				[
					139,
					cr.plugins_.Mouse.prototype.cnds.IsOverObject,
					null,
					0,
					false,
					true,
					false,
					3567671719469907
					,[
					[
						4,
						159
					]
					]
				]
,				[
					138,
					cr.plugins_.Touch.prototype.cnds.IsTouchingObject,
					null,
					0,
					false,
					true,
					false,
					3643626179140681
					,[
					[
						4,
						159
					]
					]
				]
				],
				[
				[
					159,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					5102138056030841
					,[
					[
						0,
						[
							0,
							0
						]
					]
					]
				]
,				[
					139,
					cr.plugins_.Mouse.prototype.acts.SetCursor,
					null,
					2440317511351016
					,[
					[
						3,
						0
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				5013173336436186,
				[
				[
					138,
					cr.plugins_.Touch.prototype.cnds.OnTouchObject,
					null,
					1,
					false,
					false,
					false,
					5543432346463315
					,[
					[
						4,
						159
					]
					]
				]
				],
				[
				[
					159,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					3637378528958302
					,[
					[
						0,
						[
							0,
							2
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					1988824300561979,
					[
					[
						-1,
						cr.system_object.prototype.cnds.TriggerOnce,
						null,
						0,
						false,
						false,
						false,
						8437927666758322
					]
					],
					[
					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						6523257659097515
						,[
						[
							1,
							[
								10,
								[
									19,
									cr.system_object.prototype.exps.str
									,[
[
										21,
										159,
										true,
										null
										,0
									]
									]
								]
								,[
									2,
									"ButtonPressed"
								]
							]
						]
,						[
							13,
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						5335348825106393
						,[
						[
							1,
							[
								2,
								"playClick"
							]
						]
,						[
							13,
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				9716300013600492,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					7453303204268713
					,[
					[
						1,
						[
							2,
							"pauseButtonPressed"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					4452103626162777
					,[
					[
						11,
						"paused"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					6254526300745601
					,[
					[
						1,
						[
							2,
							"pauseGame"
						]
					]
,					[
						13,
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				1966055097401476,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					1542030716041042
					,[
					[
						1,
						[
							2,
							"howtoButtonPressed"
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					6173841295610774
					,[
					[
						1,
						[
							2,
							"pauseGame"
						]
					]
,					[
						13,
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					7510279525114238
					,[
					[
						1,
						[
							2,
							"showTutorial"
						]
					]
,					[
						13,
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				3667296158240878,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					3583163396397542
					,[
					[
						1,
						[
							2,
							"replayButtonPressed"
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.RestartLayout,
					null,
					7937205175539848
				]
,				[
					-1,
					cr.system_object.prototype.acts.ResetGlobals,
					null,
					3706828276939947
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetTimescale,
					null,
					634669713359453
					,[
					[
						0,
						[
							1,
							1
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				9888932233870452,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					9658997871251162
					,[
					[
						1,
						[
							2,
							"playButtonPressed"
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					32229303867696
					,[
					[
						1,
						[
							2,
							"pauseGame"
						]
					]
,					[
						13,
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				7092480940184726,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					5422730930346247
					,[
					[
						1,
						[
							2,
							"backButtonPressed"
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					7867914568868286
					,[
					[
						1,
						[
							2,
							"pauseGame"
						]
					]
,					[
						13,
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					9584771609119344
					,[
					[
						1,
						[
							2,
							"stopMusic"
						]
					]
,					[
						13,
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.GoToLayoutByName,
					null,
					4982583944902973
					,[
					[
						1,
						[
							2,
							"MainScreen"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.ResetGlobals,
					null,
					795120981904157
				]
				]
			]
,			[
				0,
				null,
				false,
				4946658552556524,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					1331517106384175
					,[
					[
						1,
						[
							2,
							"playtutButtonPressed"
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					9989462436692597
					,[
					[
						1,
						[
							2,
							"changeTutorialScreen"
						]
					]
,					[
						13,
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			[true, "TUTORIAL"],
			false,
			6823568617020126,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				0,
				false,
				false,
				false,
				6823568617020126
				,[
				[
					1,
					[
						2,
						"TUTORIAL"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				3280204596817239,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					812594478370245
					,[
					[
						1,
						[
							2,
							"showTutorial"
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					1845264388926557
					,[
					[
						11,
						"tutorialScreenActive"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					5445243140045336,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						3693177237922557
						,[
						[
							11,
							"paused"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						7535737787304253
						,[
						[
							11,
							"paused"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetTimescale,
						null,
						6182794616240413
						,[
						[
							0,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetGroupActive,
						null,
						4811177310848147
						,[
						[
							1,
							[
								2,
								"CHICKEN CONTROLS"
							]
						]
,						[
							3,
							0
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						4795486363270296
						,[
						[
							1,
							[
								2,
								"createTutorialScreen"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						8789312813645138
						,[
						[
							1,
							[
								2,
								"stopMusic"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						947377179710191
						,[
						[
							1,
							[
								2,
								"stopFly"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						6876042774641902
						,[
						[
							1,
							[
								2,
								"stopHeart"
							]
						]
,						[
							13,
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				2907795605063405,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					1532340345544415
					,[
					[
						1,
						[
							2,
							"createTutorialScreen"
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					4940833894604596
					,[
					[
						4,
						69
					]
,					[
						5,
						[
							0,
							12
						]
					]
,					[
						0,
						[
							0,
							0
						]
					]
,					[
						0,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					5997711327019695
					,[
					[
						4,
						71
					]
,					[
						5,
						[
							0,
							12
						]
					]
,					[
						0,
						[
							6,
							[
								0,
								640
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							6,
							[
								0,
								360
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					2155446776765004
					,[
					[
						4,
						70
					]
,					[
						5,
						[
							0,
							12
						]
					]
,					[
						0,
						[
							6,
							[
								0,
								982
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							6,
							[
								0,
								542
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					8084383380000443,
					[
					[
						-1,
						cr.system_object.prototype.cnds.IsMobile,
						null,
						0,
						false,
						false,
						false,
						963655975466008
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						909730547218726
						,[
						[
							4,
							72
						]
,						[
							5,
							[
								0,
								12
							]
						]
,						[
							0,
							[
								6,
								[
									0,
									416
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
,						[
							0,
							[
								6,
								[
									0,
									548
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						1359430218135437
						,[
						[
							4,
							72
						]
,						[
							5,
							[
								0,
								12
							]
						]
,						[
							0,
							[
								0,
								571
							]
						]
,						[
							0,
							[
								6,
								[
									0,
									548
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						867282648487654
						,[
						[
							4,
							72
						]
,						[
							5,
							[
								0,
								12
							]
						]
,						[
							0,
							[
								6,
								[
									0,
									723
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
,						[
							0,
							[
								6,
								[
									0,
									548
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					4088321047937705,
					[
					[
						-1,
						cr.system_object.prototype.cnds.Else,
						null,
						0,
						false,
						false,
						false,
						1322314075018545
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						9346219289198468
						,[
						[
							4,
							73
						]
,						[
							5,
							[
								0,
								12
							]
						]
,						[
							0,
							[
								6,
								[
									0,
									416
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
,						[
							0,
							[
								6,
								[
									0,
									548
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						8871946076455566
						,[
						[
							4,
							73
						]
,						[
							5,
							[
								0,
								12
							]
						]
,						[
							0,
							[
								0,
								571
							]
						]
,						[
							0,
							[
								6,
								[
									0,
									548
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						7431315314540728
						,[
						[
							4,
							73
						]
,						[
							5,
							[
								0,
								12
							]
						]
,						[
							0,
							[
								6,
								[
									0,
									723
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
,						[
							0,
							[
								6,
								[
									0,
									548
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				6150877155785741,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					6869630576717764
					,[
					[
						1,
						[
							2,
							"createTutorialScreen2"
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					6882352722997784
					,[
					[
						4,
						74
					]
,					[
						5,
						[
							0,
							12
						]
					]
,					[
						0,
						[
							6,
							[
								0,
								640
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							6,
							[
								0,
								360
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					5583869488368378,
					[
					[
						-1,
						cr.system_object.prototype.cnds.IsMobile,
						null,
						0,
						false,
						false,
						false,
						6998317196740385
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						9395992805042833
						,[
						[
							4,
							77
						]
,						[
							5,
							[
								0,
								12
							]
						]
,						[
							0,
							[
								6,
								[
									0,
									511
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
,						[
							0,
							[
								6,
								[
									0,
									460
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						3330168842016435
						,[
						[
							4,
							78
						]
,						[
							5,
							[
								0,
								12
							]
						]
,						[
							0,
							[
								6,
								[
									0,
									744
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
,						[
							0,
							[
								6,
								[
									0,
									460
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					806042838812889,
					[
					[
						-1,
						cr.system_object.prototype.cnds.Else,
						null,
						0,
						false,
						false,
						false,
						6771934885576009
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						2327004799167235
						,[
						[
							4,
							75
						]
,						[
							5,
							[
								0,
								12
							]
						]
,						[
							0,
							[
								6,
								[
									0,
									511
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
,						[
							0,
							[
								6,
								[
									0,
									460
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						85891359592363
						,[
						[
							4,
							76
						]
,						[
							5,
							[
								0,
								12
							]
						]
,						[
							0,
							[
								6,
								[
									0,
									744
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
,						[
							0,
							[
								6,
								[
									0,
									460
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				4783995970690118,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					3554800293852252
					,[
					[
						1,
						[
							2,
							"changeTutorialScreen"
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.AddVar,
					null,
					8437009314206129
					,[
					[
						11,
						"tutorialScreenActive"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					4012208332229192,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						1553234846655989
						,[
						[
							11,
							"tutorialScreenActive"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						71,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						106368877103481
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						2808916737475304
						,[
						[
							1,
							[
								2,
								"createTutorialScreen2"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						70,
						cr.plugins_.Sprite.prototype.acts.MoveToTop,
						null,
						500113673394331
					]
					]
					,[
					[
						0,
						null,
						false,
						9359264153153872,
						[
						[
							-1,
							cr.system_object.prototype.cnds.IsMobile,
							null,
							0,
							false,
							false,
							false,
							3999921630773786
						]
						],
						[
						[
							72,
							cr.plugins_.Sprite.prototype.acts.Destroy,
							null,
							3456025734408298
						]
						]
					]
,					[
						0,
						null,
						false,
						4952256341895494,
						[
						[
							-1,
							cr.system_object.prototype.cnds.Else,
							null,
							0,
							false,
							false,
							false,
							1635249160864969
						]
						],
						[
						[
							73,
							cr.plugins_.Sprite.prototype.acts.Destroy,
							null,
							3611817583147742
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					2871707617660897,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						1816229209366982
						,[
						[
							11,
							"tutorialScreenActive"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								45
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						2069876019523228
						,[
						[
							11,
							"tutorialScreenActive"
						]
,						[
							7,
							[
								0,
								3
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					6218594827854401,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						3378747390604785
						,[
						[
							11,
							"tutorialScreenActive"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								2
							]
						]
						]
					]
					],
					[
					[
						74,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						6167673572865212
					]
,					[
						70,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						2126179552768513
					]
,					[
						69,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						6882099519003011
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						2929198794602474
						,[
						[
							11,
							"paused"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetTimescale,
						null,
						1692340756346292
						,[
						[
							0,
							[
								0,
								1
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetGroupActive,
						null,
						1017737148079018
						,[
						[
							1,
							[
								2,
								"CHICKEN CONTROLS"
							]
						]
,						[
							3,
							1
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						7461885083700361
						,[
						[
							1,
							[
								2,
								"playMusic"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						9114438771935283
						,[
						[
							11,
							"tutorialWatched"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					]
					,[
					[
						0,
						null,
						false,
						2802821860651682,
						[
						[
							-1,
							cr.system_object.prototype.cnds.IsMobile,
							null,
							0,
							false,
							false,
							false,
							1866218028164554
						]
						],
						[
						[
							77,
							cr.plugins_.Sprite.prototype.acts.Destroy,
							null,
							8403887894304599
						]
,						[
							78,
							cr.plugins_.Sprite.prototype.acts.Destroy,
							null,
							4610876884025776
						]
						]
					]
,					[
						0,
						null,
						false,
						2913060672970586,
						[
						[
							-1,
							cr.system_object.prototype.cnds.Else,
							null,
							0,
							false,
							false,
							false,
							5575706362526165
						]
						],
						[
						[
							75,
							cr.plugins_.Sprite.prototype.acts.Destroy,
							null,
							9216691003237402
						]
,						[
							76,
							cr.plugins_.Sprite.prototype.acts.Destroy,
							null,
							473882114111667
						]
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			[true, "PAUSE"],
			false,
			3311017981224213,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				0,
				false,
				false,
				false,
				3311017981224213
				,[
				[
					1,
					[
						2,
						"PAUSE"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				2041984351659541,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					7932603127396356
					,[
					[
						1,
						[
							2,
							"pauseGame"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					2950392749289742,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						6468196041592095
						,[
						[
							11,
							"paused"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						6391414977138848
						,[
						[
							11,
							"paused"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetTimescale,
						null,
						9319666388564854
						,[
						[
							0,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetGroupActive,
						null,
						4261573437592457
						,[
						[
							1,
							[
								2,
								"CHICKEN CONTROLS"
							]
						]
,						[
							3,
							0
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						9839597437286988
						,[
						[
							1,
							[
								2,
								"createPauseScreen"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						7481927829969196
						,[
						[
							1,
							[
								2,
								"pauseMusic"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						7019706143478065
						,[
						[
							1,
							[
								2,
								"stopFly"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						5136724247867288
						,[
						[
							1,
							[
								2,
								"stopHeart"
							]
						]
,						[
							13,
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					6409080249628833,
					[
					[
						-1,
						cr.system_object.prototype.cnds.Else,
						null,
						0,
						false,
						false,
						false,
						2569583474752834
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						6085468122091794
						,[
						[
							11,
							"paused"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetTimescale,
						null,
						9820459598641651
						,[
						[
							0,
							[
								0,
								1
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetGroupActive,
						null,
						2866335247247324
						,[
						[
							1,
							[
								2,
								"CHICKEN CONTROLS"
							]
						]
,						[
							3,
							1
						]
						]
					]
,					[
						27,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						7952364964720678
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						835551768768281
						,[
						[
							1,
							[
								2,
								"resumeMusic"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						3016723205102453
						,[
						[
							1,
							[
								2,
								"moveAchievements"
							]
						]
,						[
							13,
															[
									7,
									[
										0,
										11
									]
								]
,
								[
									7,
									[
										6,
										[
											0,
											470
										]
										,[
											23,
											"SCALEFACTOR"
										]
									]
								]
,
								[
									7,
									[
										6,
										[
											0,
											52
										]
										,[
											23,
											"SCALEFACTOR"
										]
									]
								]
						]
						]
					]
,					[
						47,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						8507546446140326
					]
,					[
						46,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						1147261714220941
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				9094073157600792,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					6366101073334539
					,[
					[
						1,
						[
							2,
							"createPauseScreen"
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					5444141814903174
					,[
					[
						4,
						27
					]
,					[
						5,
						[
							0,
							12
						]
					]
,					[
						0,
						[
							0,
							0
						]
					]
,					[
						0,
						[
							0,
							0
						]
					]
					]
				]
,				[
					23,
					cr.plugins_.Sprite.prototype.acts.SetPos,
					null,
					4579422672886625
					,[
					[
						0,
						[
							6,
							[
								0,
								638
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							6,
							[
								0,
								260
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
					]
				]
,				[
					24,
					cr.plugins_.Sprite.prototype.acts.SetPos,
					null,
					8210899350486341
					,[
					[
						0,
						[
							6,
							[
								0,
								773
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							6,
							[
								0,
								414
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
					]
				]
,				[
					25,
					cr.plugins_.Sprite.prototype.acts.SetPos,
					null,
					1893401124881163
					,[
					[
						0,
						[
							6,
							[
								0,
								645
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							6,
							[
								0,
								414
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
					]
				]
,				[
					26,
					cr.plugins_.Sprite.prototype.acts.SetPos,
					null,
					7907091332927159
					,[
					[
						0,
						[
							6,
							[
								0,
								512
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							6,
							[
								0,
								414
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
					]
				]
,				[
					28,
					cr.plugins_.Sprite.prototype.acts.SetPos,
					null,
					4042739135801687
					,[
					[
						0,
						[
							6,
							[
								0,
								640
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							6,
							[
								0,
								366
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
					]
				]
,				[
					28,
					cr.plugins_.Sprite.prototype.acts.MoveToBottom,
					null,
					4770326674558336
				]
,				[
					27,
					cr.plugins_.Sprite.prototype.acts.MoveToBottom,
					null,
					445563686488106
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					4530752377160099
					,[
					[
						1,
						[
							2,
							"moveAchievements"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									12
								]
							]
,
							[
								7,
								[
									6,
									[
										0,
										473
									]
									,[
										23,
										"SCALEFACTOR"
									]
								]
							]
,
							[
								7,
								[
									6,
									[
										0,
										520
									]
									,[
										23,
										"SCALEFACTOR"
									]
								]
							]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					5449142659281687,
					[
					[
						145,
						cr.plugins_.WebStorage.prototype.cnds.CompareKeyNumber,
						null,
						0,
						false,
						false,
						false,
						8226110709328995
						,[
						[
							1,
							[
								2,
								"audio"
							]
						]
,						[
							8,
							0
						]
,						[
							0,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						5195749190428486
						,[
						[
							1,
							[
								2,
								"disableAudio"
							]
						]
,						[
							13,
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					6332476979072292,
					[
					[
						145,
						cr.plugins_.WebStorage.prototype.cnds.CompareKeyNumber,
						null,
						0,
						false,
						false,
						false,
						2143939201709788
						,[
						[
							1,
							[
								2,
								"audio"
							]
						]
,						[
							8,
							0
						]
,						[
							0,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						1143204818272925
						,[
						[
							1,
							[
								2,
								"enableAudio"
							]
						]
,						[
							13,
						]
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			[true, "ENDSCREEN"],
			false,
			1522585763983657,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				0,
				false,
				false,
				false,
				1522585763983657
				,[
				[
					1,
					[
						2,
						"ENDSCREEN"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				6677605337510157,
				[
				[
					135,
					cr.plugins_.Sprite.prototype.cnds.IsOutsideLayout,
					null,
					0,
					false,
					false,
					false,
					3762569921869344
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					9449467647418921,
					[
					[
						-1,
						cr.system_object.prototype.cnds.TriggerOnce,
						null,
						0,
						false,
						false,
						false,
						9460110217950254
					]
					],
					[
					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						7329624194732678
						,[
						[
							1,
							[
								2,
								"endGame"
							]
						]
,						[
							13,
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				4635794495849623,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					8110441134890338
					,[
					[
						1,
						[
							2,
							"endGame"
						]
					]
					]
				]
				],
				[
				[
					148,
					cr.plugins_.CJSAds.prototype.acts.ShowFullscreen,
					null,
					7107983655276924
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayerVisible,
					null,
					7601343001476031
					,[
					[
						5,
						[
							0,
							13
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayerScale,
					null,
					5340958565696472
					,[
					[
						5,
						[
							0,
							13
						]
					]
,					[
						0,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetGroupActive,
					null,
					3205240614846579
					,[
					[
						1,
						[
							2,
							"Global Buttons"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					5416599573091648
					,[
					[
						11,
						"paused"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					4919464024499386
					,[
					[
						4,
						31
					]
,					[
						5,
						[
							0,
							12
						]
					]
,					[
						0,
						[
							0,
							0
						]
					]
,					[
						0,
						[
							0,
							0
						]
					]
					]
				]
,				[
					30,
					cr.plugins_.Sprite.prototype.acts.SetPos,
					null,
					8067581888900083
					,[
					[
						0,
						[
							6,
							[
								0,
								468
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							6,
							[
								0,
								411
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
					]
				]
,				[
					32,
					cr.plugins_.Sprite.prototype.acts.SetPos,
					null,
					9424848407762113
					,[
					[
						0,
						[
							6,
							[
								0,
								842
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							6,
							[
								0,
								411
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
					]
				]
,				[
					33,
					cr.plugins_.Sprite.prototype.acts.SetPos,
					null,
					6714159661053384
					,[
					[
						0,
						[
							6,
							[
								0,
								651
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							6,
							[
								0,
								259
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
					]
				]
,				[
					34,
					cr.plugins_.Sprite.prototype.acts.SetPos,
					null,
					8873497464936049
					,[
					[
						0,
						[
							6,
							[
								0,
								640
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							6,
							[
								0,
								366
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
					]
				]
,				[
					35,
					cr.plugins_.Sprite.prototype.acts.SetPos,
					null,
					6960308500746734
					,[
					[
						0,
						[
							6,
							[
								0,
								604
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							6,
							[
								0,
								429
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
					]
				]
,				[
					38,
					cr.plugins_.Spritefont2.prototype.acts.SetPos,
					null,
					6606063411902294
					,[
					[
						0,
						[
							6,
							[
								0,
								640
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							6,
							[
								0,
								378
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
					]
				]
,				[
					37,
					cr.plugins_.Spritefont2.prototype.acts.SetPos,
					null,
					2242400322209667
					,[
					[
						0,
						[
							6,
							[
								0,
								610
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							6,
							[
								0,
								413
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					9876053177311461
					,[
					[
						1,
						[
							2,
							"stopMusic"
						]
					]
,					[
						13,
					]
					]
				]
,				[
					34,
					cr.plugins_.Sprite.prototype.acts.MoveToBottom,
					null,
					2285006068569602
				]
,				[
					31,
					cr.plugins_.Sprite.prototype.acts.MoveToBottom,
					null,
					2336761041768082
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetTimescale,
					null,
					4703080363531545
					,[
					[
						0,
						[
							0,
							0
						]
					]
					]
				]
,				[
					38,
					cr.plugins_.Spritefont2.prototype.acts.SetText,
					null,
					6021874475979639
					,[
					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"score"
							]
							]
						]
					]
					]
				]
,				[
					37,
					cr.plugins_.Spritefont2.prototype.acts.SetText,
					null,
					9300547306242287
					,[
					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"highscore"
							]
							]
						]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					2216156832749705
					,[
					[
						1,
						[
							2,
							"moveAchievements"
						]
					]
,					[
						13,
													[
								7,
								[
									0,
									12
								]
							]
,
							[
								7,
								[
									6,
									[
										0,
										473
									]
									,[
										23,
										"SCALEFACTOR"
									]
								]
							]
,
							[
								7,
								[
									6,
									[
										0,
										520
									]
									,[
										23,
										"SCALEFACTOR"
									]
								]
							]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					2485945710128157,
					[
					],
					[
					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						6152144195429774
						,[
						[
							1,
							[
								2,
								"fshowRanks"
							]
						]
,						[
							13,
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					6939410870734364,
					[
					],
					[
					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						4269195332611171
						,[
						[
							1,
							[
								2,
								"fhideRanks"
							]
						]
,						[
							13,
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					6660913456481036,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						7827131113756902
						,[
						[
							11,
							"score"
						]
,						[
							8,
							2
						]
,						[
							7,
							[
								0,
								500
							]
						]
						]
					]
					],
					[
					]
				]
,				[
					0,
					null,
					false,
					5282621979550201,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						1055195638573001
						,[
						[
							11,
							"score"
						]
,						[
							8,
							5
						]
,						[
							7,
							[
								0,
								500
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						9085683636371105
						,[
						[
							11,
							"score"
						]
,						[
							8,
							2
						]
,						[
							7,
							[
								0,
								1000
							]
						]
						]
					]
					],
					[
					]
				]
,				[
					0,
					null,
					false,
					66392918501448,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						1331468771228706
						,[
						[
							11,
							"score"
						]
,						[
							8,
							5
						]
,						[
							7,
							[
								0,
								1000
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						6506724919033059
						,[
						[
							11,
							"score"
						]
,						[
							8,
							2
						]
,						[
							7,
							[
								0,
								1500
							]
						]
						]
					]
					],
					[
					]
				]
,				[
					0,
					null,
					false,
					219498225284968,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						4047110258143245
						,[
						[
							11,
							"score"
						]
,						[
							8,
							5
						]
,						[
							7,
							[
								0,
								1500
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						3692114685086984
						,[
						[
							11,
							"score"
						]
,						[
							8,
							2
						]
,						[
							7,
							[
								0,
								2000
							]
						]
						]
					]
					],
					[
					]
				]
,				[
					0,
					null,
					false,
					3568892280538164,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						9473134902246885
						,[
						[
							11,
							"score"
						]
,						[
							8,
							5
						]
,						[
							7,
							[
								0,
								2000
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						6935774656098573
						,[
						[
							11,
							"score"
						]
,						[
							8,
							2
						]
,						[
							7,
							[
								0,
								2500
							]
						]
						]
					]
					],
					[
					]
				]
,				[
					0,
					null,
					false,
					5632840307718828,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						1713991328828129
						,[
						[
							11,
							"score"
						]
,						[
							8,
							5
						]
,						[
							7,
							[
								0,
								2500
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						9070866052816093
						,[
						[
							11,
							"score"
						]
,						[
							8,
							2
						]
,						[
							7,
							[
								0,
								3000
							]
						]
						]
					]
					],
					[
					]
				]
,				[
					0,
					null,
					false,
					137162416615936,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						5093089565774398
						,[
						[
							11,
							"score"
						]
,						[
							8,
							5
						]
,						[
							7,
							[
								0,
								3000
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						581034463765576
						,[
						[
							11,
							"score"
						]
,						[
							8,
							2
						]
,						[
							7,
							[
								0,
								3500
							]
						]
						]
					]
					],
					[
					]
				]
,				[
					0,
					null,
					false,
					2662140800119331,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						7870592006215228
						,[
						[
							11,
							"score"
						]
,						[
							8,
							5
						]
,						[
							7,
							[
								0,
								3500
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						3998395237205621
						,[
						[
							11,
							"score"
						]
,						[
							8,
							2
						]
,						[
							7,
							[
								0,
								4000
							]
						]
						]
					]
					],
					[
					]
				]
,				[
					0,
					null,
					false,
					6805542697505993,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						9492742455911013
						,[
						[
							11,
							"score"
						]
,						[
							8,
							5
						]
,						[
							7,
							[
								0,
								4000
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						9463975357343584
						,[
						[
							11,
							"score"
						]
,						[
							8,
							2
						]
,						[
							7,
							[
								0,
								4500
							]
						]
						]
					]
					],
					[
					]
				]
,				[
					0,
					null,
					false,
					9024389107400092,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						5523288241187673
						,[
						[
							11,
							"score"
						]
,						[
							8,
							5
						]
,						[
							7,
							[
								0,
								4500
							]
						]
						]
					]
					],
					[
					]
				]
,				[
					0,
					null,
					false,
					71611110664735,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						8314130908135374
						,[
						[
							11,
							"highscore"
						]
,						[
							8,
							2
						]
,						[
							7,
							[
								23,
								"score"
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						3762467096938124
						,[
						[
							4,
							36
						]
,						[
							5,
							[
								0,
								12
							]
						]
,						[
							0,
							[
								0,
								716
							]
						]
,						[
							0,
							[
								0,
								238
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						9618233118590099
						,[
						[
							11,
							"needNewRecord"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						5255936565578586
						,[
						[
							1,
							[
								2,
								"checkRecord"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						4548573828473929
						,[
						[
							11,
							"highscore"
						]
,						[
							7,
							[
								23,
								"score"
							]
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						3316265057758022
						,[
						[
							1,
							[
								2,
								"checkScore"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						4845458324731462
						,[
						[
							1,
							[
								2,
								"save"
							]
						]
,						[
							13,
						]
						]
					]
					]
					,[
					[
						0,
						null,
						false,
						8741218521419542,
						[
						[
							148,
							cr.plugins_.CJSAds.prototype.cnds.IsGCAvailable,
							null,
							0,
							false,
							false,
							false,
							2508905055576308
						]
						],
						[
						]
						,[
						[
							0,
							null,
							false,
							1420041282039788,
							[
							[
								148,
								cr.plugins_.CJSAds.prototype.cnds.IsGCLoggedIn,
								null,
								0,
								false,
								false,
								false,
								266525621616192
							]
							],
							[
							[
								148,
								cr.plugins_.CJSAds.prototype.acts.GCSubmitScore,
								null,
								1216606034473628
								,[
								[
									0,
									[
										23,
										"score"
									]
								]
,								[
									1,
									[
										2,
										"Headless"
									]
								]
								]
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						8521960713872994,
						[
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							8714977665222213
							,[
							[
								1,
								[
									2,
									"fSubmitScore"
								]
							]
,							[
								13,
																	[
										7,
										[
											23,
											"highscore"
										]
									]
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					9295140639884327,
					[
					[
						-1,
						cr.system_object.prototype.cnds.Else,
						null,
						0,
						false,
						false,
						false,
						2352959332604905
					]
					],
					[
					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						7520581565605892
						,[
						[
							1,
							[
								2,
								"checkScore"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						4757269161937305
						,[
						[
							1,
							[
								2,
								"save"
							]
						]
,						[
							13,
						]
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			[true, "SAVEGAME"],
			false,
			4293710203609561,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				0,
				false,
				false,
				false,
				4293710203609561
				,[
				[
					1,
					[
						2,
						"SAVEGAME"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				9520904826497537,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					3901848696385532
					,[
					[
						1,
						[
							2,
							"save"
						]
					]
					]
				]
				],
				[
				[
					145,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					2560381706445094
					,[
					[
						1,
						[
							2,
							"webscore"
						]
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"highscore"
							]
							]
						]
					]
					]
				]
,				[
					145,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					5466491743775243
					,[
					[
						1,
						[
							2,
							"row1Unlocked"
						]
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"row1Unlocked"
							]
							]
						]
					]
					]
				]
,				[
					145,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					2757050889105597
					,[
					[
						1,
						[
							2,
							"row2Unlocked"
						]
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"row2Unlocked"
							]
							]
						]
					]
					]
				]
,				[
					145,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					8464430919288008
					,[
					[
						1,
						[
							2,
							"row3Unlocked"
						]
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"row3Unlocked"
							]
							]
						]
					]
					]
				]
,				[
					145,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					8589845952451529
					,[
					[
						1,
						[
							2,
							"currentUnlock"
						]
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"currentUnlock"
							]
							]
						]
					]
					]
				]
,				[
					145,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					3879098787783472
					,[
					[
						1,
						[
							2,
							"nearMissedObjects"
						]
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"nearMissedObjects"
							]
							]
						]
					]
					]
				]
,				[
					145,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					8696777135004746
					,[
					[
						1,
						[
							2,
							"bloodCollected"
						]
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"bloodCollected"
							]
							]
						]
					]
					]
				]
,				[
					145,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					7629989358608631
					,[
					[
						1,
						[
							2,
							"needNewRecord"
						]
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"needNewRecord"
							]
							]
						]
					]
					]
				]
,				[
					145,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					1581717498173317
					,[
					[
						1,
						[
							2,
							"gamesPlayed"
						]
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"gamesPlayed"
							]
							]
						]
					]
					]
				]
,				[
					145,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					9229657190958706
					,[
					[
						1,
						[
							2,
							"multiplySeconds"
						]
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"multiplySeconds"
							]
							]
						]
					]
					]
				]
,				[
					145,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					9823665863722486
					,[
					[
						1,
						[
							2,
							"startHealthAdd"
						]
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"startHealthAdd"
							]
							]
						]
					]
					]
				]
,				[
					145,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					2938606163783749
					,[
					[
						1,
						[
							2,
							"bloodDropsCollected"
						]
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"bloodDropsCollected"
							]
							]
						]
					]
					]
				]
,				[
					145,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					9302303594731341
					,[
					[
						1,
						[
							2,
							"electricHits"
						]
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"electricHits"
							]
							]
						]
					]
					]
				]
,				[
					145,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					5214678598106808
					,[
					[
						1,
						[
							2,
							"bearTrapHits"
						]
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"bearTrapHits"
							]
							]
						]
					]
					]
				]
,				[
					145,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					5774096915938232
					,[
					[
						1,
						[
							2,
							"multiplyCollected"
						]
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"multiplyCollected"
							]
							]
						]
					]
					]
				]
,				[
					145,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					902369315207251
					,[
					[
						1,
						[
							2,
							"plus50Collected"
						]
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"plus50Collected"
							]
							]
						]
					]
					]
				]
,				[
					145,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					2857901737029565
					,[
					[
						1,
						[
							2,
							"plus100Collected"
						]
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"plus100Collected"
							]
							]
						]
					]
					]
				]
,				[
					145,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					2978102923182139
					,[
					[
						1,
						[
							2,
							"bladeHits"
						]
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"bladeHits"
							]
							]
						]
					]
					]
				]
,				[
					145,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					5848348652239812
					,[
					[
						1,
						[
							2,
							"campfireHits"
						]
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"campfireHits"
							]
							]
						]
					]
					]
				]
,				[
					145,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					9844263301923906
					,[
					[
						1,
						[
							2,
							"multiLongEnabled"
						]
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"multiLongEnabled"
							]
							]
						]
					]
					]
				]
,				[
					145,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					679278342227999
					,[
					[
						1,
						[
							2,
							"multiShortEnabled"
						]
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"multiShortEnabled"
							]
							]
						]
					]
					]
				]
,				[
					145,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					461563474921823
					,[
					[
						1,
						[
							2,
							"plus100Enabled"
						]
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"plus100Enabled"
							]
							]
						]
					]
					]
				]
,				[
					145,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					3809892705606003
					,[
					[
						1,
						[
							2,
							"plus50Enabled"
						]
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"plus50Enabled"
							]
							]
						]
					]
					]
				]
,				[
					145,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					2865925812256318
					,[
					[
						1,
						[
							2,
							"plasterEnabled"
						]
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"plasterEnabled"
							]
							]
						]
					]
					]
				]
,				[
					145,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					5653381766893468
					,[
					[
						1,
						[
							2,
							"shieldEnabled"
						]
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"shieldEnabled"
							]
							]
						]
					]
					]
				]
,				[
					145,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					4601959967288831
					,[
					[
						1,
						[
							2,
							"useableBloodEnabled"
						]
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"useableBloodEnabled"
							]
							]
						]
					]
					]
				]
,				[
					145,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					2465209498706429
					,[
					[
						1,
						[
							2,
							"overallPlayed"
						]
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"OverallPlayed"
							]
							]
						]
					]
					]
				]
,				[
					145,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					3930392704545931
					,[
					[
						1,
						[
							2,
							"bloodDropEnabled"
						]
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"bloodDropEnabled"
							]
							]
						]
					]
					]
				]
,				[
					145,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					6595336279743044
					,[
					[
						1,
						[
							2,
							"lifeExtension1Enabled"
						]
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"lifeExtension1Enabled"
							]
							]
						]
					]
					]
				]
,				[
					145,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					8448971450589065
					,[
					[
						1,
						[
							2,
							"lifeExtension2Enabled"
						]
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"lifeExtension2Enabled"
							]
							]
						]
					]
					]
				]
,				[
					145,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					9288745849194151
					,[
					[
						1,
						[
							2,
							"allUnlocked"
						]
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"allUnlocked"
							]
							]
						]
					]
					]
				]
,				[
					145,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					8608056286235831
					,[
					[
						1,
						[
							2,
							"boostZoneEnabled"
						]
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"boostZoneActive"
							]
							]
						]
					]
					]
				]
,				[
					145,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					3507786688999235
					,[
					[
						1,
						[
							2,
							"plasterCollected"
						]
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"plasterCollected"
							]
							]
						]
					]
					]
				]
,				[
					145,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					4036759178003187
					,[
					[
						1,
						[
							2,
							"bucketEnabled"
						]
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"bucketEnabled"
							]
							]
						]
					]
					]
				]
,				[
					145,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					259595038606875
					,[
					[
						1,
						[
							2,
							"tutorialWatched"
						]
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.str
							,[
[
								23,
								"tutorialWatched"
							]
							]
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			7546847657766972,
			[
			[
				148,
				cr.plugins_.CJSAds.prototype.cnds.OnFullscreenShown,
				null,
				1,
				false,
				false,
				false,
				3728520841212072
			]
			],
			[
			[
				140,
				cr.plugins_.Function.prototype.acts.CallFunction,
				null,
				67551167570467
				,[
				[
					1,
					[
						2,
						"stopMusic"
					]
				]
,				[
					13,
				]
				]
			]
,			[
				140,
				cr.plugins_.Function.prototype.acts.CallFunction,
				null,
				8750634331618115
				,[
				[
					1,
					[
						2,
						"stopAmbience"
					]
				]
,				[
					13,
				]
				]
			]
			]
		]
		]
	]
,	[
		"MenuEvent",
		[
		[
			1,
			"MenuButtonYOffset",
			0,
			6,
false,false,4873464941689846
		]
,		[
			2,
			"facebook"
		]
,		[
			2,
			"GlobalButtons"
		]
,		[
			2,
			"Audio"
		]
,		[
			0,
			[true, "BUTTONS"],
			false,
			6690059938806865,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				0,
				false,
				false,
				false,
				6690059938806865
				,[
				[
					1,
					[
						2,
						"BUTTONS"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				4588701791727178,
				[
				[
					139,
					cr.plugins_.Mouse.prototype.cnds.IsOverObject,
					null,
					0,
					false,
					false,
					false,
					2057679048759921
					,[
					[
						4,
						159
					]
					]
				]
				],
				[
				[
					159,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					8935809811909578
					,[
					[
						0,
						[
							0,
							1
						]
					]
					]
				]
,				[
					139,
					cr.plugins_.Mouse.prototype.acts.SetCursor,
					null,
					5603568302156153
					,[
					[
						3,
						1
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					5222585458637553,
					[
					[
						139,
						cr.plugins_.Mouse.prototype.cnds.OnRelease,
						null,
						1,
						false,
						false,
						false,
						9171774784638517
						,[
						[
							3,
							0
						]
						]
					]
					],
					[
					[
						159,
						cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
						null,
						5801753706902507
						,[
						[
							0,
							[
								0,
								0
							]
						]
						]
					]
					]
					,[
					[
						0,
						null,
						false,
						6191316986302013,
						[
						[
							-1,
							cr.system_object.prototype.cnds.TriggerOnce,
							null,
							0,
							false,
							false,
							false,
							5347212993854763
						]
						],
						[
						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							5266664944280531
							,[
							[
								1,
								[
									10,
									[
										19,
										cr.system_object.prototype.exps.str
										,[
[
											21,
											159,
											true,
											null
											,0
										]
										]
									]
									,[
										2,
										"ButtonPressed"
									]
								]
							]
,							[
								13,
							]
							]
						]
,						[
							140,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							9040929228241598
							,[
							[
								1,
								[
									2,
									"playClick"
								]
							]
,							[
								13,
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					7954871711106996,
					[
					[
						139,
						cr.plugins_.Mouse.prototype.cnds.IsButtonDown,
						null,
						0,
						false,
						false,
						false,
						5465281863963016
						,[
						[
							3,
							0
						]
						]
					]
					],
					[
					[
						159,
						cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
						null,
						2306751573841219
						,[
						[
							0,
							[
								0,
								2
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				7108764878983952,
				[
				[
					139,
					cr.plugins_.Mouse.prototype.cnds.IsOverObject,
					null,
					0,
					false,
					true,
					false,
					3567671719469907
					,[
					[
						4,
						159
					]
					]
				]
,				[
					138,
					cr.plugins_.Touch.prototype.cnds.IsTouchingObject,
					null,
					0,
					false,
					true,
					false,
					3643626179140681
					,[
					[
						4,
						159
					]
					]
				]
				],
				[
				[
					159,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					5102138056030841
					,[
					[
						0,
						[
							0,
							0
						]
					]
					]
				]
,				[
					139,
					cr.plugins_.Mouse.prototype.acts.SetCursor,
					null,
					573250432679931
					,[
					[
						3,
						0
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				5013173336436186,
				[
				[
					138,
					cr.plugins_.Touch.prototype.cnds.OnTouchObject,
					null,
					1,
					false,
					false,
					false,
					5543432346463315
					,[
					[
						4,
						159
					]
					]
				]
				],
				[
				[
					159,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					3637378528958302
					,[
					[
						0,
						[
							0,
							2
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					1988824300561979,
					[
					[
						-1,
						cr.system_object.prototype.cnds.TriggerOnce,
						null,
						0,
						false,
						false,
						false,
						8437927666758322
					]
					],
					[
					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						6523257659097515
						,[
						[
							1,
							[
								10,
								[
									19,
									cr.system_object.prototype.exps.str
									,[
[
										21,
										159,
										true,
										null
										,0
									]
									]
								]
								,[
									2,
									"ButtonPressed"
								]
							]
						]
,						[
							13,
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						8260482968126092
						,[
						[
							1,
							[
								2,
								"playClick"
							]
						]
,						[
							13,
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				9888932233870452,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					9658997871251162
					,[
					[
						1,
						[
							2,
							"playmainButtonPressed"
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					4271238107921213
					,[
					[
						1,
						[
							2,
							"stopAmbience"
						]
					]
,					[
						13,
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.GoToLayout,
					null,
					9007861837453556
					,[
					[
						6,
						"MainGame"
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			[true, "LOAD"],
			false,
			5255274645378504,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				0,
				false,
				false,
				false,
				5255274645378504
				,[
				[
					1,
					[
						2,
						"LOAD"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				8589134767858837,
				[
				[
					145,
					cr.plugins_.WebStorage.prototype.cnds.LocalStorageExists,
					null,
					0,
					false,
					false,
					false,
					6607061320075679
					,[
					[
						1,
						[
							2,
							"webscore"
						]
					]
					]
				]
				],
				[
				[
					130,
					cr.plugins_.Spritefont2.prototype.acts.SetText,
					null,
					1722789421673993
					,[
					[
						7,
						[
							20,
							145,
							cr.plugins_.WebStorage.prototype.exps.LocalValue,
							true,
							null
							,[
[
								2,
								"webscore"
							]
							]
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					3926434265503355
					,[
					[
						11,
						"highscore"
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps["int"]
							,[
[
								20,
								145,
								cr.plugins_.WebStorage.prototype.exps.LocalValue,
								true,
								null
								,[
[
									2,
									"webscore"
								]
								]
							]
							]
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			2281792562101135,
			[
			[
				-1,
				cr.system_object.prototype.cnds.OnLayoutStart,
				null,
				1,
				false,
				false,
				false,
				1054547104554271
			]
			],
			[
			[
				140,
				cr.plugins_.Function.prototype.acts.CallFunction,
				null,
				3710500868604745
				,[
				[
					1,
					[
						2,
						"positionObjects"
					]
				]
,				[
					13,
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetGroupActive,
				null,
				6882081624770784
				,[
				[
					1,
					[
						2,
						"Global Buttons"
					]
				]
,				[
					3,
					1
				]
				]
			]
			]
			,[
			[
				0,
				null,
				false,
				6754601921609019,
				[
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					9458325668007851
					,[
					[
						1,
						[
							2,
							"fshowRanks"
						]
					]
,					[
						13,
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				7529422503230439,
				[
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					6886237807657774
					,[
					[
						1,
						[
							2,
							"fhideRanks"
						]
					]
,					[
						13,
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				5105115554798949,
				[
				[
					145,
					cr.plugins_.WebStorage.prototype.cnds.LocalStorageExists,
					null,
					0,
					false,
					false,
					false,
					4015807332176108
					,[
					[
						1,
						[
							2,
							"audio"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					666377220103686,
					[
					[
						145,
						cr.plugins_.WebStorage.prototype.cnds.CompareKeyNumber,
						null,
						0,
						false,
						false,
						false,
						9567880247926188
						,[
						[
							1,
							[
								2,
								"audio"
							]
						]
,						[
							8,
							0
						]
,						[
							0,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						3159885755120253
						,[
						[
							1,
							[
								2,
								"playHit"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						5518091179290406
						,[
						[
							1,
							[
								2,
								"disableAudio"
							]
						]
,						[
							13,
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					4417815837642984,
					[
					[
						145,
						cr.plugins_.WebStorage.prototype.cnds.CompareKeyNumber,
						null,
						0,
						false,
						false,
						false,
						7355312373646235
						,[
						[
							1,
							[
								2,
								"audio"
							]
						]
,						[
							8,
							0
						]
,						[
							0,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						6692892468706009
						,[
						[
							1,
							[
								2,
								"enableAudio"
							]
						]
,						[
							13,
						]
						]
					]
,					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						4677430575679001
						,[
						[
							1,
							[
								2,
								"playIntro"
							]
						]
,						[
							13,
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				9993899619088133,
				[
				[
					-1,
					cr.system_object.prototype.cnds.Else,
					null,
					0,
					false,
					false,
					false,
					1484129378892167
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					6228533864453509
					,[
					[
						1,
						[
							2,
							"enableAudio"
						]
					]
,					[
						13,
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					9710832184344262
					,[
					[
						1,
						[
							2,
							"playIntro"
						]
					]
,					[
						13,
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				6012043358885282,
				[
				[
					145,
					cr.plugins_.WebStorage.prototype.cnds.LocalStorageExists,
					null,
					0,
					false,
					false,
					false,
					4394585003163523
					,[
					[
						1,
						[
							2,
							"allUnlocked"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					5818914293989124,
					[
					[
						145,
						cr.plugins_.WebStorage.prototype.cnds.CompareKeyNumber,
						null,
						0,
						false,
						false,
						false,
						1722844489516891
						,[
						[
							1,
							[
								2,
								"allUnlocked"
							]
						]
,						[
							8,
							0
						]
,						[
							0,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					]
				]
,				[
					0,
					null,
					false,
					2844400392797165,
					[
					[
						145,
						cr.plugins_.WebStorage.prototype.cnds.CompareKeyNumber,
						null,
						0,
						false,
						false,
						false,
						8025931556557391
						,[
						[
							1,
							[
								2,
								"allUnlocked"
							]
						]
,						[
							8,
							0
						]
,						[
							0,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						8862359620547212
						,[
						[
							4,
							68
						]
,						[
							5,
							[
								0,
								2
							]
						]
,						[
							0,
							[
								6,
								[
									0,
									931
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
,						[
							0,
							[
								6,
								[
									0,
									213
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			[true, "POSITION OBJECTS"],
			false,
			4201698558644609,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				0,
				false,
				false,
				false,
				4201698558644609
				,[
				[
					1,
					[
						2,
						"POSITION OBJECTS"
					]
				]
				]
			]
			],
			[
			]
		]
,		[
			0,
			null,
			false,
			5018062723497467,
			[
			[
				140,
				cr.plugins_.Function.prototype.cnds.OnFunction,
				null,
				2,
				false,
				false,
				false,
				5737347717620941
				,[
				[
					1,
					[
						2,
						"positionObjects"
					]
				]
				]
			]
			],
			[
			[
				83,
				cr.plugins_.Sprite.prototype.acts.SetY,
				null,
				6957035403941129
				,[
				[
					0,
					[
						5,
						[
							5,
							[
								19,
								cr.system_object.prototype.exps.viewportbottom
								,[
[
									0,
									0
								]
								]
							]
							,[
								6,
								[
									0,
									65
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						,[
							6,
							[
								23,
								"MenuButtonYOffset"
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
				]
				]
			]
,			[
				130,
				cr.plugins_.Spritefont2.prototype.acts.SetY,
				null,
				3209503083562972
				,[
				[
					0,
					[
						5,
						[
							5,
							[
								19,
								cr.system_object.prototype.exps.viewportbottom
								,[
[
									0,
									0
								]
								]
							]
							,[
								6,
								[
									0,
									88
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						,[
							6,
							[
								23,
								"MenuButtonYOffset"
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
				]
				]
			]
,			[
				43,
				cr.plugins_.Sprite.prototype.acts.SetY,
				null,
				4102288525848783
				,[
				[
					0,
					[
						5,
						[
							5,
							[
								19,
								cr.system_object.prototype.exps.viewportbottom
								,[
[
									0,
									0
								]
								]
							]
							,[
								6,
								[
									0,
									66
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
						,[
							6,
							[
								23,
								"MenuButtonYOffset"
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			7434512965390664,
			[
			[
				148,
				cr.plugins_.CJSAds.prototype.cnds.OnFullscreenShown,
				null,
				1,
				false,
				false,
				false,
				3579194370413613
			]
			],
			[
			[
				140,
				cr.plugins_.Function.prototype.acts.CallFunction,
				null,
				1027642045217004
				,[
				[
					1,
					[
						2,
						"stopMusic"
					]
				]
,				[
					13,
				]
				]
			]
,			[
				140,
				cr.plugins_.Function.prototype.acts.CallFunction,
				null,
				3118190225129089
				,[
				[
					1,
					[
						2,
						"stopAmbience"
					]
				]
,				[
					13,
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			4275560556267189,
			[
			[
				148,
				cr.plugins_.CJSAds.prototype.cnds.OnFullscreenHidden,
				null,
				1,
				false,
				false,
				false,
				9442330846308503
			]
			],
			[
			[
				140,
				cr.plugins_.Function.prototype.acts.CallFunction,
				null,
				9065538332521005
				,[
				[
					1,
					[
						2,
						"playAmbience"
					]
				]
,				[
					13,
				]
				]
			]
			]
		]
		]
	]
,	[
		"Audio",
		[
		[
			0,
			[true, "AUDIO"],
			false,
			6742631017579205,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				0,
				false,
				false,
				false,
				6742631017579205
				,[
				[
					1,
					[
						2,
						"AUDIO"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				[true, "SOUNDS"],
				false,
				9721915889337058,
				[
				[
					-1,
					cr.system_object.prototype.cnds.IsGroupActive,
					null,
					0,
					false,
					false,
					false,
					9721915889337058
					,[
					[
						1,
						[
							2,
							"SOUNDS"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					6440269589251237,
					[
					[
						140,
						cr.plugins_.Function.prototype.cnds.OnFunction,
						null,
						2,
						false,
						false,
						false,
						8126985640526986
						,[
						[
							1,
							[
								2,
								"playFly"
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						9546922380790119
						,[
						[
							11,
							"paused"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						144,
						cr.plugins_.Audio.prototype.acts.PlayAtObject,
						null,
						882002451800058
						,[
						[
							2,
							["arm whoosh 03",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								-3
							]
						]
,						[
							4,
							135
						]
,						[
							0,
							[
								0,
								360
							]
						]
,						[
							0,
							[
								0,
								360
							]
						]
,						[
							0,
							[
								0,
								0
							]
						]
,						[
							1,
							[
								2,
								"fly"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					7845571889255999,
					[
					[
						140,
						cr.plugins_.Function.prototype.cnds.OnFunction,
						null,
						2,
						false,
						false,
						false,
						3512502744871363
						,[
						[
							1,
							[
								2,
								"stopFly"
							]
						]
						]
					]
					],
					[
					[
						144,
						cr.plugins_.Audio.prototype.acts.Stop,
						null,
						8864931418739163
						,[
						[
							1,
							[
								2,
								"fly"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					31456654973361,
					[
					[
						140,
						cr.plugins_.Function.prototype.cnds.OnFunction,
						null,
						2,
						false,
						false,
						false,
						4725164278095982
						,[
						[
							1,
							[
								2,
								"playHit"
							]
						]
						]
					]
					],
					[
					[
						144,
						cr.plugins_.Audio.prototype.acts.PlayAtObject,
						null,
						6761022733020223
						,[
						[
							2,
							["hard hit",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								0
							]
						]
,						[
							4,
							135
						]
,						[
							0,
							[
								0,
								360
							]
						]
,						[
							0,
							[
								0,
								360
							]
						]
,						[
							0,
							[
								0,
								0
							]
						]
,						[
							1,
							[
								2,
								"hit"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					259774024596422,
					[
					[
						140,
						cr.plugins_.Function.prototype.cnds.OnFunction,
						null,
						2,
						false,
						false,
						false,
						9411643403157495
						,[
						[
							1,
							[
								2,
								"playNoBlood"
							]
						]
						]
					]
					],
					[
					[
						144,
						cr.plugins_.Audio.prototype.acts.PlayAtObject,
						null,
						8179937176631657
						,[
						[
							2,
							["die_no_blood",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								5
							]
						]
,						[
							4,
							135
						]
,						[
							0,
							[
								0,
								360
							]
						]
,						[
							0,
							[
								0,
								360
							]
						]
,						[
							0,
							[
								0,
								0
							]
						]
,						[
							1,
							[
								2,
								"noblood"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					9608952169389158,
					[
					[
						140,
						cr.plugins_.Function.prototype.cnds.OnFunction,
						null,
						2,
						false,
						false,
						false,
						2689368049766859
						,[
						[
							1,
							[
								2,
								"playElectric"
							]
						]
						]
					]
					],
					[
					[
						144,
						cr.plugins_.Audio.prototype.acts.PlayAtObject,
						null,
						377496346996928
						,[
						[
							2,
							["electric",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								0
							]
						]
,						[
							4,
							135
						]
,						[
							0,
							[
								0,
								360
							]
						]
,						[
							0,
							[
								0,
								360
							]
						]
,						[
							0,
							[
								0,
								0
							]
						]
,						[
							1,
							[
								2,
								"electric"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					8141936894759428,
					[
					[
						140,
						cr.plugins_.Function.prototype.cnds.OnFunction,
						null,
						2,
						false,
						false,
						false,
						3744503995270087
						,[
						[
							1,
							[
								2,
								"playPickup"
							]
						]
						]
					]
					],
					[
					[
						144,
						cr.plugins_.Audio.prototype.acts.PlayAtObject,
						null,
						3164491808024141
						,[
						[
							2,
							["pickup",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								0
							]
						]
,						[
							4,
							135
						]
,						[
							0,
							[
								0,
								360
							]
						]
,						[
							0,
							[
								0,
								360
							]
						]
,						[
							0,
							[
								0,
								0
							]
						]
,						[
							1,
							[
								2,
								"hit"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					7698552424917657,
					[
					[
						140,
						cr.plugins_.Function.prototype.cnds.OnFunction,
						null,
						2,
						false,
						false,
						false,
						7222845118896327
						,[
						[
							1,
							[
								2,
								"playBounce"
							]
						]
						]
					]
					],
					[
					[
						144,
						cr.plugins_.Audio.prototype.acts.PlayAtObject,
						null,
						1109646670952652
						,[
						[
							2,
							["sproing",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								0
							]
						]
,						[
							4,
							135
						]
,						[
							0,
							[
								0,
								360
							]
						]
,						[
							0,
							[
								0,
								360
							]
						]
,						[
							0,
							[
								0,
								0
							]
						]
,						[
							1,
							[
								2,
								"hit"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					4182945242477356,
					[
					[
						140,
						cr.plugins_.Function.prototype.cnds.OnFunction,
						null,
						2,
						false,
						false,
						false,
						7814396693645611
						,[
						[
							1,
							[
								2,
								"playEnd"
							]
						]
						]
					]
					],
					[
					[
						144,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						5817638552652406
						,[
						[
							2,
							["end",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								10
							]
						]
,						[
							1,
							[
								2,
								"end"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					5437968315336325,
					[
					[
						140,
						cr.plugins_.Function.prototype.cnds.OnFunction,
						null,
						2,
						false,
						false,
						false,
						6965449580416895
						,[
						[
							1,
							[
								2,
								"playClick"
							]
						]
						]
					]
					],
					[
					[
						144,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						5959310406041897
						,[
						[
							2,
							["click",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								-12
							]
						]
,						[
							1,
							[
								2,
								"click"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					1002781677462887,
					[
					[
						140,
						cr.plugins_.Function.prototype.cnds.OnFunction,
						null,
						2,
						false,
						false,
						false,
						1743826858560466
						,[
						[
							1,
							[
								2,
								"playHeart"
							]
						]
						]
					]
					],
					[
					[
						144,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						8047430651628763
						,[
						[
							2,
							["heartbeat",false]
						]
,						[
							3,
							1
						]
,						[
							0,
							[
								0,
								0
							]
						]
,						[
							1,
							[
								2,
								"heart"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					7784889713403947,
					[
					[
						140,
						cr.plugins_.Function.prototype.cnds.OnFunction,
						null,
						2,
						false,
						false,
						false,
						483650300825582
						,[
						[
							1,
							[
								2,
								"stopHeart"
							]
						]
						]
					]
					],
					[
					[
						144,
						cr.plugins_.Audio.prototype.acts.Stop,
						null,
						118390889286448
						,[
						[
							1,
							[
								2,
								"heart"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					6371916132291061,
					[
					[
						140,
						cr.plugins_.Function.prototype.cnds.OnFunction,
						null,
						2,
						false,
						false,
						false,
						4950073248969771
						,[
						[
							1,
							[
								2,
								"playIntro"
							]
						]
						]
					]
					],
					[
					[
						144,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						9678594159345326
						,[
						[
							2,
							["bling",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								0
							]
						]
,						[
							1,
							[
								2,
								"click"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					1617808513979389,
					[
					[
						140,
						cr.plugins_.Function.prototype.cnds.OnFunction,
						null,
						2,
						false,
						false,
						false,
						5468946957183707
						,[
						[
							1,
							[
								2,
								"playBling"
							]
						]
						]
					]
					],
					[
					[
						144,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						1321250077292845
						,[
						[
							2,
							["bling",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								0
							]
						]
,						[
							1,
							[
								2,
								"bling"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					884965287078699,
					[
					[
						140,
						cr.plugins_.Function.prototype.cnds.OnFunction,
						null,
						2,
						false,
						false,
						false,
						4333224753407768
						,[
						[
							1,
							[
								2,
								"playMiss"
							]
						]
						]
					]
					],
					[
					[
						144,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						1184738409802029
						,[
						[
							2,
							["nearmiss01",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								-2
							]
						]
,						[
							1,
							[
								2,
								"miss"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					9708149472457918,
					[
					[
						140,
						cr.plugins_.Function.prototype.cnds.OnFunction,
						null,
						2,
						false,
						false,
						false,
						9669605195831974
						,[
						[
							1,
							[
								2,
								"playRooster"
							]
						]
						]
					]
					],
					[
					[
						144,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						5148816867721284
						,[
						[
							2,
							["unlocked_rooster",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								0
							]
						]
,						[
							1,
							[
								2,
								"rooster"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					6287794362753353,
					[
					[
						140,
						cr.plugins_.Function.prototype.cnds.OnFunction,
						null,
						2,
						false,
						false,
						false,
						4995897984295349
						,[
						[
							1,
							[
								2,
								"playUnlock"
							]
						]
						]
					]
					],
					[
					[
						144,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						3800653362575291
						,[
						[
							2,
							["unlock_row",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								1
							]
						]
,						[
							1,
							[
								2,
								"unlock_row"
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				[true, "MUSIC"],
				false,
				3155576100362517,
				[
				[
					-1,
					cr.system_object.prototype.cnds.IsGroupActive,
					null,
					0,
					false,
					false,
					false,
					3155576100362517
					,[
					[
						1,
						[
							2,
							"MUSIC"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					2605134168307588,
					[
					[
						140,
						cr.plugins_.Function.prototype.cnds.OnFunction,
						null,
						2,
						false,
						false,
						false,
						5989832991867399
						,[
						[
							1,
							[
								2,
								"playAmbience"
							]
						]
						]
					]
					],
					[
					[
						144,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						9920028330585831
						,[
						[
							2,
							["ambience",true]
						]
,						[
							3,
							1
						]
,						[
							0,
							[
								0,
								-4
							]
						]
,						[
							1,
							[
								2,
								"ambience"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					3827739311751682,
					[
					[
						140,
						cr.plugins_.Function.prototype.cnds.OnFunction,
						null,
						2,
						false,
						false,
						false,
						4029649368114324
						,[
						[
							1,
							[
								2,
								"stopAmbience"
							]
						]
						]
					]
					],
					[
					[
						144,
						cr.plugins_.Audio.prototype.acts.Stop,
						null,
						553692227750552
						,[
						[
							1,
							[
								2,
								"ambience"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					3255785646706288,
					[
					[
						140,
						cr.plugins_.Function.prototype.cnds.OnFunction,
						null,
						2,
						false,
						false,
						false,
						948749480210594
						,[
						[
							1,
							[
								2,
								"playMusic"
							]
						]
						]
					]
					],
					[
					[
						144,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						9374133770218697
						,[
						[
							2,
							["chickendance",true]
						]
,						[
							3,
							1
						]
,						[
							0,
							[
								0,
								-8
							]
						]
,						[
							1,
							[
								2,
								"music"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					7566751041357184,
					[
					[
						140,
						cr.plugins_.Function.prototype.cnds.OnFunction,
						null,
						2,
						false,
						false,
						false,
						3851565767924419
						,[
						[
							1,
							[
								2,
								"pauseMusic"
							]
						]
						]
					]
					],
					[
					[
						144,
						cr.plugins_.Audio.prototype.acts.SetPaused,
						null,
						506059019323981
						,[
						[
							1,
							[
								2,
								"music"
							]
						]
,						[
							3,
							0
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					9051924597091283,
					[
					[
						140,
						cr.plugins_.Function.prototype.cnds.OnFunction,
						null,
						2,
						false,
						false,
						false,
						9900267415866493
						,[
						[
							1,
							[
								2,
								"resumeMusic"
							]
						]
						]
					]
					],
					[
					[
						144,
						cr.plugins_.Audio.prototype.acts.SetPaused,
						null,
						7635196096242844
						,[
						[
							1,
							[
								2,
								"music"
							]
						]
,						[
							3,
							1
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					9243821338568651,
					[
					[
						140,
						cr.plugins_.Function.prototype.cnds.OnFunction,
						null,
						2,
						false,
						false,
						false,
						9540986154699073
						,[
						[
							1,
							[
								2,
								"stopMusic"
							]
						]
						]
					]
					],
					[
					[
						144,
						cr.plugins_.Audio.prototype.acts.Stop,
						null,
						5401245926868559
						,[
						[
							1,
							[
								2,
								"music"
							]
						]
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			2803378114848514,
			[
			[
				140,
				cr.plugins_.Function.prototype.cnds.OnFunction,
				null,
				2,
				false,
				false,
				false,
				6769863717973981
				,[
				[
					1,
					[
						2,
						"enableAudio"
					]
				]
				]
			]
			],
			[
			[
				145,
				cr.plugins_.WebStorage.prototype.acts.StoreLocal,
				null,
				5398289952864739
				,[
				[
					1,
					[
						2,
						"audio"
					]
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetGroupActive,
				null,
				2086803581392336
				,[
				[
					1,
					[
						2,
						"AUDIO"
					]
				]
,				[
					3,
					1
				]
				]
			]
,			[
				47,
				cr.plugins_.Sprite.prototype.acts.Destroy,
				null,
				5669699431156061
			]
			]
			,[
			[
				0,
				null,
				false,
				8222775528389851,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					8626798399974741
					,[
					[
						11,
						"paused"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					5585220235374811
					,[
					[
						4,
						46
					]
,					[
						5,
						[
							0,
							2
						]
					]
,					[
						0,
						[
							6,
							[
								0,
								1187
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							5,
							[
								5,
								[
									19,
									cr.system_object.prototype.exps.viewportbottom
									,[
[
										0,
										0
									]
									]
								]
								,[
									6,
									[
										0,
										65
									]
									,[
										23,
										"SCALEFACTOR"
									]
								]
							]
							,[
								6,
								[
									23,
									"MenuButtonYOffset"
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					3690834143360766
					,[
					[
						1,
						[
							2,
							"playAmbience"
						]
					]
,					[
						13,
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				8541858849140325,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					5332702222765455
					,[
					[
						11,
						"paused"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					9787821353748144
					,[
					[
						4,
						46
					]
,					[
						5,
						[
							0,
							12
						]
					]
,					[
						0,
						[
							6,
							[
								0,
								314
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							6,
							[
								0,
								206
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
					]
				]
,				[
					46,
					cr.plugins_.Sprite.prototype.acts.MoveToTop,
					null,
					7058158092943055
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					9920649122179797
					,[
					[
						1,
						[
							2,
							"playMusic"
						]
					]
,					[
						13,
					]
					]
				]
,				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					3386319449053184
					,[
					[
						1,
						[
							2,
							"pauseMusic"
						]
					]
,					[
						13,
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			8796111056040789,
			[
			[
				140,
				cr.plugins_.Function.prototype.cnds.OnFunction,
				null,
				2,
				false,
				false,
				false,
				1160582608006983
				,[
				[
					1,
					[
						2,
						"disableAudio"
					]
				]
				]
			]
			],
			[
			[
				145,
				cr.plugins_.WebStorage.prototype.acts.StoreLocal,
				null,
				2574447102908717
				,[
				[
					1,
					[
						2,
						"audio"
					]
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				140,
				cr.plugins_.Function.prototype.acts.CallFunction,
				null,
				8581421723266356
				,[
				[
					1,
					[
						2,
						"stopAmbience"
					]
				]
,				[
					13,
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetGroupActive,
				null,
				4881192777957679
				,[
				[
					1,
					[
						2,
						"AUDIO"
					]
				]
,				[
					3,
					0
				]
				]
			]
,			[
				46,
				cr.plugins_.Sprite.prototype.acts.Destroy,
				null,
				4548644446144508
			]
			]
			,[
			[
				0,
				null,
				false,
				5770691086426839,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					9655452505966458
					,[
					[
						11,
						"paused"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					4179003241987775
					,[
					[
						4,
						47
					]
,					[
						5,
						[
							0,
							2
						]
					]
,					[
						0,
						[
							6,
							[
								0,
								1187
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							5,
							[
								5,
								[
									19,
									cr.system_object.prototype.exps.viewportbottom
									,[
[
										0,
										0
									]
									]
								]
								,[
									6,
									[
										0,
										65
									]
									,[
										23,
										"SCALEFACTOR"
									]
								]
							]
							,[
								6,
								[
									23,
									"MenuButtonYOffset"
								]
								,[
									23,
									"SCALEFACTOR"
								]
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				4374165834253385,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					5494960039738766
					,[
					[
						11,
						"paused"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					3363404240716435
					,[
					[
						4,
						47
					]
,					[
						5,
						[
							0,
							12
						]
					]
,					[
						0,
						[
							6,
							[
								0,
								314
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
,					[
						0,
						[
							6,
							[
								0,
								206
							]
							,[
								23,
								"SCALEFACTOR"
							]
						]
					]
					]
				]
,				[
					47,
					cr.plugins_.Sprite.prototype.acts.MoveToTop,
					null,
					2951771360010831
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			1692087739564002,
			[
			[
				140,
				cr.plugins_.Function.prototype.cnds.OnFunction,
				null,
				2,
				false,
				false,
				false,
				368478474600852
				,[
				[
					1,
					[
						2,
						"audiooffButtonPressed"
					]
				]
				]
			]
			],
			[
			[
				140,
				cr.plugins_.Function.prototype.acts.CallFunction,
				null,
				2619527661516697
				,[
				[
					1,
					[
						2,
						"disableAudio"
					]
				]
,				[
					13,
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			2254655223072409,
			[
			[
				140,
				cr.plugins_.Function.prototype.cnds.OnFunction,
				null,
				2,
				false,
				false,
				false,
				1059477499182726
				,[
				[
					1,
					[
						2,
						"audioonButtonPressed"
					]
				]
				]
			]
			],
			[
			[
				140,
				cr.plugins_.Function.prototype.acts.CallFunction,
				null,
				7081431390091234
				,[
				[
					1,
					[
						2,
						"enableAudio"
					]
				]
,				[
					13,
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			721478939876044,
			[
			[
				140,
				cr.plugins_.Function.prototype.cnds.OnFunction,
				null,
				2,
				false,
				false,
				false,
				4246925992501724
				,[
				[
					1,
					[
						2,
						"checkAudio"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				9958394059537952,
				[
				[
					145,
					cr.plugins_.WebStorage.prototype.cnds.CompareKeyNumber,
					null,
					0,
					false,
					false,
					false,
					9041720657374118
					,[
					[
						1,
						[
							2,
							"audio"
						]
					]
,					[
						8,
						0
					]
,					[
						0,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetGroupActive,
					null,
					4336789211602298
					,[
					[
						1,
						[
							2,
							"AUDIO"
						]
					]
,					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				5141934322844694,
				[
				[
					145,
					cr.plugins_.WebStorage.prototype.cnds.CompareKeyNumber,
					null,
					0,
					false,
					false,
					false,
					4051197922413644
					,[
					[
						1,
						[
							2,
							"audio"
						]
					]
,					[
						8,
						0
					]
,					[
						0,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetGroupActive,
					null,
					3251849195646489
					,[
					[
						1,
						[
							2,
							"AUDIO"
						]
					]
,					[
						3,
						0
					]
					]
				]
				]
			]
			]
		]
		]
	]
,	[
		"SplashEvents",
		[
		[
			0,
			null,
			false,
			9517764438761057,
			[
			[
				-1,
				cr.system_object.prototype.cnds.OnLayoutStart,
				null,
				1,
				false,
				false,
				false,
				6089215991153634
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				9174337600187082,
				[
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					5824888307885471
					,[
					[
						0,
						[
							1,
							1.5
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.GoToLayout,
					null,
					7004118756281527
					,[
					[
						6,
						"MainScreen"
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				4051661993548091,
				[
				[
					-1,
					cr.system_object.prototype.cnds.IsMobile,
					null,
					0,
					false,
					false,
					false,
					1234275811145163
				]
				],
				[
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			8762711595113498,
			[
			[
				138,
				cr.plugins_.Touch.prototype.cnds.OnTouchStart,
				null,
				1,
				false,
				false,
				false,
				5235230377476319
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.GoToLayout,
				null,
				7481857888234499
				,[
				[
					6,
					"MainScreen"
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			87445321879426,
			[
			[
				139,
				cr.plugins_.Mouse.prototype.cnds.OnClick,
				null,
				1,
				false,
				false,
				false,
				2794519062132056
				,[
				[
					3,
					0
				]
,				[
					3,
					0
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.GoToLayout,
				null,
				631080500936913
				,[
				[
					6,
					"MainScreen"
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			9098897513481021,
			[
			[
				148,
				cr.plugins_.CJSAds.prototype.cnds.IsShowingBanner,
				null,
				0,
				false,
				false,
				false,
				2724192897627965
			]
			],
			[
			]
		]
		]
	]
,	[
		"GlobalButtons",
		[
		[
			0,
			[true, "Global Buttons"],
			false,
			9005469247719672,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				0,
				false,
				false,
				false,
				9005469247719672
				,[
				[
					1,
					[
						2,
						"Global Buttons"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				[true, "Facebook"],
				false,
				6959442531425562,
				[
				[
					-1,
					cr.system_object.prototype.cnds.IsGroupActive,
					null,
					0,
					false,
					false,
					false,
					6959442531425562
					,[
					[
						1,
						[
							2,
							"Facebook"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					5955118701960215,
					[
					[
						140,
						cr.plugins_.Function.prototype.cnds.OnFunction,
						null,
						2,
						false,
						false,
						false,
						9061365148681128
						,[
						[
							1,
							[
								2,
								"facebookshareButtonPressed"
							]
						]
						]
					]
					],
					[
					]
				]
,				[
					0,
					null,
					false,
					7774434406131367,
					[
					[
						140,
						cr.plugins_.Function.prototype.cnds.OnFunction,
						null,
						2,
						false,
						false,
						false,
						796201330473916
						,[
						[
							1,
							[
								2,
								"facebookscoreButtonPressed"
							]
						]
						]
					]
					],
					[
					]
				]
,				[
					0,
					null,
					false,
					6624061032356411,
					[
					[
						140,
						cr.plugins_.Function.prototype.cnds.OnFunction,
						null,
						2,
						false,
						false,
						false,
						1895233400332059
						,[
						[
							1,
							[
								2,
								"facebookloginButtonPressed"
							]
						]
						]
					]
					],
					[
					]
				]
				]
			]
,			[
				0,
				[true, "GameCenter"],
				false,
				5515826057051516,
				[
				[
					-1,
					cr.system_object.prototype.cnds.IsGroupActive,
					null,
					0,
					false,
					false,
					false,
					5515826057051516
					,[
					[
						1,
						[
							2,
							"GameCenter"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					6852342626050059,
					[
					[
						140,
						cr.plugins_.Function.prototype.cnds.OnFunction,
						null,
						2,
						false,
						false,
						false,
						1563330066493283
						,[
						[
							1,
							[
								2,
								"gamecenterButtonPressed"
							]
						]
						]
					]
					],
					[
					[
						140,
						cr.plugins_.Function.prototype.acts.CallFunction,
						null,
						630670059517438
						,[
						[
							1,
							[
								2,
								"stopAmbience"
							]
						]
,						[
							13,
						]
						]
					]
					]
					,[
					[
						0,
						null,
						false,
						2323764782594376,
						[
						[
							148,
							cr.plugins_.CJSAds.prototype.cnds.IsGCLoggedIn,
							null,
							0,
							false,
							false,
							false,
							5041862580662941
						]
						],
						[
						[
							148,
							cr.plugins_.CJSAds.prototype.acts.GCOpenLeaderboard,
							null,
							8122932056721395
							,[
							[
								1,
								[
									2,
									"Headless"
								]
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						3878902073282253,
						[
						[
							148,
							cr.plugins_.CJSAds.prototype.cnds.IsGCLoggedIn,
							null,
							0,
							false,
							true,
							false,
							682939901499235
						]
						],
						[
						[
							148,
							cr.plugins_.CJSAds.prototype.acts.GCLogin,
							null,
							8909046080818982
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				1082246118171006,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					3720332247710242
					,[
					[
						1,
						[
							2,
							"moregamesButtonPressed"
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					4686645353958125
					,[
					[
						1,
						[
							2,
							"stopAmbience"
						]
					]
,					[
						13,
					]
					]
				]
,				[
					148,
					cr.plugins_.CJSAds.prototype.acts.ShowFullscreen,
					null,
					7534358164997429
				]
				]
			]
,			[
				0,
				null,
				false,
				3882225285124643,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					1639158263474284
					,[
					[
						1,
						[
							2,
							"buyButtonPressed"
						]
					]
					]
				]
				],
				[
				[
					148,
					cr.plugins_.CJSAds.prototype.acts.PreloadFullscreen,
					null,
					7134654565561804
				]
				]
			]
,			[
				0,
				null,
				false,
				172600657968478,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					1810721263231751
					,[
					[
						1,
						[
							2,
							"facebookButtonPressed"
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					5565704651024752
					,[
					[
						1,
						[
							2,
							"stopAmbience"
						]
					]
,					[
						13,
					]
					]
				]
,				[
					147,
					cr.plugins_.Browser.prototype.acts.GoToURLWindow,
					null,
					3254962670416562
					,[
					[
						1,
						[
							2,
							"https://www.facebook.com/doublesmith2013"
						]
					]
,					[
						1,
						[
							2,
							"NewWindow"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				8084467733136915,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					55646673962285
					,[
					[
						1,
						[
							2,
							"googleplusButtonPressed"
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					6572587547946375
					,[
					[
						1,
						[
							2,
							"stopAmbience"
						]
					]
,					[
						13,
					]
					]
				]
,				[
					147,
					cr.plugins_.Browser.prototype.acts.GoToURLWindow,
					null,
					9940615194081879
					,[
					[
						1,
						[
							2,
							"https://plus.google.com/113208177687007298980"
						]
					]
,					[
						1,
						[
							2,
							"NewWindow"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				7842439758243008,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					6821626167129278
					,[
					[
						1,
						[
							2,
							"youtubeButtonPressed"
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					7871967865718665
					,[
					[
						1,
						[
							2,
							"stopAmbience"
						]
					]
,					[
						13,
					]
					]
				]
,				[
					147,
					cr.plugins_.Browser.prototype.acts.GoToURLWindow,
					null,
					2555097173490097
					,[
					[
						1,
						[
							2,
							"http://www.youtube.com/channel/UCCwYEgmB3MVfSzH8cd32X_Q"
						]
					]
,					[
						1,
						[
							2,
							"NewWindow"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				6498658689247832,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					9568442260113482
					,[
					[
						1,
						[
							2,
							"twitterButtonPressed"
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					2835263689488869
					,[
					[
						1,
						[
							2,
							"stopAmbience"
						]
					]
,					[
						13,
					]
					]
				]
,				[
					147,
					cr.plugins_.Browser.prototype.acts.GoToURLWindow,
					null,
					4540183150324215
					,[
					[
						1,
						[
							2,
							"https://twitter.com/DoubleSmith2013"
						]
					]
,					[
						1,
						[
							2,
							"NewWindow"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				5008320814958948,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					3126588202751406
					,[
					[
						1,
						[
							2,
							"getappleButtonPressed"
						]
					]
					]
				]
				],
				[
				[
					147,
					cr.plugins_.Browser.prototype.acts.GoToURLWindow,
					null,
					8255724990595292
					,[
					[
						1,
						[
							2,
							"http://www.doublesmith.com"
						]
					]
,					[
						1,
						[
							2,
							"NewWindow"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				7433025564552925,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					1281634181366088
					,[
					[
						1,
						[
							2,
							"getandroidButtonPressed"
						]
					]
					]
				]
				],
				[
				[
					147,
					cr.plugins_.Browser.prototype.acts.GoToURLWindow,
					null,
					2373433383783271
					,[
					[
						1,
						[
							2,
							"http://www.doublesmith.com"
						]
					]
,					[
						1,
						[
							2,
							"NewWindow"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				7902381471592073,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					3649854955515011
					,[
					[
						1,
						[
							2,
							"getblackberryButtonPressed"
						]
					]
					]
				]
				],
				[
				[
					147,
					cr.plugins_.Browser.prototype.acts.GoToURLWindow,
					null,
					7292424282497649
					,[
					[
						1,
						[
							2,
							"http://www.doublesmith.com"
						]
					]
,					[
						1,
						[
							2,
							"NewWindow"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				6435190292370179,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					5295378294563818
					,[
					[
						1,
						[
							2,
							"getwin8ButtonPressed"
						]
					]
					]
				]
				],
				[
				[
					147,
					cr.plugins_.Browser.prototype.acts.GoToURLWindow,
					null,
					9900794940709762
					,[
					[
						1,
						[
							2,
							"http://www.doublesmith.com"
						]
					]
,					[
						1,
						[
							2,
							"NewWindow"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				2705471969369303,
				[
				[
					140,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					1798534160496863
					,[
					[
						1,
						[
							2,
							"getwinphoneButtonPressed"
						]
					]
					]
				]
				],
				[
				[
					147,
					cr.plugins_.Browser.prototype.acts.GoToURLWindow,
					null,
					9573668675477338
					,[
					[
						1,
						[
							2,
							"http://www.doublesmith.com"
						]
					]
,					[
						1,
						[
							2,
							"NewWindow"
						]
					]
					]
				]
				]
			]
			]
		]
		]
	]
,	[
		"facebook",
		[
		[
			1,
			"fcurrentScore",
			0,
			0,
false,false,4503729846120283
		]
,		[
			0,
			null,
			false,
			4559300829793515,
			[
			[
				140,
				cr.plugins_.Function.prototype.cnds.OnFunction,
				null,
				2,
				false,
				false,
				false,
				8433068451379917
				,[
				[
					1,
					[
						2,
						"fshowRanks"
					]
				]
				]
			]
			],
			[
			]
		]
,		[
			0,
			null,
			false,
			1699085212331783,
			[
			[
				140,
				cr.plugins_.Function.prototype.cnds.OnFunction,
				null,
				2,
				false,
				false,
				false,
				2008950264725565
				,[
				[
					1,
					[
						2,
						"fhideRanks"
					]
				]
				]
			]
			],
			[
			]
		]
,		[
			0,
			null,
			false,
			5038706366023846,
			[
			[
				140,
				cr.plugins_.Function.prototype.cnds.OnFunction,
				null,
				2,
				false,
				false,
				false,
				4421548830964336
				,[
				[
					1,
					[
						2,
						"fScore"
					]
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				3260704548311408
				,[
				[
					11,
					"fcurrentScore"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			1918266608392041,
			[
			],
			[
			[
				140,
				cr.plugins_.Function.prototype.acts.CallFunction,
				null,
				2311622774598352
				,[
				[
					1,
					[
						2,
						"fScore"
					]
				]
,				[
					13,
				]
				]
			]
,			[
				140,
				cr.plugins_.Function.prototype.acts.CallFunction,
				null,
				1521849589977769
				,[
				[
					1,
					[
						2,
						"fshowRanks"
					]
				]
,				[
					13,
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			9401999641809542,
			[
			],
			[
			[
				140,
				cr.plugins_.Function.prototype.acts.CallFunction,
				null,
				9723439496106903
				,[
				[
					1,
					[
						2,
						"fhideRanks"
					]
				]
,				[
					13,
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			2832913393996124,
			[
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				1613973247801439,
				[
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.AddVar,
					null,
					8997098683724893
					,[
					[
						11,
						"fcurrentScore"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			8738985110867443,
			[
			[
				140,
				cr.plugins_.Function.prototype.cnds.OnFunction,
				null,
				2,
				false,
				false,
				false,
				177325123571325
				,[
				[
					1,
					[
						2,
						"fSubmitScore"
					]
				]
				]
			]
			],
			[
			]
		]
,		[
			0,
			null,
			false,
			953055477597802,
			[
			],
			[
			[
				140,
				cr.plugins_.Function.prototype.acts.CallFunction,
				null,
				2713390764354784
				,[
				[
					1,
					[
						2,
						"fScore"
					]
				]
,				[
					13,
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			7649134332629601,
			[
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				2772060083326656,
				[
				],
				[
				[
					140,
					cr.plugins_.Function.prototype.acts.CallFunction,
					null,
					869397916480775
					,[
					[
						1,
						[
							2,
							"fSubmitScore"
						]
					]
,					[
						13,
													[
								7,
								[
									23,
									"highscore"
								]
							]
					]
					]
				]
				]
			]
			]
		]
		]
	]
,	[
		"checkControls",
		[
		[
			1,
			"invertControls",
			0,
			1,
false,false,831281016391124
		]
,		[
			1,
			"useGyro",
			0,
			0,
false,false,967288036231171
		]
,		[
			0,
			null,
			false,
			1661999831641379,
			[
			[
				140,
				cr.plugins_.Function.prototype.cnds.OnFunction,
				null,
				2,
				false,
				false,
				false,
				8828573156192939
				,[
				[
					1,
					[
						2,
						"checkControls"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				7942816749924456,
				[
				[
					138,
					cr.plugins_.Touch.prototype.cnds.CompareAcceleration,
					null,
					0,
					false,
					false,
					false,
					2766825290366458
					,[
					[
						3,
						0
					]
,					[
						8,
						0
					]
,					[
						0,
						[
							0,
							0
						]
					]
					]
				]
,				[
					138,
					cr.plugins_.Touch.prototype.cnds.CompareAcceleration,
					null,
					0,
					false,
					false,
					false,
					8050541829660212
					,[
					[
						3,
						1
					]
,					[
						8,
						0
					]
,					[
						0,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					7416665615472966
					,[
					[
						11,
						"useGyro"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			8074235896095735,
			[
			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				2407694519077822
				,[
				[
					11,
					"useGyro"
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				4066574479747746,
				[
				[
					-1,
					cr.system_object.prototype.cnds.Compare,
					null,
					0,
					false,
					false,
					false,
					7228727658069702
					,[
					[
						7,
						[
							20,
							138,
							cr.plugins_.Touch.prototype.exps.AccelerationXWithG,
							false,
							null
						]
					]
,					[
						8,
						2
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					6030668141932807
					,[
					[
						11,
						"invertControls"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				5450907806984668,
				[
				[
					-1,
					cr.system_object.prototype.cnds.Compare,
					null,
					0,
					false,
					false,
					false,
					3029225540014316
					,[
					[
						7,
						[
							20,
							138,
							cr.plugins_.Touch.prototype.exps.AccelerationXWithG,
							false,
							null
						]
					]
,					[
						8,
						4
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					8594263340115199
					,[
					[
						11,
						"invertControls"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				]
			]
			]
		]
		]
	]
	],
	"",
	true,
	1280,
	720,
	4,
	true,
	true,
	false,
	"1.0.0.0",
	1,
	false,
	0,
	false,
	415,
	false,
	[
		[34,33,30,31,32,35,38,37]
,		[27,26,24,25,28,23]
,		[58,55,56,57,61,62,65,60,66,64,59]
,		[90,131]
,		[100,101,102]
,		[105,104,107]
	]
];};

createCocoonJSRuntime();

})();
